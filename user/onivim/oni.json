{"_default": {"1": {"Tebro": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1809", "title": "Oni renders tabs as ^I", "body": "If I hit tab myself there is no issue, but when using vim-go together with gofmt to automatically format a go file, the file is shown with ^I instead of blank space for tabs. \r\n\r\n![2018-03-15-210615_1920x1080_scrot](https://user-images.githubusercontent.com/3861339/37485780-15c5b504-2895-11e8-926f-09b3f45f9e8c.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rgehan": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1806", "title": "Cannot build using a locally linked `oni-api` package", "body": "I'm trying to add a method to the `Buffer` type in `oni-api` (for https://github.com/onivim/oni/pull/1795), but once I've linked the modified version of the package to my `oni` project, I cannot build anymore.\r\n\r\nI've just checkout both `master` branch and didn't even try to add my modifications yet. It fails whenever I try to link `oni-api` into my `oni` project.\r\n\r\n### How to reproduce:\r\n\r\n- Clone `oni-api`\r\n- `yarn && yarn build`\r\n- `yarn link`\r\n\r\n- Go into your already setup `oni` project\r\n- `yarn link \"oni-api\"`\r\n- `yarn build`\r\n\r\nThe `build` should fail.\r\n\r\nI was at first trying to run it `yarn start` instead of `yarn build`, but it's really the same issue I think.\r\n\r\n### Build output\r\n```\r\n$ yarn build\r\nyarn run v1.3.2\r\n$ npm run build:browser && npm run build:webview_preload && npm run build:main && npm run build:plugins\r\n\r\n> oni@0.3.2 build:browser /Users/rgehan/dev/js/oni\r\n> webpack --config browser/webpack.production.config.js\r\n\r\nts-loader: Using typescript@2.7.1 and /Users/rgehan/dev/js/oni/browser/tsconfig.json\r\nHash: 210762941c5776891fed\r\nVersion: webpack 3.5.3\r\nTime: 25485ms\r\n    Asset       Size  Chunks             Chunk Names\r\nbundle.js  846 bytes       0  [emitted]  main\r\n   [0] multi ./browser/src/index.tsx 28 bytes {0} [built]\r\n   [1] ./browser/src/index.tsx 312 bytes {0} [built] [failed] [2 errors]\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/Explorer/index.tsx\r\n(20,53): error TS2345: Argument of type 'Workspace' is not assignable to parameter of type 'IWorkspace'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/NeovimEditor/NeovimEditor.tsx\r\n(99,14): error TS2420: Class 'NeovimEditor' incorrectly implements interface 'IEditor'.\r\n  Types of property 'onBufferEnter' are incompatible.\r\n    Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/NeovimEditor/NeovimEditor.tsx\r\n(195,13): error TS2345: Argument of type 'this' is not assignable to parameter of type 'Editor'.\r\n  Type 'NeovimEditor' is not assignable to type 'Editor'.\r\n    Types of property 'onBufferEnter' are incompatible.\r\n      Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/NeovimEditor/NeovimEditor.tsx\r\n(200,43): error TS2345: Argument of type 'this' is not assignable to parameter of type 'Editor'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/NeovimEditor/NeovimEditor.tsx\r\n(202,13): error TS2345: Argument of type 'this' is not assignable to parameter of type 'Editor'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/NeovimEditor/NeovimEditor.tsx\r\n(247,13): error TS2345: Argument of type 'this' is not assignable to parameter of type 'Editor'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/NeovimEditor/NeovimEditor.tsx\r\n(535,13): error TS2345: Argument of type 'this' is not assignable to parameter of type 'Editor'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/NeovimEditor/NeovimEditor.tsx\r\n(561,13): error TS2345: Argument of type 'this' is not assignable to parameter of type 'Editor'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(69,16): error TS2416: Property 'onCursorMoved' in type 'OniEditor' is not assignable to the same property in base type 'IEditor'.\r\n  Type 'IEvent<Cursor>' is not assignable to type 'IEvent<Cursor>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(73,16): error TS2416: Property 'onModeChanged' in type 'OniEditor' is not assignable to the same property in base type 'IEditor'.\r\n  Type 'IEvent<Vim.Mode>' is not assignable to type 'IEvent<Vim.Mode>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(77,16): error TS2416: Property 'onBufferEnter' in type 'OniEditor' is not assignable to the same property in base type 'IEditor'.\r\n  Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(81,16): error TS2416: Property 'onBufferLeave' in type 'OniEditor' is not assignable to the same property in base type 'IEditor'.\r\n  Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(85,16): error TS2416: Property 'onBufferChanged' in type 'OniEditor' is not assignable to the same property in base type 'IEditor'.\r\n  Type 'IEvent<EditorBufferChangedEventArgs>' is not assignable to type 'IEvent<EditorBufferChangedEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(89,16): error TS2416: Property 'onBufferSaved' in type 'OniEditor' is not assignable to the same property in base type 'IEditor'.\r\n  Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(93,16): error TS2416: Property 'onBufferScrolled' in type 'OniEditor' is not assignable to the same property in base type 'IEditor'.\r\n  Type 'IEvent<EditorBufferScrolledEventArgs>' is not assignable to type 'IEvent<EditorBufferScrolledEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(139,38): error TS2345: Argument of type 'this' is not assignable to parameter of type 'Editor'.\r\n  Type 'OniEditor' is not assignable to type 'Editor'.\r\n    Types of property 'onBufferEnter' are incompatible.\r\n      Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(149,48): error TS2345: Argument of type 'this' is not assignable to parameter of type 'Editor'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(183,39): error TS2345: Argument of type 'this' is not assignable to parameter of type 'Editor'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(188,28): error TS2365: Operator '===' cannot be applied to types 'Editor' and 'this'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/OniEditor/OniEditor.tsx\r\n(196,28): error TS2365: Operator '===' cannot be applied to types 'Editor' and 'this'.\r\n\r\nERROR in ./browser/src/index.tsx\r\n(163,30): error TS2345: Argument of type 'Configuration' is not assignable to parameter of type 'Configuration'.\r\n  Types of property 'onConfigurationChanged' are incompatible.\r\n    Type 'IEvent<Partial<IConfigurationValues>>' is not assignable to type 'IEvent<ConfigurationValues>'.\r\n      Types of property 'asObservable' are incompatible.\r\n        Type '() => Observable<Partial<IConfigurationValues>>' is not assignable to type '() => Observable<ConfigurationValues>'.\r\n          Type 'Observable<Partial<IConfigurationValues>>' is not assignable to type 'Observable<ConfigurationValues>'.\r\n            Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/test/Services/Workspace/WorkspaceConfigurationTests.ts\r\n(55,73): error TS2345: Argument of type 'MockWorkspace' is not assignable to parameter of type 'IWorkspace'.\r\n  Types of property 'onDirectoryChanged' are incompatible.\r\n    Type 'IEvent<string>' is not assignable to type 'IEvent<string>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/test/Services/Workspace/WorkspaceConfigurationTests.ts\r\n(69,73): error TS2345: Argument of type 'MockWorkspace' is not assignable to parameter of type 'IWorkspace'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/test/Services/Workspace/WorkspaceConfigurationTests.ts\r\n(87,73): error TS2345: Argument of type 'MockWorkspace' is not assignable to parameter of type 'IWorkspace'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/test/Services/Language/LanguageManagerTests.ts\r\n(70,39): error TS2345: Argument of type 'MockEditor' is not assignable to parameter of type 'Editor'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/test/Services/Language/LanguageManagerTests.ts\r\n(77,13): error TS2345: Argument of type 'EditorManager' is not assignable to parameter of type 'EditorManager'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/test/Services/Language/LanguageEditorIntegrationTests.ts\r\n(47,13): error TS2345: Argument of type 'MockEditor' is not assignable to parameter of type 'Editor'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/test/Services/Completion/CompletionUtilityTests.ts\r\n(24,43): error TS2345: Argument of type 'MockEditor' is not assignable to parameter of type 'Editor'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/test/Services/Completion/CompletionTests.ts\r\n(77,13): error TS2345: Argument of type 'MockEditor' is not assignable to parameter of type 'Editor'.\r\n  Types of property 'onBufferEnter' are incompatible.\r\n    Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/test/Mocks/index.ts\r\n(79,16): error TS2416: Property 'onDirectoryChanged' in type 'MockWorkspace' is not assignable to the same property in base type 'IWorkspace'.\r\n  Type 'IEvent<string>' is not assignable to type 'IEvent<string>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/Workspace/Workspace.ts\r\n(63,16): error TS2416: Property 'onDirectoryChanged' in type 'Workspace' is not assignable to the same property in base type 'IWorkspace'.\r\n  Type 'IEvent<string>' is not assignable to type 'IEvent<string>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/Workspace/Workspace.ts\r\n(184,73): error TS2345: Argument of type 'Workspace' is not assignable to parameter of type 'IWorkspace'.\r\n  Types of property 'onDirectoryChanged' are incompatible.\r\n    Type 'IEvent<string>' is not assignable to type 'IEvent<string>'. Two different types with this name exist, but they are unrelated.\r\n      Types of property 'asObservable' are incompatible.\r\n        Type '() => Observable<string>' is not assignable to type '() => Observable<string>'. Two different types with this name exist, but they are unrelated.\r\n          Type 'Observable<string>' is not assignable to type 'Observable<string>'. Two different types with this name exist, but they are unrelated.\r\n            Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/Menu/Menu.ts\r\n(115,16): error TS2416: Property 'onHide' in type 'Menu' is not assignable to the same property in base type 'MenuInstance'.\r\n  Type 'IEvent<void>' is not assignable to type 'IEvent<void>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/Menu/Menu.ts\r\n(119,16): error TS2416: Property 'onItemSelected' in type 'Menu' is not assignable to the same property in base type 'MenuInstance'.\r\n  Type 'IEvent<any>' is not assignable to type 'IEvent<any>'. Two different types with this name exist, but they are unrelated.\r\n    Types of property 'asObservable' are incompatible.\r\n      Type '() => Observable<any>' is not assignable to type '() => Observable<any>'. Two different types with this name exist, but they are unrelated.\r\n        Type 'Observable<any>' is not assignable to type 'Observable<any>'. Two different types with this name exist, but they are unrelated.\r\n          Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/Menu/Menu.ts\r\n(123,16): error TS2416: Property 'onSelectedItemChanged' in type 'Menu' is not assignable to the same property in base type 'MenuInstance'.\r\n  Type 'IEvent<Menu.MenuOption>' is not assignable to type 'IEvent<Menu.MenuOption>'. Two different types with this name exist, but they are unrelated.\r\n    Types of property 'asObservable' are incompatible.\r\n      Type '() => Observable<Menu.MenuOption>' is not assignable to type '() => Observable<Menu.MenuOption>'. Two different types with this name exist, but they are unrelated.\r\n        Type 'Observable<Menu.MenuOption>' is not assignable to type 'Observable<Menu.MenuOption>'. Two different types with this name exist, but they are unrelated.\r\n          Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/Menu/Menu.ts\r\n(127,16): error TS2416: Property 'onFilterTextChanged' in type 'Menu' is not assignable to the same property in base type 'MenuInstance'.\r\n  Type 'IEvent<string>' is not assignable to type 'IEvent<string>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/Configuration/Configuration.ts\r\n(73,16): error TS2416: Property 'onConfigurationChanged' in type 'Configuration' is not assignable to the same property in base type 'Configuration'.\r\n  Type 'IEvent<Partial<IConfigurationValues>>' is not assignable to type 'IEvent<ConfigurationValues>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/EditorManager.ts\r\n(30,9): error TS2322: Type 'AnyEditorProxy' is not assignable to type 'Editor'.\r\n  Types of property 'onBufferEnter' are incompatible.\r\n    Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/EditorManager.ts\r\n(37,16): error TS2416: Property 'onActiveEditorChanged' in type 'EditorManager' is not assignable to the same property in base type 'EditorManager'.\r\n  Type 'IEvent<Editor>' is not assignable to type 'IEvent<Editor>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/EditorManager.ts\r\n(124,16): error TS2416: Property 'onModeChanged' in type 'AnyEditorProxy' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<Vim.Mode>' is not assignable to type 'IEvent<Vim.Mode>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/EditorManager.ts\r\n(128,16): error TS2416: Property 'onBufferChanged' in type 'AnyEditorProxy' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<EditorBufferChangedEventArgs>' is not assignable to type 'IEvent<EditorBufferChangedEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/EditorManager.ts\r\n(132,16): error TS2416: Property 'onBufferEnter' in type 'AnyEditorProxy' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/EditorManager.ts\r\n(136,16): error TS2416: Property 'onBufferLeave' in type 'AnyEditorProxy' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/EditorManager.ts\r\n(140,16): error TS2416: Property 'onBufferSaved' in type 'AnyEditorProxy' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/EditorManager.ts\r\n(144,16): error TS2416: Property 'onBufferScrolled' in type 'AnyEditorProxy' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<EditorBufferScrolledEventArgs>' is not assignable to type 'IEvent<EditorBufferScrolledEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Services/EditorManager.ts\r\n(148,16): error TS2416: Property 'onCursorMoved' in type 'AnyEditorProxy' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<Cursor>' is not assignable to type 'IEvent<Cursor>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Plugins/Api/Oni.ts\r\n(101,9): error TS2719: Type 'Configuration' is not assignable to type 'Configuration'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Plugins/Api/Oni.ts\r\n(113,9): error TS2719: Type 'EditorManager' is not assignable to type 'EditorManager'. Two different types with this name exist, but they are unrelated.\r\n  Types of property 'onActiveEditorChanged' are incompatible.\r\n    Type 'IEvent<Editor>' is not assignable to type 'IEvent<Editor>'. Two different types with this name exist, but they are unrelated.\r\n      Types of property 'asObservable' are incompatible.\r\n        Type '() => Observable<Editor>' is not assignable to type '() => Observable<Editor>'. Two different types with this name exist, but they are unrelated.\r\n          Type 'Observable<Editor>' is not assignable to type 'Observable<Editor>'. Two different types with this name exist, but they are unrelated.\r\n            Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Plugins/Api/Oni.ts\r\n(129,9): error TS2322: Type 'Notifications' is not assignable to type 'Api'.\r\n  Types of property 'createItem' are incompatible.\r\n    Type '() => Notification' is not assignable to type '() => Notifications.Notification'.\r\n      Type 'Notification' is not assignable to type 'Notifications.Notification'.\r\n        Types of property 'onClick' are incompatible.\r\n          Type 'IEvent<void>' is not assignable to type 'IEvent<void>'. Two different types with this name exist, but they are unrelated.\r\n            Types of property 'asObservable' are incompatible.\r\n              Type '() => Observable<void>' is not assignable to type '() => Observable<void>'. Two different types with this name exist, but they are unrelated.\r\n                Type 'Observable<void>' is not assignable to type 'Observable<void>'. Two different types with this name exist, but they are unrelated.\r\n                  Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Plugins/Api/Oni.ts\r\n(169,9): error TS2322: Type 'Workspace' is not assignable to type 'Api'.\r\n  Types of property 'onDirectoryChanged' are incompatible.\r\n    Type 'IEvent<string>' is not assignable to type 'IEvent<string>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/Editor.ts\r\n(41,16): error TS2416: Property 'onCursorMoved' in type 'Editor' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<Cursor>' is not assignable to type 'IEvent<Cursor>'. Two different types with this name exist, but they are unrelated.\r\n    Types of property 'asObservable' are incompatible.\r\n      Type '() => Observable<Cursor>' is not assignable to type '() => Observable<Cursor>'. Two different types with this name exist, but they are unrelated.\r\n        Type 'Observable<Cursor>' is not assignable to type 'Observable<Cursor>'. Two different types with this name exist, but they are unrelated.\r\n          Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/Editor.ts\r\n(46,16): error TS2416: Property 'onModeChanged' in type 'Editor' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<Vim.Mode>' is not assignable to type 'IEvent<Vim.Mode>'. Two different types with this name exist, but they are unrelated.\r\n    Types of property 'asObservable' are incompatible.\r\n      Type '() => Observable<Vim.Mode>' is not assignable to type '() => Observable<Vim.Mode>'. Two different types with this name exist, but they are unrelated.\r\n        Type 'Observable<Vim.Mode>' is not assignable to type 'Observable<Vim.Mode>'. Two different types with this name exist, but they are unrelated.\r\n          Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/Editor.ts\r\n(50,16): error TS2416: Property 'onBufferEnter' in type 'Editor' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n    Types of property 'asObservable' are incompatible.\r\n      Type '() => Observable<EditorBufferEventArgs>' is not assignable to type '() => Observable<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n        Type 'Observable<EditorBufferEventArgs>' is not assignable to type 'Observable<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n          Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/Editor.ts\r\n(54,16): error TS2416: Property 'onBufferLeave' in type 'Editor' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/Editor.ts\r\n(58,16): error TS2416: Property 'onBufferChanged' in type 'Editor' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<EditorBufferChangedEventArgs>' is not assignable to type 'IEvent<EditorBufferChangedEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n    Types of property 'asObservable' are incompatible.\r\n      Type '() => Observable<EditorBufferChangedEventArgs>' is not assignable to type '() => Observable<EditorBufferChangedEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n        Type 'Observable<EditorBufferChangedEventArgs>' is not assignable to type 'Observable<EditorBufferChangedEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n          Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/Editor.ts\r\n(62,16): error TS2416: Property 'onBufferSaved' in type 'Editor' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<EditorBufferEventArgs>' is not assignable to type 'IEvent<EditorBufferEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n\r\nERROR in /Users/rgehan/dev/js/oni/browser/src/Editor/Editor.ts\r\n(66,16): error TS2416: Property 'onBufferScrolled' in type 'Editor' is not assignable to the same property in base type 'Editor'.\r\n  Type 'IEvent<EditorBufferScrolledEventArgs>' is not assignable to type 'IEvent<EditorBufferScrolledEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n    Types of property 'asObservable' are incompatible.\r\n      Type '() => Observable<EditorBufferScrolledEventArgs>' is not assignable to type '() => Observable<EditorBufferScrolledEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n        Type 'Observable<EditorBufferScrolledEventArgs>' is not assignable to type 'Observable<EditorBufferScrolledEventArgs>'. Two different types with this name exist, but they are unrelated.\r\n          Property 'source' is protected but type 'Observable<T>' is not a class derived from 'Observable<T>'.\r\n\r\nERROR in ./browser/src/index.tsx\r\nModule build failed: Error: Typescript emitted no output for /Users/rgehan/dev/js/oni/browser/src/index.tsx.\r\n    at successLoader (/Users/rgehan/dev/js/oni/node_modules/ts-loader/dist/index.js:39:15)\r\n    at Object.loader (/Users/rgehan/dev/js/oni/node_modules/ts-loader/dist/index.js:21:12)\r\n @ multi ./browser/src/index.tsx\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 2\r\nnpm ERR! oni@0.3.2 build:browser: `webpack --config browser/webpack.production.config.js`\r\nnpm ERR! Exit status 2\r\nnpm ERR!\r\nnpm ERR! Failed at the oni@0.3.2 build:browser script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     /Users/rgehan/.npm/_logs/2018-03-15T15_42_02_021Z-debug.log\r\nerror Command failed with exit code 2.\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1768", "title": "When tabs.mode == \"buffers\", moving/closing tabs is broken", "body": "I recently fixed the issue for `tabs` mode, but it seems like there is another bug affecting the tabs when in `buffers` mode.\r\n\r\n**How to reproduce**:\r\n- Open a folder with 5-6 files\r\n- Open all the files as tabs\r\n- Attempt to select each one of them\r\n\r\n**What happens**:\r\n- At some point it becomes impossible to select a tab\r\n- Even though tabs are not displayed as select, the Neovim editor still displays the content of the file clicked\r\n\r\n![Screen recording](http://g.recordit.co/IDuA63Yt3S.gif)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1767", "title": "Fuzzy finder highlighting would look better with bold instead of underlining", "body": "I find the underlining of separate letters a bit hard on the eye. It obfuscates the words a bit.\r\n\r\nLet's compare how VSCode looks vs. how Oni looks:\r\n\r\n![capture d ecran 2018-03-10 a 18 00 43](https://user-images.githubusercontent.com/793402/37244693-291b61e6-248d-11e8-9282-da8a03929cff.png)\r\n\r\n![capture d ecran 2018-03-10 a 18 00 51](https://user-images.githubusercontent.com/793402/37244694-2ad957c2-248d-11e8-9f58-820ffbe9874f.png)\r\n\r\nI think bolding the matches would look a bit more polished\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1767/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1759", "title": "The autocompletion popup can be moved by clicking away from the line it was opened on", "body": "How to reproduce:\r\n- Open the snippets popup on line `x`\r\n- Click on line `x + n`\r\n\r\nThe popup is now anchored on line `x + n`\r\n\r\nSelecting a snippet will still insert it on line `x` even though the popup is on line `x + n`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1759/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1758", "title": "The autocompletion popup is all jumpy because of the different size of the snippets", "body": "When moving in the list of the suggested snippets, the preview area is updated with the currently focused snippet. The problem is that the snippets are not the same size, making the list jump around.\r\n\r\nWhen presenting a list to the user, the list should move as little as possible so that is is easy to target a specific item.\r\n\r\nSee below; the preview areas are not the same size, and since the popup is fixed from the bottom, it makes the list move up & down.\r\n\r\n![capture d ecran 2018-03-09 a 09 50 01](https://user-images.githubusercontent.com/793402/37198634-424a5d98-237f-11e8-9fe9-3bd8cfdc6a07.png)\r\n![capture d ecran 2018-03-09 a 09 49 52](https://user-images.githubusercontent.com/793402/37198635-4265d41a-237f-11e8-944b-6ae94b620c4f.png)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1758/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1757", "title": "Cmd + clicking a link should open the URL in the browser", "body": "This is a quite small improvement, but would allow to:\r\n- Go to a linked issue\r\n- Go to a piece of documentation (best example https://github.com/onivim/oni/blob/master/.oni/config.js#L3)\r\n\r\nWe could mimick the behavior of VSCode and:\r\n- Coloring the link in an \"active\" color (link blue?) when hovering it with Cmd pressed\r\n- Display a tooltip stating \"Cmd + Click to follow the link\" or something like that when hovering it without holding Cmd\r\n\r\nI guess the key should be configurable so that it works on all platforms", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1757/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1743", "title": "Cannot delete a word with Alt+Del or a line with Cmd+Del", "body": "I think it should be possible to use:\r\n- `Alt+Del` to delete a word backward in insert mode, the command palette and the Vim command line\r\n- `Cmd+Del` to delete a full line\r\n\r\nI tried using `Cmd+A` to delete the whole input, but it simply prints an `a`.\r\n\r\n**Oni**: v0.3.0\r\n**OS**: Mac OS High Sierra 10.13.3", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/409e36f747f9c5b38368ed1634794404e761781a", "message": "Use XDG compliant path for the config files (Linux/Mac) (#1792)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3c88c847e3c55ac0f23bb945c9709deeb9021d02", "message": "Fix tabs so that they use the correct id when closing/focusing (#1761)\n\n* Fix tabs so that they use the correct id when closing/focusing\r\n\r\n* Add integration test for opening/closing tabs with tabs.modes set to tabs"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e5138ea7469dd6b32edb6a026093e3896e162d2f", "message": "Allow maximizing the window by double clicking the window title (#1762)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/207e50cd643ebd65526b26ebe7c8d2734ef2b577", "message": "Allow to close Cmd+[Shift]+P popups by clicking on the backdrop (#1748)"}], "pull_requests": [{"url": "https://api.github.com/repos/onivim/oni/pulls/1795", "title": "Edit user config in a VSCode-like split view", "body": "This PR attempts to modify the way the \"user config\" is currently edited so that:\r\n- It is shown side-by-side with a reference file showing all the possible options\r\n- The reference file is annotated/commented and not just a raw JSON file\r\n- The reference file is readonly\r\n\r\n### What is actually implemented\r\n- The split view is displayed with the default configuration values\r\n\r\n### What needs to be done\r\n- The reference file needs to be annotated/commented. This might have to wait for the new *Config API* to be implemented\r\n- The reference file needs to be readonly", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173407980", "body": "`i + 1` as Neovim tabs' indices seem to start at 1 (shameful)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173407980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173627525", "body": "That does makes sense. I wasn't too fond of changing the logic all around the file. I'll try and make the changes you suggested.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173627525/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "CrossR": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1802", "title": "Text loses focus on Window Select", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nWhen selecting and un-selecting Oni the text seems to focus and un-focus.\r\n\r\n<img width=\"447\" alt=\"comparison\" src=\"https://user-images.githubusercontent.com/10038688/37433770-226ca72e-27d5-11e8-9ef7-25082b433b28.png\">\r\n\r\nIn the top of the image, I've unselected Oni and then taken a picture.\r\nThe second is whilst I have Oni selected.\r\n\r\nThere is some very small amount of blurriness when Oni is selected, and I'm not fully sure why.\r\nA gif can be seen here : https://i.imgur.com/kECp9Rr.gif\r\n\r\nThis is whilst using Fira Code, but it also occurs whilst using the default font on Windows.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1785", "title": "Cursor remains on screen during spelling interface", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nIts possible this relates to issues like #1483.\r\n\r\nWhen a swapping to the spelling screen, the cursor remains on screen when it shouldn't.\r\nThis can be seen below, where the cursor is on screen, where in normal vim the cursor is hidden.\r\n\r\n![image](https://user-images.githubusercontent.com/10038688/37349465-6997b54c-26ce-11e8-9812-77fb03d53fdf.png)\r\n\r\nThis is just a file with `set spell` and then `z=` to fix the spelling.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1737", "title": "VimNavigator: Allow editing the folder structure in explorer", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nHaving the ability to edit files and directories in the explorer using the vim commands would be very useful.\r\n\r\nI'm not fully sure what makes the most sense but I see a few different things we'd need:\r\n* New/Add File\r\n* New/Add Folder\r\n* Rename item\r\n* Move Item\r\n* Delete Item\r\n\r\nDelete being `d` or `x` would make sense, same for using the normal `y`+`p` for moving/copying etc.\r\n`a` or `i` possibly for adding a new file? I'm less sure on that, and how you can distinguish between a file and folder. Rename probably makes sense to be `r`.\r\n\r\nSome parts of this have already been added by @Akin909, so we could potentially just call the code he has already written, at least for moving files etc.\r\n\r\nThat is all of the top of my head, if anyone has used the in Vim options more than I have, I'd be interested to know what you think makes more sense. We could also nick ideas from something like Ranger, which is a text based file explorer that has vim-style keybinds.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1737/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1704", "title": "Browser sneak filtering", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nI know this was just added, but thought it was still worth getting an issue up.\r\n\r\nCertain in-browser menus are having their sneak anchor shown when they are not visible, for example on the DuckDuckGo home page.\r\n\r\n![image](https://user-images.githubusercontent.com/10038688/36934865-c9585dc2-1ee7-11e8-8d10-e0d72144537d.png)\r\n\r\nWhere in this case, the majority of the anchors are shown for the \"Privacy, Simplified\" menu and the Twitter menu. The \"hamburger\" menu works as expected, only showing when opened.\r\n\r\nThere is a similar issue when the hamburger menu is opened, the twitter button is occluded but still selectable.\r\n\r\nAnother minor issue is missing anchors, where the \"Privacy, Simplified\" menu has no anchor, and also the text box doesn't where I would expect it to (that could just be me though and will only really matter when text can actually be inputted into the boxes).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1678", "title": "Surface Bookmarks", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nSince the changes to workspaces were made, bookmarks aren't accessible, or at least not in anyway that I can notice. I frequently swap around projects, so having the bookmarks menu accessible would be nice.\r\n\r\nCould either add it to its own window, or add it under the command pallete? I think there was some discussion on if that made sense in another ticket though, but I can't seem to find that ticket.\r\n\r\nFor now (and to get better with messing with the Oni API) I'm using the following in my `config.js`, incase anybody else misses this. Though I think its probably specific to Windows, but that is fine for me.\r\n\r\n```\r\n\r\n    const makeBookmarksMenu = () => {\r\n        const bookmarkMenu = oni.menu.create()\r\n\r\n        const bookmarks = oni.configuration.getValue(\"oni.bookmarks\")\r\n\r\n        const menuItems = bookmarks.map((s) => ({icon: \"star\",\r\n                                                 detail: s,\r\n                                                 label: s.split(\"\\\\\").pop()}))\r\n\r\n        bookmarkMenu.show()\r\n        bookmarkMenu.setItems(menuItems)\r\n\r\n        bookmarkMenu.onItemSelected.subscribe(menuItem => {\r\n            if (menuItem) {\r\n                oni.workspace.changeDirectory(menuItem.detail)\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    oni.input.bind(\"<s-c-w>\", makeBookmarksMenu)\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1678/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1632", "title": "Add refine option to quick open", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nSplitting this out from #1281,\r\n\r\n> Some fuzzy-finders have a 'refine' approach - where you could type main.tex, realize there's a bunch of them, but realize you're looking for the one in research folder, so you could then refine the result by typing space + research (so the filter text would be main.tex research). This would turn the filter into a two-pass filter - first, filter all the results with main.tex, then filter all of those results with research. In addition, if we sorted the search results by length, this might be a cheap way to make the fuzzy finder significantly more useful.\r\n\r\nI'd certainly find something like this useful, so may have a look into adding it, if it isn't picked up before I get some free time.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1632/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1601", "title": "Enhance Auto Insert Logic", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nThe current logic for the auto insertion could use two changes that I can see:\r\n\r\n- Alter style in comments. Whilst I'm in a comment, having `'` auto insert a pair when I'm typing a word isn't the most useful. Instead I'd rather whilst in the context of a comment I'm only given a single `'`.  I think this may be possible using the TextMate grammar scopes? But I also don't know an awful lot about them.\r\n\r\n- Alter logic when cursor is next to another symbol. If I have my cursor mid line and I'm attempting to add brackets around something ie `|A and B` the current logic would result in `()|A and B` where I'd rather be given `(|A and B`, such that I can go and add my own second bracket at the end. Basically, if my cursor is right against a character, only insert the first character of a pair.\r\n\r\nI also realise that both of these things add nice awkward edge cases to the code... and could entirely be stuff that others don't want.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1601/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1585", "title": "QuickOpen Regex Errors", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nWhen using `    \"editor.quickOpen.filterStrategy\": \"regex\",`, errors are raised when partial regex symbols are input.\r\n\r\nIe, an error is raised if `(` is typed since the group isn't complete yet, or `+` if it doesn't apply to anything.\r\nIf `(` is used, every letter after it until the closing `)` will also raise an error.\r\n\r\nErrors in the regex are useful, but should be properly caught and displayed back to the user.\r\nI'm not sure the best way to display that though, any ideas?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1548", "title": "Disabling the sidebar seemingly disables other features", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nI was updating the Wiki and checking the options as I went, and when I tried `\"sidebar.enabled\": false,` it worked fine...but my `<ctrl+p>` and `<ctrl+shift+p>` menus stopped working. The externalised commandline still worked, but neither of those menus.\r\n\r\nEnabling it again fixed the issue, but thats slightly harder when you need to manually navigate and find the config file to undo disabling the sidebar. I can't see anything immediately obvious why this is the case, but I didn't look into it for more than a mo.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1531", "title": "Filetype spinner + LSP startup error", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nFor certain filetypes, I'm getting a continuous spinner for the filetype indicator, and I'm now also getting an error on screen.\r\n\r\nIt looks to be because the code below checks if Oni has language server config setup for the current file type, but not if the current machine is capable of running this LSP.\r\n\r\nhttps://github.com/onivim/oni/blob/2d057c3536f5a54bd68ba6e6abb0f04e7a39c545/browser/src/Services/Language/LanguageManager.ts#L333\r\n\r\nIe, for Python and C++, Oni has default config for these LSPs, but my machine does not have either of these language servers installed, meaning the code is ran and errors.\r\n\r\nIn reality, the check should be if `pyls` is available, but not sure how easy that would be to add, or how robust.\r\n\r\nFeels like this sort of issue would benefit from some form of information notification ie `Pyls can not be started` but that requires a system for the notifications and also a system to show it once, and not every time a buffer is swapped into (which is how often the error is shown).\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1531/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1058", "title": "Keyboard switching issue", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nI realise this is a weirdly specific error, but something in Oni isn't able to keep up with the Windows language swapping.\r\n\r\nI swap back and forth between the British and US English keyboard layouts depending on what keyboard I have plugged in, and what I'm typing at the time. Oni can deal with both of these, if I open Oni with the required layout enabled, but if I swap whilst Oni is open I get some weird behaviour where the `\"` key doesn't work and perhaps others, but I notice that one the most.\r\n\r\nFor example:\r\n- Open Oni in US Layout\r\n- Realise that I'm writing a report in Latex that deals with money, so I swap to the UK layout to get the \u00a3 symbol more easily.\r\n- Then `\"` doesn't work anymore in the UK layout, but if I swap back to US it works fine.\r\n\r\nDebug logs below:\r\n<img width=\"365\" alt=\"oni log\" src=\"https://user-images.githubusercontent.com/10038688/33515454-ab30aae4-d75b-11e7-8abc-eae23531fd04.PNG\">\r\n<img width=\"407\" alt=\"oni log 2\" src=\"https://user-images.githubusercontent.com/10038688/33515455-ab4409e0-d75b-11e7-8f08-daf9f8ef1a73.PNG\">\r\n\r\nIn both cases the first prints a `\"` to the window and the second does not, I assume because it is being picked up as `<Shift - \">`.\r\n\r\nObviously low priority, and I wasn't even sure if this was an issue of ours or the package we use.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/926", "title": "Unicode characters wrapping", "body": "It looks like some unicode characters are still causing issues in Oni for me.\r\n\r\n![image](https://user-images.githubusercontent.com/10038688/32704046-283a32ea-c7f7-11e7-9718-5a14f7f03ae7.png)\r\n\r\nI was writing up the Keybinds page for the Wiki and noticed that using the \u2318 character caused a few issues, in both the editor itself as well as the command pallet when I was using it to search and replace.\r\n\r\nYou can see in Oni it looks like the keybinds are missing characters, but in Notepad++ all the characters are there (though it can't display the unicode at all).\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/836", "title": "Show Whitespace options", "body": "There are certain things that I always struggled with in terminal based Vim/NeoVim.\r\n\r\nI quite like how VS Code, Notepad++ and similar all show whitespace/tabs/etc, but I never really managed to find a decent way of mirroring it in the terminal versions of Vim because getting transparency of some form working was never very easy.\r\n\r\nSimilarly, things like column rulers where always these big thick lines that I wasn't a fan of, and indent guides were either big thick lines or made up of pipe symbols which again doesn't look the best.\r\n\r\nQuick example from Code, but an option in general would be nice.\r\n\r\n![image](https://user-images.githubusercontent.com/10038688/32138909-9bb285d0-bc33-11e7-907e-35578ab96de8.png)\r\n\r\nThis seems like something Oni would be able to do a lot better, but I'm not sure.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/836/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/07711c25c5d36e69f2bc7ca344a92783870f38e0", "message": "Add QuickOpen Refine option. (#1727)\n\n* Allow RegExFilter to refine using multiple terms.\r\n\r\n* Started to add tests for the filter + regex strategy.\r\n\r\n* Fix lint issue.\r\n\r\n* Added additional tests.\r\n\r\nCheck empty cases and search order."}, {"url": "https://api.github.com/repos/onivim/oni/commits/e5faff7ddf30597f6b68944630145defd62cba6f", "message": "Fix config option for CMD icons. (#1749)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1743b9a3c895d627d921badb414256be57471529", "message": "Update Bounty Instructions (#1734)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bff79031676dc6fbcbbfbf7887b8df2bf86c908e", "message": "Fix tab creation issues some of the time. (#1590)\n\n* Check that input parameters are arrays.\r\n\r\n* Updated to force type and add unit test for empty call.\r\n\r\n* Fix lint issue."}, {"url": "https://api.github.com/repos/onivim/oni/commits/9326f3cf57b68de25ae9edbbc2da2780a674d13a", "message": "Tabs show modified state. (#1498)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a19ae99acf0befb3006e87d4b9723cc602be25cc", "message": "Check there is files to open before attempting to open. (#1514)\n\nThis was causing an error if the Open File window was open and closed without selecting anything."}, {"url": "https://api.github.com/repos/onivim/oni/commits/d3a03f25328b1d70bc3df23fed1bc3ebe42fea30", "message": "Stop waiting for running Oni instance at end of install. (#1500)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4b15249af1f4b2c042360de2bbbe98b8a8a185a2", "message": "[WIP] Fix #1258 - Fix quotes auto-insertion (#1375)\n\n* Added a check for if the open and close character are equal.\r\n\r\n* Refactor for easier testing.\r\n\r\n* Start to setup CI test.\r\n\r\n* Added (broken) unit tests.\r\n\r\nNeed to fix the last one and actually validate they are doing what I think they are.\r\n\r\n* Fixed up comments in CI tests.\r\n\r\n* Fix lint issues.\r\n\r\n* Add missing semi-colon.\r\n\r\n* Swap to using a cursor in the MockBuffer object.\r\n\r\n* Swap test to use third form of quote type.\r\n\r\n* Temporarily added sleep to test.\r\n\r\n* Fix potential race condition by waiting for return of function.\r\n\r\n* Update final await, to guarantee the input of all keys.\r\n\r\nUsing the old line count was causing the tests to finish early sometimes."}, {"url": "https://api.github.com/repos/onivim/oni/commits/a74466a212cc438f50dbe1b2b3641f79736e260f", "message": "Update default config. (#1429)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6a3e3e35a135d3f259d0ca3021fd3b5ba728c473", "message": "Wire up Autoread. (#1156)\n\n* Wire up on focus event for autoread.\r\n\r\nhttps://github.com/neovim/neovim/issues/1936 explains this change.\r\n\r\n* Added comment so reason for change is explicit."}, {"url": "https://api.github.com/repos/onivim/oni/commits/85635121c76b69f88b5e1d9ccd8bfe41f06e22c6", "message": "Add default font unit when needed (#1097)\n\n* Add helper function to add on a default unit.\r\n\r\n* Fix lint issues."}, {"url": "https://api.github.com/repos/onivim/oni/commits/d712b88a57fd16991cfb584a5110aca11c328a8f", "message": "Start to add language specific tokens. (#1099)\n\nStill not sure on the config option name, and if we should expect the user to put [ ] around the regex."}, {"url": "https://api.github.com/repos/onivim/oni/commits/18e651becb200738e8d1061a964a5871a8746ba7", "message": "Swap indexes to one indexed for quick fix window. (#1092)\n\nThis assumes all indexes that come in are 0 indexed, which may not be true."}, {"url": "https://api.github.com/repos/onivim/oni/commits/c76f94743c9c5383feaa01503d9a60364bf536c0", "message": "[WIP] Implement External Pop Up Settings. (#1022)\n\n* Start to implement External Pop Up Settings.\r\n\r\n* Fix lint issues.\r\n\r\n* Swap config setup.\r\n\r\n* Removed unused option.\r\n\r\n* Apply change to new file."}, {"url": "https://api.github.com/repos/onivim/oni/commits/fbea2e38ad804e797172e0a27df2e1816290c67f", "message": "Tidy up the remaining parts that were pointing at the old repo. (#1021)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d64357dfc994e4de29428a7481ffd4b9e2e41442", "message": "Add native tab option (#992)\n\n* Add the option for Native vim tabs.\r\n\r\nEither set \"tabs.enabled\": to false, or \"tabs.showVimTabs\" to native.\r\n\r\n* Fix logic.\r\n\r\n* Swap config option to \"tabs.mode\".\r\n\r\n* Only set ext_tabline to false if the user is in native mode.\r\n\r\n* Add \"hidden\" option, remove \"tabs.enabled\" option."}, {"url": "https://api.github.com/repos/onivim/oni/commits/f36afb0bc331aea939d91b388c1ccabb59e34ac2", "message": "[WIP] Swap Bundled plugins to Submodules (#944)\n\n* Remove plugin files, so submodules may be added.\r\n\r\n* Added link to submodules.\r\n\r\n* Update AppVeyor config to pull in submodules."}, {"url": "https://api.github.com/repos/onivim/oni/commits/30f773fd086715533a3985b8f780f4272bc8c674", "message": "Fix \"Edit NeoVim config\" command. (#969)\n\n* Fixed path for Windows init.vim.\r\n\r\n* Disable lint check for new line."}, {"url": "https://api.github.com/repos/onivim/oni/commits/769e2e33e4af5a7af006545be2bcdf1fb00a0508", "message": "Fix #903 - Move Windows Config and Create Config folder if needed. (#939)\n\n* Move Oni config file to %AppData%/Oni on Windows.\r\n\r\n* Make config folder if needed.\r\n\r\n* Update to apply watch as well when making new config folder.\r\n\r\n* Fixed lint issue.\r\n\r\n* Updated path for CI test."}, {"url": "https://api.github.com/repos/onivim/oni/commits/38860054283d73a79a87550e8fb00ca9f4a5ba0b", "message": "Add a check for the symbol search so it doesn't overwrite open in new tab. (#927)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7095a29abada3264d6af76cb452e95504f21ebf4", "message": "Use custom trigger characters when supplied. (#861)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/944e136db8ea15c91a2b7dbec9e442c419ea770c", "message": "Added optional task for adding Oni to right click menu on Windows (#823)\n\n* Added optional task for Windows installer for adding Oni to right click menu.\r\n\r\n* Updated Installer task description."}, {"url": "https://api.github.com/repos/onivim/oni/commits/4bf40fde1243165b0a11c2c498d7903b0815a125", "message": "[WIP] Allow the passing of a custom init.vim path. (#784)\n\n* Allow the passing of a custom init.vim path.\r\n\r\n* Fixed linting error.\r\n\r\n* Consolidated loading init vim and choosing path in to one option.\r\n\r\nAlso refactored the opening of the init.vim to use the existing open command.\r\n\r\n* Renamed variable.\r\n\r\n* Fixed linting issues."}, {"url": "https://api.github.com/repos/onivim/oni/commits/c0cd0e4c3e65c4f7d4ce2ed406f39c384056f3a3", "message": "Updated VSCode debugging preset path to match the new location of main.js. (#773)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/23aeed4cdaa4cc175a8fdc7a6c8405a1b8951c8f", "message": "Add option to maximize Oni on startup. (#771)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1b0fa336aa265e88848276a640d3a41bd0dc4db1", "message": "Normalize path for \"Save As\". (#684)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a9d2b0b5d6181c6e3398fbc602affa03d19c3b99", "message": "[WIP] Windows Open With Support (#613)\n\n* Fix for #598 and #344.\r\n\r\nRegisters Oni as an editor for a few file extensions, as well as giving the option as adding Oni to the Windows Path variable.\r\n\r\n* Made an optional step.\r\n\r\n* Fix optional task for file reg keys.\r\n\r\n* Only open the second argument if we are running the Oni executable.\r\n\r\n* Fix adding of registry keys, and tell Inno that we are registering new file associations.\r\n\r\n* Fix Oni icon path for Open with command.\r\n\r\n* Fix for correct path.\r\n\r\n* Simplify how Registry keys are added to the template.\r\n\r\n* Start to fix main.js.\r\n\r\n* Fix for passing arguments.\r\n\r\n* Fix argument name.."}, {"url": "https://api.github.com/repos/onivim/oni/commits/2daad92cc008f85fd523854ff9fd996af211eb6e", "message": "Open multiple files in tabs/splits. (#526)\n\n* Swapped split and tab open to allow multiple file selections at once.\r\n\r\n* Swaps launch.json to use the .cmd file when in a Windows enviroment.\r\n\r\nBased on the code from https://code.visualstudio.com/updates/v1_6#_launch-configuration-supports-npm-and-other-tools.\r\n\r\n* Started moving code over to the renderer process, to add robust file checks.\r\n\r\n* Add more thorough check to opening of multiple files.\r\n\r\n* Reverted changes for splits.\r\n\r\n* Move VimL logic into the Oni Core plugin."}], "pull_requests": [{"url": "https://api.github.com/repos/onivim/oni/pulls/1811", "title": "Tidy up and remove options from default vim config.", "body": "I've not moved any of the other values to the core conf just yet, so as to minimise the changes that the default and core config go through.\r\n\r\nEventually, is the plan to remove all options from the default config? Seems like we could achieve everything there in the Oni layer, which makes it more front and central from a customisation point of view.", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1747", "title": "Cross Oni Movement", "body": "Potentially fixes #67.\r\n\r\nI've not actually got 2 monitors, so I've written this such that it should work broadly moving across any Oni instances. Plus I don't think the screen number actually matters since I think if you have 2 1080p monitors, the top left of your primary is 0,0 and then the other ones are either `-1920,0` or `1920,0`, so this approach (ie using the current location) should work.\r\n\r\nThat said! I don't want to put a bunch of effort in based on vague assumptions I've had from reading StackExchange and GitHub issues, so if someone with 2 monitors could test it, that would be great. Currently, I've not bothered hooking up the movement keys, I'm just using the `Ctrl+Shift+P` menu to add Up, Down, Left, Right movements.\r\n\r\nAssuming that works on multiple monitors, since it works for me on one at least:\r\n- [x] Check issue with `windows` being correctly emptied, since currently if you close a Window, this stops working due to an object being destroyed.\r\n- [x] Actually link this up up the to unhandled movement option.\r\n- [x] Move the code out of main and into a separate file (+ tidy it)\r\n- [x] Unit test it, and spend a little time seeing if CI tests are feasible.\r\n- [x] Deal with minimised windows? Ie currently if you have 3 windows of oni, with the middle minimised, the middle will open up again.\r\n- [x] Check the selection logic, and make sure it prioritises the smallest distance of the current movement.\r\n- [x] Move logic out of OniEditor.\r\n\r\nIf not, well at least I only spent an hour or so on this to avoid other work.", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/311897528", "body": "Yeah that's true, after I posted the comment I tried to work out what is the most sensible behavior, but there is arguments for a bunch of different ways. \r\n\r\nIt's not empty, it's just regardless of where my file is open, it only shows files relative to oni in some fashion, I think the electron folder. If I swap the search command to the suggested windows one in Config.ts, It swaps to the program files folder that oni is installed in. \r\n\r\nJust looks like on my machines it's unable to open the current folder, so always opens the oni relative ones. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311897528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312105076", "body": "So, normally I'm opening Oni via the start menu. Using :pwd like that returns F:\\Program Files\\Oni, which is the install directory I have.\r\nOpening it via cmd/powershell, :pwd instead returns the folder I was in when I opened Oni.\r\n\r\nSo yeah, it is set to wherever Oni is started from. From the shell that is the current folder, but from the Start menu this is just the Program files folder.\r\n\r\nIncidentally, setting the \"autochdir\" flag in my init.vim made this work as I'd expect. Each tab and split had its own fuzzy files in the folder the file resides in, which is at least better than only having it in the install dir. From looking on the [vim wikia](http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file), it seems this option doesn't always play nice with plugins, so maybe its worth looking into a more permanent solution. It does mention using autocmds instead for the same effect.\r\n\r\nAs for the other considerations:\r\n* That would certainly be useful, and would bring it close the the Ctrl-P vim plugin. It has the option of scanning upwards looking for git/svn/etc files, which is very useful. Being able to open a file anywhere in a project and access the whole project would be nice. Looks like this hooks in with #68.\r\n* The open folder in VSCode is certainly useful, and setting the current folder is definitely useful for things like file browsers, as well as the fuzzy matching. \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312105076/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312115028", "body": "All sounds good to me!\r\n\r\nI've add the 2 line change to make Split and Tab open multiple files, I just need to swap it now so it will check if the current tab is empty and has no edits in. Any suggestions on how to do that?\r\n\r\nI did get it working to test how it felt by comparing against the Oni title, ie by checking the current Title wasn't \"[No Name] - ONI\" but thats hardly a good solution since the moment the title bar changes it will fail. I figure I'll either want to try and hook into and get the state of the current window/neovim instance, or possibly just call a vim command and get a response from that if possible.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312115028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312936311", "body": "I've almost got this working now.\r\n\r\nIt works for all cases except opening multiple splits whilst having no file open, and no modifications made.\r\n\r\nI've got some VimL that I'm evaluating that says \"If the file is modified, or the file is not called [No Name], then the first file in a new split/tab. If the file has no modifications and is called [No Name] then we can instead open the first file in the current window. The rest are then just iterated over in a loop and we call tab or split on them.\r\n\r\nThat works fine for tabs. For splits, I think the changing of the buffer or the async nature of using Promises with `_neovimInstance.command( )` causes splits to fail after the first file.\r\n\r\nI've done some poking around, but was wondering if anyone had any ideas?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312936311/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321859618", "body": "Same for me on Windows 10, using the latest commit on master.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321859618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321860256", "body": "Was it intended as part of this to revert back to always opening a file in a new tab?\r\nIe, if I have an empty tab and unnamed tab, I'd expect using open file to open in there, rather than opening up a new tab and leaving me with an empty one.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321860256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321894967", "body": "Looks like getting the registry keys added isn't so bad, its just a few lines in the setup.template.iss file.\r\nWhat is awkward is that you need to duplicate those lines for each and every extension you want to support...\r\n\r\nIf you look at the VSCode .iss file here, you can see its just massive : https://github.com/Microsoft/vscode/blob/master/build/win32/code.iss\r\n\r\nSince its so easy to add yourself (Right Click -> Open With -> Look for another app on PC -> Point at oni.exe), I think what makes most sense is just adding a few for now, and then add to it as language servers are added?\r\n\r\nThat all said, even after Oni is registered as the editor, it doesn't open any files when I double click a file, even when I've said to open with Oni.\r\n\r\nI'm less sure how I should go about doing this linking, it looks like on Windows at least the file path you want to load is stored in argv[1], so I need to grab that somewhere and then open the file it says. Just can't work out where the code actually enter when I use the open with dialog.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321894967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321972035", "body": "I remember poking around the tickets and seeing this: https://github.com/extr0py/oni/issues/33\r\n\r\nObviously no idea if it changed since then, but it looks like goal at one point was to have a separate file for it.\r\n\r\nI think that makes more sense, as potentially you'd want to share colourschemes etc, without having to remove your config from it too. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321972035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322033318", "body": "> Cool, nice find! It looks like most of the entries are duplicates, except for the file extensions.... Since we already use a javascript script to generate our iss file, we could probably reduce that duplication and just have like a javascript array of supported extensions.\r\n\r\nThat made a lot more sense so I've swapped to that instead. From checking out the VSCode implementation I also realised how easy it was to add Oni to the Windows Path (#344) so I've done that too.\r\n\r\n> So I believe we might not be handling the arguments correctly... we might be assuming there are always two arguments prior to the file, but in this case there is actually only one.\r\n\r\nYep, thats the case, in main.js we do `createWindow(process.argv.slice(2), process.cwd())`. I'm not fully sure how to go about sorting that though.\r\n\r\nThere is two cases when there is two arguments:\r\n1. When using open with you have the .exe and the file.\r\n2. If you call Oni from the command line with no file to open, you have electron.exe and main.js\r\n\r\nSo we can't just check if there is two arguments and use the second, since the second could either be a file, or main.js. The easy approach is just check if the first argument is oni or electron, but not sure if thats a smart thing to do either.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322033318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322052369", "body": "Also I need to work out how to get the desktop icon working for this.\r\nThe icon is there since its working for .vim files and the app itself, it must just be the link to the icon that I've messed up.\r\n\r\nAnd there seems to be something going on with the open file since it works fine normally but works intermittently when used via a file opened with open with.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322052369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322069541", "body": "Got the image working now, it was just because I was using the path for the source code, rather than the installer location. It will probably need changing quite soon, as I assume the folder will move once the asar stuff is added back?\r\n\r\nGot those other file types added, and tested that its easy enough to manually add more if a user wanted via the Windows interface.\r\n\r\nDoes look very nice just having the icons all sat there!\r\n![Directory Image](http://i.imgur.com/5nmkfZK.png?1)\r\n\r\nJust need to work out why I can't seem to open files once you use the Open With loading...\r\nIt gives an error of \"No matching Autocommands\", but works fine if I open Oni normally.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322069541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322262721", "body": "Under what context does this happen?\r\n\r\nSo far, I've not had any issues with the Oni folder not being deleted, I've been uninstalling and reinstalling like crazy whilst messing with reg keys, and the only time I hit this was because I was attempting to uninstall whilst I had Oni running.\r\n\r\nIt looks like Inno has a way of checking if the process is running at uninstall time, so I could look at adding that?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322262721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322291784", "body": "Looks to be something to do with the way the first file is opened, which is via the function I wrote...\r\n\r\nIf I try and open one file it fails. If I try and open 4 files, the first fails and the three after are fine.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322291784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322478570", "body": "Hmm I'll have a look into those two cases, I'm not sure. I don't know if Explorer calls a single command for each file (which it looks like its doing if there is multiple instances of Oni) or if it passes an array of items.\r\n\r\nMight be the sort of thing that gets sorted if more complex tab management is implemented (ie dragging a tab out of the Oni tab bar to make a new instance of Oni etc). The second case just sounds like something isn't fully getting updated.\r\n\r\n> By fails, do you mean the file doesn't load at all?\r\nAre you opening from explorer or the command line?\r\n\r\nYep, the file doesn't load at all.\r\nI'm opening a file via the explorer, the issue comes if I then open a second file in Oni. Ie Double click file > Oni Opens with File > Menu > Open File > Select File > Doesn't Open. The first file loads fine, the second doesn't load at all.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322478570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322846028", "body": "There is two other parts to clean up, but I think they can be moved into a separate issue, as I think this would be useful to get into the next release.\r\n\r\n* Opening multiple files into a single instance of Oni if multiple files are highlighted.\r\n* Fixing the command line opening so it correctly opens multiple files into individual visualised tabs.\r\n\r\nDo you want me to merge the `:tabnew` change into this branch or should I leave them separate? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322846028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323387470", "body": "This might also help something I've noticed on my machine where I get a space between each copied line.\r\nI copy:\r\n```\r\n  \"oni.statusbar.enabled\": false,\r\n  \"editor.clipboard.enabled\": true\r\n```\r\n\r\nbut when I paste I get\r\n```\r\n  \"oni.statusbar.enabled\": false,\r\n\r\n  \"editor.clipboard.enabled\": true\r\n```\r\n\r\nIt is being brought into the clipboard correctly, as other editors are fine with pasting it, its just pasting into oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323387470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323429527", "body": "With `\"oni.useDefaultConfig\": true,` and `\"oni.loadInitVim\": false,` using `:norm! \"+p` worked for me at least, and without any newlines.\r\n\r\nI could Ctrl+c and then use that command and it pasted at the cursor position. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323429527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323430737", "body": "This was added with #613.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323430737/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323432591", "body": "Windows support for this was added with #613.\r\n\r\nI'm probably not the best person to implement this on the Mac side, as I have no devices to test this on.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323432591/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323527152", "body": "Cheers! Thanks for letting me help out on a great project!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323527152/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323576681", "body": "I've realised that the \"Paste\" option under the Edit menu does this similarly to the way @cyansprite is proposing.\r\n\r\n```click: (item, focusedWindow) => executeVimCommand('\\\\\"+gP')```\r\n\r\nSo if there is issues around it not working it may affect there too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323576681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324056496", "body": "There is also #264 in a similar vein to this, which looks to be waiting on an update to neovim-core. Though since we know if the buffer is or isn't modified, we could implement an oni version for now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324056496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324313260", "body": "This might be related to #586, where the tabs opened from File > Open File will work as expected, but any opened with the quick open toolbar are opened in a new buffer rather than a new tab.\r\n\r\nOni opens both tabs and buffers in the Oni tabline, meaning you do get some odd functionality, where `gt` and `gT` does work for some tabs and then skips others. The quick open (at least in the version I'm running), looks like it needs updating to always open via tabs rather than in a buffer.\r\n\r\nIts a bit of a confusing user experience, since in vim language you have a mix of buffers and tabs, but   the in-Oni experience looks to just be tab based.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324313260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324313872", "body": "As far as I know, there is/was talk about  using something like ag / ripgrep to replace the current search algorithms. There is a bit of talk about this over in #574.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324313872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324601152", "body": "> I think it'd be reasonable to use :tabnew for this scenario in QuickOpen, if there is already an opened file - that would help alleviate some of the confusion here.\r\n\r\nThat sounds like the most sensible option. We could also just expose the choice via an option. Defaulting to tabs I think makes the most sense since any non-vim users or vim newbies will find that more intuitive. If instead they did want to change it, we could have an option to change the default open action from tab to buffer or v/h splits or similar. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324601152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326760040", "body": "Yeah, looks like changing `name` to `normalizePath(name)` fixed this for me, so I'll make a PR.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326760040/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326762785", "body": "Cheers! Think that was the fastest Issue > PR > Finished PR I've done!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326762785/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326764082", "body": "Fixed with #684.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326764082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327291950", "body": "My `init.vim` is stored in `%LOCALAPPDATA%\\nvim\\init.vim` which is the location that NeoVimQT wanted when I was using that. I didn't move it and its worked fine there so I've just left it there.\r\n\r\nNo idea if that will help anyone, just thought I should share my setup. This is with Windows 10, and I still have NeoVim + NeoVimQT installed normally which may be the reason for this?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327291950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335208450", "body": "Just submitted a PR for this now! \r\n\r\nJust wanted to check I wasn't going crazy.\r\nI had a few issues getting the initial build to work again after bringing in the keyboard input changes, so I wasn't sure if it was just me.\r\n\r\n(If anyone cares, it was because I had Python 3.6 installed, and node-gyp wanted 2.7. Then when I fixed that, I was missing a valid version of MS Build so I used the fix outlined at the bottom of here to get a valid version of MS Build https://github.com/chjj/pty.js/issues/60)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335208450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335604735", "body": "I think this is an issue I occasionally run in to.\r\n\r\nI've got some Latex plugins that work fine on Linux, but they probably aren't defined properly on Windows, so if I open a .tex file on Windows Oni loads to a black screen. I hit enter and carry on like normal, using :messages if I think the message should be checked.\r\n\r\nNot an issue for me yet, and it looks like the linked issues are still not merged, but just thought I should add on some support to this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335604735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335881674", "body": "This could help with #436.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335881674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335946048", "body": "> The only concern I have is that the configuration settings we have today are already confusing - oni.loadInitVim, oni.useDefaultConfig, and oni.customInitVimPath. I'd like to see if we could consolidate the oni.loadInitVim and oni.customInitVimPath configuration settings, if possible (since setting oni.customInitVimPath would imply oni.loadInitVim is true).\r\n\r\nYep, totally agree!\r\nI did find myself thinking this as I was coding it, but wasn't too sure if it was the right way to go, though I hadn't considered letting `oni.loadInitVim` accept either a string or a boolean. That makes the logic a lot cleaner, and clears up the user config.\r\n\r\nI'll have a look at implementing it now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335946048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335964350", "body": "Consolidated those two options together now and seems to work well!\r\nAlso swapped to using the built in open where I can, and updated some variable names to be more appropriate.\r\n\r\nThere is still some oddness with the interactions with `oni.useDefaultConfig`, but only the same that is in the live version, and this is outlined in the Wiki, so its possibly an issue to raise later.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335964350/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336086999", "body": "In #784 I added the customisation of the init.vim path, so that should help with this.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336086999/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336888971", "body": "I'm going to have a bit of a look into this, and see what is causing it.\r\n\r\nFrom a quick 10 min look, I can see that Oni is receiving the messages for scrolling when moving from line 2 to line 3, that it should be getting at the bottom of the window instead. I'm seeing this in the `Session.ts` file, so I need to trace that backwards and see if I can find what is causing it to be sent.\r\n\r\nFrom that, it doesn't seem to be a render strategy issue, the renderer is doing exactly what it has been told, its just the instructions are wrong.\r\n\r\nI'll keep looking and see if I can work it out, if not then it will have helped me understand the code base a little better.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336888971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337330916", "body": "Seems like that would be a much better implementation, it was awkward to decipher the code in the init.vim, plus as its over in the neovim side of thing, it was awkward to follow the calls back and debug the issue as a whole. At least we have an idea of what seems to be causing the issue!\r\n\r\nI'll close up this PR and move some of the discussion over into the issue for this(#395), so that its still easily accessible. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337330916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337332219", "body": "To bring in some discussion from PR #802:\r\n\r\nIt looks like the `winline()` call that is used to update the screen mapping doesn't work well with scrolloff values.\r\nHowever, as other parts of the code base depend on this call, the fix is more complicated than just removing it.\r\n\r\nFrom @bryphe : \r\n> This whole pipeline is pretty hacky and convoluted - really what this is building for us is one function - a function that maps buffer space (like a line and column in a buffer) into screen space - and I suspect there is a way to simplify this without all the back-and-forth events and crazy iteration in init.vim.\r\n>\r\n>I'm trying to explore right now if there is an alternative fix - instead of needing to have this OniUpdateWindowDisplayMap in init.vim, perhaps we can do a pull instead from the Oni side, and based on the info we already have in the event context, and the state of the buffer, maybe we can simplify and build up that bufferSpaceToScreenSpace function. If we go this route, we could get rid of the hacky iteration + winline code that is causing issues with scrolloff (and I suspect it is causing some other problems as well), and have a more robust solution in general.\r\n\r\nA solution like this should both make cases like scrolloff work, as well as making the process as a whole more robust and easily debugged, as currently this interaction can only be debugged using the message-pack calls.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337332219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337859799", "body": "Usually when a fully black screen is shown, neovim is showing an error, but since this error doesn't have a nice way of externalising it, Oni can only show a black screen.\r\n\r\nHitting the enter key a few time may dismiss the error, in which case you can use the `:messages` command to view what errors were encountered on startup. I've had similar issues when my `init.vim` has had errors in it due to plugins.\r\n\r\nIn this case, it sounds like neovim is failing to open the file due to some certain files, which could either be how oni is passing those files, or neovim itself. Then neovim is attempting to show said error, and failing as there is currently no way to view this error, until you are into Oni and use the messages command.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337859799/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338770129", "body": "I've submitted a PR for adding this for Windows.\r\n\r\nA second point I realised is that we could potentially also have this work for Folders as well as files.\r\nThen you could \"open a folder\" with Oni, and it would open oni with the current folder set to that one.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338770129/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338969547", "body": "I'm now unable to repro this, so its possible it was an issue with my config...\r\n\r\nI'll close for now and can always re-open if it happens again and I can repro it reliably. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338969547/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339481942", "body": "Yeah thats fair enough, I wasn't sure what the best wording for it was.\r\n\r\nVS Code does it as follows: \r\n![image](https://user-images.githubusercontent.com/10038688/32024750-883a3634-b9d5-11e7-9771-1225fcc1f9bf.png)\r\n\r\nI think that VS Code's wording is more clear, since \"for text files\" could be interpreted as only working with `.txt` files when really it works with `.txt, .js, .ts, .md`... and so on.\r\n\r\nSo maybe:\r\n\r\n* Add Oni to %PATH%\r\n* Register Oni as the default editor for supported file types\r\n* Add Oni to the right-click menu for all files\r\n\r\nAs for combining them? Personally, I would prefer the choice even though I'll tick them all. It does sometimes annoy me how many programs you end up with on the right click menus that never asked permission to be there. I'd rather spend an extra second during an install and have that extra control.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339481942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339492096", "body": "I actually went with \"Register Oni as an editor for all supported file types\" in the end (the same as VS Code), as I realised since Windows 10 there is no way to force the default program, so saying \"as the default editor\" could be wrong, as if the user already has Notepad/Notepad++/VSCode etc set, we can't undo that. \r\n\r\nInstead when they select \"Open With\" they then get to check a box to select the new default and then at that point Oni becomes the default.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339492096/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340224303", "body": "Are you using \"15\" or \"15px\" as the font option?\r\nIf I miss out the \"px\" on the end I get something very similar to you.\r\n\r\nI have noticed this before as well when not especially paying attention, and then with the messed up view it is awkward to swap back.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340224303/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340254551", "body": "The font config options could probably do with being improved in general.\r\nI understand and quite like the JSON file for config changes, but I think there should be some other ways to interface with that config file as well.\r\n\r\nFont could do with a menu option/bindable command that allows you to make it bigger and smaller, that auto updates the config option as this happens. I find myself quite often attempting to show people code and realising that I have size 12px font, and its easier to swap editor and zoom than jump into the config file and edit it there, and then go back and edit it again when I'm finished showing them.\r\n\r\nI did have a quick look into adding that, but then I realised I don't think there is any way of saving back to the config file currently, so it seemed like something that should have a bit more thought than me just poking around and attempting to add it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340254551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341790569", "body": "Looks to be some logic for it in here as well: \r\n\r\nhttps://github.com/Microsoft/vscode/blob/d2f1fd4763b2312acf879bbcb3e9a2e386c1708b/extensions/typescript/src/features/completionItemProvider.ts#L179", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341790569/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341799527", "body": "Hopefully this will be fixed for you with #861, which was just merged in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341799527/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341843731", "body": "I'm just going through the 0.3 milestone at the mo and looking at issues.\r\nThis seems to be a lot better now, is this still an issue?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341843731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341858273", "body": "Looks like some version of this is happening for the video on the onivim website.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341858273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343197831", "body": "Yep, Oni is (for the most part) completely backwards compatible with NeoVim plugins.\r\n\r\nThere has been a few instances where some of the plugins UIs have not been correctly rendered or similar, but in general every vim plugin that I use has worked perfectly.\r\n\r\nI do think the Docs for this could be tidied up a bit since it is confusing, but my understanding is as follows: If you want, you can use the default neovim plugin folders, or you can use the specific oni folder and then that plugin will only be loaded in Oni.\r\nIf you are already a neovim user, then you are fine to continue using your existing plugin folders.\r\n\r\nMy dotfiles are available [here](https://github.com/CrossR/dotfiles/blob/master/neovim/.config/nvim/init.vim), so gives you an idea of the plugins I use with Oni fine, as well as a slightly different way of specifying Oni specific plugins.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343197831/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343248663", "body": "By default on Windows, I think it should go in `%APPDATA%/oni`, as @keforbes has said.\r\n\r\nTo my knowledge its where this style of files goes, at least for both VS Code and Notepad++.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343248663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343315432", "body": "Since #875 was merged in, this (and #326) can be closed I think, and we can make a separate more focused ticket on the final part of this which is to add a `gui_oni` feature. \r\n\r\nFrom the comments on #119 and browsing the VimR neovim fork, the only real thing to add is a single ifdef to `eval.c` and pass a flag for that to cmake, and then the feature should be baked in.\r\n\r\nI've tested this on my fork of neovim and it does indeed bake in the `gui_oni` feature, allowing my `init.vim` to swap to using `if has ('gui_oni')` instead of `if exists('g:gui_oni')` as it is currently.\r\n\r\nSo we could get a fork of neovim into the org with the feature added, which is easy enough. Creating the binaries may be a little more tricky, but thats just because I've not had to make the binaries for Windows / Mac before, which I assume someone else has! Then as far as I understand it, if the binaries are in the same form, we can just point the `oni-neovim-binaries` script at the new release in our fork. \r\n\r\nFrom there we can start to look into the more interesting bits, I see that VimR also has a few tiny changes to neovim (https://github.com/neovim/neovim/compare/master...qvacua:master), or I know that a web-assembly build was mentioned too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343315432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343924773", "body": "I've noticed this is because of the Symbol search keybind overlapping (both are Ctrl + T), and I've made a PR for it here so that the Symbol search only activates when the menu isn't open. #927 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343924773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344115057", "body": "Changing this is easy enough and I've got it in a branch, but I was wondering about what the Oni stance is on things like this, in what is basically a breaking(for lack of a better word) change.\r\n\r\nThe way I've done it means any other Windows Oni user would now need to move their config over from `C:\\Users\\CrossR\\.oni\\config.js` to `%APPDATA%\\oni\\config.js`.\r\n\r\nShould we accept both or what?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344115057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344376423", "body": "What I did was I went through the `oni-vim-defaults` config and moved over the stuff from their into my custom `init.vim`. For the stuff I didn't want, I removed it and for the stuff I wanted to be Oni exclusive (since I use neovim in the terminal on some machines etc) I wrapped them in an Oni-exclusive if statement.\r\n\r\nThis then let me set `useDefaultConfig` to `false` and know I was still maintaining what Oni wanted for the most part. That said, to do that I had to go through the code to find the defaults file, so maybe we could expose the default settings somehow?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344376423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344962280", "body": "Not actually changed any of the AppVeyor stuff before, would this just be adding `git submodule update --init --recursive` into the  `install:` section of `appveyor.yml`? Looks like that is the part ran straight after cloning.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344962280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344970029", "body": "To my knowledge there is as follows:\r\n\r\n* Editor Font Size\r\n* Status Bar Font Size\r\n* UI font size\r\n\r\nThe last one seems to affect both tabs and the status bar, which I think covers what you want? Changing just `\"ui.fontSize\" : \"48px\"` made both my tab bar and status bar fonts huge.\r\n\r\nDoes that help?\r\n\r\nFeels like as we add more and more config options, Oni is more and more in need of either a VS Code style search window through every setting and its default, or code completion style pop ups so you can just find the config options that way.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344970029/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345107804", "body": "The x64 build is still ongoing, but the x86 test has passed fine, and the logs show that it is correctly cloning the submodules now, by the looks of things.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345107804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345380543", "body": "Looks like both the Appveyor builds are fine now and I'm assuming the Travis failure is due to #971.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345380543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345440272", "body": "Worked fine for me at first, then when I enabled `\"tabs.showVimTabs\": true,`, it stopped working.\r\nMaybe the  logic is buffer specific and not considering tabs?\r\n\r\nhttps://github.com/onivim/oni/blob/105c707d156438deb85e95724a0df3365845f72b/browser/src/UI/components/Tabs.tsx#L179\r\n\r\nLooks like it isn't, only for the case of buffers as tabs.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345440272/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345443157", "body": "Currently it uses ` \"ui.fontsize\"`, which also changes the tabs and status bar, but it does seem that it would make more sense to base it on the editor size, at least to me.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345443157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345480814", "body": "https://github.com/onivim/oni/blob/105c707d156438deb85e95724a0df3365845f72b/vim/core/oni-plugin-typescript/src/FindAllReferences.ts#L22-L40\r\n\r\nI'm not fully sure what that code does, but it looks to be the culprit.\r\nAdd 1 to line and col, do the look up and then remove 1 from both.\r\n\r\nGetting rid of all the minus 1s seems to fix it for me though:\r\nLeft is with the fix and the cursor is on the very start of `Configuration`, right is without and its one line above and the col is off.\r\n\r\n![image](https://user-images.githubusercontent.com/10038688/32985874-8489f598-ccbc-11e7-9795-c5ed75d7737c.png)\r\n\r\nIf I'm not missing something, I can submit the PR for it, but I assume I probably am?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345480814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345529109", "body": "Have you tried adding `\"ui.animations.enabled\": false` to your `config.js`?\r\n\r\nThere was also a bug with the animations I think that was fixed in #946, so this might be fixed in the next release. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345529109/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345776999", "body": "I'll have a look at this now, adding a native option and fixing the existing `tabs.enabled` option.\r\nAfter that, I'll see if there is a more broad solution that works so we can apply it to the nicer looking tabs.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345776999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345879119", "body": "Just a heads up that your last commit / merge from master, the submodules for the vim plugins seem to have been deleted.\r\n\r\nI think this is because the PR was setup before the git submodules were swapped over to, then I assume the act of merging master with this change caused some issues. Sorry!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345879119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346128366", "body": "Shout up if the logic isn't right, there were a few different ideas in here so I could have got confused!\r\n\r\nI do agree with the general statement that buffers are more confusing to understand for a beginner in general, but because Oni surfaces the vim buffers in individual tabs I think that makes it the same as any other editor.\r\n\r\nAlso, it stops some of the confusing stuff that you can do in vim. You can run a plugin or execute a command that you found online and it swaps your buffer, or you'll open a new file with `vim file1 file2 file3`. As a new user? That is pretty confusing, you see a single file and its awkward.\r\n\r\nSince Oni defaults to showing all buffers in their own tabs, that confusing scenario goes away, you now have 3 tabs for those 3 files, which is what you expect. If Oni defaulted to showing vim tabs, then those scenarios could potentially still come up. (That should be true I think but when I just tried it in Oni I only got 1 tab till I cycled through, so maybe we aren't loading them correctly yet if they are passed on launch?)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346128366/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346360240", "body": "@hoschi, incase you didn't see, the tab config options have now changed on master. The config for tabs is now done through the `\"tab.mode\"` option, where there are 4 options.\r\n\r\n`\"tab.mode\": \"buffers\"` means show all buffers in Oni Tabs (the default).\r\n`\"tab.mode\": \"tabs\"` means show only Vim tabs in Oni tabs (which is what you have enabled now).\r\n`\"tab.mode\": \"native\"` reverts back to the vim tab UI, disabling the Oni Tab UI completely.\r\n`\"tab.mode\": \"hidden\"` disables both the Oni and Vim tab bar.\r\n\r\nI'm going to have a look into getting the modified state for all buffers in a tab as well now that is merged.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346360240/reactions", "total_count": 3, "+1": 1, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346709459", "body": "Yep, if you do a search for `useExternalPopupMenu` in the whole project, the only places it is used is in the Config definition and in the default config setup.\r\n\r\n`popupmenu_external` which it should be setting is just hard coded to true at the moment, so this looks to have a very similar issue to #992, where there used to be an option for this and it has become unused.\r\n\r\nIs true and false enough here again, or should there be more descriptive options / alternatives like no pop up at all?\r\nOtherwise the PR for this should be pretty straight forward.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346709459/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346951002", "body": ">IMO, editor.completions.mode isn't very clear, especially coming from Vim's world of omni-completion, keyword completion, etc..., so I'm leaning towards the first option: adding 'native' to editor.completions.enabled, as it is similiar to what we did for tabs - @CrossR @badosu does that seem reasonable?\r\n\r\nSeems reasonable to me, though I wonder if there is any other wording we could use instead of `true`/`false` values or perhaps a change in the option name? When I see booleans, I assume there is only 2 values to pick from, whereas here there would be 3.\r\n\r\nPerhaps something like `editor.completions.menuStyle`? That would let you have `oni`, `native` and `hidden`/`disabled`?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346951002/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348370549", "body": "I think I've implemented what was discussed, but due to editing the `CompletetionProvider.ts` check to be against `configuration.getValue(\"editor.completions.mode\")` and `\"oni\"`, it completely opts the user out of language server completions.\r\n\r\nIs that what we want from `hidden`? For native that seems fair enough, I don't know if we can inject to there, but for `hidden` they may just want the auto complete to stop kicking in, but still use it when they explicitly use the keybind. Or maybe that is more an argument for splitting the config more to have one that swaps it all to vim only completion in Oni UI vs Non-auto LSP Config.\r\n\r\nOtherwise, this should do what we want. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348370549/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348772897", "body": "To give an update on this, the newly released version has `editor.completions.mode`, which if set to `native`, should default you back to the vim pop ups.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348772897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348942928", "body": "There was a breaking change in the latest release:\r\n\r\nColorschemes - colorschemes must now be specified via `ui.colorscheme` in your `config.js`, as opposed to in the `init.vim`.\r\n\r\nCould that be the reason?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348942928/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349150238", "body": "This can probably be closed now, but the issue mentioned of \r\n\r\n> the externalized one jumps around too much (another issue I can investigate at some other time).\r\n\r\nis now happening to me on the current release, or at least something similar.\r\n\r\n![image](https://user-images.githubusercontent.com/10038688/33582979-e917fc86-d94f-11e7-967a-d230300c6b24.png)\r\n\r\nI should probably take a video to show it better, but basically it takes maybe half a sec to highlight the option for some reason. In the image I'm on 2, but it isn't highlighted yet.\r\n\r\nProbably worth separating out into a new ticket.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349150238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349260828", "body": "Have you tried setting `editor.fullScreenOnStart` to `true`?\r\nYou can also set `oni.hideMenu` to `true` to hide the File/Edit/Split bars.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349260828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349607977", "body": "Are you building from master or using the latest release (0.2.18)?\r\nIf its the latest release, its possible you are having the same issue as #1061, which should now be fixed on master.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349607977/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350361976", "body": "Just added a PR for this now finally.\r\nAs a side note, is there a second bug in that screenshot?\r\n\r\nOni is highlighting and shows a search for `container`, but the LSP is doing a search for `overlay-container` as far as I can tell. Its especially noticeable if you do it on `background-image` a few lines down whilst highlighting `background`. Every instance of the word background is highlighted on the line, but the LSP is only searching for `background-image`. The LSP functionality makes sense, I think the highlighting and search term just need fixing to reflect it too?\r\n\r\nIt looks to be as simple as updating the `getTokenRegex` to include `-`, but that could potentially cause issues with other languages. Is it worth adding language specific options, like how trigger characters work?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350361976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350505749", "body": "I can't talk on the Tap to zoom, but I know that zoom keybinds has been discussed before in #840. Using the work around in there, you can get temporary zoom, but Oni will need a way of saving config options if we want it to save that and persist over closing Oni.\r\n\r\nOnce we have a way to save values back, it should be a lot easier so people can bind increasing the font size instead of the zoom level, as zoom level causes both editor and ui fonts to increase in size, and causes some graphical issues with the scroll bar.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350505749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350570772", "body": ">Perhaps we can refine that search query somehow to get better results? We could also consider manage the highlighting ourselves, if that's not feasible.\r\n\r\nI think that would end up being pretty awkward, there is the simple case of check for word boundaries either side that would help it some what, but its also pretty common to have brackets or `:` or `=>` immediately following it, which would cause it to fail.\r\n\r\nI see there is already some parts of Oni that use `nvim_buf_add_highlight`, could we use that? Looks like Oni has some code that groups them up and sends them for a line, would it be possible for an entire buffer? Not sure how performant that would be though. Though that raises other issues as that only highlights a single buffer whereas a search is across all buffers as far as I know.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350570772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351724318", "body": "I think this is the right place to stick this, but maybe its worth a separate ticket so it can be more easily found / commented on.\r\n\r\nNow we have externalised Tabs, It'd be nice to start getting the more \"common\" tab management bits commented on, so in the future it can be added, since I've seen some of the make new Window stuff is being added etc.\r\n\r\nOf the top of my head, this includes : \r\n- Rearranging them.\r\n- Removing a tab to spawn a new instance.\r\n- Bringing a tab back in and combining the Oni instances.\r\n\r\nAll of them end up being pretty complicated I think, so I wanted to start some conversation around them.\r\n\r\nRearranging Vim tabs is easy, there is `tabmove`. Drag, send the command for the new index, done, I think? However, when that then becomes buffers, I think it becomes a lot more awkward. I don't know an equivalent command for buffers, but that could be that I haven't used it. And if we don't update the index, then commands like next buffer could move from Oni tab 1 to Oni tab 7, as they were index 0 and 1.\r\n\r\nRemoving a tab to spawn a new instance comes with issues like if the buffer is modified, plus contextual info like line number and cursor location, how do they get over to the new instance of Oni?\r\n\r\nBringing a tab back has all the same issues, but instead applied to loading into an existing Oni instance instead of a new one.\r\n\r\nHonestly, the second two are a lot less important for me, I mainly do that in editors where the split support isn't that good, which isn't the case in Vim. The first can be awkward, since I'll start going down the rabbit hole of where does the function go, and end up 10 files in, and then want to move Oni buffer tab 10 back to Oni buffer tab 2 so I can swap between them more easily.\r\n\r\nLuckily, that case is also solved by the style of editor it looks like @hoschi is working on, where instead of 10 whole files, I'd have the few relevant bits all next to each other!\r\n\r\nStill, I think the moving is stuff people expect, so it should probably be thought about, to determine if its needed and how it could be added.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351724318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351726617", "body": ">Actually, since this is blocking my personal experience with Oni too, if it's OK I'd like to begin with this issue as my first of #1120.\r\n\r\nMight be worth checking in on #1072, which is working on Externalising the Neovim commandline and potentially the wildcard menu. There is also #635 which contains a bunch of ideas and thought on stuff like this, and the context of swapping between Oni Commands / Vim Command Line, though I think that PR is now being kept around just for the comments as they haven't the time to work on it anymore. Feels like something like this would fit within that sort of work.\r\n\r\nBut certainly sounds cool to me, I've been using Vim for like 5 years and I still find some things I didn't know about. Would be a good bridge between Oni vimtutor (#430), letting a user do the tutor, and then still have a quick reference point for details once actually using Oni/vim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351726617/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351752705", "body": ">One question I had about the Vim commands - would we primarily show the : ex commands, or would we want to show things like Vim: Change in word with ciw? (Or even individual motion / operators) I'm envisioning the latter would likely be the most important in terms of getting users new to vim up-to-speed and productive.\r\n\r\nIf it is that style of command, I think a vim-sneak style UI would be beneficial. That helps teach about the different boundaries, so they see exactly what `ciw` will change, since I think for say `my_variable_name` it would change everything, where a user may think it would only change `variable` if they have that highlighted etc. If instead when they hover over `Vim: Change in word`, it highlights the area of effect, they get more feedback.\r\nThat said, it only works if the panel isn't covering the area affected.\r\n\r\nFeels like a v2 of this though, rather than the initial implementation, and obviously a flag to disable for once a user has go to grips with it all.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351752705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352280796", "body": ">It'd be great to have feedback on whether or not this would be useful in general, ways to improve, and the sort of achievements / goals that would make sense.\r\n\r\nI sent this to a friend of mine who know the basics of vim to use as an editor, (ie opening/saving/moving around with arrows/modes and a few \"advanced\" bits) but who doesn't especially know much past that except for if he looks it up or I go \"Oooh just found X its really cool\", and he thought it was a great idea!\r\n\r\nI think its very interesting as well! My first thoughts on it were as follows:\r\n* This first one is basically an entire feature in itself, but basically, if we notice the user uses h/j/k/l a lot and nothing else, maybe there can be some form of recommendation of \"Do you want to try the movement achievements?\", so the user knows to move on from the basic movements. Or even for an advanced user we could go \"We've noticed you've never used X feature...Did you know about it?\" This is a giant task in itself, but just a brain dump so its written down, since there is so much in vim I go \"Why on earth didn't I know about that before!\".\r\n* I assume this is the case, since the plugin system is being made to be easily extensible, but it might be nice to have some way to extend the achievements in some easy fashion. We can make them for a bunch of core vim things, but there is bound to be something we don't know, or a plugin we don't include, so having an extensible system would be useful for that. Again, this isn't really needed as part of an initial system, more just a potentially nice extra.\r\n\r\nI think that for granularity, for the basics, it seems appropriate to me to have individual ones, just to point them out more clearly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352280796/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352805900", "body": "There was also a comment on the gitter channel about the default config clobbering the user's custom List characters, since we set it to `set listchars=trail:\u00b7` which seemed to be overriding the users settings.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352805900/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352809630", "body": "There is some discussion around this in https://github.com/neovim/neovim/issues/1936 , where there is a suggested \"fix\".\r\n\r\nI can confirm that if I `set autoread` and then edit a file, the file doesn't update in Oni (or nvim-qt), but If I `:checktime` it will then update.\r\n\r\nWe could potentially add the suggested change to the Oni core `init.vim`, but I'm not 100% on the consequences or if there is a performance difference. Would probably be better to add it via on Oni config option, and set it that way, so that it isn't enabled for everyone?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352809630/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352916527", "body": "This should hopefully be fixed now in #1156.\r\nIf you build from master it should be working, or the next release will have this in!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352916527/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352917280", "body": "Forgot to stick an update in this issue!\r\nBug should be fixed now, and the latest release should have this update.\r\n\r\nHave you noticed if its working @hoschi ?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352917280/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352917611", "body": "I used to notice this, but in the latest release, it looks like its been fixed.\r\nCan this be closed now?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352917611/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352917892", "body": "Since #1097 fixed the default font unit, and there is #704 / #840 for the remaining two issues, think this ticket can be closed now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352917892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353486480", "body": ">I\u2019m not clear what the benefit of being buffer centric is.\r\n\r\nTo me at least, I find being buffer centric more new user-friendly, in most cases.\r\nThere were times when I'd open `vim file1 file2 file3` and then be confused where the 3 files had gone, and more confused when I tried to exit and it complained that I had more files to edit.\r\n\r\nBeing buffer centric means that situation, and any plugins etc that mess and open up buffers, or new users that open up buffers accidentaly etc, can more easily swap back.\r\n\r\nI might be biased since I took forever to get my head around the concepts of buffers.\r\n\r\nThat said... setting `tabs.mode` to `\"tabs\"`, should swap back to the Vim style tabs in Oni UI. (`\"native\"` gives the native Vim tabs and Vim tab UI if needed and there is an issue).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353486480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/126316380", "body": "Makes sense, I was wondering if there was an easier place to put something like this, since it doesn't read very nicely how I had it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/126316380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/126316410", "body": "Seems fair, when I use splits I find it more intuitive to use the Fuzzy File finder or similar to open a new split.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/126316410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/144105301", "body": "I should probably refactor this to just use the open command, so the logic isn't duplicated.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/144105301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152090132", "body": "Yep, that seems fair. Perhaps a `tabs.tabType` option instead for buffers/tabs/native vim tabs?\r\n\r\nThat would remove the need for both `tabs.enabled` and `tabs.showVimTabs`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152090132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152380475", "body": "In its current form, yes.\r\nWe need to check that the user isn't in native mode, because if they are they'll want normal vim tabs. Because we also have the `tab.enabled` option that needs to be checked too, since the user could have `tabs.mode === \"buffers\"` (the default) but `tabs.enabled` set to false.\r\n\r\nHowever....I'm not fully sure we even need the `tabs.enabled` option. Its only used in the places where mode is also used, and it gives the exact same functionality as setting `native` as far as I can see, since it only affects the visibility of Oni tabs. Unless its possibly going to be used in some other places, I think it could be removed now, as its just an option that can be achieved with `tabs.mode` being set to `native`.\r\n\r\nGetting rid of it would remove that tying, plus also just remove the confusion of having 2 options that achieve the same thing but in different ways.\r\n\r\nAm I missing something @bryphe ?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152380475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152405165", "body": "Ahhh okay,  I was forgetting the use case of not wanting a tabline of any fashion, I was only considering Oni Buffer/Oni Tab/Normal Vim Tabline.\r\n\r\nI'll push that up in a mo.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152405165/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155920667", "body": "Oni does have a \"Add to Path\" command, on MacOS at least, in the Ctrl+Shift+P panel I think. Should probably use that, since it is more easily removable and is done inside Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155920667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167379286", "body": "Think \"has improving\" should be \"as improving\" here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167379286/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167511600", "body": "Need to check that `nvim_call_atomic` will always return in the order its called, which is what I'm expecting.\r\n\r\n@bryphe, would you happen to know is this is the case?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167511600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167512645", "body": "I swapped this to be a number, since the non-mocked buffer's ID is a number.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167512645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167725238", "body": "I had a look over the documents + the PR that added `nvim_call_atomic` and I saw no mention it would return in any other order so I presume we are okay!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167725238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170077448", "body": "Possibly worth clarifying what we mean by link since it needs to be a PDF/Photo?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170077448/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171561647", "body": "The PR implies this should be off by default, so should this be true?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171561647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171579438", "body": "If possible, it may be worth using the file types that are stored in the config : https://github.com/onivim/oni/blob/master/extensions/images/package.json\r\n\r\nThen we'd only have 1 version of the truth, but I also don't know how easy it is to grab them values.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171579438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "mpancia": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1783", "title": "Allow for summary text to be displayed for all autocompletions", "body": "Presently, when using the `oni` option for `editor.completions.mode`, only the summary text associated to the currently-selected autocomplete option is displayed, like so:\r\n![screenshot from 2018-03-11 21-43-33](https://user-images.githubusercontent.com/7557730/37323205-738874f4-263f-11e8-845d-d8e0aff04b9c.png)\r\n\r\nI'd like the option to have all of them displayed, as in my `native` autocomplete:\r\n![screenshot from 2018-03-12 21-52-45](https://user-images.githubusercontent.com/7557730/37323247-bd3678e4-263f-11e8-820c-a8cf50f3b21a.png)\r\n\r\nThe `oni` completion looks much nicer, so I'd like to use it, but I also want that extra information! :)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1783/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "paperbenni": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1780", "title": "Doesn't work on windows 10 32bit", "body": "Hello, I'm having a problem with running OniVim on my 2 in 1 windows tablet running windows 10 32 bit, some shitty intel atom thingy and 2gb ram. On the releases page it sais that it's windows 32bit which seems to be true for the electron ui but not for neovim itself. OnVIm just opens up showing the title bar and the rest of the window is gray. I went into the program folder and tried to open the bundled version and it showed the error message that normally occurs when you try to open a 64 bit program on a 32bit machine. Has anyone even tested onivim on win32 since x86 on windows is basically dead, even on laptops? Would be nice if you could fix that. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snewell92": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1778", "title": "Some strange behavior with :w on WSL with an angular hmr project", "body": "I'm not sure if this is intended or not, but basically I had the basic hmr setup for angular, but in Oni when I saved a file with `:w`, that update would not propagate all the way into the browser. It would trigger a rebuild, but the browser's log said \"nothing new\" basically.\r\n\r\nThen I switched to VSCode, and the updates would get into the browser.\r\n\r\nDoes Oni, when `:w` is executed, just store that change in a buffer and not write out? Or does it trigger a change before fully flushing it out so this is more of a race condition? When I reloaded the file in VSCode, the change was there, so I'm not sure.\r\n\r\nIf anyone would like a more step-by-step repro, or gist, or repo, just let me know. I had literally just one component in my angular app, so it is a pretty minimal repro; only manual step is setting up the hmr.\r\n\r\nThanks! \u2764\ufe0f ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bryphe": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1774", "title": "Configuration: Add instructions for debugging", "body": "We should add to our wiki instructions for debugging the configuration. It's actually really straightforward - you can add a `debugger` statement in your config, and just pop open the devtools.\r\n\r\nHowever, we should enable sourcemaps in the `TypeScriptConfigurationEditor` for a better experience.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1750", "title": "Outline showing on Menu when clicking on it with mouse", "body": "I was playing around with the Menu (QuickOpen - `Control+P` / Command Palette - `Control+Shift+P`), and just noticed that when clicking inside the menu, we get a yellow outline border:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/37181002-11d0d132-22e0-11e8-8ce0-94349fa1621e.png)\r\n\r\nI believe this may be a result / regression from switching to `react-virtualized`. Might just need some styling tweaks on one of the containers here:\r\nhttps://github.com/onivim/oni/blob/bffb10f4c9808261259061bb0f9416a351b555c0/browser/src/Services/Menu/MenuComponent.tsx#L86", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1742", "title": "Theming: Create theme colors for error / warning", "body": "Pointed out on discord channel - the error / warning colors we're using don't look 'in-sync' with the themes:\r\n![https://media.discordapp.net/attachments/417774914645262341/421287143269466112/unknown.png](https://media.discordapp.net/attachments/417774914645262341/421287143269466112/unknown.png)\r\n\r\nWe should enable theming for this support, and pick colors that better match the color schemes.\r\n\r\nSome proposals:\r\n`error.background`\r\n`error.foreground`\r\n`warning.background`\r\n`warning.foreground`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1736", "title": "Snippets: Create workspace snippets provider", "body": "It'd be great to have a parallel snippets provider to the `UserSnippetsProvider`, that is per-workspace. It's often the case that each workspace has its own coding standards / boilerplate, and having per-workspace snippets makes a lot of sense.\r\n\r\nThe implementation would be very similiar to the `UserSnippetsProvider` - just the path is different, and we need to update it (or create a new instance) whenever the workspace changes:\r\nhttps://github.com/onivim/oni/blob/7ad938cbcfe8b25acd2d358e3e3cb94f4a00953c/browser/src/Services/Snippets/UserSnippetProvider.ts#L37", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1735", "title": "Snippets: Create UltiSnips snippet provider", "body": "For snippets, it'd be helpful and convenient to automatically import users `UltiSnips` snippets. We'd need to parse and convert them into our snippet format, and then implement a `SnippetProvider` for them. [UltiSnips](https://github.com/SirVer/ultisnips) is extremely popular and having integration out-of-the-box would be awesome.\r\n\r\nSome info on the API here:\r\nhttps://github.com/onivim/oni-api/blob/90bc638bc598f7ba0175abb68f5313a9da1280df/src/index.ts#L66\r\n\r\nWe have a snippet provider that loads user-defined snippets here:\r\nhttps://github.com/onivim/oni/blob/7ad938cbcfe8b25acd2d358e3e3cb94f4a00953c/browser/src/Services/Snippets/UserSnippetProvider.ts#L37\r\n\r\nThis would be a good example to follow - the trickiest part will be in implementing the parsing / conversion logic to go from the UltiSnips.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1593", "title": "TypeScript: Hook up auto-import functionality", "body": "Splitting out from #1326 - integrate 'auto-import' functionality from TypeScript. This should generalize to other completion providers, too.\r\n\r\n- Implement `additionalTextEdits` and `textEdit` for `CompletionItems` as defined by the completion request in the language server protocol: https://microsoft.github.io/language-server-protocol/specification\r\n- Update our `TypeScriptServerHost` to send `additionalTextEdits` for auto-imports. This will involve settting the `includeExternalModuleExports` for the completions request, hooking up entry details resolution to get information about the additional code actions as part of the details request, and resolving those code actions to text edits. Looks like we'll need to plumb the 'source' through somehow, as this is needed when calling to get details.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1562", "title": "Sidebar: When 'sidebar.enabled' is false, get errors when trying to find in files", "body": "Following the discussion from #1555 :\r\n\r\nOne bug I did notice though, when `sidebar.enabled` is `false` (after #1555), and I try and 'find in files' with `Control+Shift+F`, I get an error:\r\n![image](https://user-images.githubusercontent.com/13532591/36218374-f8ffe856-1168-11e8-93c7-d23761052d1d.png) \r\n\r\nWhat we might want to eventually do is _always_ create the sidebar + sidebar content pane, but if `sidebar.enabled` is `false`, we just hide them (or they start hidden, and we only `show` them if `sidebar.enabled` is true`). Then, if a user does `Control+Shift+B` to toggle the sidebar, or `Control+Shift+F` to find in files, we can make it visible.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1562/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1554", "title": "Control-P in explorer split doesn't open file finder", "body": "__Issue:__ `Control+P` in the explorer split doesn't open the quick open menu (rather, it moves back a line).\r\n\r\nIt's easy to repro by navigating to the explorer split (`<C-w><C-h>`), and then pressing `Control-P`. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1463", "title": "Browser: Implement Control+L/Command+L shortcut", "body": "Implement a `command+l`/`control+l` shortcut for editing the location", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1438", "title": "Automation - CiTests: Make debugging easier", "body": "Debugging the CiTests isn't very straightforward today. Once #1436 and #1437 are addressed, and it's easier to run/iterate on them, this will definitely be the next pain point.\r\n\r\nA few possibilities we could have to make this easier:\r\n- Add a `npm run debug:test:integration` command, that opens a debug window and stops at a `debugger` prior to executing the test.\r\n- All the `npm run debug:test:integration` to take some sort of filter that is scoped to a particular test (so we don't have to run them all).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1383", "title": "Error Handling: Startup", "body": "This is tracking adding some better error-handling in startup, to give the user feedback when there is an issue on startup. Coming from @Akin909 's comments in #1381:\r\n\r\n> A solution to this is that the changeDir function should always check that the directory it is passed is valid before attempting to switch to it. A more general issue is that I think every function or rather main startup process should have a try/catch or some form of error handling so that oni doesn't end up hanging without any feedback given back to the user\r\n\r\nWe should do the following:\r\n- Wrap our 'start' call in a try/catch so that we can get errors\r\n- Have some UI affordance for showing an error UI (perhaps in `Shell`?). This could show any errors logged, as well as give the option for opening up a debug window. We could also potentially show an error notification once #1358 is in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1349", "title": "Feature: Generalizing Preview", "body": "I love the work @TalAmuyal did on markdown preview - getting the _instant feedback_ as you are working is so critical to a productive workflow. IMO there's no reason w/ today's computers that we should have to _wait minutes_ to see the result of our changes - markdown, code, etc.\r\n\r\nI'd like to investigate and see how we can __generalize__ the approach we have for markdown preview to other sorts of previewers:\r\n- HTML would be an obvious candidate for a preview system\r\n- React components - I'd love to be able to preview react components in isolation, in a pane, as I'm working on them.\r\n- Test cases - I could use a 'preview pane' to show the results of test cases, as I'm working on them.\r\n\r\nSome commonalities I see, from looking at these scenarios and the work @TalAmuyal did:\r\n- We need a way to listen to buffer updates, and have the previewer respond\r\n- We need a way to listen for other updates, like scrolls / enters\r\n\r\nWe also can eliminate some duplicate work - it'd be nice if each preview strategy didn't have to reinvent its own `IEditor` or `IWindowSplit`.\r\n\r\nI'm thinking of an API like:\r\n```\r\nOni.previewers.registerPreviewer(previewerId: string, previewer: IPreviewer)\r\n```\r\n\r\nWhere `IPreviewer` might look something like:\r\n```\r\ninterface IPreviewer {\r\n   onBufferChanged(bufferChangeEvent: evt):void\r\n   onBufferEntered(bufferEnterEvent: evt): void\r\n   onBufferScrolled(bufferScrollEvent: evt): void \r\n   render(): JSX.Element\r\n}\r\n```\r\n\r\nIt's essentially just another component that renders a `React` component, and can listen to events to decide to re-render.\r\n\r\nThen, I'd like to add configuration options to decide how to match files to a specific previewer. I don't think `filetype` is sufficient for this - for example, I might have a `.js` file I want to use the `ReactPreviewer` on, but I might have another `.js` file that I wish to use a `MochaTestResultPreviewer` on - so I believe we'll need some sort of configuration mapping, like:\r\n\r\n```\r\nexport configuration = {\r\n    \"workspace.previewMappings\": [{\r\n         filePath: \"lib/src/**/*.js\",\r\n         previewer: \"ReactPreviewer\",\r\n     }, {\r\n        filePath: \"lib/test/**/*.js\",\r\n        previewer: \"MochaTestResultPreviewer\",\r\n     }]\r\n}\r\n```\r\n\r\nThis fits in well with the project-specific settings in #68 , since it should be specialized for a workspace / project.\r\n\r\nFinally, to make it 'live', we'll need to connect the source files -> output files. For example, in our project, we'd need a React TypeScript component to be compiled to js, and then picked up. We'd want to have a set of 'watchers' run that could take care of this for us.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1349/reactions", "total_count": 4, "+1": 2, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1302", "title": "White rectangle on startup", "body": "On startup, on my Windows machine, I see an intermittent 'white rectangle' show up:\r\n![image](https://user-images.githubusercontent.com/13532591/34967282-61d0fcc2-fa16-11e7-8ec4-7e38545399e0.png)\r\n\r\n\r\nI wonder if this is related to some resizing that happens on initialization?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1259", "title": "Linter integration (`eslint` support)", "body": "Pulling this out from #659 - there was a question about supporting `eslint` as well. In addition, we use `tslint` heavily in this project.\r\n\r\nIt would be helpful if there was a way to integrate linters. We do support the `Oni.diagnostics` API, which allows for a plugin to push up diagnostics (like errors) - perhaps that is sufficient? \r\n\r\nFor `eslint`, potentially following the same pattern as `oni-plugin-tslint` would make sense - where it listens for buffer update events, and then runs the lint strategy against it, and pushes the errors up via the `diagnostics` API.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1226", "title": "Feature: Start / Welcome Screen", "body": "Today, Oni is not very welcoming to the new user, especially a new user who is not familiar with Vim.\r\n\r\nAs part of our _lowering the bar_ initiative, we should provide a better experience on first launch. Here's a brain dump of some ideas I'm thinking of including on the main page:\r\n\r\n- Header + tagline (Oni: Modern Modal Editing?)\r\n\r\n- Get started\r\n  - New File\r\n  - Open Folder\r\n  - Command Palette (`<Control+Shift_P>`)\r\n- Recent (list files / workspaces)\r\n- Learn\r\n   - (TBD) Modal editing 101 (entry point to our gamified vim tutor)\r\n   - (TBD) Entry points for achievements / goal feature\r\n- Customize\r\n   - Edit `config.js`\r\n\r\nMaking this keyboard accessible via standard vim commands is important, of course :)\r\n\r\nLet me know if you have ideas / feedback!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1226/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1225", "title": "Feature: Session Management / Persistence", "body": "Session persistence / management is a feature that's been asked for a few times. Vim / Neovim luckily have some great session management tooling built-in - like `mksession`. In addition, there may be some particular UI state we should persist as well.\r\n\r\nIMO, a reasonable default is to persist the session state when closing - we should give the `IEditors` a chance to persist any data that they need, and be able to rehydrate that on load. \r\n\r\nOpening this up for feedback / ideas, as it's been requested a few times \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1225/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1216", "title": "Rendering issues with 'vim-choosewin'", "body": "Testing out `vim-choosewin`, I see some strange rendering artifacts when attempting to use the `choosewin` functionality.\r\n\r\nRepro steps:\r\n- Install `vim-choosewin` plugin\r\n- Launch Oni\r\n- Open `NeovimInstance.ts`\r\n- Split window: (`:vsp`)\r\n- `:nmap - <Plug>(choosewin)` (Bind `-` to choosewin command)\r\n- Press `b`\r\n- Press `G` to scroll to end:\r\n\r\n\r\nExpected: Rendering should not be impacted by the choosewin functionality\r\nActual: Rendering is totally messed up:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/34497496-a79e94ee-efb2-11e7-81cb-8f3713c661f3.png)\r\n\r\nI believe there may be a special scroll case we are hitting here that is not exercised in common usage, but hit by this particular plugin. We should investigate because there may be other ways to get into this bad state.\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1186", "title": "TextMate: Add textmate grammar for python", "body": "We should add TextMate grammar files for python", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1136", "title": "Plugin: Add a scaffolding generator for Oni plugin", "body": "Was looking through @samvv 's Pencil project, along with the issues: https://github.com/AthenaHQ/Pencil/issues - it's interesting how much overlap there is! \ud83d\ude04 \r\n\r\nI wanted to port this issue over: athenahq/pencil#3, which is tracking creating a generator to create a plugin. This is really important in order to get people to start building extensions and consuming the API - I like the idea of having a [Yeoman](http://yeoman.io/) generator for creating plugins.\r\n\r\n<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1136/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1135", "title": "Feature: Goals / Achievements", "body": "(I like the format of @kkd705's feature proposal, so I borrowed it!) This is another idea for lowering the bar / discoverability, specifically for editing commands.\r\n\r\n## PROBLEM\r\n\r\nIt's challenging to get started with modal editing. I'm sure lots of people are familiar with this graph of Vim's learning curve:\r\n\r\n![learning curve](https://pascalprecht.github.io/public/vim-learn-curve.jpg)\r\n\r\nA key issue is discoverability - how do I know what commands to use? How do I know what keypresses are relevant in a particular mode? How do I commit commands to memory?\r\n\r\nOne tip that I used while I was getting started with Vim was the sticky note method - I would put 3 new vim commands on a sticky note on my monitor. Once I was comfortable with those commands, I would switch to some newer ones. However, with the UI affordances that Oni has, I believe we can do better - and even gamify this.\r\n\r\n## SOLUTION\r\n\r\nThe idea is that, we have a set of commands available in each mode. Each command will have an associated goal. For example, use the 'word' motion 50x. Every time the motion is used, we'll bump up a graph in the 'learning' pane.\r\n\r\nOnce a learning goal is met, we'll pop up a quick UI, inspired by the achievement UI in consoles.\r\n\r\nThis would accomplish two things:\r\n- Make learning new commands/motions _discoverable_\r\n- Help users learn commands/motions they don't use frequently\r\n\r\nA key note is that these achievements are, in general, __modal__ - that means that, as the user changes modes, we'll automatically show them the goals or achievements that are relevant to that mode.\r\n\r\n## EXAMPLE\r\n\r\nThe user could open the goals pane via a command-palette entry, like:\r\n![goals-quickopen](https://user-images.githubusercontent.com/13532591/34053805-0d37b770-e17d-11e7-818c-b35721573950.png)\r\n\r\nWhich would then expose a sidebar with the list of goals/achievements:\r\n\r\n![goals](https://user-images.githubusercontent.com/13532591/34053748-db292502-e17c-11e7-9e57-dd04f6485a94.png)\r\n\r\nAs the user progresses, the bar would increase / show some animation to make it fun. Then, we could even show console-game-like achievements:\r\n\r\n![achievement](https://user-images.githubusercontent.com/13532591/34053845-320a4a18-e17d-11e7-86af-1c821b222323.gif)\r\n\r\n> NOTE: A key element not shown is that, as the user switches modes, it would highlight a different set of achievements, that are specific to that mode. It'd be helpful to have a mode 'selector' that the user could use to choose which set of accomplishments to view, and it would automatically switch as the user changes modes.\r\n\r\n## IMPLEMENTATION IDEAS\r\n\r\nCreating the UI is relatively straightforward. The major challenges are:\r\n- Getting the right hooks / learning when one of these 'goals' is acted on. Would this be at the keybinding level? Something in VimL? etc\r\n- How do we specify and document the hooks? For multi-step actions over time, using something like an _epic_ or a _saga_ might be helpful.\r\n- How to handle custom keybindings?\r\n- Where to persist this data?\r\n- What's the right level of granularity? In the example I showed achievements for `h`/`j`/`k`/`l` individually, but perhaps it would be better to group them into an achievement like \"Arrow keys not needed\"\r\n- What set of goals / accomplishments should we start with? \r\n\r\nWe could also have some fun hidden \"achievements\" like:\r\n- \"VIM MASTER\" - Quitting with `:q` X times :)\r\n- \"BLASPHEMY\" - Using arrow keys or mouse to navigate X times\r\n- Something about having lots of splits open...\r\n- \"TWEAKER\" - Modifying configuration\r\n\r\n## OTHER CONSIDERATIONS\r\n\r\n- The user should also be able to 'pin' achievements that they want to remember in the achievements pane.\r\n- It should be _very very_ easy to disable this, __and opt-in__, as it would be annoying to the experienced vim user.\r\n\r\nMy prototype branch where I created the screenshot is: [bryphe/proto/achievements](https://github.com/onivim/oni/tree/bryphe/proto/achievements)\r\n\r\nIt'd be great to have feedback on whether or not this would be useful in general, ways to improve, and the sort of achievements / goals that would make sense.\r\n\r\nAlso, if anyone is interested in taking this on, feel free to run with it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1135/reactions", "total_count": 7, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 7}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1129", "title": "Performance: Typing is painting entire row", "body": "I was doing some benchmarking of the pre-release 0.2.19 build, and saw there is still one issue with the typing performance:\r\n![paint-performance](https://user-images.githubusercontent.com/13532591/34013294-b5ed3d2a-e0cb-11e7-9acc-f0d6c65a0b07.gif)\r\n\r\n(You can reproduce this by using the 'Rendering' -> 'Paint Flashing' tool in the dev tools).\r\n\r\nAs we type, the _entire row_ gets repainted - this is not ideal and is a cause for unnecessary latency in the typing operation.\r\n\r\nIt looks like there are two contributing factors:\r\n- The `<KeyboardInput>` we use to manage IME is causing paint, even though its opacity is 0. It looks like promoting it to a layer (`transform: translateZ(0px)`) solves this. It's strange that it's painting with opacity 0, though.\r\n- The canvas seems to be redrawing the entire string of tokens, instead of just the last one (as would be expected). Need to investigate further.\r\n\r\nIn addition, as part of this issue, we should investigate a proactive strategy to prevent this from regressing build-over-build. The `webContents` actually exposes a `paint` event: https://github.com/electron/electron/blob/master/docs/api/web-contents.md\r\n\r\nA reasonable test case might be to validate that the paint rectangle does not exceed a certain area after typing.\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1129/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1093", "title": "Feature: Show file content in real-time with QuickOpen", "body": "Came from @chenglou's feedback on twitter:\r\nhttps://twitter.com/_chenglou/status/939309997560807424\r\n\r\nJust found out that Sublime Text show's file content in real-time when you're navigating through their file open / `C+P` experience. This sort of instant feedback is very helpful in terms of orienting in a large project, and cuts down on mistakes where we navigate to the wrong file - would be great to incorporate into Oni.\r\n\r\nIt seems doable as Neovim is so quick to open files - even large files. \r\n\r\nThe easiest way to approach this would be to simply open the file in the background (potentially hide the tab while the user still has QuickOpen up, so that it is not a jarring experience), and close it if the user changes selection or cancels the QuickOpen session.\r\n\r\nWe'd also want to gate this with a configuration setting, like `editor.quickOpen.instantPreview` - I'd be curious if the above strategy could interfere with any vim plugins, and if it did, it'd be important to be able to turn this off.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1055", "title": "Input: Support chorded key-presses", "body": "Today our `InputManager` does not handle chorded key presses, like `inputManager.bind(\"jk\", () => { ... })`. \r\n\r\nIt'd be great to be able to handle this, as it would be one less case where a user has to 'eject' from Oni's input configuration to go to their `init.vim`.\r\n\r\nSome considerations:\r\n- We'd need a setting for how long to 'wait' for the binding to complete\r\n- We'd need to decide how to handle the case where both `j` and `jk` are bound - AFAIK, Vim actually waits for the time with a single press, unless it is cleared by another key press that is unmapped.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1051", "title": "Theming: Allow specifying of token colors in json themes", "body": "TextMate themes give us a finer granularity through 'scopes' in terms of colorized tokens, as opposed to the default conventional groups in Vim themes.\r\n\r\nWe should take advantage of this by allowing specification of token colors in themes, and giving real fine-grained control.\r\n\r\nTwo specific pieces of work:\r\n- Today, TextMate themes only use existing highlight groups - we need to extend this capability so that they can specify new highlight groups\r\n- TextMate themes already use the `editor.tokenColors` to colorize, but we need to pull that from the theme as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1051/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1048", "title": "Completion: Ignore triggering in comment scopes", "body": "Today, as you start typing a `//` comment, you'll see the completion menu flicker - we have `/` defined as one of our trigger characters. We should add a way to specify scopes that are valid / invalid for trigger characters.\r\n\r\nFor example, for `/` in TypeScript, we really only want that to be valid in strings.\r\n\r\nThe TextMate highlighting gives us the tools to evaluate the scopes, so that is a pre-requisite. The other aspect we need to think about is the syntax for configuring these rules.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1040", "title": "Implement mini-map scrollbar", "body": "A popular feature in editors is a mini-map scrollbar - once we have TextMate highlighting, we can easily colorize and tokenize the buffer, which would unblock implementing something like this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/973", "title": "Examine / improve (minimize) Oni's default VimL settings", "body": "Both @badosu & @hkupty gave good feedback on our VimL settings [here](https://github.com/onivim/oni/pull/915#issuecomment-345285924) and [here](https://github.com/onivim/oni/issues/929#issuecomment-345294294)\r\n\r\nSome common feedback:\r\n- Settings in VimL are causing pain - the defaults (especially the ones in `oni.useDefaultPlugins` cause issues). The ones in particular here are the tabstop settings + the tnoremap settings.\r\n\r\nThe main goals I have for Oni are that it _works out of the box_, with zero configuration - so when someone downloads it and runs it, they can get the complete experience. For example, trying to save people from the pain I went through trying to set up YCM on Windows \ud83d\ude03 \r\n\r\nIn addition, it should be easy to bring in your `init.vim` settings - that is, after all, a big selling point of a Neovim-based UI - without having to dig too deep into Oni settings.\r\n\r\nOne way to simplify this is to remove the (opinionated) defaults we have, and set the ones that are truly needed as default settings. This would mean pruning the `init.vim` that is used when `oni.useDefaultPlugins` is `true`: https://github.com/onivim/oni/blob/master/vim/default/bundle/oni-vim-defaults/plugin/init.vim\r\n\r\nSettings that we __can definitely remove__ (these belong in my `init.vim`, not in Oni...):\r\n```\r\n\" Helpers for command mode\r\n\" %% for current buffer file name\r\n\" :: for current buffer file path\r\ncnoremap %% <C-R>=fnameescape(expand('%'))<CR>\r\ncnoremap :: <C-R>=fnameescape(expand('%:p:h'))<CR>/\r\n\r\n\" Make Control+nav keys functionality in insert mode\r\ninoremap <expr> <C-a> pumvisible() ? \"<Esc>A\" : \"<C-o>A\"\r\ninoremap <expr> <C-b> pumvisible() ? \"<Esc>bi\" : \"<C-o>b\"\r\ninoremap <expr> <C-l> pumvisible() ? \"<Esc>la\" : \"<C-o>a\"\r\n```\r\n\r\nSettings that can be __replaced with an Oni setting__ (configured via `config.js`):\r\n\r\n##### Proposed: Add a setting for `terminal.escToExit`\r\n```\r\ntnoremap <Esc> <C-\\><C-n>\r\n```\r\n\r\n##### Proposed: Add a `vim.colorscheme` setting (#950)\r\n\r\n```\r\ncolorscheme onedark\r\n```\r\n\r\n##### Proposed: Create Oni settings for tabstops (inspired by VSCode's settings: https://stackoverflow.com/questions/29972396/how-to-set-tab-space-style)\r\n- `editor.detectIndentation`\r\n- `editor.insertSpaces`\r\n- `editor.tabSize`\r\n```\r\nset tabstop=4\r\nset shiftwidth=4\r\nset softtabstop=4\r\nset expandtab\r\n```\r\n\r\nSettings that @badosu called out in #929 that we could move to the core configuration:\r\n```\r\nset number\r\nset noswapfile\r\nset smartcase\r\n\r\n\" Turn off statusbar, because it is externalized\r\nset noshowmode\r\nset noruler\r\nset laststatus=0\r\nset noshowcmd\r\n\r\n\" Enable GUI mouse behavior\r\nset mouse=a\r\n\r\nset list\r\nset listchars=trail:\u00b7\r\n```\r\n\r\nWhich could potentially be overridden in someone's `init.vim`, so we'd want to document which settings can potentially cause conflict with Oni (or even have Oni warn you).\r\n\r\nInterested in thoughts on this - let me know what you think. The north star is that Oni __works great out of the box__, is __simple to configure__, and __easily works with your `init.vim`__, no drama.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/973/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/948", "title": "Investigate integration with `teletype-client`", "body": "Collaborative editing in VSCode and Atom is a really cool (new) feature - and looks like Atom implemented in an editor-agnostic way via their `teletype-client` library.\r\n\r\nInvestigate the feasibility of integrating this with Oni", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/948/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/938", "title": "Version to Version Upgrade (Backwards Compatibility)", "body": "## Version-to-Version Upgrade (Backwards Compatibility)\r\n\r\nCurrently, the statement on our README is to consider Oni 'unstable' and that updates may break your configuration, API may not be compatible, etc... and we've certainly been exercising that \ud83d\ude04 We've been in the \"move-fast-and-break-things-mode\"\r\n\r\nI'd like to start investigate ways for us to provide a better experience in version-to-version upgrade, and incrementally improve. The ideal end-goal for Oni (for v1) is that we gracefully handle version-to-version upgrades, and users can be confident that updates won't break them or their config. This is especially important for auto-updates.\r\n\r\nIMO there are two separate pain points today: _regressions_ (like the `Control+T` in QuickOpen) and API changes or other user data changes. This issue is primarily addressing the latter (I hope that we can build a better 'safety net' to prevent regressions via tests).\r\n\r\nA great litmus test for this is the config migration work - ideally, when users open up a version of Oni from the previous one, we can know to migrate the old schema to the new schema.\r\n\r\nI'm thinking as __high-level architecture__, we could have the following.\r\n\r\n- The `version` of our data schema would be a monotonically increasing integer (I don't think we'd need the complexity of semver). We'll call this `ONI_DATA_VERSION`.\r\n- We would keep a _counter_ of our data version. This would be _persisted locally_ on the machine (either a file, like `oni.version` or via `localStorage`). \r\n\r\nThe `ONI_DATA_VERSION` would be incremented when something in our data schema changes (essentially, something that needs upgrade logic). This will probably be incremented much less often than our actual releases, and will be decoupled from the version in `package.json`. \r\n\r\n- We would have a `VersionToVersionUpgrader` that runs on startup of the app. This would check the local value of `ONI_DATA_VERSION` and compare it with the build's `ONI_DATA_VERSION`. If the builds `ONI_DATA_VERSION` is > than the local `ONI_DATA_VERSION`\r\n\r\n- The actual work of the upgrade will be handled by an `IUpgrader`, which would look like this:\r\n\r\n```\r\ninterface IUpgrader {\r\n   fromVersion: number\r\n   toVersion: number\r\n\r\n   // Actual upgrade logic, like copy config to new location\r\n   upgrade: Promise<void>\r\n}\r\n```\r\n\r\nAnd the idea is we'd run each `IUpgrader` in a chain until we get to the latest `ONI_DATA_VERSION`. So it might be the case that a user has a config at `ONI_DATA_VERSION` 1, didn't use the app for a long time, and then starts using it again after upgrading, and now the build is at `ONI_DATA_VERSION` 5 - we'd run the 1- > 2 upgrader, then the 2->3 upgrader, etc.\r\n\r\nIdeally we can minimize changes that require an `IUpgrader` as much as possible. Additive changes to the API / configuration are good, and in some cases we might not be able to automate the changes, but we could at least give the instructions.\r\n\r\nOne pre-requisite for this is that we need to have a more disciplined `startup` logic - it's sort of ad-hoc right now with a bunch of components being instantiated and rendering happening in `index.tsx` and `UI/index.tsx`. But it'd be nice to have a promise queue to execute our startup tasks, and potentially parallelizing some - things like discovering plugins, loading config, running upgrades, starting Neovmi, etc. The upgrader would need to be `blocking` in that we would not want to load the config or start neovim until it has executed.\r\n\r\nJust my thoughts on this - feel free to leave feedback!\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/938/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/874", "title": "LSP: Use trigger characters provided by server if specified", "body": "", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/840", "title": "Add `window.zoomLevel` setting + default key bindings", "body": "An issue that was mentioned frequently in #837 is that it isn't easy currently to toggle zoom settings.\r\n\r\nIt'd be great to have an easy way to set this up. A few things we could add to make this easy:\r\n- A `window.zoomLevel` setting - this would use the `setZoomFactor` setting available on the [WebContents](https://github.com/electron/electron/blob/master/docs/api/web-contents.md) object.\r\n- A `window.zoom.increase` (bound to `<C-=>` by default and `window.zoom.decrease` command bound to `<C-->` command.\r\n\r\nAnother issue is that it isn't easy today to programmatically set configuration values, outside of the initial read. I'd also propose adding the following items to the API surface:\r\n```\r\nOni.configuration.setValue(propertyName: string, value: string, persist?: boolean)\r\n```\r\n\r\nThis would allow for late-setting of properties, for example: `Oni.configuration.setValue(\"window.zoomLevel\", 2.0)`.\r\n\r\nThe most interesting property is the `persist` flag, which, if set, would be stored to localStorage (or a persisted file), so that it could persist between sessions. Use cases for this would be storing things like window size, open folder, etc. It's not straightforward to write-back to our configuration file as-is (since it is `js` and not `json`) - but we still want to be able to persist some of these settings.\r\n\r\nThe downside to persisting values outside of `config.js` is that it isn't transparent to the user what values are set, and this could be confusing and a source of issues - it'd be nice to be able to see/edit those as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/704", "title": "Improved configuration troubleshooting in case of an error or conflicts", "body": "Since Oni's configuration is programmatic, encountering and fixing errors will happen over the course of customization.\r\n\r\nIt should be as easy as possible to diagnose that there is an issue with the configuration, and be pointed directly to the problematic line.\r\n\r\nA few ideas:\r\n- Instead of the alert box, we should a UI dialog that shows the line with the failure in context, and an option to 'Go fix configuration'. This is inspired by the react-hot-loader aspect.\r\n- When editing the config.js, we should give real-time feedback on errors.\r\n- We can show a statusbar indication when there is a problem with the configuration.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/699", "title": "Show Log Enhancements", "body": "For the 'Show Log' functionality, I'd like to revisit and add the following capabilities:\r\n- Use common window management (Like #637)\r\n- Use keyboard accessibility common to Vim (Like #637)\r\n\r\nI am pulling it out temporarily for performance (the throughput in the redux store caused problems, as additional logging was added, exacerbating existing render issues for some components), and to fit this new UI extensibility model, but would like to bring it back. \r\n\r\nIn the interim, logs get plumbed to the dev tools (`Control+Shift+P` -> `Open Dev Tools`)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/680", "title": "Bundling UltiSnips with Oni", "body": "Snippets are incredibly useful in the process of going from _though to code_ as quickly as possible.\r\n\r\nThe goal is for Oni to have snippets support, and a native UX. [UltiSnips](https://github.com/SirVer/ultisnips) is the de-facto standard for snippets in the Vim world, and as opposed to waiting for #55, it might be better to bring in UltiSnips so that snippet support can work out-of-the-box today.\r\n\r\nUltiSnips has an anonymous snippet capability, which may allow some interesting bridging from Oni <-> snippets (ie, the _js interpolation_ feature). \r\n\r\nIn any case, any snippet functionality Oni has would need to support the use cases UltiSnips has today.\r\n\r\nUltiSnips is the first dependency that we'd bundle that would have a Python dependency.\r\n\r\nLinux and OSX would mostly work out-of-the-box, since python is installed - but issues like #649 may need to be addressed if python is in a non-standard path.\r\n\r\nFor Windows, python doesn't come standard - so we'd have to bundle a standalone python with Oni. We could unpack this during install, but not include it in the system path so as not to conflict with other installed Python dependencies.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/680/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/614", "title": "Feature: Search & Replace", "body": "For Oni, I'd like there to be an embedded / native search and replace capability, with the ability to find across files, and replace across files.\r\n\r\nThis should be easy to navigate, and I should be able to use the existing keybindings and knowledge I have in navigation through neovim/buffers in order to leverage this UI and the results.\r\n\r\nThis issue is to discuss what sort of functionality and flow we'd like to see in search and replace.\r\n\r\n- For my workflows, I'd prefer the flexibility to either have search results on the bottom, or on the side. But not sure exactly how it should look like yet!\r\n- A key tenent across this, and all the new pieces of UI (like file explorer, git integration, find files, errors, etc) - is that I can _navigate using the same paradigms and functionality I use in VIM_ - in other words, I should be able to use h/j/k/l and all the other tools I'm comfortable with. In other words, we should leverage Neovim as the 'engine' for manipulating input, even if we put a fancy or different visualization on top of it.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/520", "title": "Language Client: Implement CodeLens", "body": "CodeLens is helpful for languages that have inferred static typing, because it can help show the inferred types. This would have implications across the rendering pipeline (especially with Neovim integration).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/501", "title": "Mouse: Fix behavior for autocompletion UI", "body": "- Enable clicking autocompletion items\r\n- Add hover effect for autocompletion items\r\n- Fix the cursor/pointer for autocompletion items, to suggest that they are clickable.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/474", "title": "Refactoring Support", "body": "Initial refactoring support has landed in TypeScript:\r\nhttps://github.com/Microsoft/TypeScript/pull/15569\r\n\r\nThis would be a great feature for Oni - this is sort of a next-tier IDE feature that has the potential for huge productivity boosts.\r\n\r\nThere are a couple of issues that need to be considered:\r\n- This isn't supported in a first class way by the language server protocol. There are still open issues in terms of how it may be handled: https://github.com/Microsoft/language-server-protocol/issues/61 The approach that I believe makes sense would be to create an Oni API that exposes some of this functionality - like we already do for completion, and then if the LSP supports it, the `LanguageClient.ts` could call back into that API. This would allow other plugins / languages to do support refactoring strategies as well - it's just a bummer that it doesn't come through the LSP at the moment. There will be similiar pieces of functionality like this down the road - live reload, debugging, where standards are still in flux.\r\n- Plugin API design for this - need to investigate and see the functionality the `tsserver` provides.\r\n- Applying the `TextEdit` - I'm hoping we can reuse the strategy for modifying code that things like `formatting` provides - the `TextEdit` object seems applicable for this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/459", "title": "Test - Performance: Benchmark Normal-Mode Responsiveness", "body": "One of the explicit goals of Oni is performance. There have been one-off pushes to improve performance (startup time, responsiveness), and of course there is still significant work to be done to be able to claim we've reached the goal and are on-par with what a Vim user would expect in terms of interaction fluidity.\r\n\r\nPerformance, though, needs to be carefully monitored as there can be non-obvious code changes that can directly impact performance & responsiveness. This is especially true in the web world, where a wrong CSS style can suddenly dramatically impact the layout and paint.\r\n\r\nThe first step is to be able to measure and be able to report over time - catching any performance regressions before they make it into a release. To that end, this issue tracks creating a new command - `npm run benchmark` and exercising the following scenarios:\r\n\r\n- Start-up time (cold & hot)\r\n- Normal mode: Simple normal mode navigation (alternate `j` and `k` key presses)\r\n- Normal mode: Simple navigation on same line (alternate `h` and `l` key presses)\r\n- Normal mode: Simple scroll case (`j` at bottom of file)\r\n- Normal mode: Jump to top / jump to bottom (alternating `gg` and `G`)\r\n- Insert mode: Typing latency - time between key press and seeing change on screen\r\n\r\nThis should be output to the console and optionally reported as a JSON file. This can be used to compare Oni's performance build-over-build and ensure we are only moving forward towards our performance goals.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/451", "title": "Git integration", "body": "Having native git (and later, more general source control) integration capabilities is very valuable.\r\n\r\nInitially, I wanted to start by having a git branch in Oni's statusline - so this issue is split out from #201 which is the general Oni statusline implementation.\r\n\r\nAfter the status line, there are several opportunities to explore - a `git blame` overlay is specifically called out in #362 \r\n\r\nAtom seems to have some nice functionality around git integration as well: http://blog.atom.io/2014/03/13/git-integration.html\r\n\r\nHere some specific capabilities I'd like to see:\r\n- Git branch info in statusline\r\n- Git blame overlay that can be called up\r\n- Quick and easy diffs\r\n- Quick and easy exploration of history - I remember seeing a post in hackernews / reddit where the git history could be scrolled with the mouse wheel. That was pretty cool.\r\n- Merge conflict\r\n\r\nI use only the basic functionality of [vim-fugitive](https://github.com/tpope/vim-fugitive), so exploring that would be helpful. I also have heard great things about [Magit](https://magit.vc/) for Emacs, so I'd like to explore that too for inspiration.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/437", "title": "Get code signing certificates", "body": "On both Windows and OSX, the security tools flag Oni because it does not have a valid code signature.\r\n\r\nThe fix for this is to get a valid signing certificate for Oni and sign on both of these platforms.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/437/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/430", "title": "Lowering the Bar: Gamify & Improve Vimtutor", "body": "This came about from discussion with @JosephFerano in the gitter channel. The idea is to have an improved vimtutor experience - a way to teach users modal editing in a fun, paced environment.\r\n\r\nIt is generally accepted that the way to start learning vim is to open up vimtutor and spend 45 minutes or so getting a feel for the keys, but having an actual game and measured objectives / achievements around it would make it much more fun and enjoyable for new users to pick up Oni. The existence of other experiences like https://vim-adventures.com/ show that there is a demand for this.\r\n\r\nThis would fit in well with Oni's goal of lowering the bar to modal editing, and help funnel new users that are curious about modal editing to Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/430/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/412", "title": "Plugins: UI Extensibility / Custom React components", "body": "Aside from just color schemes changes, I'd like to add plugin support for css styling / css skinning and theming.\r\n\r\nThis would open up the door for some very in-depth customization options, as well as slick animations. This would basically allow a plugin to include a stylesheet that is loaded - allowing the developer to customize font rendering, UI, etc.\r\n\r\nThis is a placeholder for now but will add more details as it materializes. Let me know if you have ideas / comments.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/412/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/389", "title": "Integrate OCaml/ReasonML language server", "body": "Language server here: https://github.com/freebroccolo/ocaml-language-server\r\n\r\nWanted an excuse to learn more about these languages \ud83d\udc4d \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/389/reactions", "total_count": 4, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 4}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/385", "title": "Integrate Rust language server", "body": "Rust just had a release of their language server: http://www.jonathanturner.org/2017/04/rls-now-in-nightly.md.html", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/385/reactions", "total_count": 6, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 6}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/382", "title": "Performance: VimL compilation strategy", "body": "As part of the performance push, @jordwalke proposed the idea of caching the JS configuration via a raw VimL script:\r\n\r\nFrom #351, quick summary of @jordwalke's idea:\r\n> To summarize my original position is that JS would be a great target for scripting this configuration as long as it can eventually be taken out of the startup path, generating a raw VimL config script, and that can be cached so that startup is very fast. Seems that this should be doable without anyone touching a line of vim script. In fact, this could even produce a highly condensed VimL cached boot script that's faster than any VimL you would be likely to write by hand.\r\n\r\n> My only suggestion is that for anything not dynamic (configuration, theming, mappings, settings, workspaces), that it \"eject\" to VimL which can be cached and loaded without ever needing to loads tons of JS. \r\n\r\nThere were also good discussions around this in #20 and #35 . I felt it deserved its own issue since it keeps being sidelined.\r\n\r\nIn terms of evaluating this proposal, it would be helpful to benchmark the loading times today for the pieces that could be VimL optimized (like `config.js`), and then try out the same strategy using a VimL script, and evaluate the delta so that we can have an understanding of the potential performance gain. We should also understand the exact bottleneck - for example, if File I/O is the bottleneck, we might not save much, if we have to check and see if the file has been changed anyway (either through a hash or metadata).\r\n\r\nFor cases like `config.js`, which is essentially a dictionary, serializing that to VimL would be relatively straightforward. We'd have to think about how to handle richer functionality, like if there was ever a case we have configuration options gated by a function - how would the VimL compilation handle that?\r\n\r\nOne other issue to consider is that VimL loading in Neovim is synchronous. There are potentially ways we could load the configuration in JavaScript asynchronously so that it does not block our time to render. Knowing the bottlenecks for our config loading can help us make the right tradeoffs here.. Hopefully we can get some time to pursue this soon!\r\n\r\nAs an aside, I'd also like to be able to easily get some of the performance data we need for this - right now it's not easy to answer questions like \"How long does it take to load my config?\" without digging into the chrome performance tools. React-native actually has a nice example of handling this - there is a built-in performance dashboard - something higher-level like this would be very helpful for Oni too to identify bottlenecks and help us make the investments in the right places.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/381", "title": "Performance: V8 snapshots", "body": "Atom had an interesting strategy for improving startup performance in their blog post here:\r\nhttp://blog.atom.io/2017/04/18/improving-startup-time.html\r\n\r\nThey are leveraging V8 snapshots to output a JS heap. This saves all the parsing and processing of JS, which is non-trivial as the bundle.js for this project gets larger.\r\n\r\nThere are some restrictions (V8 snapshots run in a bare V8 context), so it's important to have solid testing to ensure we aren't breaking anything in these cases.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/362", "title": "UI: Externalize Window Management", "body": "There are several shortcomings to how Oni manages windows today.\r\n- __Convoluted code path__ - the overlay / overlaymanager concepts are unnecessarily complex and confusing\r\n- __Difficult to extend__ - it's non-trivial to add new functionality, like a git blame marker plugin, or something like markdown preview\r\n\r\nFor the overlay scenarios, it'd be really nice if each split had its own 'container' div. This really isn't possible today, as Neovim as a whole manages rendering to various splits.\r\n\r\nI'd like to look at the possibility of 'multiplexing' Neovim instances to address these shortcomings. In effect, this would allow us to move window management to Oni, and allow us to really build on that experience - we could have first-class animations and much simpler overlay code if we manage the windows explicitly. Each 'split' would be its own Neovim process.\r\n\r\nMy original concern with this was that it would be difficult to persist settings between the splits - for example, marks, history, etc. @justinmk had a great write up on how this could work:\r\nhttps://www.reddit.com/r/neovim/comments/5ym9p3/future_of_ui/\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/350", "title": "Enable Asar packaging for installation", "body": "For v0.2, the `asar` option was set to `false` - meaning the app is not bundled into an asar archive. The electron-builder docs recommend keeping this as true, but excluding certain files. This can also help with the app launch speed. On all platforms, we get this warning due to disabling asar packing:\r\n\r\n```\r\nPackaging using asar archive is disabled \u2014 it is strongly not recommended.\r\n```\r\n\r\nTo re-enable it, the files in the `bin` folder must be excluded.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/186", "title": "Plugin Management", "body": "ONI has some additional features / functionality around plugin management. In particular, it would be helpful to support:\r\n- Per-project plugins\r\n- JavaScript plugins (that may require npm install / node build)\r\n\r\nFor package management, there are also two modes that would be helpful to support:\r\n- Direct GIT repo clones\r\n- NPM-style installs (like Atom's https://github.com/atom/apm packae manager)\r\n\r\nLong-term, I'd like to have integration with the command palette and a UI for enabling, disabling, updating, and measuring performance characteristics of plugins. In the short-term, adding an `opm` command like:\r\n- `opm ls`\r\n- `opm install https://github.com/tpope/vim-fugitive` (git clone)\r\n- `opm install oni-plugin-python-language-service` (npm install)\r\n- `opm uninstall oni-plugin-python-language-service` (npm uninstallJ)\r\n\r\nBy default, the packages would be installed per-user. Adding a `-p` flag would tell ONI to install in the project directory, which is the first directory upward named `.oni`.\r\n ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/166", "title": "Add scrollbar to Code Completion", "body": "Currently, there is no scrollbar, and no limit to the number of items shown in completion (and you can't really navigate beyond the bounds with <C-n> & <C-p>).\r\n\r\nTo address this, need to do the following:\r\n- Add a `view` concept to the reducers - this would include the view size and the start position of the view\r\n- Update the `next` and `prev` actions to adjust the view (for example, if you are at the top of the current view, it would move the view upwards when dispatching `prev`).\r\n- Add a scrollbar component to the UI to display this\r\n\r\nLater:\r\n- Add mouse events to the scrollbar component", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/90", "title": "Benchmark typing latency", "body": "This article: https://pavelfatin.com/typing-with-pleasure/ has a really great and in-depth investigation into the typing latency of various editors. This latency - the time from pressing the key to seeing the result on the screen - is incredibly important especially with developers. This latency is a huge part in whether an editor is a joy to use or if it feels `slow`. \r\n\r\nFor this work, we should look at the following:\r\n- What are the current measurements of typing latency?\r\n- What can we do to improve?\r\n- Can we add metrics so that build-over-build we can see how the latency changes?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/90/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/67", "title": "Multi-monitor support", "body": "A scenario that frequently occurs in a multiple-monitor setup at work is that I'd like to expand VIM to encompass multiple displays, and use the goodness of the easy window splitting / window navigation across monitors. Gvim on windows, at least, doesn't seem to handle this very well - I imagine the terminal clients might be better if the terminal emulator handles resize/multiple monitors, but in my case, it doesn't fit my workflow.\r\n\r\nWith Electron, it's relatively easy to change the BrowserWindow dimensions to encompass multiple screens (or alternatively, create multiple BrowserWindows that can communicate with other).  \r\n\r\nIt's easy to get the information about all displays:\r\n```\r\n    require(\"electron').screen.getAllDisplays()\r\n```\r\n\r\nAnd it's also pretty easy to size the browser window:\r\n```\r\n        require('electron').remote.getCurrentWindow().setPosition(x, y)\r\n        require(\"electron\").remote.getCurrentWindow().setSize(.., ..)\r\n```\r\n\r\nWhat would be helpful in terms of workflow would be a command that is like \"MonitorExpandLeft, MonitorExpandRight, MonitorExpandDown, MonitorExpandUp\". This would size the window to expand to the boundary of the window if it hasn't already, or expand it out to the next window. This could be bound to something like <C-W> plus arrow keys by default.\r\n\r\nThis would be somewhat gated by #20 since we need a nice way to express those commands, but we could have another hacky input added until we get that fixed..\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/67/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/c69fb1beff9eb9c1ffb3d545ce470804297080e3", "message": "Refactoring: Tighten up editor disposal (#1807)\n\n* Start properly disposing of event handlers\r\n\r\n* Tighten up editor disposal\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3a140bc566455313228b3ee8ad1155324cb9bcb6", "message": "Fix #1798 - Error on load (#1800)\n\n* Fix bug where CiTests were ignoring failures\r\n\r\n* Don't execute autoCommand if neovim isn't initialized yet\r\n\r\n* Fix merge issue with achievements\r\n\r\n* Merge fix for crash when achievements is not enabled"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f6853fd20cd82821cf01f1fcf436afec277884be", "message": "Hide commandline overlay when editor is disposed (#1803)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0c2e1e4a87bff568fd3f7a9ba0607b02f2c910db", "message": "Fix #1799 - Large macro application (#1801)\n\n* Add test case\r\n\r\n* Get test to exercise failure\r\n\r\n* Add test file\r\n\r\n* Add unit test exercising NeovimBufferUpdateManager\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/332fa53a52dc8249129fa6f18df9a14dfaa3a9e6", "message": "Learning pane - interactive tutorial experience (#1617)\n\n* Start adding learning pane\r\n\r\n* More plumbing for interactive tutorial experience\r\n\r\n* Set up tutorial to use a nested NeovimEditor, instead of the actual buffer\r\n\r\n* Fix lint issues\r\n\r\n* Clean up lint issues\r\n\r\n* Clean up lint issues\r\n\r\n* Add placeholder command to start tutorial\r\n\r\n* Plumb through command manager\r\n\r\n* Merge dependencies with latest master"}, {"url": "https://api.github.com/repos/onivim/oni/commits/17618cbecce595d8e4d557c7287c538c000abe03", "message": "Achievements: Initial achievement (#1797)\n\n* Start plumbing through achievements\r\n\r\n* Wire up renderer to manager\r\n\r\n* Update styling\r\n\r\n* Factor to pure functional component\r\n\r\n* Add achievements off Oni API\r\n\r\n* Add configuration values\r\n\r\n* Finish wiring up achievement, and add 'Dedication' achievement"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9b6f02c51596e2c19fb29e6c8e55f0afa85dacd4", "message": "Fix #1578 - Enable 'editor.textMateHighlighting.debugScopes' again (#1794)\n\n* Render debug scopes\r\n\r\n* Add debug scopes test\r\n\r\n* Fix comments"}, {"url": "https://api.github.com/repos/onivim/oni/commits/398b07d906b1eb538da66e3064c50817b97c2f8d", "message": "Remove unused project configuration class (#1796)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/88f8dbe83849618a5332fab4a3386c16694da61c", "message": "Remove task registration from editor (#1789)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6d9cd90e1c20bc2c4ae3ce087f8695d5856457b0", "message": "Use 'regex' as the default filter strategy (#1793)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/395f8f13d9e24a0ea62de74ebb7f4619351560d4", "message": "Refactoring: Remove unused errors class (#1788)\n\n* Factor out unused Errors class\r\n\r\n* Remove unused errors class"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ce436db2efdadd6b26237935149b0a2ec47eae12", "message": "Refactoring: Refactor blur/focus handling to WindowManager (#1786)\n\n* Refactor blur/focus handling to WindowManager\r\n\r\n* Remove unused remote"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7f15b1cb5a61423d148e719cd448442341cf92b4", "message": "Fix issue where token color is not being overridden (#1791)\n\n* Fix issue where token color is not being overridden\r\n\r\n* Add CiTest covering tokenColors\r\n\r\n* Remove extra line"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c20fe4090d4bb8979bfe164385f52243a50d7c63", "message": "Bugfix: Snippet placeholder highlighting not rendering on initial insertion (#1790)\n\n* Add failing test\r\n\r\n* Update buffer layer to get the latest cursor position, too"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d6aa8218ceabd12d34982baee5354b6ca50937d9", "message": "Closing splits with 'editor.splits.mode' === 'oni' (#1703)\n\n* Add split bindings\r\n\r\n* Get tests green again\r\n\r\n* Get split tests green\r\n\r\n* Add layout logic plus testc ases\r\n\r\n* Fix lint issues\r\n\r\n* Get oni-splits working end-to-end\r\n\r\n* Tweak positioning of splits\r\n\r\n* Add basic window layout algorithm\r\n\r\n* Fix lint issue\r\n\r\n* Fix test issues\r\n\r\n* Fix window click behavior\r\n\r\n* Fix compilation issue\r\n\r\n* Fix split direction issue\r\n\r\n* Fix lint issue\r\n\r\n* Hook up <C-w>s/<C-w>v bindings for oni.tabs.mode\r\n\r\n* Fall back to native splits if editor.split.mode isn't set to oni\r\n\r\n* Remove todo\r\n\r\n* Fix class name for editor\r\n\r\n* Handle closing instances in splits\r\n\r\n* Rewire quit command to close window\r\n\r\n* Revise close logic\r\n\r\n* Add dispose to NeovimInstance and Session objects"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b36fec6a5ab599fb54fbcea43ac1710baa740403", "message": "Refactor menu-item-click to use command (#1787)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5f5d473b7fbe874c2f23c47455b1ed1af5fc6161", "message": "Dependency: Update oni-api to 0.0.41 (#1779)\n\n* Update workspace API\r\n\r\n* Fix interface\r\n\r\n* Fix typo - Workspaces -> Workspace\r\n\r\n* Fix plugin API"}, {"url": "https://api.github.com/repos/onivim/oni/commits/481272a9a3cca8e881bf14cea36f89a0d36f2c2c", "message": "Fix jerkiness on adding new tab (#1782)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d6d621ebca78dbaafa2c3f1a2a0f068e4cb0f8cf", "message": "Demo Video: Bugfixes & snippets (#1781)\n\n* Add snippets to hero demo\r\n\r\n* Update HeroDemo\r\n\r\n* Add real config file\r\n\r\n* Use real react component for test\r\n\r\n* Update demo\r\n\r\n* Fix default configuration value\r\n\r\n* More test tweaks\r\n\r\n* Prime the language server for better perf during demo\r\n\r\n* Tweak settings for KeyDisplayerStore\r\n\r\n* Update HeroDemo"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c3895141d1cf50696581339a0a8a0ccbe8afa981", "message": "Update oni-api and fix typings (#1777)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ffdd720965c8ee40925edd17cf67777b8a017c1c", "message": "Upgrade to electron 1.8.3 (#1770)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/766fc30133aea41551295c74d458cdec29da6790", "message": "Automation for Reason (#1189)\n\n* Fix typo in default configuration\r\n\r\n* Add create reason project script\r\n\r\n* Upgrade to ocaml-language-server@1.0.16\r\n\r\n* Upgrade bs-platform to 2.1.0\r\n\r\n* Add completion log\r\n\r\n* Add reason autocompletion test\r\n\r\n* Move reason autocompletion test to OSX-only for now\r\n\r\n* Delete script because it now lives in the CiTest\r\n\r\n* Fix configuration error caught by test, breaking ocaml-language-server in dist builds\r\n\r\n* Fix lint issues in test file\r\n\r\n* Install bs-platform prior to build\r\n\r\n* Install the reason cli tools instead of bs-platform\r\n\r\n* Add logging for ocamlmerlin location\r\n\r\n* Try using NODE_VERSION environment variable\r\n\r\n* Fix merge conflict in build script\r\n\r\n* Make sure OSX tests are run...\r\n\r\n* Run missed tests\r\n\r\n* Factor reason installation to a separate script, and update to use the 3.1.0 build\r\n\r\n* Set executable permission on install-reason.sh"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4e9e540c318efce877eb416fc430b4bccc00f5ab", "message": "Bump master version to 0.3.2 (#1766)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3234521f8c6101f45f4a04832dd8d0ac6d62ebda", "message": "Snippets - Bugfix: Exception when inserting a snippet without placeholders (#1755)\n\n* Add failing CiTest\r\n\r\n* Add implicit placeholder at end if there is none\r\n\r\n* Add CiTest\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/757f9b12ade524b9117f2e93bcdf627e44120682", "message": "Snippets - Bugfix: Make snippet loader more robust against parse failures (#1751)\n\n* Make snippet loader more robust against parse failures\r\n\r\n* Revert change to SidebarStore\r\n\r\n* Add robustness to UserSnippetProvider"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8cac04fc619240994340ff6d20d5ea306c4ad225", "message": "Error Notifications: Add configuration setting (#1754)\n\n* Add setting for showing a notification on error, defaulting to false on prod and true on debug builds\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b6caae752b727307ed5be847f473c44fbf1128cb", "message": "Bugfix - Snippets: Don't show snippets in property/member completion (#1752)\n\n* Remove snippets from property / method completion\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bffb10f4c9808261259061bb0f9416a351b555c0", "message": "Achievements - Initial Scaffolding (#1698)\n\n* Bring over prototype achievement code\r\n\r\n* Port over achievements UX\r\n\r\n* Split out achievements view\r\n\r\n* Add AchievementsManager + tests\r\n\r\n* Fix lint issues\r\n\r\n* Add experimental gate for achievements\r\n\r\n* Update learning pane\r\n\r\n* Update achievements\r\n\r\n* Fix dependency in activate\r\n\r\n* Remove achievements activation"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fa6cd5af8274e15ffcaf68339f8cf212639ce875", "message": "Update oni-api dependency, remove EventEmitter (#1740)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c99c0d1d626beeb5b691990b4f29d52e5293c683", "message": "Fix #685 - Enable autocompletion and quickinfo for config.js (#1733)\n\n* Fix missed comma\r\n\r\n* Fix missing comma\r\n\r\n* Copy oni-api directly to output, to preserve definition files\r\n\r\n* Revert erroneous changes to this test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7ad938cbcfe8b25acd2d358e3e3cb94f4a00953c", "message": "Terminal: Add convenience commands to open in splits (#1731)\n\n* Set up terminal to run on activate\r\n\r\n* Add configuration values"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1a58547463b97ff3ba250ba2ff9130cfefcce1e5", "message": "Bug fix - Textmate Highlighting: Flicker on insert mode (#1724)\n\n* Address flicker in insert mode\r\n\r\n* Add version to store\r\n\r\n* Fix tests\r\n\r\n* Update syntax highlight tests"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c0e2cf167d9141c3c250b77de730fea4e1a01d66", "message": "Add wait for menu.close to be available (#1732)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/856ba76fe04f5c2a024a890f4b2273783b406dcf", "message": "Dependency: Upgrade oni-api to 0.0.38 (Integrate Snippet API) (#1723)\n\n* Update SnippetManager\r\n\r\n* Switch to new types\r\n\r\n* Update UserSnippetProvider to use new api\r\n\r\n* Finish converting ISnippets\r\n\r\n* Fix remaining typings"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0ab079d32821b4dc747fd9c0e9aee270c3f6c2db", "message": "Use snippet variable in template (#1729)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3935c1869484034f02f9ba6be60c6ccb215e5c5f", "message": "Fix inverted conditional (#1725)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/435faf567c0627337e625d120ed57274311b656c", "message": "Snippets: Bug fix - placeholder ordering (#1722)\n\n* Fix placeholder ordering\r\n\r\n* Get tests green\r\n\r\n* Remove unnecessary image\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/aa422650ea11794e4de3610972f401309668c0e8", "message": "User snippet loader (#1669)\n\n* Add UserSnippetProvider\r\n\r\n* Add user snippet provider commands\r\n\r\n* User snippets\r\n\r\n* Update user provider with watcher\r\n\r\n* More updates to user snippet provider\r\n\r\n* Update user provider\r\n\r\n* Fix lint issues\r\n\r\n* Fix lint issues\r\n\r\n* Fix regression if no snippets defined"}, {"url": "https://api.github.com/repos/onivim/oni/commits/adb29392fdd74a741da81f194bf56d91ac74b7a6", "message": "Snippets - Bug Fix: Takes two 'esc' key presses to get out of snippet+insert mode (#1721)\n\n* Force leaving insert mode\r\n\r\n* Fix typo"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e568bb6f9d00d50dac5a6b15ec18c7269616fe57", "message": "TypeScript Configuration Editor (#1620)\n\n* Start stubbing out provider\r\n\r\n* Move provider -> editor\r\n\r\n* Update to use typescript provider for configuration\r\n\r\n* Add index fixes\r\n\r\n* Update configuration editor\r\n\r\n* Get typescript configuration working end-to-end\r\n\r\n* Fix lint issues\r\n\r\n* Fix tests\r\n\r\n* Add javascript configuration test\r\n\r\n* Add new configuration test\r\n\r\n* Update editor\r\n\r\n* Use real paths for configuration, add placeholder config values\r\n\r\n* Fix compiler error\r\n\r\n* Add explicit wait for command to be ready\r\n\r\n* Fix missed command"}, {"url": "https://api.github.com/repos/onivim/oni/commits/80756fc3d3b6154b8834ec5b4a05d72f9ccb57dc", "message": "Fix #1719 - Add 'snippets.enabled' configuration option (#1720)\n\n* Plumb through snippet configuration option\r\n\r\n* Update test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/95d136c777bc226e64e6b1331793f718ef3aec57", "message": "Fix #864 - Filter completion by scope (#1622)\n\n* Check current scope to see if we should complete, to gate against completion in comments / strings\r\n\r\n* Update completion store\r\n\r\n* Tweak API to support adding textmate scopes\r\n\r\n* Hook up snippet provider to ignore comments and quoted strings\r\n\r\n* Fix lint issue\r\n\r\n* Fix merge issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9019f59a0ab7cbdd93939cf7f0f9b4ec55e7fee6", "message": "Fix up cursor mapping position (#1718)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/45b8e8602b3a17a62b62e23bf27c780d43758921", "message": "Update README.md\n\nFix typo, remove gitter link"}, {"url": "https://api.github.com/repos/onivim/oni/commits/52a507ca171d98525f7dd019c868e10ddf13ce08", "message": "Set 'snippetSupport' to true (#1714)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f974159259fb5ed79950b372cd0bd6390a6cab89", "message": "Externalized UI: Implement Oni split mode (#1682)\n\n* Add split bindings\r\n\r\n* Get tests green again\r\n\r\n* Get split tests green\r\n\r\n* Add layout logic plus testc ases\r\n\r\n* Fix lint issues\r\n\r\n* Get oni-splits working end-to-end\r\n\r\n* Tweak positioning of splits\r\n\r\n* Add basic window layout algorithm\r\n\r\n* Fix lint issue\r\n\r\n* Fix test issues\r\n\r\n* Fix window click behavior\r\n\r\n* Fix compilation issue\r\n\r\n* Fix split direction issue\r\n\r\n* Fix lint issue\r\n\r\n* Hook up <C-w>s/<C-w>v bindings for oni.tabs.mode\r\n\r\n* Fall back to native splits if editor.split.mode isn't set to oni\r\n\r\n* Remove todo\r\n\r\n* Fix class name for editor"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0307da1691a1c1cede5219c63bf0f10a93231783", "message": "Update config.yml"}, {"url": "https://api.github.com/repos/onivim/oni/commits/92d3f9ab3efd68dcc0df94507aefbad62a156f8d", "message": "Browser: Sneak integration (#1699)\n\n* Start hooking up sneak integration\r\n\r\n* Hook up interop with embedded script\r\n\r\n* Add sneak integration to browser window"}, {"url": "https://api.github.com/repos/onivim/oni/commits/db41a1fe045b5548adfa157e982afa61216b576e", "message": "Snippets: Variable resolution (#1692)\n\n* Add variable resolution to snippets\r\n\r\n* Add snippet variable resolver\r\n\r\n* Stub out test case for SnippetVariableResolver\r\n\r\n* Hook up snippet variable resolution end-to-end"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4c7618fdb66fe9fc80344e53d9291f10ff8c79f9", "message": "Automation: OSX Reliability (#1700)\n\n* Put 'LargeFileTest' at end, tweak processes\r\n\r\n* Fix typo in conditional"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6b193c69b0d32c6cf7c6234f4e38ffdb2ea0357b", "message": "Automation: Improve process closing logic on OSX (#1689)\n\n* Fix process closing logic on OSX\r\n\r\n* Don't kill node...\r\n\r\n* Kill chromedriver processes too\r\n\r\n* Set up automation to ignore single instance mode\r\n\r\n* Disable single instance mode in automation\r\n\r\n* Tweaks to improve logging / closing\r\n\r\n* Additional logging for stop method\r\n\r\n* Don't gate on single instance for OSX tests\r\n\r\n* Fix lint issues\r\n\r\n* Don't change process stop behavior"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2a4a9fa03ea3be177d5ccfebf3b0bd392adc42ed", "message": "[WIP] Browser: Initial preload script (#1691)\n\n* Add webview_preload script\r\n\r\n* Add debug command for browser window\r\n\r\n* Fix wiring up of props"}, {"url": "https://api.github.com/repos/onivim/oni/commits/458c79892215127f03447c6b4307dd6a75ccdb95", "message": "Fix #1465: Add configuration for browser default landing page (#1693)\n\n* Default configuration\r\n\r\n* Add default landing page"}, {"url": "https://api.github.com/repos/onivim/oni/commits/37937ab0c74ef4d827e982a51fdb67f6a5749c34", "message": "Fix case where image layer was added to files w/o extension (#1688)\n\n* Fix case where image layer was being assigned to files without extensions\r\n\r\n* Only assign language from contribution if it actually has an extension"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bfd5f22ae1da7350c8ff0f94b0d4dd3d2c783adb", "message": "[WIP] Browser: Add commands to open in horizontal / vertical split from command palette (#1690)\n\n* Factor BrowserView to separate file\r\n\r\n* Add browser commands from command palette"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8d08aa109299517c0c6799c66e962563b0fd5fa4", "message": "QuickOpen: Add key to open existing tab (#1685)\n\n* Add key binding for existing tab\r\n\r\n* Refactor to break QuickOpen's dependency on NeovimInstance\r\n\r\n* Fix up dependencies\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/222213fdcf0a5103492b2ab194206638fd973c96", "message": "Fix #1681 - Paths with spaces (#1687)\n\n* Add failing test to exercise 1681\r\n\r\n* Escape spaces when opening file\r\n\r\n* Add BufWinEnter event listener + handler\r\n\r\n* Add missing comma"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bccabe12aa3130a981f362460480e075ac1ed1d7", "message": "Disable learning pane by default (#1683)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2d837d784e3d1ace45757696c18333569f3f8203", "message": "Switch to common store, to improve logging and performance (#1686)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7de8633f699883645214812f78776005fdfea732", "message": "Clear lib_test folder prior to building / running tests (#1684)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/df3cd94cb1de202050b0ac91816b349670de46ce", "message": "Fix duplicate layers in buffer (#1671)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6bd62431333f8830ea073d879fb1afa7589ea827", "message": "Add entrance animation to sneak (#1672)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fa5e8c25b6efad4d25551803e840224b65cee017", "message": "Switch to 'tabs.mode': 'tabs' by default (#1667)\n\n* Initial refactoring of open API\r\n\r\n* Fix default open setting in QuickOpen"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7ff95fa5dcff8bffb27bc4d52cac4bcf1e2f6d66", "message": "Fix issue with snippet placeholders after visual mode selection (#1670)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/51f7d0cafdafe5e1cd392a29b3194a086d8688ba", "message": "Snippets - Add reason snippets (#1668)\n\n* Add snippets for reason\r\n\r\n* Fix path in reason package.json\r\n\r\n* Add README.md documenting source of syntax / snippets"}, {"url": "https://api.github.com/repos/onivim/oni/commits/15868a78d306c461ecfb59d52aceeca6a8ead94f", "message": "Learning Pane: Initial learning pane sidebar + experimental configuration setting (#1666)\n\n* Start adding learning pane\r\n\r\n* More plumbing for interactive tutorial experience\r\n\r\n* Remove tutorial pieces\r\n\r\n* Add initial learning pane\r\n\r\n* Remove tutorial now, update sidebar pane\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5a3a9e78ae7057fc5a3d9bd65fa0da63edb1177d", "message": "Bugfix: Fix heisenbug where process.env changes during execution (#1665)\n\n* Fix heisenbug where process.env randomly changes during execution\r\n\r\n* Add environment variable options\r\n\r\n* Add test for mergeSpawnOptions\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f1325f4fb92cc0f64f0ea1ddffe62aeb05bdee9b", "message": "Fix #309 - Automation: Demo Video (#1458)\n\n* Attempt a more general input strategy for automation\r\n\r\n* Start stubbing out a demo script\r\n\r\n* Tweak automation, fix some bugs with new input model\r\n\r\n* Updates\r\n\r\n* Tweak demo\r\n\r\n* Update test\r\n\r\n* Fixes for demo\r\n\r\n* Update store / demo\r\n\r\n* Video tweaks\r\n\r\n* Slow down typing speed a bit\r\n\r\n* Remove unnecessary alert, fix up input on mac\r\n\r\n* Small demo tweaks\r\n\r\n* Update automation file\r\n\r\n* Fix lint issues\r\n\r\n* Output to demo path\r\n\r\n* Update demo\r\n\r\n* Remove unnecessary alert\r\n\r\n* Fix scripts"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a7e475cf400f74232b7fae128ae5cc4efa42cc03", "message": "Image Layers (#1619)\n\n* Plumb through filetype\r\n\r\n* Get image layer working end-to-end\r\n\r\n* Fix lint issues\r\n\r\n* Add images extension\r\n\r\n* Fix remainig issues with image layer"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b93c4dbaa83b99a4416ca2edfccb85c06d882a48", "message": "Fix #1345 - Improve developer experience when starting from webpack (#1663)\n\n* Improve developer experience when laoding from webpack, and provide alternative launch mechanism\r\n\r\n* Add webpack laoder scripts"}, {"url": "https://api.github.com/repos/onivim/oni/commits/71b5891d93668262a028f18377f63f81ebce3d69", "message": "Sneak: Implement async provider API (#1661)\n\n* Move sneak, split out activate method\r\n\r\n* Split out SneakView\r\n\r\n* Add sneak state store\r\n\r\n* Split out functionality to sneak store\r\n\r\n* Wire up store\r\n\r\n* Add tests for store\r\n\r\n* Use provider for sneaks\r\n\r\n* Hook up async sneak provider completely\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6a6c302e12ab3e4772f26bccc63f462d830a1f1f", "message": "Bugfix - Snippets: Match whitespace when inserting into buffers (#1662)\n\n* Update snippets to match whitespace\r\n\r\n* Update tests for new interface\r\n\r\n* Factor MockBuffer out\r\n\r\n* Add test cases validating whtiespace matching\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8e87337718cb71b0e3360be0184612f89dd77e7b", "message": "Update buffer indentation settings (#1660)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/979618eb4822b104a9161c0cf43cf66afd2e4c1c", "message": "Dependency: Upgrade to oni-api@0.0.37 (#1659)\n\n* Update to oni-api; strongly type arguments to open\r\n\r\n* Update to API\r\n\r\n* Update to handle new behavior\r\n\r\n* Update plugin-buffers to use new api"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bbd25c33bdbab92f7ee74304215d14f64e422881", "message": "Feature: Language contributions in extension manifest (#1657)\n\n* Plumb through filetype\r\n\r\n* Get image layer working end-to-end\r\n\r\n* Fix lint issues\r\n\r\n* Add images extension\r\n\r\n* Remove image-layer specific changes\r\n\r\n* Add MockPluginManager\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/157340f0eb94ab3ad6aabf87ec2a0beb1b368137", "message": "Snippets - add HTML snippets (#1650)\n\n* Add html snippets\r\n\r\n* Fix bug in snippet buffer layer if the screen coordinates aren't available yet"}, {"url": "https://api.github.com/repos/onivim/oni/commits/92e5daed6ae43a5de75eb313afd9b2e6403d0efd", "message": "Snippet: Show cursors in placeholder positions (#1648)\n\n* Augment snippet buffer layer to render placeholder cursors\r\n\r\n* Don't show cursors in visual mode\r\n\r\n* Add visual overlay for placeholders"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d6b6c10f8f400a1df9b41df67ce8f21b9d0e6465", "message": "Fix boundary case where placeholder is empty and at end of line (#1647)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ecbf972c1139e0325dc6828df358867ce78e3096", "message": "Snippets: Add out-of-box javascript snippets (#1649)\n\n* Add javascript snippets\r\n\r\n* Fix package json"}, {"url": "https://api.github.com/repos/onivim/oni/commits/64c7422094bec9757b2dd757d05c2f5d056c22b7", "message": "Upgrade to oni-api@0.0.35 and improve typing (#1646)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/115196c8958521abfd1fcf8e885cc28e03560b2b", "message": "Dependency: Update 'oni-api' to 0.0.34 (#1644)\n\n* Update typings for new api version\r\n\r\n* Fix wrong type in render method"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9d685a98ccd9485678144be4eff2562bd3cf4352", "message": "Update README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/26441153d372015ac315f0a09703c2577dda6b6b", "message": "Snippets: Add buffer layer while snippet is active (#1641)\n\n* Add 'hello world' snippet layer view\r\n\r\n* WIP - snippet buffe rlayer\r\n\r\n* Highlight line when snippet is active\r\n\r\n* Update SnippetBufferLayer to animate in effect\r\n\r\n* Hook up remove layer call\r\n\r\n* Add snippet buffer layer\r\n\r\n* Update mocks"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d7b1c4fd15359e5dd25326956768ad72520e47e0", "message": "Add 'removeLayer' API (#1640)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/387f6d03d6dc71338fb86f6b2994e051e9898300", "message": "Feature: Enable text mate highlighting by default (#1639)\n\n* Enable text mate highlighting by default\r\n\r\n* Fix default configuration conflict"}, {"url": "https://api.github.com/repos/onivim/oni/commits/97bcb0c90cd5e2fea70b8e30959498bef06c110b", "message": "Fix bug with snippets when typing to a smaller value (#1638)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2812e794e1be78d55cbd6ef8299176824bda61d3", "message": "Fix incorrect case (#1621)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3d94f7402b4b24574f37ac0727f5db05fdcfa239", "message": "Build: Fix typo in 'CheckBinariesForBuild' (#1616)\n\n* Fix typo in check binaries for build script\r\n\r\n* Update check to ignore oni-neovim-binaries on linux\r\n\r\n* Add os dependency"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fdd113561cb0a079c599f122deaeb6531236bf85", "message": "Revert \"Start adding learning pane\"\n\nThis reverts commit ef73ec689d3d3f2e5ddc4339f3f648af274ad3ff."}, {"url": "https://api.github.com/repos/onivim/oni/commits/ef73ec689d3d3f2e5ddc4339f3f648af274ad3ff", "message": "Start adding learning pane"}, {"url": "https://api.github.com/repos/onivim/oni/commits/36372699677ae1f65444a5c5211b376846b4276d", "message": "Snippets - Bug Fix: Fix ordering of placeholders (#1615)\n\n* Add red test\r\n\r\n* Add second red test for wrapping\r\n\r\n* Snippet session\r\n\r\n* Exercise ordering with import\r\n\r\n* Update SnippetSession"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f50aa6f3b3f803edb241af6a0a9da665a1b83c21", "message": "Fix issue with zero-length snippet placeholder (#1612)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9d35fe2fda75b0701aaee52eca7a1cd7e59dc595", "message": "Dependency: Upgrade to oni-api 0.0.32 (#1611)\n\n* Stub out editor manager API\r\n\r\n* Update to new API version\r\n\r\n* Update LanguageManager to use 'anyEditor' instead of 'allEditor'"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0b75320286a0a6c10ac2334c4668e4a3e7f31a6f", "message": "Configuration: Introduce seam to allow custom edit strategies (#1609)\n\n* Start stubbing out interface for configuration editor\r\n\r\n* Fix lint issue\r\n\r\n* Fix lint issue\r\n\r\n* Hook up configuration edit strategy\r\n\r\n* Fix up path / folder resolution for configuration"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a9933362d02a16ad3b779fc2fddea548690c0627", "message": "#55 - Part 4: Wire up snippets provided by extensions (#1608)\n\n* Start working on tabstop / synchronization\r\n\r\n* Synchronize changes in buffer across placeholders\r\n\r\n* Some initial unit tests\r\n\r\n* Add test for synchronizing placeholders\r\n\r\n* Add no-invalid-template-strings\r\n\r\n* Add snippet session\r\n\r\n* Add typescript snippets file\r\n\r\n* Add snippet parser + completion provider for snippets\r\n\r\n* Fix circular dependency\r\n\r\n* Hook up snippet completion provider\r\n\r\n* Hook up plugin loader\r\n\r\n* Fix loading of snippets\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f45713e029e539576a582062dc4f89a9bf94d143", "message": "Bump version (#1607)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/950c9a9ba29082381eb29897d019d3c0f676ed47", "message": "Add script to explicitly check cached binaries, and copy if necessary (#1606)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e6b3f54e09def6826046811fec055113dff2edd0", "message": "Snippets: Add support in 'commitCompletion' for InsertTextFormat.Snippet (#1605)\n\n* Get green unit test\r\n\r\n* Plumb SnippetManager through, pivot commitCompletion interface to take the completion item instead of string\r\n\r\n* Get snippet test green\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/152e67d216805ecd5008c81ae3d4b0fe6b1d6621", "message": "Feature: Template files + snippets (#1604)\n\n* Hook up template file for creating unit test\r\n\r\n* Fix lint issues\r\n\r\n* Add test cases for template file path\r\n\r\n* Update config"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6f3f54c89b6e33ce9eea12d3f6f5479a9ada8af4", "message": "Documentation: Update CONTRIBUTING with more details about how to claim a bounty (#1602)\n\n* Update CONTRIBUTING with more details about how to claim a bounty\r\n\r\n* Revise with more specifics about submitting a bounty expense"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6eee328620941e0950caebf44c6c605adda8cd92", "message": "Factor 'edit config' command out of editor and into configuration (#1603)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ba39e42bffa59bc207c054042d113c392f88a116", "message": "TextMate Highlighting: Fix insert-mode quirkiness (#1257)\n\n* Remove insert-mode syntax highlighting for now\r\n\r\n* Update buffer on mode changed\r\n\r\n* Remove insert updates\r\n\r\n* Start bringing back pieces of the insert-mode functionality\r\n\r\n* Bring back updating buffer line\r\n\r\n* Remove console.log\r\n\r\n* Add console.log back in\r\n\r\n* Fix typo\r\n\r\n* Wire up selector\r\n\r\n* Start additional middleware for updating single insert line\r\n\r\n* Wire up syntax highlighting end-to-end with insert mode\r\n\r\n* Get test green\r\n\r\n* Remove only\r\n\r\n* Fix lint issue\r\n\r\n* Add light throttling for the insert mode highlighting so as not to block input\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f73925483cf0e39d695f942341270b01c7253a48", "message": "Editor Multiplexing - Part 1 (#1405)\n\n* Add helper method to create neovim editor\r\n\r\n* Add entry point for creating new neovim editor\r\n\r\n* Merge with latest master\r\n\r\n* Sync up to latest changes in editor\r\n\r\n* Add extra dependency\r\n\r\n* Fix issue\r\n\r\n* Move spacer to common spot in splits\r\n\r\n* Start defining split mode\r\n\r\n* Add ability to multiplex\r\n\r\n* Remove previous path to opening a new editor\r\n\r\n* Switch from horizontal -> vertical\r\n\r\n* Fix mismatch in directions\r\n\r\n* Add split mode configuration\r\n\r\n* Fix conflict markers\r\n\r\n* Complete merge\r\n\r\n* Some tweaks to support multi-editor scenario\r\n\r\n* Remove unused code"}, {"url": "https://api.github.com/repos/onivim/oni/commits/06de530b106cbe2b0c278902144164bf3389beab", "message": "Configuration: Use notification instead of alert for error reporting (#1597)\n\n* Use notification instead of alert for configuration error\r\n\r\n* Set onclick event for notification"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f48c1311b2e3463773e28b64678a81c587aec1c4", "message": "Remove cache completely (#1595)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/502f04bf04fcaa15c25342fdd7ad73fa0cf712af", "message": "Sidebar: Remove unused SidebarPane / SidebarPaneWidget classes (#1596)\n\n* Remove SidebarPaneWidgets\r\n\r\n* Remove unused SidebarPane components"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5dcccc395784eb42da512fd306b1ddc3298c3649", "message": "[WIP] #55 - Part 3- Snippet placeholder synchronization (#1591)\n\n* Start working on tabstop / synchronization\r\n\r\n* Synchronize changes in buffer across placeholders\r\n\r\n* Some initial unit tests\r\n\r\n* Add test for synchronizing placeholders\r\n\r\n* Add no-invalid-template-strings\r\n\r\n* Add snippet session"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9ae011d6d6fae394524e9f64e07b7ab11429ab86", "message": "Tweak caching logic for binaries (#1592)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/44e162d359c6b2a669e5d6dbcef4589c4de90b56", "message": "Fix #1256 - Textmate Highlighting not showing until cursor moves (#1298)\n\n* Add bufenter call to update buffer\r\n\r\n* Add TextmateHighlighting.ScopesOnEnterTest\r\n\r\n* Add configuration files for text mate highlighting test\r\n\r\n* Fix missed await\r\n\r\n* Remove AutoClosingPairs config because its causing lint issues\r\n\r\n* Port over null check\r\n\r\n* Fix test issue\r\n\r\n* Remove unused config file"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b317710ae3ebd5d53f518ce2680782354bffe0bd", "message": "Feature: Key Display (#1551)\n\n* Formalize resolvers, add potential API method\r\n\r\n* Test resolution with KeyDisplayer functionality\r\n\r\n* Fix up imports\r\n\r\n* Add logic to group key presses\r\n\r\n* Update keydisplayer, factor out to store\r\n\r\n* Add KeyDisplayer\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/db987af51369eb1005766967a1310e1711fc7e67", "message": "Fix #38 - Better error message on startup with invalid init.vim (#1354)\n\n* Use the 'blocking' flag to catch error on startup\r\n\r\n* Fix lint issues\r\n\r\n* Fix tests\r\n\r\n* Hook up to notifications pipeline\r\n\r\n* Fix lint issue\r\n\r\n* Remove AutoClosingPairs config because its causing lint issues\r\n\r\n* Add CiTest case for invalid init vim notificatoin\r\n\r\n* Disable ts-lint no console for file\r\n\r\n* Fix assumption that buffer is available\r\n\r\n* Move config into test to minimize prettier/tsconfig conflicts\r\n\r\n* Fix issue factoring over auto-closing pairs config\r\n\r\n* Fix race condition - need to hook events prior to checking if blocked"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4c4aecdd8c4d590208e53c74f88fd4f17e0623c1", "message": "API: Add ability to add custom input resolvers / listeners (#1372)\n\n* Formalize resolvers, add potential API method\r\n\r\n* Test resolution with KeyDisplayer functionality\r\n\r\n* Fix up imports\r\n\r\n* Add logic to group key presses\r\n\r\n* Split out keydisplayer changes\r\n\r\n* Fix lint issues\r\n\r\n* Fix issue factoring over auto-closing pairs config"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d95dd11e73f0293690384cc811b672dee1b1c54f", "message": "Bump typescript version to 2.7.1 (#1535)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b14b123d05ba1fa04e6bbdf039b0e23fcd56906d", "message": "Remove docs folder, since the docs live at 'oni-docs' now (#1534)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/803ea59e85497349c1d77371364bd658c8373a21", "message": "Revert change to disable notifications in production (#1541)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/386b37d763be2e21efac6a7f656b2565c9451776", "message": "Update screenshot"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3d755200735121f78d30cf2d01ce8983d7e0a20e", "message": "Code coverage: Switch from coveralls to codecov (#1533)\n\n* Use codecov\r\n\r\n* Update code coverage badge\r\n\r\n* Fix upload command\r\n\r\n* Try removing lcov and using json visualizer\r\n\r\n* Try using libraries to generate the lcov file\r\n\r\n* Update reports\r\n\r\n* Fix up scripts\r\n\r\n* Tweak coverage results\r\n\r\n* Add definition for sudo-prompt\r\n\r\n* Tweaks\r\n\r\n* Hook up remap command\r\n\r\n* Upload lcov\r\n\r\n* Revert changes to Platform.ts\r\n\r\n* Temporarily remove tests to get quicker feedback on coverage\r\n\r\n* Temporarily remove packing step to get quicker feedback on ccov\r\n\r\n* Fix script error\r\n\r\n* Remove invalid coverage file\r\n\r\n* Fix up codecov yaml\r\n\r\n* Revert unnecessary changes\r\n\r\n* Revert commented out code\r\n\r\n* Some cleanup\r\n\r\n* Bring back CiTests"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2d057c3536f5a54bd68ba6e6abb0f04e7a39c545", "message": "Bump package version from 0.2.22 -> 0.3.0 (#1527)\n\n* Bump package version from 0.2.22 -> 0.3.0\r\n\r\n* Actually bump version..."}, {"url": "https://api.github.com/repos/onivim/oni/commits/b93cf750de32c3fb2bea420ea6222115daabbe49", "message": "Disable notifications in production builds (#1526)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/488b7f7567466c9c780b3db24fe2c86a5e4981cb", "message": "Some additional logging to troubleshoot failure to start test (#1525)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/62bc23c42a90e3b48e7f0ec737cb907755d06877", "message": "Build: Enable 'npm run build-debug' again (#1515)\n\n* Add additional config for debug builds\r\n\r\n* Fix up configs to enable debug builds again"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c8dc1482a4a6a54b45604b251775b5312528e9b4", "message": "Bugfix: Crash in completion providers when a completion provider returns 'null' (#1516)\n\n* Add test case for CompletionProviders\r\n\r\n* Add red test case exercising crash in production\r\n\r\n* Get test green"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2600d22b70d53baef9ec00a9914f7ca587c3fbbe", "message": "UX: Add a simple spinner while a search query is in progress (#1522)\n\n* Refactor SearchPaneView to separate file\r\n\r\n* Add a small spinner while the search query is in progress for visual feedback"}, {"url": "https://api.github.com/repos/onivim/oni/commits/952367eefba7c663424a4de2b55169062d8c6a6f", "message": "Make animation a bit more subtle (#1521)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/45d7098a24dc7c8820b643943f078a4ea0a32dc6", "message": "Sidebar - Refactoring: Separate Explorer initialization (#1520)\n\n* Add explorer\r\n\r\n* Add explorer entry\r\n\r\n* Refactor explorer initialization to an explicit activate as opposed to being implicitly added with the sidebar"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b9365dd26a83e8e8eaf67a94b21bda8954d44808", "message": "Skip writing logs if the test passed, to make the log easier to read (#1518)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d6b6697f13c53d39270ab2f9d79f2818d5c046b6", "message": "Improve robustness of our process-kill strategy (#1517)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/327f80bbff8cc312582b67f64e24eda946e40ac1", "message": "Code Coverage: Upload from script (#1519)\n\n* Log additional coverage info, move reporting into script to avoid cleanup issues\r\n\r\n* Fix typo in build script"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d794db5652bae9582e219fc872531e1b08a4d444", "message": "Fix issues generating lcov (#1512)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ede1167c170d042219bebf61a113d748c9e29c09", "message": "Syntax Highlight - Part 2 - Use 'TokenColor' instead of highlight groups (#1485)\n\n* Add TokenColors service\r\n\r\n* Plumb through token colors as dependency\r\n\r\n* Fix up issue where the token color event wasn't firing\r\n\r\n* Fix lint issues\r\n\r\n* Plumb token colors through the rest of the way\r\n\r\n* Put in a placeholder for converting token style\r\n\r\n* Resolve colors to hex\r\n\r\n* Start stubbing out a test case for TokenColorsTests\r\n\r\n* Update to use real colors\r\n\r\n* Update test interfaces, get tests green\r\n\r\n* Fix typing\r\n\r\n* Factor MockThemeLoader to separate file\r\n\r\n* Bring in bold/italic from nvim_get_hl_by_name\r\n\r\n* Remove TODO\r\n\r\n* Start refactoring to handle synchronizing token colors\r\n\r\n* Hook up synchronization of token colors\r\n\r\n* Scope VimHighlights down to the original configuration values\r\n\r\n* Stub out tests\r\n\r\n* Start stubbing out a mock neovim instance interface for testing requests\r\n\r\n* Add simple test cases for NeovimTokenColorSynchronizer\r\n\r\n* Fix bold/italic handling\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ff67b786ad5d60832b69dc2343038b15ca0e1979", "message": "Automation: Kill any running Oni processes prior to running the test (#1511)\n\n* Update tests to kill running Oni processes if there are any\r\n\r\n* Fix filter logic"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ca0e1f0296fa68e4cb2b91182da9a75882bb76fc", "message": "Re-enable code coverage (#1507)\n\n* Try re-enabling code coverage\r\n\r\n* Restrict the path remapping further"}, {"url": "https://api.github.com/repos/onivim/oni/commits/046541851999a07f23d4fc69cb7d26e5880d6d45", "message": "Automation - report running processes on test start (#1505)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/322ae699b66dc323df39ab43f0ab47ec47c2a013", "message": "Add test case for toggling the sidebar split (#1508)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c82755a0df699cbba6833c867d046c824f64f0b4", "message": "Bug Fix: Notifications - cancel button doesn't do anything (#1503)\n\n* Fix cancel button behavior, and add some styling tweaks to make it a bit more obvious that it is a button\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5db8ffe8ec08df573c364df87d5a17f92364e1fa", "message": "Syntax Highlight - Part 1 - Extract tokenColors into theme + merge with user config (#1484)\n\n* Add TokenColors service\r\n\r\n* Plumb through token colors as dependency\r\n\r\n* Fix up issue where the token color event wasn't firing\r\n\r\n* Fix lint issues\r\n\r\n* Resolve colors to hex\r\n\r\n* Start stubbing out a test case for TokenColorsTests\r\n\r\n* Fix typing\r\n\r\n* Factor MockThemeLoader to separate file\r\n\r\n* Bring in bold/italic from nvim_get_hl_by_name\r\n\r\n* Remove TODO"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7db752a68c2e4da4cc1220d69bb673770b069f06", "message": "Notifications: Add configuration setting to enable / disable (#1504)\n\n* Wire up configuration settings\r\n\r\n* Add setting for notifications"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0a943a643654973db6d59e9812a9f35283970152", "message": "Add a null check before calling 'handleInput' on buffer, as there may be cases where a buffer is not available yet (#1501)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ef344c1b37286253f62072be1302c29670f09177", "message": "Make search box clickable (#1496)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/22d6e69a8216d9cb18d0f8ec54b28559f4e5cdc0", "message": "Tweak CONTRIBUTING.md, adding some guidelines for PRs (#1495)\n\n* Tweak the contributing guidelines, adding in some implicit ideas/assumptions I had in mind for PRs\r\n\r\n* Additional tweaks\r\n\r\n* Fix typo\r\n\r\n* Fix typo"}, {"url": "https://api.github.com/repos/onivim/oni/commits/945cc5be138776f91a9a380fe750e37a09a8d656", "message": "#1261 - Part 1 - Add checks in automation to fail if there are any errors reported in the log (#1491)\n\n* Add checks to fail if there are any errors reported in the log\r\n\r\n* Fix first round of key errors\r\n\r\n* Fix first round of React errors\r\n\r\n* Add allowLogFailures flag to NoInstalledNeovim test\r\n\r\n* Fix error in SignatureHelpView\r\n\r\n* Try moving react from external -> bundled to get production bits\r\n\r\n* Fix issue with react build\r\n\r\n* Add 'allowLogFailures' to the new ErrorBoundary test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ab2a4cc208457f1176a756c327b5eaa2bab439b9", "message": "Add monitor for unhandled errors / rejections, and show in notifications (#1494)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9a24b8200634b0cc354d6fc2c99506e1368f9eb0", "message": "Error Handling: Add Error Boundaries on window splits (#1493)\n\n* Add error boundaries\r\n\r\n* Add initial error component\r\n\r\n* Create component for error info\r\n\r\n* Make error text selectable\r\n\r\n* Add CiTest"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4b53c068213959f3a199f1267657775072289450", "message": "Refactoring: Move embedded browser from 'extension' -> 'core' (#1492)\n\n* Move browser back to core\r\n\r\n* Fix syntax issues in conversion"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ab0704a25c4db2425d193809942d26da7d0562a7", "message": "Search: Add 'control+shift+f' / 'meta+shift+f' keyboard shortcut (#1482)\n\n* Add initial shortcut plus ability to focus a particular sidebar pane\r\n\r\n* Add control-shift-f/meta-shift-f shortcut\r\n\r\n* Fix keybinding on Mac"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e43fc979fef4e594dd4361abe6ecd0564e180f3a", "message": "Add back additional component in menu (#1481)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/99f51fa422d076c6f20958c59bb5862e25bd4615", "message": "Set branch name for uploads (#1480)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0c609fe801c79c595e3322e707e79b50d88583bf", "message": "Sidebar - Explorer: Add subtle animation for caret when expanding / collapsing (#1479)\n\n* Refactor explorer to use common component, and update animation in shared container\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e92115daab1cdf299554b76f1300806d33f24f1c", "message": "Sidebar: Add toggle functionality (#1477)\n\n* Add hook for showing / hiding sidebar\r\n\r\n* Add toggle functionality to sidebar\r\n\r\n* This adds a command / key binding to toggle sidebar visibility\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/767ea3f1a450a7e38e223b3d77b3b4c3b66dba7c", "message": "Add script to copy packed files to s3_dist folder (#1476)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cc07a7be9b5500f40c0225701d4ab9b10351e441", "message": "Add overflow handling to explorer items (#1473)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/75b37fcb52ac039a9316bb6dffcf290641fbfa44", "message": "Refactoring: Migrate window management state to redux store (#1449)\n\n* Start sketching out window store\r\n\r\n* Hook up window split component to store\r\n\r\n* Remove unused WindowState file\r\n\r\n* Wire up primary split again\r\n\r\n* Get windows rendering again\r\n\r\n* Set splitId\r\n\r\n* Set up editor to grab focus by default, due to timing issue with the redux store implementation\r\n\r\n* Get navigation working with parity to functionality today\r\n\r\n* Fix lint issues\r\n\r\n* Update markdown preview to use new window API\r\n\r\n* Bring in latest oni-api\r\n\r\n* Merge with focus fix"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8433b78c4195d9d79c08370932676aa0279cde10", "message": "Clean up animation so it doesn't execute every sidebar transition (#1471)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ca94a25884cf9baf21e6cccb8754d4cf8024c6c6", "message": "Fix 'file' section in travis.yml (#1472)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/831406793485d32278f2e5aaf396636b67bd261d", "message": "Fix #1436 - Automation: Use empty config if no configuration is specified (#1455)\n\n* Use empty config if no configuration is specified, instead of falling back to users config\r\n\r\n* Fix config collision\r\n\r\n* Remove unnecessary logging"}, {"url": "https://api.github.com/repos/onivim/oni/commits/529b530ed3630e055898dca1545b18ae0e24c1f7", "message": "Window Manager: Clicking on windows should focus window (#1468)\n\n* Set up window click to focus window\r\n\r\n* Add 'noop' function as helper utility"}, {"url": "https://api.github.com/repos/onivim/oni/commits/06c5653fa9d90ead318241392c94054c688d3f9d", "message": "Disable marks by default due to #1461 (#1466)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/372e8e3bac55831b69b16e95f70868117957ae7d", "message": "Update config.yml with additional backers"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2a962972f6f19c61803ef348e80f0af6d84357e6", "message": "Add current set of backers to backers.yml"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3c9c488edabbb9fa3aa6e07e7676d72c560d3f70", "message": "Update config.yml"}, {"url": "https://api.github.com/repos/onivim/oni/commits/53622ac8acafed23afeac01f25c5f311c56d0c63", "message": "Update AWS key for media uploads (#1462)\n\n* Update access key to use IAM user\r\n\r\n* Update tokens\r\n\r\n* Update keys, add S3 deploy strategy\r\n\r\n* Fix up appveyor yml"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ada88bb12a25c7977b848bcb6437a535c4d55b94", "message": "Fix regression in react/redux devtools (#1467)\n\n* Gate isDevelopment on webpack build environment variable, too\r\n\r\n* Update electron-devtools-installer"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f1701ac1160cceec43601308b4318e1cfca9825b", "message": "Check that completionItem actually exists before accessing provider (#1457)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fbfb27a73c39f87b5c63cf9a472d228f42cb0a01", "message": "Fix #1473: Run integration tests against local electron on developer machines (#1456)\n\n* Generalize automation to work against local build and against dist build on CI machines\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/aab2ed9aa6b1b1b8af4d315d02c55899fa08300a", "message": "Re-introduce delay for querying definition that was removed during refactoring (#1454)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/52fac3fcf1a37df4d573c283cd64cdcc8c208ac5", "message": "Add entrance animations for sidebar icons (#1453)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8599ba721ac5a0e168ef8c530ce82f03abb9bf48", "message": "Add configuration gate for plugins (#1452)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/aa678392d2729c47f06ea5e16113971b71e4b3a0", "message": "Scope down search and remove filter for now (#1451)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4973ef97668cb899c6aba296cac67d0b729bbe21", "message": "Bugfix: Scrollbar keys (#1450)\n\n* Add distinguished key, and filter for duplicates\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3784778a4c3ed1f1e656c57b099c986de0feb3b6", "message": "Sidebar - Search: Debounce search requests (#1448)\n\n* Add debounce logic to search provider\r\n\r\n* Add additional logging for finder process"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8d0e2c1d0b162e4523d9de57be01db8c7e7d18d1", "message": "Sidebar: Initial vim marks integration (#1430)\n\n* Stub out marks integration\r\n\r\n* Start adding marks integration\r\n\r\n* Add test case for mark line parser\r\n\r\n* Add marks object / integration\r\n\r\n* Integrate full set of marks\r\n\r\n* Use neovim marks as data source\r\n\r\n* Remove ConfigurationBookmarksProvider\r\n\r\n* Start splitting marks between global / local\r\n\r\n* Hook up containers to bookmarks pane\r\n\r\n* Fix lint issues\r\n\r\n* Update marks on buffer enter\r\n\r\n* Clean up marks UI a bit"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1b95bcf2d7a164af25ba70f02587057350cf4568", "message": "Command Palette: Two small bug fixes (#1445)\n\n* Add some extra padding when there is no icon in the menu\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7061f55d4c237f6596e0d1c0e62a741ccde37a1e", "message": "Update CONTRIBUTING.md with guidelines for becoming a collaborator, and bounties."}, {"url": "https://api.github.com/repos/onivim/oni/commits/e8fc9e0b4f655e1dd15d1408a2ef5b578d89f5e2", "message": "[WIP] Sidebar: Plugins Pane (#1431)\n\n* Add initial plugins sidebar pane\r\n\r\n* Add initial plugins pane / initialize\r\n\r\n* Add plugin sources\r\n\r\n* Categorize plugins by default / user"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3543cd2f5337ad721d47be45b4e7458af0c66494", "message": "Change sneak binding to control g (#1433)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6ec62e08e77ac6ee723e1e6d2aa63e0b9cf75bde", "message": "Sidebar: Search UX (#1428)\n\n* Add saerch file\r\n\r\n* Add some initial UX\r\n\r\n* Hook up empty experience to search pane\r\n\r\n* Hook up workspace changes to search view state\r\n\r\n* Start hooking up and styling text inputs\r\n\r\n* More styling work\r\n\r\n* Factor open folder and make it directly callable off of the workspace object\r\n\r\n* Initial search UX\r\n\r\n* Integrate search provider with search ux\r\n\r\n* Wire up onchange properties\r\n\r\n* Starting wiring up search UX -> search provider\r\n\r\n* Add search provider"}, {"url": "https://api.github.com/repos/onivim/oni/commits/23e053375ca76d4617dee106c6e87d2fe6dded96", "message": "Handle enter event directly in the TextInputView (#1432)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6a895cd12f94c908c42ad5efe14c863fc5def73d", "message": "Initial RipGrep workspace search integration (#1394)\n\n* Initial search integration\r\n\r\n* Get search working, rendering in quickfix\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2b472510801bfac0537a3a0b7941eb21f3c1e57d", "message": "Fix #1396 - Navigation Quirks (#1425)\n\n* Add option to disable loading init vim explicitly\r\n\r\n* Clean up configuration settings - as opposed to adding a new option, push the configuration upward\r\n\r\n* Fix configuration settings for shared instance"}, {"url": "https://api.github.com/repos/onivim/oni/commits/189ce95887ea7ef31e151463f4ab7616bee9d32c", "message": "[WIP] Bookmarks Pane (#1388)\n\nBookmarks Pane"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2182e62814465da418171c10a94808091b3be02d", "message": "Upgrade electron to 1.8.2-beta5 (#1422)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cd417d3d3fe10cab7f837377cec41971a3a1a6c4", "message": "Fix regression in enter/space keys (#1423)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a254186c23eb863ba23cf74abc50766501440902", "message": "Automation: Change screenshot automation to navigate to root directory (#1416)\n\n* Change screenshot automation to navigate to root directory\r\n\r\n* Log automation dir\r\n\r\n* Fix logging for screenshot output\r\n\r\n* Set recorder output path after switching workspace"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8b8a5257a856ac2e1ec0a807103c287a3e3093ba", "message": "Refactoring: Push some common commit / cancel handling into the TextInputView (#1420)\n\n* Refactor TextInputView to explicitly handle textbox\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a913dd1902413d99ceb68454eaffe4bc1dd267ab", "message": "Fix gap at top of sidebar (#1418)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6152cd46c4a4f63ccdc5892ad5cde44bf03f746d", "message": "Update theming for textinput components (#1417)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/36e744f36cc7d3617431af3e4e1d983afd0f455a", "message": "Use larger screenshot (#1411)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0c6e0822a254efa3afa033f90a2949b528cb4ced", "message": "Explorer: Empty Experience (#1410)\n\n* Add SidebarEmptyPaneView.tsx\r\n\r\n* Incorporate empty view with explorer\r\n\r\n* Fix up styling of empty view\r\n\r\n* Sneakify empty experience button\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/26e114c12272cf6140c87ab451dee98145e99c89", "message": "Welcome: Hook up Vim navigation (#1398)\n\n* Allow buffer layers to handle input\r\n\r\n* Styling cleanup\r\n\r\n* Revert hardcoding the welcome experience"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4341b6fd7d9259dce256a4b5ee854cf7aca184e2", "message": "UX: Make top border for explorer/sidebar/editor behave consistently (#1403)\n\n* Clean up border behavior for split\r\n\r\n* Spruce up border on sidebar icons\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a9768d9cffd829262c58443be4484e4a1d7b9839", "message": "#366 - Part 1 - Keyboard accessibility for non-vim UX (#1376)\n\n* Start prototyping sneak UI\r\n\r\n* Some progress towards prototyping sneak UI\r\n\r\n* Add 'sneak-style' UI + helper component\r\n\r\n* Fix up lint issues / remove addressed comments\r\n\r\n* Add bold highlighting, use colors from colorscheme\r\n\r\n* Tweak visual styling of sneaks\r\n\r\n* Fix lint issues\r\n\r\n* Add placeholder binding for s/S"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d02e750c3a520653ac76ca4bbaea858b7ace94e8", "message": "Add 'react-virtualized' for scrollbars in Menu (#1352)\n\n* Add react-virtualized as dependency; start hooking up to menu\r\n\r\n* Add rendered styles\r\n\r\n* Hook up width autosizer\r\n\r\n* Hook up min width\r\n\r\n* Start plumbing through configuration settings to store\r\n\r\n* Hook up configuration values\r\n\r\n* Fix styling of menu\r\n\r\n* Add radix parameter\r\n\r\n* Bump up max items to show setting"}, {"url": "https://api.github.com/repos/onivim/oni/commits/262098fefd7e82bb69b0b9b68ff66ba6af3d18d8", "message": "Input: Reverse lookup API (#1365)\n\n* Add 'getBoundKeys' method and unit tests\r\n\r\n* Show bound keys in command palette\r\n\r\n* Add keyparser info\r\n\r\n* Merge master\r\n\r\n* Get parsing tests green\r\n\r\n* Fix missed semicolon\r\n\r\n* Revert suppressing the file open behavior\r\n\r\n* Clean up typescript package file\r\n\r\n* Fix lint issue\r\n\r\n* Add KeyBindingInfo\r\n\r\n* Improve look and feel of reverse bindings\r\n\r\n* Restore pinned icon in quick open\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4c0588822a1f7b0781546442b7499f13a4a515ca", "message": "Automation: Inline configuration settings, instead of needing to specify an external file (#1401)\n\n* Use embedded config\r\n\r\n* Handle case where there are no settings\r\n\r\n* Fix generation of configuration file"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d14e2f80441e264a5e3ded2eb2ccdbed113fedab", "message": "[WIP] Fix #98 - Create basic notification UX (#1358)\n\nFix #98 - Create basic notification UX"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4fe51a30226a1d4f4fdc2715926b05a39b5dfd86", "message": "Revert nord's mode colors, in favor of the previous colors (#1399)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a5b4ab3fc12baba008cf6e58ab6cd15391cbcf5f", "message": "Fix workspace open regressions (#1393)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e8d4ee25d7c19103aa5288ba9aba7a0fd41e596e", "message": "Enable sidebar by default (#1392)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fdb93e413c6daef431c0449a817d3ce15211081d", "message": "Use 'nord' colorscheme by default (#1389)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bc86337e50845cfd73a029511db364b2000c824c", "message": "Run prettier over markdown / json files (#1395)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f090b7f3bd9cd81fc63d1a9f2bd76f2ba461e1d6", "message": "Add overflow handling to buffer layers (#1391)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0f0446f9225ef9b0c51e38b016830bbe0c92548d", "message": "Bump version -> 0.2.22 (#1390)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/97509200be2851391f437222c19877e8f2a564ac", "message": "Upgrade tslint to 5.9.1 (#1384)\n\n* Upgrade tslint, run 'fix lint'\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b080be2bd99a8906c06f7d13f8edfdc0599de58a", "message": "Explorer: Focus editor window when file is selected (#1374)\n\n* Focus editor window when file is selected\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ea44c692b722da37bb01c8d589853db878a13b51", "message": "Update README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8d796c4044679a9f78d91cb201a0bc6400c910a5", "message": "Explorer: Fix focus behavior & make items clickable (#1364)\n\n* Tweak to plumb onClick event through\r\n\r\n* Add underline decoration on hover, and scroll into view if needed\r\n\r\n* Suppress no empty block message"}, {"url": "https://api.github.com/repos/onivim/oni/commits/dfa76e0ad27b0cfb71f21f5e0b29fb897c97fea7", "message": "Set up editor initialization to be sequential instead of parallel (#1368)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a43dfff73320b4afe88ddc80df3e9387524b52ba", "message": "Enable OSX builds again (#1369)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0233f49e85d9c93ed56c17c2f189208d3737d8db", "message": "Add sleep to stabilize close check (#1371)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5865dc50fbbf7b53fdc616ad230c681c0b3d3a85", "message": "Remove duplicate open folder command (#1370)\n\n* Remove duplicate open folder command\r\n\r\n* Remove unused remote"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a4f81102ce883c5f0c1519b9cd91998418bbb7ff", "message": "Prettier: Additional formatting fixes (#1366)\n\n* Run prettier on missed files - .less, extensions, and vim plugins\r\n\r\n* Use common tslint.json for typescript\r\n\r\n* Fix tslint suppression"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bd61e36eee0cdd3816abaaaa135de13e5bfac15e", "message": "Window Split Management (#1363)\n\n* Add window management\r\n\r\n* Fix compilation errors\r\n\r\n* Start scaffolding out different types of SplitProviders\r\n\r\n* Move WindowManager to folder\r\n\r\n* Move WIndowSplit\r\n\r\n* Move WindowSplitTests\r\n\r\n* Clean up typings for Direction / SplitDirectoin\r\n\r\n* Fix inverse function\r\n\r\n* Get tests passing\r\n\r\n* Add LinearSplitProvider\r\n\r\n* Start stubbing out LinearSplitProvider\r\n\r\n* Start stubbing out LinearSplitProvider\r\n\r\n* Refactor to use new paradigm for navigation\r\n\r\n* Fix up navigation\r\n\r\n* Add 'unhandled move' event\r\n\r\n* Fix lint issues\r\n\r\n* Split out code to separate classes\r\n\r\n* Factor files out, fix compilation errors\r\n\r\n* Rename files to match class name\r\n\r\n* Fix compilation error"}, {"url": "https://api.github.com/repos/onivim/oni/commits/30c186aec1496ac9a8f6aa2af93a2b9fc98e0646", "message": "Run prettier on all files in repo (#1362)\n\n* Run prettier on all files in the repo\r\n\r\n* Temporarily remove pre-push hook\r\n\r\n* Start tweaking settings to get lint passing\r\n\r\n* Fix some tslint errors\r\n\r\n* Fix lint issues\r\n\r\n* Disable align rule, since prettier takes care of that for us\r\n\r\n* Add prepush rule back\r\n\r\n* Fix test lint error"}, {"url": "https://api.github.com/repos/onivim/oni/commits/348fe866094decc6fceed1c3d00840324962400e", "message": "Workspace: Fix bugs with test-file mappings (#1360)\n\n* Fix compilation errors\r\n\r\n* Add test case for resolving variables\r\n\r\n* Hook up  variable resolution\r\n\r\n* Fix lint issues & config mapping\r\n\r\n* Fix lint issues in tests"}, {"url": "https://api.github.com/repos/onivim/oni/commits/dec1182ad26ebe76673c2689822b9fa474c4c4f8", "message": "Fix bug with absolute paths for opening files (#1359)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b96a3018d7b3eb8dc4871e76a69afa13f6630580", "message": "Regression: Fix external command line that was broken by #1356 (#1357)\n\n* Fix regression in external commandline after the change to move Menu -> Overlay\r\n\r\n* Fix lint issues\r\n\r\n* Add helper class for command line box, for automation\r\n\r\n* Fix issue with wildmenu causing commandline to hide\r\n\r\n* Add test to validate command line gets shown\r\n\r\n* Fix type in test name"}, {"url": "https://api.github.com/repos/onivim/oni/commits/91c3ec48106ea8bf13ab45db76bf9fe9fde137b3", "message": "Refactoring: Move 'Menu' to use 'Overlay' API (#1356)\n\n* Refactor Menu/Tasks to explicit dependencies\r\n\r\n* Refactor menu to create overlay to host\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8c73bfe21d2447fa597f7de016bbfa51d36ce595", "message": "Sidebar: Styling tweaks (#1355)\n\n* Tweak sidebar styling\r\n\r\n* Fix selection / hover behavior"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d6e679a66b7e48136045921d721f059eaf2aefec", "message": "Welcome Experience: Add version number (#1351)\n\n* Add version number\r\n\r\n* Revert change while testing w/ npm run start\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8f11ee052874cb65cc48e02b1b7379290787da2f", "message": "Refactoring: Move 'Definition', 'Errors' and 'Scrollbar' to buffer layers (#1322)\n\n* Refactor to remove unused isActive prop\r\n\r\n* Add buffer layer manager\r\n\r\n* Initial refactoring of active window -> buffer layers\r\n\r\n* Rename NeovimLayers -> NeovimBufferLayers\r\n\r\n* Fix naming of NeovimLayersView file to match view/classes\r\n\r\n* Factor BufferLayerManager out to separate file\r\n\r\n* Start refactoring language functionality / enhancements out to 'OniEditor'\r\n\r\n* Start moving layers / language functionality to OniEditor\r\n\r\n* Fix lint issues\r\n\r\n* Fix key issue, and remove unused connect code\r\n\r\n* Fix lint issues\r\n\r\n* Factor out input so that automation can send input to OniEditor\r\n\r\n* Fix lint issue\r\n\r\n* Fix compilation error\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4b7c7da1d876eabb5485118aa90e24c447d19bbe", "message": "Fix issue with opening file from shell (#1350)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4d8697e192a72ebe3842917771afe1b5083b206b", "message": "Explorer: Remove 'recent' and streamline input handling (#1341)\n\n* Start updating Explorer, removing unnecessary pieces\r\n\r\n* Introduce 'VimNavigator' API for vim-style keyboard navigation\r\n\r\n* Refactor to remove selected id from redux store\r\n\r\n* Use existing VimNavigator implementation, factor out\r\n\r\n* Restore existing functionality\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8b492695a40343895774278a45929172d686a364", "message": "API - Completion Providers (#1329)\n\n* Add completion providers API\r\n\r\n* Add completion provider to oni api\r\n\r\n* Refactor to remove old CompletionProvider, which is just 'commitCompletion', and clean up dependencies\r\n\r\n* Add completion provider API\r\n\r\n* Fix lint issues\r\n\r\n* Sync up signature in tests\r\n\r\n* Fix up signature in test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fa0067854f8242faaba94779bc8842a24ac9b99f", "message": "Browser: Basic commands (#1290)\n\n* Make back/forward items clickable\r\n\r\n* Start stubbing out go back command\r\n\r\n* Add default bindings for browser commands\r\n\r\n* Fix compilation errors\r\n\r\n* Add oni-layer-browser to linting, and fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b4baa49f19dd4add6632ccfaafdb6327d7d954a9", "message": "Workspace: Add 'Close Folder' command (#1348)\n\n* Fix up bugs blocking clsoe folder command\r\n\r\n* Fix enabled callback for workspace\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d34f59dcc8debeaa5615950dbb8c7d21bfed752f", "message": "#1297 - Add 'editor.clipboard.synchronizeYank' and 'editor.clipboard.synchronizeDelete' settings (#1342)\n\n* Add settings for synchronizeYank/synchronizeDelete\r\n\r\n* Fix logic"}, {"url": "https://api.github.com/repos/onivim/oni/commits/da5b819b83f4b5e3a69e88021e515b722d6d1a71", "message": "Sidebar: Add 'VimNavigator' component to handle navigation (#1347)\n\n* Replace selected entry management with VimNavigator\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cb0a6dce51037a0e8c5b2163f9c2529412abdc1b", "message": "Revert \"Upgrade electron dependency (#1343)\"\n\nThere is a regression with this version of electron, that causes\nthe devtools to crash immediately when executing a command.\n\nThis reverts commit 91c8507bcf4519672c3808eb6a6c5c7135552d44."}, {"url": "https://api.github.com/repos/onivim/oni/commits/b7413f9bffd9e1b04627e3da75fcdbd3c501f5a0", "message": "Fix QuickOpenTest - not properly 'awaiting' the waitForEditors call (#1346)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d9654cb1d5302eb58daaeff86e0a97bf6a7d4ebf", "message": "Automation: Enable CiTests for linux builds (#1338)\n\n* Try downloading appimage build for linux\r\n\r\n* Run CiTests\r\n\r\n* output nvim.appimage directory\r\n\r\n* Allow specifying an environment variable for neovim path\r\n\r\n* Fix lint issue\r\n\r\n* Echo ONI_NEOVIM_PATH\r\n\r\n* Clean up logging, add logging for path\r\n\r\n* Add process.env logging\r\n\r\n* Add logging for environment variables for test too\r\n\r\n* Add 'export' line to set environment variable\r\n\r\n* Remove extraneous / verbose environment variable logging"}, {"url": "https://api.github.com/repos/onivim/oni/commits/db1fc2904fbd99b46fc8c2839c811ea565243eb5", "message": "API: Add `overlays` API (#1323)\n\n* Add Overlay service, start stubbing out state\r\n\r\n* Initialize Overlay API and hook up to Shell store\r\n\r\n* Add overlay component\r\n\r\n* Overlay paradigm\r\n\r\n* Add overlay add/remove test\r\n\r\n* Fix test and add to list of CiTests to run\r\n\r\n* Fix lint issues\r\n\r\n* Fix typo in API"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5109cd636eb1ea2d59045eb1ea94b976b1047dc3", "message": "Refactoring: Split out Commands between GlobalCommands/NeovimEditorCommands (#1316)\n\n* Split commands between GlobalCommands and NeovimEditorCommands\r\n\r\n* Fix lint issues\r\n\r\n* Fix merge conflict\r\n\r\n* Add missing argument"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7865308a8999af242d8450e34f9a4e74330f39eb", "message": "Fix #571 - Persist Opened Folder (#1312)\n\n* Add 'persist' argument and get unit tests passing\r\n\r\n* Implement PersistedConfiguration using PersistedSettings\r\n\r\n* Persist when directory changes\r\n\r\n* Fix issue where Explorer doesn't pick up workspace directory on initialization\r\n\r\n* Remove unused Oni now\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/91c8507bcf4519672c3808eb6a6c5c7135552d44", "message": "Upgrade electron dependency (#1343)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/304a765fcc229ba97c557e235be90e57fe6950af", "message": "#1226 - Part 1 - Initial layer UX for welcome screen (#1285)\n\n* Initial work on a start screen layer\r\n\r\n* Additional tweaks for the welcome layer\r\n\r\n* Some tweaks to welcome landing page\r\n\r\n* More tweaks\r\n\r\n* Add lip around layer to fix cursor overlap\r\n\r\n* Some styling improvements\r\n\r\n* Fix lint issues\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b98d85e653d9d85163ce012f50819c21f3f9b556", "message": "Start Experience: Theme picker (#1340)\n\n* Add theme picker\r\n\r\n* Hook up change to color theme\r\n\r\n* Set configuration value for theme\r\n\r\n* Factor chooseTheme to separate method\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/dc7d188644fcebc592f035764f38f0a778974c3e", "message": "#55 - Part 2 - Initial snippet 'session' management (#1328)\n\n* Add tests + get tests green\r\n\r\n* setPlaceholder tests, still needs to be fixed\r\n\r\n* Fix lint errors\r\n\r\n* Try adding cloning...\r\n\r\n* Get tests green\r\n\r\n* Fix up lint issues for snippet tests\r\n\r\n* Add 'setSelection' command to editor\r\n\r\n* Stub out snippet insertion\r\n\r\n* Initial implementation of tab-through behavior\r\n\r\n* Remove commented line\r\n\r\n* Add test cases for SnippetSession\r\n\r\n* Add test cases for snippet session\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9635fea59fa485814b0b0fa6f0acc3c577fe0869", "message": "Use file icons in QuickOpen (#1327)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1b1967537a466149407cc1dd32a1474fcc9d116a", "message": "Fix #1247 - Definition should work when 'editor.quickInfo.enabled' is false. (#1314)\n\n* Add stub tests\r\n\r\n* Add failing unit tests to exercise #1247\r\n\r\n* Implement 'editor.definition.enabled'"}, {"url": "https://api.github.com/repos/onivim/oni/commits/54d3dcd706e160df82db354787a96179d5963184", "message": "#68 - Part 3 - Add integration test (#1289)\n\n* Add 'ci' test for workspace configuration\r\n\r\n* Add configuration test\r\n\r\n* Revert change to getTemporaryFilePath"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a869db75401259a18c3035822dc050d04f073398", "message": "Feature - 'workspace.testFileMappings' (#1283)\n\n* Write initial tests for getMappedFile\r\n\r\n* Add FileMappings utilities, plus test cases\r\n\r\n* Fix lint issues\r\n\r\n* Add command for test file mappings\r\n\r\n* Integrate master; fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3a5fd9db60798572a3bd3c19355b017092f68153", "message": "Automation: Temporarily remove OSX strategy until TravisCI issues are resolved (#1337)\n\n* Temporarily remove OSX, until TravisCI issues are resolved\r\n\r\n* Removing code coverage until builds are stabilized"}, {"url": "https://api.github.com/repos/onivim/oni/commits/26abcd4c5cb889f6ba5588a7d388f4fe3019d8f4", "message": "Automation: Fix instability with 'NoAdditionalProcesses' test (#1335)\n\n* Increase timeout for MacOS first run failure; tweak logging and show logs before trying to get the reuslt.\r\n\r\n* Add explicit wait for initializing shared neovim instance\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9ba6f55b6ee5664e9b7cea8651e2e2368fca3309", "message": "Fix #1296: Colors not showing correctly for some themes (#1303)\n\n* Listen from 'Colors' object as opposed to 'ThemeManager'\r\n\r\n* Fix lint issues\r\n\r\n* Add test case\r\n\r\n* Enable test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a0feb12d3fd9213bb87caf112f1b99e53a3a04d7", "message": "Fix regression in editor.quickInfo.show functionality (#1301)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/07bf5717ac33ee3cd7faa1abc375fd6e05a965d4", "message": "Use ONI_WEBPACK_LOAD environment variable instead of NODE_ENV (#1313)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a5cbb53fce654c0047cd60f46a48028e84e53ff4", "message": "Remove 'Sponsors' badge"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fef2e10d1abf55bcb4126fbb5ed86cf5dde0ac4d", "message": "#55 - Part 1 - Initial snippet service (#1284)\n\n* Add tests + get tests green\r\n\r\n* setPlaceholder tests, still needs to be fixed\r\n\r\n* Fix lint errors\r\n\r\n* Try adding cloning...\r\n\r\n* Get tests green\r\n\r\n* Fix up lint issues for snippet tests"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0da6a86b10cb07bde313c037c0fea3be0a14919c", "message": "Small change to bump up brightness of cursor in nord (#1311)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3387952894324ccba5d2eebbeee6c7c336a5b8a6", "message": "Add initial configuration for bot. (#1321)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c48965544d29aae459a3974f7a27f7bc815cad50", "message": "Fix #1295: Crash when opening a window w/o navigating to it (#1309)\n\n* Handle the case where the 'screenToPixel' info is empty\r\n\r\n* Add test case\r\n\r\n* Fix typo in test name"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a667ab845eec1a233d7d40949dd3f99e4b505b04", "message": "Update README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/42e3ac7b9b0818d5c13bfc544d487448ba48acf4", "message": "Center sponsors in main README"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c2662a6d8c428533ccd31d4a00c006ce93aa13c4", "message": "[WIP] Sidebar / Widget API (#1238)\n\n* Get keyboard accessibility working with widget model\r\n\r\n* Continue widget API\r\n\r\n* Split out SidebarPane elements to different files\r\n\r\n* Fix lint issues\r\n\r\n* Remove index.tsx\r\n\r\n* Fix bug in KeyboardInput where the disposable / subscription was not being released on unmount"}, {"url": "https://api.github.com/repos/onivim/oni/commits/695a69dc807aee6e9ff7f36bf7e1b52fed12927d", "message": "[OpenCollective] Fix up sponsor links in README / BACKERS (#1307)\n\n* Fix up sponsor links\r\n\r\n* Fix links / icons\r\n\r\n* Fix tiers\r\n\r\n* Fix sponsor links in README\r\n\r\n* Fix up BACKERS.md\r\n\r\n* Update BACKERS.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/208045af7b97a3870f0af10d13e43fc51abc4f03", "message": "[WIP] Enable code coverage via 'nyc'/'istanbul' (#1279)\n\n* Some work to enable code coverage\r\n\r\n* Update commands\r\n\r\n* Split out test build\r\n\r\n* Integrate code coverage in build pipeline\r\n\r\n* Add coveralls + build step to report coverage\r\n\r\n* Add code coverage badge\r\n\r\n* Remove 'include' argument\r\n\r\n* Fix coveralls report path"}, {"url": "https://api.github.com/repos/onivim/oni/commits/964aa39738c7a1d57ad426aa142b8262067a6db9", "message": "Fix #978 - Add 'tabs.showIndex' option (#1286)\n\n* Add tab index\r\n\r\n* Write DefaultConfiguration"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cf9f88d14add6d355e551a9dc4ea852befe3501b", "message": "Use 'tabs.showFileIcon' in Tabs.tsx (#1287)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5e4f77448b546ca26647282a39167dd480f17fd4", "message": "#68 - Part 2: Implement loading configuration for workspace (#1282)\n\n* Refactor usages of user configuration helper methods\r\n\r\n* Refactoring to wire in configuration instance\r\n\r\n* Fix lint issues\r\n\r\n* Add some initial unit tests for Configuration\r\n\r\n* Add test case for error event\r\n\r\n* Fix lint issues\r\n\r\n* Factor Workspace to a subdirectory\r\n\r\n* Add tests for configuration\r\n\r\n* Get first remove test green\r\n\r\n* Get other remove test green\r\n\r\n* Add explicit activation for Workspace, and hook up configuration strategy\r\n\r\n* Fix remaining merge issues\r\n\r\n* Add .oni folder back, with config file\r\n\r\n* Start getting WorkspaceConfiguration under test\r\n\r\n* Implement test for workspace being set before WorkspaceConfiguration is initialized\r\n\r\n* Implement test for switching from one workspace to another\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/de732833fe66ddbd4a6ee7bd8d842d9a40fce02d", "message": "Fix part of #1272 - Clearing highlights when line has moved (#1278)\n\n* Fix issue where line isn't being cleared after being modified\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7292e94ed12334bc4d3d8707b72c0ec0328751a0", "message": "Revert \"Remove default command line icon/Add Octicons (#1249)\"\n\nUnfortunately, this change breaks 'npm run start', by not\nallowing reload of the app. We get a 'TypeScript emitted\nno output...' error, whenever a file is modified - even\nif there are no errors.\n\nPotentially related to the other issues we had with\n'react-component-octions'.\n\nThis reverts commit c01ae065c853e50471b7e4b17f4cadbb019fe7f7."}, {"url": "https://api.github.com/repos/onivim/oni/commits/6409adca385baf6ed5f7c720ebcb3c0b05f59891", "message": "#68 - Part 1 - Refactor 'Configuration' to support multiple configuration providers (#1270)\n\n* Refactor usages of user configuration helper methods\r\n\r\n* Refactoring to wire in configuration instance\r\n\r\n* Fix lint issues\r\n\r\n* Add some initial unit tests for Configuration\r\n\r\n* Add test case for error event\r\n\r\n* Fix lint issues\r\n\r\n* Fix missed 'clock' refactor"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3d9c943a8211bdf7a541d38521af947023d748d1", "message": "Fix #1265 - Bring 'editor.completions.enabled' back, as a deprecated configuration (#1269)\n\n* Add red test\r\n\r\n* Implement editor.completions.enabled, make test green\r\n\r\n* Add quick and dirty deprecated configuration check\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e85be79f4d97a74bae1a6563ddbffb518359d31e", "message": "Auto-Closing Pairs: Fix race condition on initial buffer enter (#1273)\n\n* Fix race in AutoClosingPairs, where the auto-closing pairs may not be initialized for very first buffer\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5728490b318e1fdd18a487d134eb9119d21f8d8e", "message": "Fix #1263 - Rename also renames strings (#1274)\n\n* Switch 'findInStrings' to false\r\n\r\n* Change 'findInComments' to false"}, {"url": "https://api.github.com/repos/onivim/oni/commits/877c62eaa13abc8073414eb98f08285e90ace3fd", "message": "Fix #1251 - TypeScript standalone server is always spawned on startup (#1267)\n\n* Fix typescript server starting immediately on activate, defer initialization until first request\r\n\r\n* Defer initialization of TypeScriptServerHost until first 'didOpen' request comes in\r\n\r\n* Add regression test for 1251\r\n\r\n* Add API to get set of processes spawned by Oni, and use that to validate only 2 process are created\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d60fa91374b4d3f30730d96d6b635cbf56c3c3ed", "message": "Fix #1265 - Flicker / movement of neovim popup menu (#1268)\n\n* Add fix for cursor position moving to command line row\r\n\r\n* Revert changes to RequestAnimationFrameNotifyBatcher\r\n\r\n* Revert changes to NeovimLayersView.tsx"}, {"url": "https://api.github.com/repos/onivim/oni/commits/972882401af5feb7c1ff5793aaaa57be98249265", "message": "[WIP] Fix #1264 - 'showmatch' causing tab to lose focus (#1271)\n\nFix #1264 - 'showmatch' causing tab to lose focus"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a0fa3d7a3104e469c981e9e007f39d364e0efbc0", "message": "Explorer: Implement 'delete' gesture (#1262)\n\n* Initial delete item implementation\r\n\r\n* Extract out filesystem dependency for testability\r\n\r\n* Implement test\r\n\r\n* Refactor existing tests to use strongly typed TestHelpers\r\n\r\n* Fix lint issues\r\n\r\n* Improve path strategy so that it is platform independent\r\n\r\n* Fix test so it passes on windows\r\n\r\n* Update store tests to get green"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f830a0edc1ccbd64f4e96811059320601aec71aa", "message": "Feature - Browser: Add experimental configuration and stub out UX (#1233)\n\n* Start creating browser layer\r\n\r\n* Move styled-components to external module\r\n\r\n* Fix some bugs around the layer rendering, and set up initial browser UX\r\n\r\n* Remove extra whitespace\r\n\r\n* Fix lint issues\r\n\r\n* Tweak styles\r\n\r\n* Fix lint issue in test\r\n\r\n* Fix lint issue in oni-layer-browser"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1ffba1d228d09c149e7ec210171ff803abd07be6", "message": "Update BACKERS.md\n\nAdd @mchalkley to the list of backers. Thank you for the contribution!"}, {"url": "https://api.github.com/repos/onivim/oni/commits/512b42e5eeab7f7a2dd7a164c5e138af4c892696", "message": "Bump package version to 0.2.21 (#1255)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/57e3c63b2086ff90714a8fe5f2ee7b64f91a7c85", "message": "Some updates / tweaking of README (#1254)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/01adf733430fb1bf76062c23ebede88387a8b5e6", "message": "Fix link to build section"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e44d944b33f5509f96ff1ef2cdbe428c336d1e35", "message": "Performance (Perceived): Separate loading / entrance for editor (#1236)\n\n* Some test animation\r\n\r\n* Fix lint issues\r\n\r\n* Fix order of loading overlay so that it doesn't collide with the install help UX\r\n\r\n* Add 'oni.status.gitHubRepo' and remove hard-coded item\r\n\r\n* Remove 'loaded' state from status bar since it is no longer needed"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d4d0e4666a9233efc5fdc1af0df716ca52c184d8", "message": "Automation: Use spectron to get console logs (#1239)\n\n* Get logs from spectron instead of reading from element\r\n\r\n* Use spectron's strategy for retrieving logs"}, {"url": "https://api.github.com/repos/onivim/oni/commits/59a74cecbc18128542aba589a10e57eb894b5718", "message": "Sidebar - Refactoring: Move from hardcoded items to dynamically added (#1231)\n\n* Move styling for sidebar to styled-components, and remove state storage of colors since theming from styled-components handles that for us.\r\n\r\n* Remove unused imports\r\n\r\n* Start factoring out sidebar functionality into separate API\r\n\r\n* Start factoring out header to common component for all panes\r\n\r\n* Set up sidebar content wrapper\r\n\r\n* Hook up existing explorer implementation as dynamic sidebar item\r\n\r\n* Factor sidebar items out"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ea7ce427f9e5f217bd22e84a4b62a9ddd87ce0d5", "message": "Dependency: Integrate 'vscode-html-languageserver-bin' (#1208)\n\n* Add HTML language server\r\n\r\n* Add test for HTML\r\n\r\n* Add HTML to ci test list\r\n\r\n* Escape the '<' character in test case"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7e6954b30ec36ae070f7938e7e8ac8e060536585", "message": "Refactoring: Use 'styled-components' for Sidebar (#1229)\n\n* Move styling for sidebar to styled-components, and remove state storage of colors since theming from styled-components handles that for us.\r\n\r\n* Remove unused imports\r\n\r\n* Remove SidebarManager"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8029782990c0d9960ac3f9515357261afc0b8fa5", "message": "Add key to scroll bar container (#1228)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0fa51983c4174daab604c6b61f488459869f2c68", "message": "Fix #963 - Delete word in 'lightweight' text (#1227)\n\n* Add 'ctrl-u', 'ctrl-h', and 'ctrl-w' emulation in TextInputView\r\n\r\n* Re-use TextInputView in menu component\r\n\r\n* Fix lint issues\r\n\r\n* Fix method ordering"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cf6b74f4d034625b85add6b471d711b4c3b59e8f", "message": "Regression: Fix missing titlebar on OSX (#1218)\n\n* Fix regression in OSX window title\r\n\r\n* Add id to titlebar\r\n\r\n* Add CI test to validate OSX window title"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5580e5da78086ed9d19d42acf83e874a512f4e60", "message": "Feature: Layers API (#1223)\n\n* Wire up add layer action\r\n\r\n* Add test cases for reducers\r\n\r\n* Add 'addLayer' method to buffer\r\n\r\n* Implement layers rendering\r\n\r\n* Pass in windowId\r\n\r\n* Bring in layer API, implement\r\n\r\n* Add Api.Buffer.AddLayer test\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/85bcacf471fbb335db93ec2b8fe7f061d15751ab", "message": "Dependency: Upgrade to 'oni-api' 0.0.23 (#1222)\n\n* Upgrade to oni-api 0.0.22\r\n\r\n* Upgrade oni-api dependency to 0.0.23"}, {"url": "https://api.github.com/repos/onivim/oni/commits/77108cae6218107a42c232b4048a0ad7ddc5a71f", "message": "Add filetype changed event (#1217)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/931f648edf3c23ec77cbba3365069f2b1568cf33", "message": "Refactor: TextMate Highlighting improvements (#1215)\n\n* Use common store infrastructure\r\n\r\n* Start refactoring to make SyntaxHighlightReconciler more testable\r\n\r\n* Syntax highlight prepatory refactoring\r\n\r\n* Get reconciler tests green\r\n\r\n* Remove throttling, because animation frame throttling is incoprated by default in the common store strategy\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c32ca6c041752f79524ed604d30651c34618f1f1", "message": "Dependency: Use 'oni-api' v0.0.20 (#1219)\n\n* Bump dependency\r\n\r\n* Fix typings\r\n\r\n* Fix typing in oni-layer-browser\r\n\r\n* Update typing in markdown-preview plugin\r\n\r\n* Fix typo"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7a6dd355d0e62eac8dc31d8ddd08cabc62428a2c", "message": "Integrated Browser - 1: Add browser-layer plugin (#1214)\n\n* Add oni-layer-browser project\r\n\r\n* Hook up open url command\r\n\r\n* Get working end-to-end\r\n\r\n* Add build/lint steps"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ebcb0678591ef0574190e337ab373080f51dc7ff", "message": "Refactoring: Remove unused cross-browser-ipc request (#1206)\n\n* Remove unused cross-browser-ipc request\r\n\r\n* Remove unused webcontents"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c62d1e32f620124cf571a16aae1f3600b9e068e5", "message": "Replace css-language-server with vscode-css-languageserver-bin (#1207)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/24ef623b69453118d243b44d9085e640ae129a31", "message": "Refactoring - Status Bar: Explicit dependencies / initialization (#1184)\n\n* Factor out status bar, make dependencies explicit\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/348a72ae6a23d731741daea489db3a611c2efb3e", "message": "Fix #1178 - Incorrect client capabilities (#1185)\n\n* Clean up client capabilities\r\n\r\n* Fix up client parameters\r\n\r\n* Fix capabilities\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f7ebfcb5f619f2dc5ae111085c6d77b346928050", "message": "Fix regression in opening files from command line (#1182)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4615af21d2417c2ce081fc687e61e1177b36a857", "message": "WIP: Track size for all windows on tabpage (#1180)\n\nTrack size for all windows on tabpage"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9d0ec95a231607736bcae3259ca45fe45af2c280", "message": "Refactoring: Remove global state from 'NeovimEditor' (#1175)\n\n* Factor out editor-facing store\r\n\r\n* Move NeovimEditor components to NeovimEditor folder\r\n\r\n* Add index file\r\n\r\n* Factor neovim editor to a subfolder\r\n\r\n* Create seam to decouple HoverRender from 'UI'\r\n\r\n* Break dependency on UI for colors in popup menu\r\n\r\n* Break dependency on 'UI' from NeovimPopupMenu\r\n\r\n* Hook up window manager and initialization\r\n\r\n* Migrate viewport functionality to NeovimEditor\r\n\r\n* Prune some functionality from the shell store\r\n\r\n* Remove SET_NEOVIM_ERROR from the Shell store\r\n\r\n* Remove tabs/buffers from shell state\r\n\r\n* Remove Neovim window state from shell state\r\n\r\n* Remove more unused actions from the shell UI\r\n\r\n* Remove MessageDialog references\r\n\r\n* Wire up containers to use new store\r\n\r\n* Remove 'tabs' from shell state\r\n\r\n* Clear out cursor state in shell state\r\n\r\n* Remove Vim window state from Shell state\r\n\r\n* Remove ActiveWindowDimensions\r\n\r\n* Remove now-unused actions\r\n\r\n* Remove some more unneeded actions for the shell\r\n\r\n* Factor out dependency on UI setImeActive in KeyboardInput\r\n\r\n* Remove imeActive from shell state\r\n\r\n* Remove font state from shell store\r\n\r\n* Remove definition reducer\r\n\r\n* Create a class for Rename and move alongside editor\r\n\r\n* Remove entry in language\r\n\r\n* Remove references to UI in Rename\r\n\r\n* Factor out commands to separate class\r\n\r\n* Update keybindings\r\n\r\n* Factor ContextMenuManager to instance, leverage tool tips provider\r\n\r\n* Factor out bounce from KeyboardInput\r\n\r\n* Factor out dependency on global UI for signature help\r\n\r\n* Minimize 'UI' surface area\r\n\r\n* Remove unused action creators\r\n\r\n* Bring back tasks\r\n\r\n* Start factoring diagnostics out to a separate service\r\n\r\n* Get errors working\r\n\r\n* Remove unused / unnecessary actions\r\n\r\n* Remove redundant definition selector\r\n\r\n* Factor out definitions to be local to editor\r\n\r\n* Factor symbols to an instance\r\n\r\n* Fix issue with symbolInfoToMenuItem\r\n\r\n* Move containers to the editor\r\n\r\n* Migrate files to place UI components that are specific to NeovimEditor nearby\r\n\r\n* Migrate shell-specific actions to Shell folder\r\n\r\n* Wire up Shell  pieces\r\n\r\n* Some lint fixes\r\n\r\n* Fix lint issues\r\n\r\n* Fix up merge issues\r\n\r\n* Fix lint issues in Oni"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ee8fb3a39be16a25338d628eeb9aac2aebc12df9", "message": "Add performance test for paint + DOM nodes (#1150)\n\n* Add paint performance test\r\n\r\n* Add PaintPerformanceTest + custom config\r\n\r\n* Fix header line\r\n\r\n* Promote cursor to layer, to minimize repaint\r\n\r\n* Fixes for test, to at least verify that the typing experience is within a single row\r\n\r\n* Fix lint errors\r\n\r\n* Sort alphabetically\r\n\r\n* Add in paint performance test\r\n\r\n* Test: Does removing some components improve paint?\r\n\r\n* Log GPU information\r\n\r\n* Revert \"Test: Does removing some components improve paint?\"\r\n\r\nThis reverts commit ebc94f1fc67c2287c9af87693e0f8d03544f0bed.\r\n\r\n* Fix lint issue\r\n\r\n* Modify validation based on whether gpu compositing is enabled\r\n\r\n* Add fix for BasicEditingTest\r\n\r\n* Fix basic editing test\r\n\r\n* Add additional logging for window state\r\n\r\n* Sanity check - does taking out custom config change paint frame results?\r\n\r\n* Scope paint performance test to Windows only... it's better than nothing!\r\n\r\n* Fix environment variable name\r\n\r\n* Add 'wait for editors' call to the PaintPerformanceTest\r\n\r\n* Gate paint rectangle validation such that it is only on Windows\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/77c65b4c9f802e6af7a6571dd15a0b99ac1f44c5", "message": "Improve typescript error reporting (#1161)\n\n* Improve typescript error reporting\r\n\r\n* Fix lint issues\r\n\r\n* Bring back newline\r\n\r\n* Create new buffer update strategy\r\n\r\n* Improve buffer update logic\r\n\r\n* Remove unnecessary logging, now that we have Redux devtools\r\n\r\n* Rename BufferUpdateManager\r\n\r\n* Fix lint errors"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2e4cfb3597e2f6d3842164accfaf655ec690ad69", "message": "Automation: Fix 'NoInstalledNeovim' case (#1157)\n\n* Fix message when no neovim executable is available\r\n\r\n* Move responsibility of waiting for editors, and add call to all tests except NoInstalledNeovim\r\n\r\n* Fix compilation error\r\n\r\n* Re-enable NoInstalledNeovim test\r\n\r\n* Remove BasicEditingTest\r\n\r\n* Remove extra newline\r\n\r\n* Fix typo in configuration file\r\n\r\n* Add missing wait to HeroScreenshot test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4b5176952cd74ff31ee483fc3083f4ca4aecc1fe", "message": "Fix lint issues (#1166)\n\n* Run 'fix-lint' command\r\n\r\n* Fix 'lint' check to use the tsconfig.json project file, so that it checks 'tsx' files too.\r\n\r\n* Run fix-lint again"}, {"url": "https://api.github.com/repos/onivim/oni/commits/566c17892943f547136a1619d1a28280897e14b5", "message": "Flip the width/height to match the previous behavior (#1168)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b11ee48d01d3b54db341f36629e62f343404f5f2", "message": "Fix #1154 - Use environment variable to specify configuration path for integration tests (#1167)\n\n* Instead of copying configuration file, use and specify an environment variable\r\n\r\n* Fix lint issue\r\n\r\n* Remove old config references"}, {"url": "https://api.github.com/repos/onivim/oni/commits/27e6e10f3e42e79cdb25151e208645ae422b189f", "message": "Remove basic editing test (#1165)\n\n* Fix basic editing test\r\n\r\n* Remove BasicEditingTest, as it's covered by other tests"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5f3964fa38734dd14ca5815ac49f96d0516e8a42", "message": "File Explorer: Implement folder expansion (#1158)\n\n* Add UI affordance for showing expanded folders\r\n\r\n* Fix path issue to allow expansion to work\r\n\r\n* Get update working\r\n\r\n* Set up indentation + collapsing for folders\r\n\r\n* Remove empty file paths from opened files"}, {"url": "https://api.github.com/repos/onivim/oni/commits/179c20a39b799cb6271569adac8c4bccb37cf9b8", "message": "Automation - OSX: Fix false positive (#1153)\n\n* Add 'set -e' flag to bash to tell it to bail if there is a non-zero exit code for any command\r\n\r\n* Revert if inversion\r\n\r\n* Remove extra new line\r\n\r\n* Add timestamps, and bump uptimeout\r\n\r\n* Remove unused stability tests\r\n\r\n* Remove extra parentheses\r\n\r\n* Ignore arguments passed from Spectron\r\n\r\n* Add warning that arguments are being cleared\r\n\r\n* Add a wait for startup to complete\r\n\r\n* Fix start call\r\n\r\n* Temporarily deactivate NoInstalledNeovim test to unblock CI\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/57929c06a02fe6e886747bda45ac2c9412ccd2fd", "message": "[WIP] #943 - Split bundle via async imports (#1123)\n\n#943 - Split bundle via async imports"}, {"url": "https://api.github.com/repos/onivim/oni/commits/579986e4be9f0f26ca7a9bdac4edf2d73ce1d836", "message": "Pass in name parameter to redux devtools (#1152)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/62d96f1aba5dcbb6f6c7a430d9f0755f6a6beb5b", "message": "Fix #1149 - Handle  shift+space key (#1151)\n\n* Add failing test\r\n\r\n* Special case the space key in the resolver\r\n\r\n* Fix lint issues in test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/df99926ddf2c1c750cbb0b3cfac7f84165cf459e", "message": "[WIP] #1146 - Fix perf / responsiveness regressions (#1148)\n\n* Fix performance regression in ActiveWindow\r\n\r\n* BufferScrollBar - keey dynamic properties as inline styles\r\n\r\n* Revert dynamic classes from cursor styling\r\n\r\n* Revert dynamic classes for CursorLine\r\n\r\n* Use inline styles for dynamic properties in Definition.tsx, port over and delete less\r\n\r\n* Port over error squiggle style, and remove unused less\r\n\r\n* Work on porting over Error.less to Error.tsx\r\n\r\n* Revert changes to errors, as the squiggles are no longer showing up\r\n\r\n* Remove unused Message tsx/less\r\n\r\n* Revert changes to CursorPositioner"}, {"url": "https://api.github.com/repos/onivim/oni/commits/79bf5fd74a550b8fc96c36f74f6bce48300c86e2", "message": "Styled Components: Fix completion flicker (#1147)\n\n* Update yarn file\r\n\r\n* Fix remaining lint issues\r\n\r\n* Convert some commas -> semicolons\r\n\r\n* Remove cursor.less file\r\n\r\n* Factor out components to prevent re-rendering of completion UI\r\n\r\n* Fix up styles in Arrow.tsx\r\n\r\n* Remove CSSTransitions from the tooltip, as they are no longer applicable\r\n\r\n* Fix completion flicker\r\n\r\n* Fix missed return statement\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c2db957822bbfc1fad2dbd75138943e1ff6408d2", "message": "Fix #1009 - Persist background color (#1117)\n\n* Add electron-settings\r\n\r\n* Update background color\r\n\r\n* Persist background color when it changes\r\n\r\n* Clean up lint issues\r\n\r\n* Move electron-settings out of development dependency\r\n\r\n* Use main process for electron-settings instance\r\n\r\n* Fix build issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9fa83a62ff35f535cef81d5e5f2d8a3f418df01d", "message": "Styled Components: Fix cursor rendering (#1145)\n\n* Convert some commas -> semicolons\r\n\r\n* Remove cursor.less file"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9f91373a5e47a6058b4d639d0a6fcb3d288c0797", "message": "Styled Components: Fix remaining lint issues (#1143)\n\n* Update yarn file\r\n\r\n* Fix remaining lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f2ed795048755088f1f6b47dfe78ccd0b8ff2d56", "message": "Bump version to 0.2.20 (#1131)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f8a9e1fcf201ced2cb4113e7f5c84171b660294a", "message": "Update download links to 0.2.19"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b7a52e5628f0262ba43cdb6fd420ec9092edcce8", "message": "Add nord theme (#1130)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ad760414bc6d30481117d08567e6cba7550c8f1e", "message": "[WIP] #747 - Alternate QuickOpen filter (#1124)\n\n#747 - Alternate QuickOpen filter"}, {"url": "https://api.github.com/repos/onivim/oni/commits/68671386ec749b4e3f25ce71695c03fdccd697e7", "message": "Bugfix: No language support on first opened TS/JS file (#1126)\n\n* Some refactoring to support getting LanguageManager under test, start stubbing out unit test\r\n\r\n* Start implementing the test\r\n\r\n* Factor buffer enter to separate method that is callable from register as well, get unit test green\r\n\r\n* Fix regression in languages when opening file via argument\r\n\r\n* Remove 'only'"}, {"url": "https://api.github.com/repos/onivim/oni/commits/be9254679cca8bcfd8c7a184bae56f82b265d268", "message": "Fix #372: Add metrics for startup performance, and parallelize paths (#1118)\n\n* Measure startup performance, and parallelize paths\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/57e6a688fa4bbe6c6b3cbb14e8665a1b94a23258", "message": "Fix #1076 - Hide titlebar on OSX in fullscreen (#1115)\n\n* Add fullscreen state to store, leverage for titlebar\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cd9939d78679d6c2d59d323ce0cfa84860e89440", "message": "Fix #1064 - Large files crash in Oni (#1113)\n\n* Bring in buffer limit everywhere, defer loading files until after Neovim is initialized\r\n\r\n* Fix compilation errors\r\n\r\n* Create test case to exercise #1064\r\n\r\n* Add test case\r\n\r\n* Add LargeFileTest\r\n\r\n* Clean up lint issues, set statusbar in case where file is too large"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e0c84b9b38a0902956d1859fbd9c77ee7e7f7892", "message": "File Explorer: Add folder background + initial population of opened files (#1112)\n\n* Add highlight color to folder when selected\r\n\r\n* Implement populating opened files\r\n\r\n* Get tests green\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/be8a27f52dea4f314492b2b000eae500a0ce8bfc", "message": "Fix syntax highlighting token colors"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bb2b2f88558c2bdd2a2e35a751bc4cfd52461f92", "message": "Feature: Enable typing prediction by default (#1110)\n\n* Remove 'experimental' flag from editor.typingPrediction\r\n\r\n* Add typing prediction on by default"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a8a726cb3566f80df426dbb208f1a405d267dbac", "message": "Remove checking the branch indicator on buffer changed, due to performance regression (#1106)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c0a7426c95c178731edb94d595cfdbe740f445f8", "message": "Fix #1039: Typing predictions mid-line (#1107)\n\n* Keep track of the latest screen state we've seen, so that we can check if we'll overlap a character with our prediction\r\n\r\n* Add failing unit test that covers #1039\r\n\r\n* Fix bug causing UT to crash\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/38e00cc0b62ac3cc35b6f6590eb30d3c0ffa3b5a", "message": "Update e-mail address in code of conduct."}, {"url": "https://api.github.com/repos/onivim/oni/commits/aa25f1e5389bda036b5b3d8b10248a35394dbc9e", "message": "#1038 - Fix highlight colors in typing prediction (#1071)\n\n* Add include for IScreen\r\n\r\n* Move screen/actions to neovim folder\r\n\r\n* Fix lint issues\r\n\r\n* Stub out test for TypingPredictionManager\r\n\r\n* Stub out test / mock for IScreen\r\n\r\n* Fix duplicate actions\r\n\r\n* Get TypingPredictionManager under test\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5f73dd1ccde883e8f11bb67b2927c3bc03f383b6", "message": "[Experimental] File Explorer (#1104)\n\n* Stub out some window navigation, and bring in SharedNeovimInstance\r\n\r\n* Add SharedNeovimInstance.ts\r\n\r\n* Hook up input for sidebar\r\n\r\n* Start factoring out shared neovim instance\r\n\r\n* Fix compilation errors in SharedNeovimInstance\r\n\r\n* Start implementation of MenuBinding\r\n\r\n* Got navigation to the right started\r\n\r\n* Implement moving back and forth between side bar\r\n\r\n* Start styling and differentiating between focus/active\r\n\r\n* Fix some lint issues\r\n\r\n* Get keyboard accessibility working for sidebar\r\n\r\n* Split out Sidebar components\r\n\r\n* Bring in colors from theme\r\n\r\n* Fix first round of lint issues\r\n\r\n* Fix lint issues\r\n\r\n* Start file explorer\r\n\r\n* Add missed ExplorerSplit file\r\n\r\n* Progress on explorer\r\n\r\n* Add selector to convert tree to a linear format\r\n\r\n* Get initial set of expanded files, hooked up to icons\r\n\r\n* Handle overflow and render folders\r\n\r\n* Get cycling through left dock panes working\r\n\r\n* Start hooking up binding to the Explorer split\r\n\r\n* Start hooking up keys and navigation for file explorer\r\n\r\n* Add selection capability to the explorer\r\n\r\n* Hook up file explorer to workspace manager, instead of hardcoding path\r\n\r\n* Use normal-mode highlight color in sidebar for consistency\r\n\r\n* Fix first round of lint issues\r\n\r\n* Fix remaining lint issues\r\n\r\n* Set up infrastructure for handling keybindings for file explorer\r\n\r\n* Implement initial 'open file' action\r\n\r\n* Set up focus state for core editor\r\n\r\n* Add focus state to explorer\r\n\r\n* Fix lint issues\r\n\r\n* Fix merge conflict\r\n\r\n* Only render spacer if there is a sidebar"}, {"url": "https://api.github.com/repos/onivim/oni/commits/743f9094651744e358a3aa46a6dbed28fefb3858", "message": "Fix 'experimental.sidebar.enabled' setting (#1103)\n\n* Fix experimental sidebar setting - it wasn't being used\r\n\r\n* Pass configuration to editor start, to pull the sidebar setting"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8cd2e9cf0f14fff31a52e66f6c11e85905a35be9", "message": "Remove experimental prefix on settings, enable by default (#1102)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5caad964c0bc55fe9050ae5424756fe7078e751d", "message": "Disable auto-update by default, since it is a no-op anyway (#1101)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/68c290a8dfda08e88d46d10a813466f50fd52ac5", "message": "Show mode highlight in tab bar (#1091)\n\n* Add configuration setting for tabs.highlight\r\n\r\n* Always highlight buffer if it is the only buffer open (workaround for initial empty-file case"}, {"url": "https://api.github.com/repos/onivim/oni/commits/091aa27788aeb258e566635019f59f3cc06b567e", "message": "Sidebar Part 2 - Neovim Input + Theming (#1090)\n\n* Stub out some window navigation, and bring in SharedNeovimInstance\r\n\r\n* Add SharedNeovimInstance.ts\r\n\r\n* Hook up input for sidebar\r\n\r\n* Start factoring out shared neovim instance\r\n\r\n* Fix compilation errors in SharedNeovimInstance\r\n\r\n* Start implementation of MenuBinding\r\n\r\n* Got navigation to the right started\r\n\r\n* Implement moving back and forth between side bar\r\n\r\n* Start styling and differentiating between focus/active\r\n\r\n* Fix some lint issues\r\n\r\n* Get keyboard accessibility working for sidebar\r\n\r\n* Split out Sidebar components\r\n\r\n* Bring in colors from theme\r\n\r\n* Fix first round of lint issues\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f04822d7d1285c9c953bb494acbdc405adfbc7fd", "message": "File Icons: Bring in some tweaks / fixes that were missed (#1089)\n\n* Remove vs-seti-icon-theme.json\r\n\r\n* Fix path in icon loader\r\n\r\n* Fix up cross-platform styling"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1b62f32fa52a724d4a81c9a216a5a1ad03584b89", "message": "Feature: Icon themes (+bundling the Seti UI theme) (#1087)\n\n* Add seti icons\r\n\r\n* Start prototyping icon provider\r\n\r\n* Make progress on applying IconThemes\r\n\r\n* Start creating loading loigic for icons\r\n\r\n* Move IconThemes\r\n\r\n* Got icons rendering\r\n\r\n* Add logic to get icon class for file\r\n\r\n* Align tab items\r\n\r\n* Add a subtle entrance animation\r\n\r\n* Refactor to separate files\r\n\r\n* Align modified circle with other elements\r\n\r\n* Fix lint issues\r\n\r\n* Load icon font dynamically"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9a02a9368c2fae903aef84c702e8b617c64907c7", "message": "Refactor start method to better facilitate asynchronous loading (#1085)\n\n* Add LoadingView / isLoading\r\n\r\n* Factor some of the browser configuration logic outside of the start method\r\n\r\n* Move theme loading prior to starting the editor\r\n\r\n* Add subtle animation, set background color when changing themes\r\n\r\n* Fix lint issues\r\n\r\n* Refactor LoadingView out to separate file; delay cursor entrance until previous animations complete\r\n\r\n* Tweak cursor entrance animation\r\n\r\n* Fix lint issue\r\n\r\n* Don't gate initialization on editor startup\r\n\r\n* Fix up some issues with initialization, especially when Neovim is not available. Clean up color scheme\r\n\r\n* Make the entrance animation a bit less intense"}, {"url": "https://api.github.com/repos/onivim/oni/commits/23822545b4aaff55c61ac58a5b7e8a4906d1f3e3", "message": "Feature - Sidebar (Part 1) (#1079)\n\n* Add experimental flag for sidebar\r\n\r\n* Start refactoring WindowManager interface\r\n\r\n* Start porting over subset of the file explorer changes (pertaining to window manager and sidebar\r\n\r\n* Stub out experimental sidebar\r\n\r\n* Sidebar\r\n\r\n* Get feature gate working\r\n\r\n* Fix lint errors"}, {"url": "https://api.github.com/repos/onivim/oni/commits/844bb49c49c4d10e90d2337322f9de6e8b743b60", "message": "#1076 - Crash on buffer change event (#1078)\n\n* Exercise the crash exposed in 1076 via a unit test\r\n\r\n* Only push cursor moved if there was a cursor movement"}, {"url": "https://api.github.com/repos/onivim/oni/commits/53c0eb51a99a73093ab42cf841640f39276023fc", "message": "Bugfix: Hide neovim popup menu when switching buffer (#1077)\n\n* Hide popup menu on buffer enter\r\n\r\n* Hide neovim popupmenu on buffer enter"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e50500b7a21836dac25e6e15b05c5f4e060cee14", "message": "Handle whitespace / indentation with auto-closing pairs (#1057)\n\n* Add unit test + prefix whitespace in enter case\r\n\r\n* Handle whitespace in auto-closing pairs\r\n\r\n* Add auto closing pairs tests\r\n\r\n* Update test\r\n\r\n* Temporarily modify logging, remove caching from getLines call, in order to investigate failure.\r\n\r\n* Remove caching, because it doesn't work reliably\r\n\r\n* Diagnose last issue causing test to fail - sometimes the test is run before the autoclosing pairs bindings are initialized.\r\n\r\n* Deterministically wait for buffer, and for input binding to be set\r\n\r\n* Add wait for buffer to load\r\n\r\n* Remove cached lines entirely, because they were consistently problematic\r\n\r\n* Remove stubs for caching buffer contents\r\n\r\n* Remove reference to bufferLines\r\n\r\n* Clean up test\r\n\r\n* Stabilize test by explicitly waiting for insert mode to be reported\r\n\r\n* Get test passing\r\n\r\n* Remove last console.log\r\n\r\n* Bring back logging redirector\r\n\r\n* Fix typo in completion"}, {"url": "https://api.github.com/repos/onivim/oni/commits/45f51c59b40dab399f96f2476e9040ee75ee725e", "message": "Automation: Re-enable CSS test (#1075)\n\n* Re-enable CSS test\r\n\r\n* Use shared createNewFile utility"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a82651c2904b1d404267f2e5d243af2773162a74", "message": "Fix #1063: Overly aggressive definition underlining (#1070)\n\n* Add failing regression test to exercise bug in #1063\r\n\r\n* Get new regression test green\r\n\r\n* Get old test green, it can't get away with using an empty object to simulate success anymore.\r\n\r\n* Clean up logic, tuck away nesting into a state selector\r\n\r\n* Fix missing import\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/365fb2832fa99d9e9915c9891e22f4a952d444d8", "message": "Fix #980 - Use `undojoin` + `nvim_call_atomic` for atomic undo (#1005)\n\n* Use undojoin for applyEdit operation\r\n\r\n* Use silent! undojoin to ignore error"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9e70e1a8789f8f2fe25edd0f5489c6710e906c9a", "message": "Automation: Add explicit wait for Neovim initialization (#1073)\n\n* Add an explicit wait for Neovim to be attached, since it seems the automation sometimes runs before Neovim is initialized fully.\r\n\r\n* Fix lint issues\r\n\r\n* Set init complete flag on error, true\r\n\r\n* Add helper to wait for file to open"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e8bdda46f2d079929fee9154b245a3d8a4743bc8", "message": "Center image in README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/337c48b8ec5ebe02d73fcf37a6963d5250fdc0ff", "message": "Use auto-published screenshot"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5baf5c2da5d1e59a526308b5167121bbe2f65881", "message": "Bump version to 0.2.19 (#1060)\n\n* Bump version to 0.2.19 in package.json\r\n\r\n* Bump version to 0.2.18 in README, to update downloads"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cf531a4488544dcc755f521eeae754166e4c5906", "message": "Performance - Typing Prediction: Fix whole-screen repaints (#1056)\n\n* Fix up rendering of predictions, in order to prevent whole-page repaints\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/42ecacd4f7f6bf8518ac5146448a99afced62cf6", "message": "TypeScript & JavaScript: Use \"definition\" instead of \"typeDefinition\" (#1054)\n\n* Add 'definition' method in TypeScriptServerHost\r\n\r\n* Use 'getDefinition' instead of 'getTypeDefinition' for more predictable go-to-definition behavior"}, {"url": "https://api.github.com/repos/onivim/oni/commits/166cc7068a97236f41edc4bcd0311507db02d448", "message": "Fix small bugs around configuring colors (#1052)\n\n* Fix case where colors from configuration weren't being properly respected\r\n\r\n* On Windows, the configuration can return null while the save is in progress - ignore in tht case\r\n\r\n* Fix case where configuration is actually null because it is not defined"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f00a2b6c2164f7bf929d6018d58451e37cd02c76", "message": "Update to oni-api@0.0.7 (#1053)\n\n* Cherry-pick to bring in scroll event\r\n\r\n* Fix up remaining build issues\r\n\r\n* Fix lint error"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d7586420368e3863056895b8e603c2ec1f874388", "message": "Automate demo video on website (#862)\n\n* Refactor out to test/common\r\n\r\n* Fix issues running integration tests\r\n\r\n* Restore tests\r\n\r\n* Add HeroDemo + DemoTest file\r\n\r\n* Disable demo, enable screenshot test\r\n\r\n* Add screenshot\r\n\r\n* Add demo files\r\n\r\n* Add hack to hook alert to know when test is completed\r\n\r\n* Fix linting\r\n\r\n* Fix stuff deleted in merge\r\n\r\n* Fix some issues with the test\r\n\r\n* Update screenshot to be named per platform, and add as artifact tow indows build too\r\n\r\n* Run demo screenshot generation\r\n\r\n* Stabilize test\r\n\r\n* Get better logging\r\n\r\n* Disable demo on OSX for now, since it still needs to be stabilized\r\n\r\n* Try bumping out timeout, to see if there is a timing issue with getting the results"}, {"url": "https://api.github.com/repos/onivim/oni/commits/34d4cd21e4ef70bfa4bc4558145a70003701679a", "message": "Completion Improvements: Unit tests + Bug Fixes (#1049)\n\n* Factor language state to store\r\n\r\n* Hook up new LanguageEditorIntegration model to store\r\n\r\n* Update Language store\r\n\r\n* Add HoverRequestor\r\n\r\n* Hook up Definition end-to-end, addressing case where the definition underline is out-of-date\r\n\r\n* Hook up hover\r\n\r\n* Clear hover and definition on buffer enter (actually fixing 1006)\r\n\r\n* Fix diagnostics issue\r\n\r\n* Fix issue with finding diagnostics\r\n\r\n* First round of lint fixes\r\n\r\n* Refactor to enable some unit testing\r\n\r\n* Some major re-plumbing to expose a greater surface area for unit-testing\r\n\r\n* Stub out some additional tests\r\n\r\n* Stub out tests\r\n\r\n* Fix comment\r\n\r\n* Correct NeovimEditor's subscription to mode changed event\r\n\r\n* Start creating unit test mocks\r\n\r\n* Add electron-mocha\r\n\r\n* Add 'debug' command for unit tests\r\n\r\n* Get first test green\r\n\r\n* Get first test green\r\n\r\n* Create red test for slow hover response test, and make green\r\n\r\n* Remove extra console log\r\n\r\n* Fix lint issues, and update travis CI with xfvb\r\n\r\n* Create a 'HoverRenderer', and hook up to NeovimEditor\r\n\r\n* Hook up HoverRenderer and get quick info working again end-to-end\r\n\r\n* Write failing test to exercise that hover should be hidden on mode change\r\n\r\n* Make failing unit test green\r\n\r\n* Add case to exercise a slow response after mode changing\r\n\r\n* Get test case green\r\n\r\n* Expose an 'editor.quickInfo.show' command, that can be used to explicitly show hover, ignoring the enabled setting\r\n\r\n* Fix lint issues\r\n\r\n* Move xvfb initialization to script, only run for linux\r\n\r\n* Refactor + add seams to enable unit testing\r\n\r\n* Factor CompletionMenu out\r\n\r\n* Abstract out completion request/details to interface\r\n\r\n* Add comment regarding future refactoring\r\n\r\n* Remove now-unused code\r\n\r\n* Get simple completion case green\r\n\r\n* Add additional test cases\r\n\r\n* Set up test suite for completion behavior\r\n\r\n* Fix lint issues\r\n\r\n* Factor audit logic to store, get test passing\r\n\r\n* Get first-item test case green\r\n\r\n* Remove 'only'\r\n\r\n* Create failing unit test\r\n\r\n* Get completion configuration test green"}, {"url": "https://api.github.com/repos/onivim/oni/commits/76bab4e3c8e416620be434d6dfc7de7e57ae87d8", "message": "Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/afe8755e88842469465a7c42940dbf0d9453d7f6", "message": "#1006 - Hover state only on cursor moved (#1044)\n\n* Factor language state to store\r\n\r\n* Hook up new LanguageEditorIntegration model to store\r\n\r\n* Update Language store\r\n\r\n* Add HoverRequestor\r\n\r\n* Hook up Definition end-to-end, addressing case where the definition underline is out-of-date\r\n\r\n* Hook up hover\r\n\r\n* Clear hover and definition on buffer enter (actually fixing 1006)\r\n\r\n* Fix diagnostics issue\r\n\r\n* Fix issue with finding diagnostics\r\n\r\n* First round of lint fixes\r\n\r\n* Refactor to enable some unit testing\r\n\r\n* Some major re-plumbing to expose a greater surface area for unit-testing\r\n\r\n* Stub out some additional tests\r\n\r\n* Stub out tests\r\n\r\n* Fix comment\r\n\r\n* Correct NeovimEditor's subscription to mode changed event\r\n\r\n* Start creating unit test mocks\r\n\r\n* Add electron-mocha\r\n\r\n* Add 'debug' command for unit tests\r\n\r\n* Get first test green\r\n\r\n* Get first test green\r\n\r\n* Create red test for slow hover response test, and make green\r\n\r\n* Remove extra console log\r\n\r\n* Fix lint issues, and update travis CI with xfvb\r\n\r\n* Create a 'HoverRenderer', and hook up to NeovimEditor\r\n\r\n* Hook up HoverRenderer and get quick info working again end-to-end\r\n\r\n* Write failing test to exercise that hover should be hidden on mode change\r\n\r\n* Make failing unit test green\r\n\r\n* Add case to exercise a slow response after mode changing\r\n\r\n* Get test case green\r\n\r\n* Expose an 'editor.quickInfo.show' command, that can be used to explicitly show hover, ignoring the enabled setting\r\n\r\n* Fix lint issues\r\n\r\n* Move xvfb initialization to script, only run for linux\r\n\r\n* Don't render empty tooltip\r\n\r\n* Remove zip strategy for now, since it is problematic for builds"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d9694d94afcbea1401ccb719e7acccbf99aadb59", "message": "Fix #1037 - Crash in GrammarLoader + go syntax file (#1043)\n\n* Fix crash in GrammarLoader; add go.json syntax file\r\n\r\n* Add README.md for go\r\n\r\n* Add default textmate file for go"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d164220b8a6fd54cb7877c2a108f5a8a8e1fe90b", "message": "Remove some extraneous logging (#1045)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f9f59afe15f409c91a69c5750c4461df7acca26a", "message": "#1007 - Add 'editor.scrollBar.cursorTick.visible' option (#1041)\n\n* Add a key to the scrollbar container\r\n\r\n* Add configuration value for cursor tick\r\n\r\n* Revert changes to BufferScrollBar\r\n\r\n* Revert change to WindowManageR\r\n\r\n* Revert container change\r\n\r\n* Revert change to BufferScrollBarContainer\r\n\r\n* Update 'getMarkers' selector to account for the 'editor.scrollBar.cursorTick.visible' option"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0aebc892ac691d866cda14cf366f4fae7ed744f7", "message": "Upgrade oni-api to 0.0.6 (#1042)\n\n* Upgrade dependency to 0.0.6\r\n\r\n* Explicitly implement Oni.IWindowManager to ensure that the interface is kept in sync"}, {"url": "https://api.github.com/repos/onivim/oni/commits/694229b6d565b0657e6c23fefb9087080d916fca", "message": "Fix regression in predicted text colors (#1036)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/488a686e518188e58ed5d3c883ca0716426d830a", "message": "Add sleeps to improve stability of AutoCompletion tests. (#1032)\n\n* Add sleeps to improve stability of AutoCompletion tests.\r\n\r\nLong-term, we need to investigate why there is an issue here\r\ncausing the AutoCompletion to fail - it seems like there may\r\nbe a timing issue when typing very quickly after switching mode.\r\n\r\n* Remove unused test\r\n\r\n* Remove CSS test until it can be stabilized"}, {"url": "https://api.github.com/repos/onivim/oni/commits/14eca795bfd07906a5b4932402ca4c8c50a4b9c2", "message": "Fix #981 - Use 'editor.fontFamily' for completion / tooltips (#1035)\n\n* Clean up fonts, update rename to not have additional text\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6c92b1dbf2850454c94d186b01ac6d8dcf872116", "message": "Add enter key to auto closing pairs (#1025)\n\n* Add enter key to auto closing pairs\r\n\r\n* Fix lint issues\r\n\r\n* Add logging for 'dir' to narrow down the CSS case failure\r\n\r\n* Fix error where '_oldDir' is not defined"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6d827d6a3121d978b5f5a83db11880e825c4d743", "message": "#956 - Fix completion case that was still broken (#1031)\n\n* Fix case that was still broken - when changing mode, the old meet would still be picked up\r\n\r\n* Use switchMap instead of mergeMap, to reduce number of completion calls\r\n\r\n* Simplify action logging"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f1247f8d45bb1aac608da885f06fa7b86a0f7535", "message": "Fix #63: Synchronize titlebar color on OSX (#1034)\n\n* Create component + state management for window title, use frameless window on OSX\r\n\r\n* Create connected component to store, hook up title\r\n\r\n* Add 'title' colors and update 'onedark.json\r\n\r\n* Only show window title on Mac\r\n\r\n* Fix lint issues\r\n\r\n* Derive the titlebar / background color from the theme color"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4f80d33140139ec6cc1d32ae63cb16ed6ac27aac", "message": "Add 'ui.fontSmoothing' configuration, which directly sets '-webkit-font-smoothing' on the body (#1033)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/524f115ab4b5596548f5be914069c447de2baf50", "message": "Add unit test to exercise filter exception, and then get the test green (#1028)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/906880c0ce6dcef8852adae9efe228f88fd31056", "message": "#950 - `ui.colorscheme` setting (#975)\n\n* Start adding 'vim.colorscheme' setting\r\n\r\n* Start stubbing out ThemeManager\r\n\r\n* Add todo comments\r\n\r\n* Continue theming work\r\n\r\n* Refactor plugins\r\n\r\n* Move onedark\r\n\r\n* Add onedark package\r\n\r\n* Start wiring up themes / colorschemes\r\n\r\n* Synchronize color theme between vim <-> theme manager\r\n\r\n* Hook up subscriptions completely\r\n\r\n* Fix up lint issues\r\n\r\n* Update to use colors from package\r\n\r\n* Remove foreground & background, and generalize to colors\r\n\r\n* Finish merge\r\n\r\n* Start adding more colors to the onedark theme\r\n\r\n* Implement colors reconciler, along with loading colors from config\r\n\r\n* Add 'colors' concept and hook up status bar to respect the values\r\n\r\n* Fix menu and context menu highlight colors\r\n\r\n* Some code cleanup\r\n\r\n* Use the theme colors for onedark as mode colors\r\n\r\n* Fix highlight for context menu\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/eac2e4d7fd0ca517388d61cc0dad7e51540b59b3", "message": "Fix regression in status bar loading (#1027)\n\n* Fix timing issue with statusbar\r\n\r\n* Fix timing issue with loading / initialization\r\n\r\n* Add identifiable classname for mode\r\n\r\n* Add test case for statusbar\r\n\r\n* Refactor out getElementByClassName, use in new test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a94255d945a890d276374cf4c9b93fc48f4eb1f4", "message": "Use common 'createStore' method for shell / UI (#1026)\n\n* Use common 'createStore' method\r\n\r\n* Fix issue with shared requestAnimationFrame functionality, where not all callbacks would be fired.."}, {"url": "https://api.github.com/repos/onivim/oni/commits/e2dc9bcbfc11b2d73061deaada865fda26bed9ef", "message": "Fix #956 - Fix autocompletion oddities (#972)\n\n* Refactor Completion logic to use redux-observable + epics\r\n\r\n* Split out completion functionality into store/reducers/epics/selectors\r\n\r\n* Continue refactoring, hook up commit completion\r\n\r\n* Get first round of selection working\r\n\r\n* Fix selecting item\r\n\r\n* Remove now-unused code\r\n\r\n* First round of lint fixes\r\n\r\n* Restore vim folder\r\n\r\n* Clean up code after merge, get building and running\r\n\r\n* Move Completion up a level, since it is not only applicable to language services\r\n\r\n* Move CompletionUtilityTest to mirror src\r\n\r\n* Complete move of Completion upward from Language folder\r\n\r\n* Fix some logging issues\r\n\r\n* Fix lint issues\r\n\r\n* Add failing unit tests for getCompletionMeet\r\n\r\n* Add unit test that exercises broken case in #956\r\n\r\n* Get unit test green\r\n\r\n* Start factoring 'createStore' to common location\r\n\r\n* Refactor to use common createStore\r\n\r\n* Add RAFNotifyBatcher\r\n\r\n* Move RAFNotifyBatcher\r\n\r\n* Rename RAFNotifyBatcher\r\n\r\n* Refactor completion logic out to handle the transitional cases\r\n\r\n* Refactor logic to handle the cases in #956\r\n\r\n* Some lint cleanups\r\n\r\n* Fix lint issue\r\n\r\n* Fix lint issue and refactoring issue\r\n\r\n* Fix rendering issue with context menu\r\n\r\n* Add CSS / TypeScript tests\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d2e270091702184ae733227bf2c04c8eb2ba9058", "message": "Remove languages folder (#1024)\n\nAccidentally introduced 'languages' folder for the TextMate changes,\r\nbut all the grammars / syntaxes are actually in 'extensions'."}, {"url": "https://api.github.com/repos/onivim/oni/commits/b29079ca2cc11e0f9d36d3b71dcb089baff6811d", "message": "Fix #1015 - Add ability to capture logs and output for test result (#1023)\n\n* Add ability to capture logs and output for test result\r\n\r\n* Clean up lint issues, and re-enable old tests\r\n\r\n* Add additional logging in getting the element\r\n\r\n* Try re-ordering the tests\r\n\r\n* Add some additional logging"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4dd43453b0de3c3e468c1991b21fe3369b98a149", "message": "[WIP / Prototype] Use TextMate themes for syntax highlighting (#848)\n\n* Add vscode-textmate\r\n\r\n* Add syntax highlighting strategy plus JavaScript textmate theme\r\n\r\n* Move to syntaxes folder\r\n\r\n* Start parsing tokens from buffer updates\r\n\r\n* Hard wire some scopes to Vim functions as a proof-of-concept\r\n\r\n* Add syntax highlighting store\r\n\r\n* Factor out to use epic\r\n\r\n* Get end-to-end working (although everything gets scoped as a function!\r\n\r\n* Update PLAN\r\n\r\n* Fix compilation issues after merge\r\n\r\n* Update Plan, initialize token colors\r\n\r\n* Tweak keyword back to purple, test out identifiers\r\n\r\n* Move settings to configuration, instead of being hardcoded\r\n\r\n* Fix first round of lint issues\r\n\r\n* Use textMateGrammar setting for loading language\r\n\r\n* Update PLAN\r\n\r\n* Fix remaining lint errors\r\n\r\n* Add 'notifyViewportChanged' handler\r\n\r\n* Remove no-op log\r\n\r\n* Hook up SYNTAX_UPDATE_BUFFER_VIEWPORT action, and filter reconciler to only grab visible rows\r\n\r\n* Add some smarts so that the Buffer can less aggressively update highlights, if the highlight is already set\r\n\r\n* Update PLAN\r\n\r\n* Batch calls to Neovim for adding and clearing highlights\r\n\r\n* Performance improvements for parsing tokens\r\n\r\n* Get working end-to-end\r\n\r\n* Get working end-to-end with incremental updates\r\n\r\n* Start cleaning up code\r\n\r\n* Start cleaning up / remove unused code\r\n\r\n* Fix lint issues\r\n\r\n* Tweak throttled values\r\n\r\n* Update PLAN.md\r\n\r\n* Fix lint issues\r\n\r\n* Add line limit\r\n\r\n* Add debug scopes element, start tweaking scopes\r\n\r\n* Fix lint issues\r\n\r\n* Update PLAN\r\n\r\n* Update PLAN\r\n\r\n* Fix tests\r\n\r\n* Update to use selector for getting the relevant range\r\n\r\n* Wire up insert mode actions\r\n\r\n* Fix some remaining bugs with synchronizing highlights\r\n\r\n* Update configuration for additional tokens, update PLAN\r\n\r\n* Additional bug fixes for syntax highligher\r\n\r\n* Fix logging\r\n\r\n* Remove line for getting syntax store\r\n\r\n* Update PLAN\r\n\r\n* Remove some unused code\r\n\r\n* Add additional logging for notifyViewportChanged\r\n\r\n* Change from info -> verbose\r\n\r\n* Fix lint issue\r\n\r\n* Update GrammarLoader to support querying based on extension\r\n\r\n* Update loader to different grammars based on file extensions\r\n\r\n* Remove PLAN, fix lint issue in GrammarLoader"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6c5f054a5f028c88aa35ab275ff8110573948a88", "message": "Performance: Batch redux notifications (#1011)\n\n* Improve react+redux render performance by batching re-renders to a requestAnimationFrame\r\n\r\n* Fix lint issue\r\n\r\n* Update predictions to instantly apply predicted cursor position, as opposed to waiting for the 'batched subscribe' invocation\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d94397e5ad058410133c55a98e34ce90eae7d077", "message": "Add backspace command (#1004)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/70728b597503173e18576d74ca455a8326f9d766", "message": "Fix a few language server regressions after upgrading to TypeScript 2.6 (#1003)\n\n* Fix a few regressions from TypeScript 2.6\r\n\r\n* Downgrade stderr output to warning, as it is not truly an error\r\n\r\n* Fix spacing issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c887399ca92207bc85664f915365d083da778386", "message": "Upgrade TypeScript to 2.6.1 (#887)\n\n* Bump typescript dependency\r\n\r\n* Remove usage of InstallHelp, because it is unused right now\r\n\r\n* Remove some unused values flagged by TS\r\n\r\n* Remove some unused values\r\n\r\n* Remove unused scrollcmdX\r\n\r\n* Remove unused end variable\r\n\r\n* Implement stubs for dispose\r\n\r\n* Fix remaining compilation issues\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7de583bc8f419e09023ac59b3ec519c61c07fdf0", "message": "Remove outdated examples (#999)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bb8ddee9df342d343133013cf5cd0db4f72756f7", "message": "Refactoring: Use 'oni-api' module (#996)\n\n* Remove Oni.d.ts\r\n\r\n* First round of moving to use 'oni-api\r\n\r\n* Next round of leveraging oni-api\r\n\r\n* Additional round of oni-api\r\n\r\n* Define EventContext internally\r\n\r\n* Fix EventContext references in NeovimWindowManager\r\n\r\n* Continue to leverage oni-api, remove unused references to Oni.EventContext\r\n\r\n* Fix up last references\r\n\r\n* Update to use oni-api module\r\n\r\n* Update TypeScript server to use 'oni-api\r\n\r\n* Remove redundant typing, as react is included with react-dom and it was causing conflicts\r\n\r\n* Remove Oni.d.ts reference"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a1217c8a49fc90a5f8b64984b663231f28deba95", "message": "Add filter for insert mode, so that we pass through <ESC> to Neovim (#995)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a7d9888a557bd867014b3aeed6623c76786f7c42", "message": "Use 'oni-types' module and remove unused code (#994)\n\n* Remove unused PromiseHelper\r\n\r\n* Avoid allocating objects unnecessarily in getCell\r\n\r\n* Refactor to use 'oni-types'\r\n\r\n* Move oni-types to dependency"}, {"url": "https://api.github.com/repos/onivim/oni/commits/18a7bff99f9cc9e0164e40b6274d3ff134d10b26", "message": "Fix #989 - Upgrade to use Neovim 0.2.2 (#991)\n\n* Grab latest oni-neovim-binaries package\r\n\r\n* Update yarn.lock"}, {"url": "https://api.github.com/repos/onivim/oni/commits/105c707d156438deb85e95724a0df3365845f72b", "message": "Build: Bring back node_modules caching in TravisCI (#971)\n\n* Bring back node-modules caching, in hopes that we won't need to download the binaries as frequently\r\n\r\n* Bump version of oni-neovim-binaries to use cached binary\r\n\r\n* Add verbose logging, to see if binaries actually downloaded, or if they were brought in via caching\r\n\r\n* Remove verbose flag"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7b5de7370dd35328a2e0bc6a54d62ddaf29b40e1", "message": "Optimistic typing updates (#946)\n\nOne consequence of the architecture we have - Electron talking to Neovim via `msgpack-rpc` - is that input has a non-trivial round-trip latency, regardless of the configuration.\r\n\r\nFor an editor, ideally you'd want an avg responsiveness of <10ms from keypress to rendering for a desirable experience (ex, [Typing With Pleasure](https://pavelfatin.com/typing-with-pleasure)). Avg of 15ms is pretty good.\r\n\r\nAt least based on the chrome profiler, we aren't there yet - and we spend a significant amount of time idling until we get a response from Neovim, in which case a bunch of stuff happens - lots of redux actions in response to mouse-move, canvas re-rendering, etc.\r\n\r\nThis change implements 'optimistic updates' - similiar to the IntelliJ IDEA zero-latency (it also has parallels to [Client-side network prediction](https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking) models used in multiplayer games, just a really simple version!).\r\n\r\nFor insert mode, we can predict fairly reliable on the cursor position + character, so we should render that _immediately_.\r\n\r\nNot only does this mean that we achieve better typing latency, but it also amortizes the workload in a more efficient way (since the cursor already moved, and lots of components get re-rendered in response to that, the canvas rendering can occur more quickly too)."}, {"url": "https://api.github.com/repos/onivim/oni/commits/42754adf39fdc34f835bfd4dcc86f7703b8d7226", "message": "Fix issue with 'Rename' dialog disappearing (#968)\n\n* Fix missed 'key' property, causing rename view to unmount\r\n\r\n* Add missed key to bufferscrollbar\r\n\r\n* Add missing key to statusbar\r\n\r\n* Fix a few more React warnings around CSS properties\r\n\r\n* Remove debug logging"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c66972e55bea36afe1b07613a47b73ba0cd15f38", "message": "If no language server is available, set status to 'not available' (#967)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/374c476d90c68b6e3aa9b398aa90fa9da005ec4f", "message": "Handle 'scoping' of language servers, so that sub-filetype selectors get mapped to the root (#966)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d2a84fc666d222c10afecdf228b172a53a1d971f", "message": "Remove results-caching logic (#965)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5f6237996558c68ea631a813e6f3b35d72ddfbda", "message": "Fix default configuration for css-language-server to pick up .scss files (#960)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/651bd399b8d3d544cf78860ecaf2fda3ffb67bb2", "message": "Add setValues API, so that automation can set the recording path (#952)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8ec57ebbf56ba48d105ab837dc0fddad1762cd25", "message": "Investigate using `yarn` for more reliable installs on CI machines (#954)\n\n* Try using yarn for more reliably dependency installation\r\n\r\n* Bump react-redux types\r\n\r\n* Fix some compile issues due to different versions of typings\r\n\r\n* Fix lint issue\r\n\r\n* Add yarn cache for appveyor\r\n\r\n* Add yarn cache for travis"}, {"url": "https://api.github.com/repos/onivim/oni/commits/22f4f4cc9046b1b169e3e5f583d49e109a439a40", "message": "Bump version in README from 0.2.16->0.217, and in package.json from 0.2.17 -> 0.2.18"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8c2efb45a532ca680c1342382a2c4bbbad8a6917", "message": "Add option to use named pipes as the transport for the msgpack-rpc API (#940)\n\n* Switch to socket transport\r\n\r\n* Start factoring out options\r\n\r\n* Add option for named-pipe transport\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e8e40130c3d631447d32bf804e524f1eb821102b", "message": "Update backer and sponsor links in README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4683f8be229c36aad65847d890683e7ea4749fca", "message": "Update BACKERS.md\n\nNeed to investigate why backers aren't showing up correctly from OpenCollective..."}, {"url": "https://api.github.com/repos/onivim/oni/commits/744fd5765131be8c93428a64b574fa7c03e3ffdb", "message": "Fix feature gate for auto-closing pairs (#941)\n\n* Fix feature gate for auto closing pairs\r\n\r\n* Fix bug with auto-closing feature gates\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6e324c4eebe650317d14d187afc8795aac026943", "message": "Fix #911 - Handle case when 'nvim' is not available on path (#937)\n\n* Add failing test to exercise #911\r\n\r\n* Bring back cleanup of config\r\n\r\n* Fix lint issues\r\n\r\n* Be nicer to user's current config (backup + restore)\r\n\r\n* Hook up VimLeave event\r\n\r\n* Add error and leaving events\r\n\r\n* Clean up InstallHelp UI\r\n\r\n* Connect InstallHelp component to store\r\n\r\n* Fix lint issues\r\n\r\n* Add mkdirp to config path\r\n\r\n* Fix missing parentheses\r\n\r\n* Fix mkdirp issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8326eeccf8d39c0254a87adb8fe799550d7ca8be", "message": "Add missed comma in setting runtime paths (#935)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/41b57148fb06661e925503f48649fcae4471c4db", "message": "Auto-closing pairs (#933)\n\n* Some testing of add pair functionality\r\n\r\n* Add experimental feature flag for autoClosingPairs\r\n\r\n* Set experimental feature flag to false by default for auto pair\r\n\r\n* Factor auto pair logic out to a service 'AutoClosingPairs'\r\n\r\n* Return a disposal function from bind for easy unbinding\r\n\r\n* Add AutoClosingPair service\r\n\r\n* Remove extra console.log\r\n\r\n* Add test case for new dispose-on-bind functionality\r\n\r\n* Refactor to not use 'Function'"}, {"url": "https://api.github.com/repos/onivim/oni/commits/27feb67aeb17f2d604fc6af4c82b4651d8a9f024", "message": "Build: Fix OSX build (failed neovim binary download) (#931)\n\n* Bump version of oni-release-downloader, with additional debug logging.\r\n\r\n* Add rimraf as explicit dependency\r\n\r\n* Add fs-extra as explicit dependency\r\n\r\n* Workaround NPM issue with scandir"}, {"url": "https://api.github.com/repos/onivim/oni/commits/56ce8e9a928db06aeeb1b5b7c57a7f18ae078820", "message": "Remove 'experimental' flag for language server config (#920)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b6b5f345a2577e5fa0360abd4022a3920c230c04", "message": "Fix #899 - Remove nvim-qt from bundled binary (#917)\n\n* Use latest of oni-release-downloader and oni-neovim-binaries\r\n\r\n* Bump dependencies up"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1caa22fbd62ad937a0b41e40dc389b3fffd21162", "message": "Add escape to leave terminal mode by default (#915)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/dd39da72fe9d519d87e8ecf4cce28f9c08693508", "message": "Subtle cursor motion with react-spring (#888)\n\n* Add react-motion\r\n\r\n* Test out subtle typing interaction\r\n\r\n* Add subtle cursor bounce on motion, and control via 'ui.animations.enabled' flag\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/88463df2f2e901df1d47ebd2b5b1a0b06d04b356", "message": "Fix flickering of details by caching last result request (#914)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fd1838e03889cf5a93a09dd02ae21da1d1dedccb", "message": "Integrate CSS language server (#909)\n\n* Add css-language-server as a dependency\r\n\r\n* Add css-language-server to default configuration"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c4b3ce408ca5f9b377f034840625bdea6b0d347f", "message": "Remove unused API methods (#913)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/80de529ec61abb4d63665f7ba57db7008b7562e1", "message": "Bump version to 0.2.17"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e990a31b30d26992c52ca821f8b2cbdcef7796f1", "message": "Fix break in automation due to regression in webdriverio (#912)\n\n* Use fixed webdriver io version of 4.8\r\n\r\n* Add additional logging"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0f6ee990d6c1b59987de4871eb0e50cb84ce0d1e", "message": "Window API: Add `Pane` concept (#884)\n\n* Update to add a simpler IWindowSplit interface for split sections\r\n\r\n* Rename EditorWindows -> WindowSplits\r\n\r\n* Simplify interface\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2eb43a490e1fc8286936d274437dac951e26c132", "message": "Bump download versions"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0dccfddb873ed82bde95a85dc1cbdaf4142e5f0e", "message": "Bump version to 0.2.16 (#898)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ed2f440ac86d0b1d4604086851295fdfb5b4b683", "message": "Fix #892 - Switch to use `oni-ripgrep` (#896)\n\nFix #892 - Switch to `oni-ripgrep`"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d2cf51756504502edc86310207103c73fe1dd33e", "message": "Fix two types in the default ui.fontFamily configuration (#897)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c02157b86fa08fcd09b76d7c1c889de56245b225", "message": "Use downloaded binaries instead of checking-in Neovim binaries (#875)\n\n* Remove checked-in neovim binaries\r\n\r\n* Update neovim binary path\r\n\r\n* Bump oni-neovim-binaries version\r\n\r\n* Fix neovim binary path\r\n\r\n* Fix path on OSX\r\n\r\n* Bump node version\r\n\r\n* Bump node version in travis\r\n\r\n* Bump oni-neovim-binaries dependency to pick up the 0.2.1 binaries\r\n\r\n* Add integration testing to Linux\r\n\r\n* Add display parameters to test\r\n\r\n* Add linux path\r\n\r\n* Install neovim for testing on Ubuntu build machine\r\n\r\n* Revert linux path to nvim\r\n\r\n* Add nvim version output\r\n\r\n* Fix typo in script\r\n\r\n* Add --assume-yes\r\n\r\n* Revert packaged binary change for now\r\n\r\n* Revert travis-build"}, {"url": "https://api.github.com/repos/onivim/oni/commits/75357be01d83586cf4844e81710f0e9e6560937d", "message": "Update README.md - fix opencollective link"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d4fb694c41eb8247e16dc2227751cd2f0532eeb0", "message": "Update README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9683e7e11f1ef9466ef8c179ddf0f934c9eb7d22", "message": "Update README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/61510b2ba0e362462109c1ad67b85d6ffe1d6b5b", "message": "Update README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/07fd60afbe112aca8cfe5eb5823ae4108e648766", "message": "Update BACKERS.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0aed58c1d2fec9cff8fcfbedf9804f7520f979d4", "message": "Update README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ea35463f83c4ec73fd324b68ccd8d51bc807427a", "message": "[NEXT] Streamline and break up some unnecessary dependency chains (#883)\n\n* Trim out PluginManager dependency\r\n\r\n* Factor out unnecessary dependencies\r\n\r\n* Remove unused debugging statements"}, {"url": "https://api.github.com/repos/onivim/oni/commits/eb0651c31a555cdb622f17bde2cb8bd591b0a4f9", "message": "[NEXT] Refactor: Remove `DeltaRegionTracker` (#877)\n\n* Refactor out DeltaRegionTracker, implement diffing in CanvasRenderer\r\n\r\n* Fix regression in rendering\r\n\r\n* Remove DeltaRegionTracker"}, {"url": "https://api.github.com/repos/onivim/oni/commits/310a0f209b899c353aabf1467d8f6e296bc06200", "message": "Add ui font for shell UI (#876)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4b897117f50479c83f151325a76869ac0a75d3a5", "message": "Add subtle animation for Hover UX (#879)\n\n* Add subtle animation for Hover UX\r\n\r\n* Fix spacing in common.less\r\n\r\n* Remove exit behavior since it conflicts with the rename logic"}, {"url": "https://api.github.com/repos/onivim/oni/commits/354e8bd38c9ef2d97f6cee288f2424ef59e19617", "message": "Several LSP fixes to generalize and support more language servers (#881)\n\n* Several LSP fixes to generalize and support the incoming CSS language server\r\n\r\n* Bump version dependencies"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a3c3d45e0b0d37ddd8829144a9512edc66186def", "message": "Fix exception when failing to resolve completion items (#880)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/03e0581c78b5d21383650b03f1f61e8f5cb595bf", "message": "Fix formatting + more hover issues (#873)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/12fe50ce3c3cbf4f4eff0bff2dff1a3f2ab29698", "message": "Fix measurement issue with CursorPositioner (#871)\n\n* Dancing observable issue\r\n\r\n* Fix dancing tooltip - in some full screen cases, the cursor positioner will get caught in a loop where it is re-measuring and re-positioning.\r\n\r\n* Revert test changes to Utility"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c15d0940f65b18a1b6ac178a0d6a0dd8ddd9e681", "message": "Fix #860 - Add about entry and stub out auto-update (#872)\n\n* Add AutoUpdate + Metadata stubs\r\n\r\n* Show about message\r\n\r\n* Log update available / not available\r\n\r\n* Clean up about dialog\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/19c180a18d262f94316fd9373d1f829ad19825f3", "message": "LSP: Hover fixes / improvements (#870)\n\n* Dancing observable issue\r\n\r\n* Add test case for 'ignoreWhilePendingPromise'\r\n\r\n* Get ignoreWhilePendingPromise function working\r\n\r\n* Reduce flickering for QuickInfo by only accepting  up-to-date responses\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e62d5133229ab9b8e484b1610bfef39a08ecd45f", "message": "Completion: Refactor observables and fix issue where first item is not resolving (#854)\n\n* Factor completion menu management code to separate function\r\n\r\n* Fix bug where first item does not get resolved\r\n\r\n* Delete unused file, and move others to completion folder\r\n\r\n* Factor completion files to subfolder under language\r\n\r\n* Rename corresponding test file\r\n\r\n* Fix completion utility tests\r\n\r\n* Fix newlines\r\n\r\n* Fix issue in #83 - completion swallowing enter in some cases"}, {"url": "https://api.github.com/repos/onivim/oni/commits/75347ed7e7ba7acfe28eaa5737bda56d3fb2db95", "message": "Improve dismissal logic and UX of rename gesture (#867)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/81f936bddff9540b6f41dfa24517fb12e00108f7", "message": "[WIP] Fix timing issues with scroll / adorner updating (#857)\n\nFix timing issues with scroll / adorner updating"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b1ccd42ad4eda7c47f31587b0007e29019196f58", "message": "LSP error improvements (#855)\n\n* Add incremental errors to typescript server\r\n\r\n* Fix typing, and filter such that we only show error ballons in normal mode"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a663d1ac105b0542ec843b2333c3b3f01ad8b334", "message": "Assets: Remove `beep.wav` and `ASSETS.md` (#866)\n\n* Remove default 'beep' sound\r\n\r\n* Remove assets file, since none of the referenced files are bundled with Oni anymore"}, {"url": "https://api.github.com/repos/onivim/oni/commits/448d537c7d4415cd00314bcddac9e452fdee8ba3", "message": "Add node_modules caching (#865)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/092bff7c0928cec9522efff4886dceb456910b0a", "message": "Update build configuration and README.md (#863)\n\n* Update .appveyor and travis\r\n\r\n* Update references from bryphe/oni -> onivim/oni"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a425680b6f7059f9259d2639f9927ac63098f009", "message": "Update gitter link"}, {"url": "https://api.github.com/repos/onivim/oni/commits/33a4de23b50aa7908522053c3f703d7309a076ed", "message": "Automation: Increase test timeout (#856)\n\n* Increase test timeout\r\n\r\n* Fix build conflict in OSX"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9d9838ff3cfdee9d0b28aa5196cfc8c1e46d2177", "message": "#839 - TypeScript definition files are not included in package build (#853)\n\n* Include TypeScript library .d.ts files\r\n\r\n* Add test case to verify typescript completion\r\n\r\n* Bring in autocompletion test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d45f1f52d4881e2f1b88a13bab967cefea39a30b", "message": "Automation: Add in-process test cases (#850)\n\n* Add automation API surface\r\n\r\n* Add QuickOpenTest\r\n\r\n* Add automation API and factor tests out\r\n\r\n* Add a basic editing test\r\n\r\n* Add some additional tests\r\n\r\n* Fix lint issues\r\n\r\n* Replace input binding with command, so that it is not impacted by platform-specific settings"}, {"url": "https://api.github.com/repos/onivim/oni/commits/74507618c4ffb1c4bf35932aa13ad83f992976e3", "message": "Add download badge to README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a00a3903bea74ac60234e7abb4df28c74002f26e", "message": "Fix positioning issue - remeasure if the x/y are different (#851)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/320c9233694b08bc67a83bc961e47181d2b2e319", "message": "Add react-transition-group as a dependency (#849)\n\n* Upgrade typings for react & react-transition-group - fix new errors caught\r\n\r\n* Remove unused gifshot dependency"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cedee33bf84c68d6f7dbd685b0905920748d8320", "message": "Fix some configuration settings in the LSP providers (#847)\n\n* Clean up configuration settings, and fix gd key\r\n\r\n* Fix incorrect underline in Reason language server\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/62c615803b33bf28eddd2f59dfdbf09dc8c32eaa", "message": "Some bug fixes around autocompletion (#845)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bd4d70fb9850e1a79a9552a3b12d8d649238ef07", "message": "Remove band-aid fix for flickering, and just default the context menu to the cursor position (#844)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7f8c051802c930a4e80012859b2511d7db0aeaed", "message": "Include `ocaml-language-server` and default configuration for Windows (#841)\n\n* Use packaged version of ocaml-language-server\r\n\r\n* Update dependencies\r\n\r\n* Update DefaultConfiguration to pick up packaged ocaml-language-server\r\n\r\n* Add reason configuration settings\r\n\r\n* Add initial configuration for ocaml-language-server"}, {"url": "https://api.github.com/repos/onivim/oni/commits/495c99dab87740db0c1f8b7b7f91016dd5b3a69b", "message": "Re-architecture of language clients to support configuration (#819)\n\nRe-architecture of language clients to support configuration"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cd712c22b855d905b6cc8fadc1fbcafe317185c3", "message": "Update BACKERS.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a9fa356d1e1bb1c16d600daadbc56dc2f078c54c", "message": "Fix #825 - Implement `editor.quickOpen.caseSensitive` setting (#831)\n\n* Add configuration strategy\r\n\r\n* Use the caseSensitive setting in tghe menu filter logic\r\n\r\n* Rename option to 'menu.caseSensitive'"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0dc46bac9240997ad401f3461bf0a53938553fa6", "message": "Proposal for #783 - Configuration options for tabs (#832)\n\n* Add some new configuration settings - 'tabs.height', 'tabs.maxWidth',\r\nand 'tabs.wrap' for more customizability with the tab bar.\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ba6c932c15204e4cac3302b25b7d205976b062fa", "message": "Fix #822: Improved OSX defaults for QuickOpen and Command Palette (#824)\n\n* Normalize keybindings to lowercase, and factor quickOpen and command palette to OSX-specific bindings\r\n\r\n* Fix bug with  keys weren't resolving correctly\r\n\r\n* Fix <c-p> conflict on windows by only enabling the quick open binding if a menu is not already open"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d860098bf5103ebf9ec1a4c4f8b07bdce2a2afd1", "message": "Fix #817 - Scroll bar / cursorline not in correct window (#818)\n\n* Fix mixed up x/y coordinates when measuring windows - the position returned by Neovim in is in [row, col] but we were treating it as [x, y], which is reversed\r\n\r\n* Remove extra isInRange method\r\n\r\n* Add VimResized autocommand\r\n\r\n* Remove 'onResize' handler, and hook directly to the VimResized autocommand\r\n\r\n* Send windowWidth/windowHeight up as part of Oni's context, and re-measure the dimensions if those change"}, {"url": "https://api.github.com/repos/onivim/oni/commits/65261aeb0b4e48a0bee363c5f6b0b7600f7d647f", "message": "[WIP] Fix #378 - Signature Help for language clients (#814)\n\nFix #378 - Signature Help for language clients"}, {"url": "https://api.github.com/repos/onivim/oni/commits/60c46bed4222aaa2c5a6e12b606cd68d8c9f81d2", "message": "API: Move 'directory-changed' event to `oni.workspace.onDirectoryChanged' strongly typed event (#813)\n\n* Stub out 'Workspace' API and factor the changing directory responsibility there\r\n\r\n* Update statusbar plugin to use the workspace API\r\n\r\n* Remove extra line"}, {"url": "https://api.github.com/repos/onivim/oni/commits/252f748b26fe46a677e814f7c3c60c5d9d11759b", "message": "Remove `BufLeave` and `WinLeave` events from interop layer (#812)\n\n* Remove leave events from init.vim\r\n\r\n* Dispatch buffer leave event from buffer enter, when entering a new buffer"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c07045f4f1eb74bce2e9e19532b25ac268f90eec", "message": "[WIP] Fix #395 & #543 - Factor window management out of `init.vim` (#805)\n\n* Remove WindowDisplayUpdate logic\r\n\r\n* Strongly type autocommands, and add 'BufWinEnter'\r\n\r\n* Start factoring NeovimWindowManager\r\n\r\n* Refactor to 'pull' window updates\r\n\r\n* Remove duplicate request method\r\n\r\n* Refactor ErrorsContainer to separate file, and refactor to use transform functions instead of WindowContext\r\n\r\n* Factor coordinate system utilities out to separate file, with detailed explanation\r\n\r\n* Progress on refactoring to new paradigm with functions\r\n\r\n* Plumb new window interface through state/actions/reducers\r\n\r\n* Get first end-to-end implementation of new strategy working\r\n\r\n* Hook up scroll event as well, to address #543\r\n\r\n* Update cursor line / column in active window, even when not remeasuring\r\n\r\n* Remove unnecesssary comments\r\n\r\n* Fix first round of lint issues\r\n\r\n* Fix remaining lint issues, and fix off-by-one bug in typescript error diagnostics\r\n\r\n* Factor duplicate 'isInRange' method to utility file\r\n\r\n* Fix performance regression where ActiveWindow would aggressively re-render\r\n\r\n* Remove extra blank line"}, {"url": "https://api.github.com/repos/onivim/oni/commits/908f133b5a4e83ee23660d81d7700b8372961c6d", "message": "UX: Autocompletion styling (#807)\n\n* Make scheming & styling consistent with other elements; leverage the CursorPositioner componetn as well\r\n\r\n* Add additional arrow in selected item to make it easier to distinguish\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bc7a66910efb28ef548bc31587c55124e944fa59", "message": "Add onBufferSaved event (#806)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c386e7a5345a43b8e1d1519d57780d1cb3d9ba61", "message": "Fix #782 - Fix overlapping errors (#804)\n\n* Add Error component\r\n\r\n* Refactor error functions to selectors\r\n\r\n* Revert lint testing\r\n\r\n* Wire up selector so that error / quick info are synchronized\r\n\r\n* Fix floating 'arrow'\r\n\r\n* Some tweaks to show ErrorIcon\r\n\r\n* Resolve error color based on severity\r\n\r\n* Style the error items\r\n\r\n* Revert test changes to NeovimInstance\r\n\r\n* Split out some of the logic into selectors/containers\r\n\r\n* Fix up lint errors and fix performance regression in buffer scroll bar"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e96d67d9ccb909a6b2347b577a0ff6ec88af4b01", "message": "LSP: Add quick info and buffer updates to config-based strategy (#800)\n\n* Get 'hover' working new language server route\r\n\r\n* Fix minor lint issue\r\n\r\n* Start porting over find-all-references\r\n\r\n* Stub out buffer interface, and wire up find-all-references\r\n\r\n* Stub out interface for buffer updates, revisit missed update of buffer updates in NeovimEditor\r\n\r\n* Wire buffer updates up in NeovimEditor\r\n\r\n* Hook up diagnostics for new strategy\r\n\r\n* Add diagnostics to new language server strategy\r\n\r\n* Update newlines\r\n\r\n* Implement getTokenAt for buffers, and use in FindAllReferences"}, {"url": "https://api.github.com/repos/onivim/oni/commits/83867d2f4f09aed4277d0649d8b5bde527a6d32e", "message": "Fix line endings in NeovimInput.tsx"}, {"url": "https://api.github.com/repos/onivim/oni/commits/55a0debb7ec912372d2b6e04c46ba56e982b65c7", "message": "Bump download version in README"}, {"url": "https://api.github.com/repos/onivim/oni/commits/22abf347eff86f68a814523aa3d3080f5d4a9030", "message": "Bump version 0.2.14 -> 0.2.15"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5f1ee6201b072d31ac52859df90ea11ea5775090", "message": "Bump version 0.2.13 -> 0.2.14"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8ec480221a19ed478e977c56608d80bd0c2d8bb2", "message": "Wrap RipGrep path in quotes to account for spaces (#803)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e419833519cda03578097dc0556d6e0633302a1e", "message": "Add border for QuickInfo UI (#798)\n\n* Add 'color' library to help manipulating and deriving colors\r\n\r\n* Add comment around refactoring the color management\r\n\r\n* Tweak arrow size and entrance animation"}, {"url": "https://api.github.com/repos/onivim/oni/commits/169d17a639ca5126b9a61595a91239411fec328d", "message": "Fix #436 - init.vim on Windows (#799)\n\n* Remove environment variable and use path\r\n\r\n* Create host folder if it doesn't exist\r\n\r\n* Fix path resolution on OS X\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fb3927ffd628ff96cf05201ac01d7742c015e0b0", "message": "Fix regression in completion (#797)\n\n* Ensure that completion request comes after the buffer-update\r\n\r\n* Update buffer-update/buffer-update-incremental to use strongly typed events"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cf71dfcf32d32acc1c52026cc8a89b355a946cd1", "message": "Use vscode-ripgrep as default fuzzy-find strategy (#793)\n\n* Add vscode-ripgrep, update package-lock.json\r\n\r\n* Add RipGrep strategy\r\n\r\n* Start adding additional files\r\n\r\n* Update package.json & package-lock.json\r\n\r\n* Pass in exclude files to default ripgrep strategy\r\n\r\n* Update package-lock file\r\n\r\n* Fix lint issue\r\n\r\n* Clean up loading spinner so it doesn't jerk list around\r\n\r\n* Clean up footer location\r\n\r\n* Add onHide event for menu, to plumb through killing the process when menu closes\r\n\r\n* Stop finder process when menu is closed\r\n\r\n* Hook up dynamic command, plus re-start process\r\n\r\n* Fix issues around spawning separate process\r\n\r\n* Add trailing comma"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ce5028f9a0e7c91f2d9dbcc74004baa539df8083", "message": "Add additional debug logging / settings for #490 (#796)\n\n* Add some debugging settings to narrow down the crash\r\n\r\n* Add logging for command\r\n\r\n* Switch default for persistOnNeovimExit\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/19cb7a9c2edd7d986c484c6df4a34ee1a7e9af42", "message": "Remove package-lock files and .gitignore (#795)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e3db0e92b4e2c77caa29e2ff895b04063ecb9815", "message": "[WIP] Add ability to specify language servers from configuration (#760)\n\n[WIP] Add ability to specify language servers from configuration"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a8cd2b4d6248bbf3a65e6f055fde1b4321831536", "message": "Remove unused evaluate block, and replace 'mode-changed' with the editor API (#792)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0fe8422a16c64cd29fb8c6313791e753913bf3a6", "message": "Fix #269 - Enable asynchronous loading of menu items (#764)\n\nFix #269 - Enable asynchronous loading of menu items"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0093f05159161ca7572c596193dcac9e1ffedd85", "message": "Upgrade TypeScript dependencies and check in package-lock files (#791)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/58ed1d940f9ae850008ab2e3a4d22f35683032e1", "message": "Cleanup: Remove 'extensions' folder creation on launch (#790)\n\n* Remove outdated 'extension' folder reference\r\n\r\n* Remove unnecessary creation of 'extensions' folder on launch\r\n\r\n* Remove unused plugin_host.html"}, {"url": "https://api.github.com/repos/onivim/oni/commits/080abc123ebc98c7fda7f1e9e4ab0bccd52937b6", "message": "Refactoring: Clean up unnecessary actions (#786)\n\n* Remove cursorLine / cursorColumn actions\r\n\r\n* Remove show/hide cursorline/cursorcolumn actions, since the state can be derived from mode+configuration"}, {"url": "https://api.github.com/repos/onivim/oni/commits/64ebbe5a941a6f828a2a20b920b255fb694acee6", "message": "Gate enhanced syntax highlighting on configuration value (#785)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1ad48df21ea1b62fcb51cd15df8c9a34420fdb4b", "message": "[WIP] #562 - Fix remaining boundary cases for QuickInfo positioning (#766)\n\n#562 - Fix remaining boundary cases for QuickInfo positioning"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6e50cdf4737a0353462aed01ff23f22249ee133f", "message": "Refactor executeAutoCommand so that it is more robust in the general case (checking for autocmmand registration prior to executing) (#781)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c82bf69d4f8036d34c626514d8fda6279e90ce22", "message": "Fix #473: Open binaries crashes Oni (#777)\n\n* Send range of buffer update, instead of full update (pull instead of push model\r\n\r\n* Suppress sending updates for now, since it isn't wired up correctly\r\n\r\n* Move to 'pull' model for full buffer updates, and move to strongly typed events in NeovimInstance\r\n\r\n* Fix off-by-one error in getting lines\r\n\r\n* Remove 'ApiInfo' call from OniConnect, since we 'pull' this information from oni anyway, prior to attaching UI\r\n\r\n* Await promises after completion of \u0007ttach UI\r\n\r\n* Call out some places to use nvim_call_atomic\r\n\r\n* Move bufer limit to constant\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d801e18be7b93937612d031a14a21c66a26ce0b0", "message": "Replace 'px' with 'em' for statusbar (#780)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f5f2be00d30fa33625d1869831d34255b7272d62", "message": "[WIP] Fix #541 - Font rendering improvements (#753)\n\n* Some tweaks to improve font rendering\r\n\r\n* Add 'redrawAll' method\r\n\r\n* Add alpha condition based on whether there is a background image\r\n\r\n* Maintain functionality for transparent background\r\n\r\n* Refactoring to decouple the CanvasRenderer from needing to know about resize, or the delta tracking of cells\r\n\r\n* Clean up lint issues\r\n\r\n* Remove unused code in CanvasRenderer\r\n\r\n* Remove extraneous comment"}, {"url": "https://api.github.com/repos/onivim/oni/commits/dbf2897e7b50d56e1b499b845482ceadb07242b7", "message": "Bump version 0.2.12 -> 0.2.13 (#774)\n\n* Bump download links in README.md\r\n\r\n* Bump version in package.json\r\n\r\n* Update README.md\r\n\r\n* Tighten up features section of README\r\n\r\n* Add links to special thanks / acknowledgements\r\n\r\n* Add BACKERS.md\r\n\r\n* Update BACKERS.md\r\n\r\n* More README.md tweaks\r\n\r\n* More README tweaks"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5f5a0fa125d47da1b7fb1814cda96d3a5000db9e", "message": "Fix whitescreen on command palette (#772)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/769280c28effd9ee186f94f0cae3a365d06fe95f", "message": "Add binding for  by default, to quit (#768)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d5d1d2d1057873a09ab312257ab8725e0f877936", "message": "Temporary fix for #644 - `BracketLeft` key not working in Spanish (#767)\n\n* Add quick fix for BracketLeft issue\r\n\r\n* Fix lint issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ccc67b86a8ac85b3905a43fb2eb355e364463286", "message": "[WIP] #490 - Part 2 - Automated stability test (#744)\n\n#490 - Part 2 - Automated stability test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6c4767a74b448856667eefe739e7510ffeebd312", "message": "[WIP] #416 - Record videos / screenshots (#739)\n\n* Some initial tests\r\n\r\n* Bump version of Electron to 1.8.1 to pick up chromium bug fixes around getUserMedia\r\n\r\n* Add gifshot dependency\r\n\r\n* Clamp gifshot dependency\r\n\r\n* Start integrating gifshot\r\n\r\n* Add helper script to convert web m to gif\r\n\r\n* Latest tweaks for gif recording\r\n\r\n* Add isRecording property\r\n\r\n* Add unique file names for each recording\r\n\r\n* Remove gifshot and minor code tweaks\r\n\r\n* Remove gifshot references\r\n\r\n* Some cleanup + refactoring\r\n\r\n* Get \takeScreenshot writing out PNG buffer\r\n\r\n* Use recorder.outputPath configuration\r\n\r\n* Set up copyScreenshotToClipboard setting\r\n\r\n* Update to always save, and then copy to clipboard\r\n\r\n* Fix set of lint issues\r\n\r\n* Fix remaining lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/eeed8c40f64d2e12d8d3a45c57dcee7b6cefb3ca", "message": "Update README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2b107dafa15d1058dcb0e369c14ec22692f53636", "message": "Refactoring: Remove extraneous 'Commands.ts' file (#763)\n\n* Remove extraneous Commands class\r\n\r\n* Update to use CommandManager directly, instead of proxying through PluginManager\r\n\r\n* Remove unnecessary plumbing in PluginManager for commands\r\n\r\n* Fix missed ICommand reference"}, {"url": "https://api.github.com/repos/onivim/oni/commits/dca421a71d4fe3f6bc49e306ed624f39a0aaa3d1", "message": "Initial Window Management (#637)\n\n* Start bringing over bounds detection\r\n\r\n* Add detection for window bound cases\r\n\r\n* Update window navigation bindings\r\n\r\n* Add window-manager definition\r\n\r\n* Initial prototype of WindowManager API\r\n\r\n* Add marked\r\n\r\n* Initial markdown preview plugin\r\n\r\n* Add typescript file\r\n\r\n* Remove index.js from lib\r\n\r\n* Get markdown preview renderer hooked up\r\n\r\n* Get marked rendering\r\n\r\n* Add buffer entered, buffer changed events to Editor interface\r\n\r\n* Start porting over interface to editor\r\n\r\n* Plumb through onBufferEntered, onBufferChanged events\r\n\r\n* Add additional editor events\r\n\r\n* Add tsconfig\r\n\r\n* Split out markdown preview code\r\n\r\n* Remove unused pieces\r\n\r\n* Start wiring up commands / move events from vim -> Oni\r\n\r\n* Call move commands when at border of current window\r\n\r\n* Simplify split logic for now, and implement closeSplit logic\r\n\r\n* Add tests for WindowSplit, so that when additional split functionality is added it can be documetned\r\n\r\n* Refactor WindowManager to use WindowSplit\r\n\r\n* Factor out the window manager to separate file, rename to EditorWindows\r\n\r\n* Fix lint issues\r\n\r\n* Fix remaining lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/972ae9464721e574bda13b45cec03b9082ba019f", "message": "Refactoring: Rename Config -> Configuration and move to Services folder (#759)\n\n* Move Config.ts to Configuration folder\r\n\r\n* Facto:r out IConfigurationValues'\r\n\r\n* Split out DefaultConfiguration\r\n\r\n* Add barrel and start refactoring usages of Configuration\r\n\r\n* Continue refactoring to use new path/name\r\n\r\n* Update remaining configuration references\r\n\r\n* Fix lint issues\r\n\r\n* Finish renaming configuration\r\n\r\n* Commit missed file\r\n\r\n* Rename last Config -> Configuration spot"}, {"url": "https://api.github.com/repos/onivim/oni/commits/226fc5a8ffd4e1832310e576f91d206d864dcef7", "message": "Refactoring: Remove `redux-action` and channel dependency for StatusBar (#758)\n\n* Update statusbar to not require channel or name\r\n\r\n* Move StatusBar to services\r\n\r\n* Finish moving StatusBar to services"}, {"url": "https://api.github.com/repos/onivim/oni/commits/33c0350cab8a6661c6600d09bb8a2f36ba65137e", "message": "Fix #504 - Part 1: Split out `activeEditor` and `allEditors` API, add bufferEnter/Leave events (#755)\n\n* Update API to differentiate between 'activeEditor' and 'allEditors'\r\n\r\n* Add buffer enter / leave events\r\n\r\n* Hook up new events to AllEditors\r\n\r\n* Hook up events to NeovimEditor\r\n\r\n* Fix typo"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c897188afd0a1c6d91473d9939b77486bc1344e5", "message": "Fix `ERR_FILE_NOT_FOUND` on startup with no background image (#754)\n\n* Don't render background, unless a backgroundImage was actually specified\r\n\r\n* Change default backgroundImageSize parameter\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5c7ae2e173d15421ce83165a84b89e083d891206", "message": "Fix #746 - Fix dead keys in command line / normal mode (#752)\n\n* Fix overflow issue, when typing close to the edge of the screen, the whole screen scrolls.\r\n\r\n* Add tracking for 'dead key' state to pick up the character correctly in normal/command modes\r\n\r\n* Always enable IME\r\n\r\n* Remove 'imeEnabled' option\r\n\r\n* Revert Font changes\r\n\r\n* Revert unneeded isDead flag\r\n\r\n* Remove extraneous isDead value\r\n\r\n* Fix lint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/402012bc096c7542d13bf7650adf47f97e21f360", "message": "Update menu styles, use em for font-sizes as opposed to pixels (#749)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/36ccd9e57c951f6403400d78a123827e0d25c186", "message": "Update README.md with 0.2.11 download links (#751)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d0cb627a2eb2d304965c17a098dad348936a97c2", "message": "Bump package version"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b2e1f28f7a6e65c8fdb5570fbcf010ce8424359a", "message": "Bump package version"}, {"url": "https://api.github.com/repos/onivim/oni/commits/37ad0f1479d99d4b46fc745015c3a13d1b2c8569", "message": "Add ability to override neovim path, for testing new versions before upgrading (#742)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bc5dc9593403b58e12cb2beca6f0095080f996e8", "message": "Merge 0.2.10 build fixes to master (#743)\n\n* Regenerate appveyor access token for artifacts\r\n\r\n* Update .travis.yml to pick up proper repo path, and update entries in package.json\r\n\r\n* Update package repo path\r\n\r\n* Update appveyor settings\r\n\r\n* Update travis-ci keys\r\n\r\n* Revert branch whitelist, since that seems to break tags from being picked up\r\n\r\n* Bump version for release branch\r\n\r\n* Update 0.2.9 -> 0.2.10\r\n\r\n* Update README with correct builds\r\n\r\n* Revert .travis.yml change"}, {"url": "https://api.github.com/repos/onivim/oni/commits/00f0c190842569a659a2197b1eb28ce51cb4e1f5", "message": "Fix AltGr regression (#741)\n\n* Fix AltGr regression\r\n\r\n* Add set of manual test cases for validating internationalization"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cd2fec7e1ef42955f53383af394925254d6b6a8a", "message": "Fix config.js auto-reloading on OSX (#740)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d97a406830c44d060d6e72650cc16396e6f8a68a", "message": "Fix issue where the size of the IME background is not always up-to-date (#738)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9ff5e99abd46ecd421600fb3af32e4ae1227ecf8", "message": "Move License to end, remove roadmap section"}, {"url": "https://api.github.com/repos/onivim/oni/commits/09764caf25ef51c5ab80b4471744a22603fc1df9", "message": "Fix #711 - update git ls-files strategy to handle unicode characters correctly in UI (#737)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4d94898f274316884a00444b845714e2b6f72c2b", "message": "Fix #173 - Add 'editor.linePadding' setting (#731)\n\n* Add editor.linePadding option\r\n\r\n* Preliminary line-height setting\r\n\r\n* Update default setting for linePadding to 4\r\n\r\n* Fix render artifacts due to sub-pixel issues\r\n\r\n* Fix subpixel issues on Canvas\r\n\r\n* Revert default back to 2\r\n\r\n* Fix 'line' render artifacts\r\n\r\n* Clean up cursor styles\r\n\r\n* Remove additional kerning references\r\n\r\n* Remove additional 'kerning' references\r\n\r\n* Remove unnecessary letter-spacing setting\r\n\r\n* Add comment to clarify why the normalization is needed\r\n\r\n* Fix font lint error\r\n\r\n* Remove unnecessary kerning value\r\n\r\n* Revert additional changes to blinkFeatures"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f2cba29517f1b66c2502fcfe2df0788d7eba7337", "message": "Move 'Included vim plugins' section to the wiki"}, {"url": "https://api.github.com/repos/onivim/oni/commits/19151009c61d0c8732df79689ad378e3561fee4a", "message": "Move FAQ to wiki"}, {"url": "https://api.github.com/repos/onivim/oni/commits/37b3bcdca04af7b7ba42186d1f763c2a97393c63", "message": "IME: Fit & finish fixes (#733)\n\n* Add imeActive state to global store, so that the cursor rendering can be gated on it\r\n\r\n* Remove font-measure div after measuring\r\n\r\n* Fix error where characterToTest was never being used\r\n\r\n* Fix width styling\r\n\r\n* Improve fit-and-finish of IME experience\r\n\r\n* Persist fontFamily, fontSize in redux store\r\n\r\n* Refactor to store the composed text width in the state, as opposed to directly setting the ref element\r\n\r\n* Clean up styles, and use the width from state for the background width\r\n\r\n* Fix lint issues\r\n\r\n* Fix missed merge conflict"}, {"url": "https://api.github.com/repos/onivim/oni/commits/be0ce655f71113b2058335402d5118742afd44b3", "message": "Update links in README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a51e57b3d27329eb10f5350e2cdc575ac1471797", "message": "Remove unused .oni folder (#736)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2fb1b5615260c517395aafe22943c90614c9069e", "message": "[WIP] Fix #649 - Allow setting vim globals/settings from Oni's config.js (#698)\n\n* Add 'VimConfigurationSynchronizer' to allow setting vim config values from Oni's config.js\r\n\r\n* Only synchronize vim configuration settings once Neovim is loaded\r\n\r\n* Add 'diff' function to get changed configuration properties\r\n\r\n* Update configuration event to return delta of configuration values\r\n\r\n* Some refactoring to remove duplication of the 'Configuration' API object\r\n\r\n* Fix regression where defaultValue would get returned in null/false cases"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b96d2a7a4fe63a0e4695b8b31eb7d2f805b86362", "message": "Handle `onDidChangeKeyboardLayout` event (#732)\n\n* Add logic to listen for keyboard changes\r\n\r\n* Fix type mismatch with layout name vs keymap, and log layout name\r\n\r\n* Fix lint error"}, {"url": "https://api.github.com/repos/onivim/oni/commits/700884b92eedc1f73f3c32f937b1eaceef28ae2a", "message": "Fix #396, #542 - IME and Dead Key support (#716)\n\n* Refactor Keyboard to take in an element\r\n\r\n* Extract body of keyboard handler to separate method\r\n\r\n* Factor out keyboard to <NeovimInput />\r\n\r\n* Refactor keyboard input to separate component\r\n\r\n* More input updates\r\n\r\n* Initial work to add IME/dead key handling to keyboard input\r\n\r\n* Handle composing case\r\n\r\n* TEST COMMIT\r\n\r\n* Revert test commit\r\n\r\n* Some cleanup / refactoring\r\n\r\n* Fix first round of lint issues\r\n\r\n* Disable IME when not in insert mode\r\n\r\n* Fix remaining lint issues\r\n\r\n* Refactor logic so that RootComponent gets first pass at handling keyboard input\r\n\r\n* Start cleaning up logic in NeovimInput\r\n\r\n* Add FocusManager\r\n\r\n* Remove 'capture' concept from input manager\r\n\r\n* Fix mouse regression by setting pointer-events: none\r\n\r\n* Fix exception due to null key\r\n\r\n* Factor KeyboardInput to separate file\r\n\r\n* Fix up props\r\n\r\n* Clean up and consolidate logic in KeyboardInput; fix lint erros\r\n\r\n* Fix composition issue on OSX\r\n\r\n* Specify lineheight for cursor, to center highlighted text"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fe7f2d89a69662574316ef4f1c35f9261422a6ae", "message": "Update author, email, and homepage in package.json (#727)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/735985dd8e934ad4de389af82a2047dc269ef7bc", "message": "Split up multibyte character rendering, because they are not spaced correctly when combined (#724)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2252f6bbc0d84cfd2cde4b789315d1dfcd367940", "message": "Remove 'react-addons-perf' (#723)\n\n* Remove reference to react-addons-perf in browser code\r\n\r\n* Remove react-addons-perf from package.json"}, {"url": "https://api.github.com/repos/onivim/oni/commits/65851490708d66ff8438817954ef1e2e822eba48", "message": "Update appveyor.yml to specify branches (#722)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/48f90dbe25a73a984efba0fab5b81a658f3e94ef", "message": "Limit concurrent travis builds for PRs (#720)\n\n* Update travis.yml to only build master\r\n\r\n* Add release builds to branch pattern"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8b532f2d3b25af1d191a1a0b46e0d9c8d2719d72", "message": "Bump electron version (#719)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/50b0369fca420ee5b693901458a5aedb03f183aa", "message": " \ud83c\udf89 Upgrade to React 16 (#718)\n\n* Bump React/ReactDOM/redux versions\r\n\r\n* Update package.json with react/react-dom dependencies (and revert typing dependencies)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f6a03d7f0d96585682ee95bfd5a3e294fb2b6b51", "message": "Update copyright notice"}], "pull_requests": [{"url": "https://api.github.com/repos/onivim/oni/pulls/1812", "title": "[WIP] Learning Pane: Start implementing sidebar", "body": "", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1810", "title": "Achievements: Add 'Trophy Case' buffer layer", "body": "This adds a special buffer layer / view for showing completed achievements, and discovering new achievements:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/37488608-7c12576a-2852-11e8-8607-1174784e2683.png)\r\n\r\nThis is an initial PR to add the buffer layer and render the set of achievements.\r\n\r\nSome improvements to come later:\r\n- Synchronize the cursor position with the achievements (so that they are keyboard accessible)\r\n- Show completion state (a checkmark for completed achievements)\r\n- Add entry point in the learning pane (a button for opening the `Achievements` pane)\r\n\r\nThis is gated by the `experimental.learning.enabled` and `experimental.achievements.enabled` flags, and is accessible by running `Oni.commands.executeCommand(\"achievements.show\")`", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1808", "title": "Refactoring: Move flip animation to separate component", "body": "I'd like to reuse the 'flip' animation in some other components, so this factors out that into a reusable component, and updates the achievement UI to use the new component.", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1805", "title": "[WIP] First playable tutorial", "body": "", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1804", "title": "Bugfix: Focus previous window on close", "body": "__Issue:__ When a window split is closed, it retains focus, causing crashes\r\n\r\n__Fix:__ Keep track of the last window(s) focused, and send it back to the previous split. Add unit tests to cover this scenario.", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1702", "title": "[WIP] Tweak completion styling", "body": "- [ ] Colorize icons based on token colors\r\n- [ ] Use letters instead of abstract icons", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1373", "title": "[WIP] Add buffer setIcon/setTitle API", "body": "Adds a buffer `setIcon` and `setTitle` API. Planning on using this to improve the experience for the embedded browser and embedded terminal experiences.", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1326", "title": "[WIP] - Language Integration - Code Actions v2", "body": "This implements the `textDocument/codeActions` along with UI to render it. Brings  #974 up-to-date with the latest changes.\r\n\r\nStill some bugs around the applied edits, and needs tests.", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1288", "title": "Fix #1220 - Add 'editor.insertSpaces' and 'editor.tabSize' options", "body": "This change adds `editor.insertSpaces` and `editor.tabSize` options, so that the space/tab settings can be adjusted directly from the `config.js`.\r\n\r\nIf `editor.insertSpaces` is set to 'null', we will not set `expandtab`/`noexpandtab`.\r\nIf `editor.tabSize` is set to 'null', we will not set `tabstop`, `shiftwidth`, `softtabstop`.", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1187", "title": "[WIP] Add automated test for `go-langserver`", "body": "Add automated test for completion functionality with `go-langserver`", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/262704253", "body": "Also need to look at handling modifir keys - control, alt, shift", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/262704253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264648749", "body": "Thanks @TomatoMus  and @pacuna  for the details!\r\n\r\nYa, looks related to the issue with npm/npm#12371. I've been doing the publish from a Windows machine, which hits this issue. Hopefully the fix to convert the line endings prior to publish will address this.\r\n\r\nCloning and building will work fine, since git auto-converts the line endings when you check out. Glad that works ok :) ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264648749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264648784", "body": "Will republish in a bit after a few more fixes", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264648784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264650272", "body": "Hi TJ! Thanks for the kind words and checking this project out :)\r\n\r\nGreat point, I agree 110% - the protocol makes a lot of sense to implement. Actually the language extensibility features for VSCode were a major inspiration and driving factor - the interfaces I have so far are pretty similiar because of that, and I think mapping to the language service makes a lot of sense. Will be way easier to add the language features by these already-written services.\r\n\r\nI actually tried really, really hard to like VSCode and use it (plus the vim plugin here: https://github.com/VSCodeVim/Vim) but there are just enough gaps that it still is problematic, and there are also features I would like to see in the editor that unfortunately their API surface is not quite extensible enough to implement, but this project takes a lot of inspiration from VSCode (and Atom and LightTable). It's a great editor though and there is a ton of momentum around the plugins and supported languages - so it'd be great to leverage that.\r\n\r\nI took a look through your repo and it's really helpful. I didn't realize how well the language service protocol is documented, and you've done extensive work in hooking up to it via the async capabilities. Really clean and easy to follow implementation, too. Awesome to see work being done on that - that potentially benefits everyone using neovim, including users who don't want a UI version.\r\n\r\nIn the context of this project, I'm trying to writing as minimal VimL as possible (JS / TS with the language features in the editor, debugger, etc is just more fun to work on and maintain for me :) ) - but I think that it would be possible to hook up to the language service protocol directly when we load plugins in browser/src/Plugins/Plugin.ts & PluginManager.ts - would just need some sort of shim/adapter layer, as the protocol being used is pretty close. Or maybe even just pivot to use their protocol.. If you're interested in collaborating on that, let me know\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264650272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264650674", "body": "And that UI looks awesome! It's really cool to see the work being done with neovim and the scenarios it is enabling. I opened #9 to track integrating with the external popupmenu as a starting point/proof of concept", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264650674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264670861", "body": "Yes, unfortunately I do not have a Linux box to test support at the moment, but in theory it should be straightforward to support.\r\n\r\nElectron itself is fortunately compatible with Linux, so there shouldn't be much work to make it compatible. It might be sufficient to reverse those checks to check for Windows instead.\r\n\r\nI'll flip those checks for now, since there is no harm in that, and potentially it could at least get the Linux build running to test further.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264670861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264674911", "body": "Thanks for the fix!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264674911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264675462", "body": "Sweet, thanks for the fix! That's great that it is launching now.\r\n\r\nRegarding the font - there's this code in [Config.ts](https://github.com/extr0py/oni/blob/master/browser/src/Config.ts):\r\n```\r\nconst MacConfig: any = {\r\n    \"editor.fontFamily\": \"Monaco\"\r\n}\r\n\r\nconst WindowsConfig: any = {\r\n    \"editor.fontFamily\": \"Consolas\"\r\n}\r\n```\r\n\r\nThat picks some defaults for Mac & Windows. We might need to come up with a set of defaults for Linux - but I'm not sure what a good default font on Linux is. An alternative would be to bundle a default font with the app (like fontawesome is bundled right now).\r\n\r\nI opened another issue for sourcing the init.vim - #16", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264675462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264677450", "body": "Makes sense. I don't think there is a great way to list the fonts, and then identify which ones are monospace. \r\n\r\nWe could potentially bundle this font:\r\nhttps://fonts.google.com/specimen/Inconsolata\r\n\r\nIt has an open license and is monospace. I'll take a look at bundling it in the next couple days. In the meantime, you might want to manually change the font family to your preferred font.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264677450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264677795", "body": "Thanks for the code snippet! I ported it over to a PR - #18. That's a great suggestion, I didn't know about the --cmd option, would be more robust than dynamically generating the init.vim.\r\n\r\nI'm seeing a problem too though with the PR - it looks like Neovim is hitting an error that isn't getting rendered, so you need a keypress to activate the UI. (This might explain the long startup time in your case, too). Unfortunately, I'm not sure what that error is, so need to dig in a little more and see what's happening before bringing that PR in. Sometimes, if there's a script error on load, it doesn't make it to the UI - seems related to this issue in Neovim core: https://github.com/neovim/neovim/issues/3901\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264677795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264713130", "body": "Hi there,\r\n\r\nDo you happen to have the `NODE_ENV` environment variable set to `DEBUG`? \r\n\r\nThere's code to load the bundle based on that variable:\r\n```\r\n        var path = \"dist/browser/bundle.js\"\r\n        if(process.env.NODE_ENV === \"development\") {\r\n            path = \"http://localhost:8191/bundle.js\";\r\n        }\r\n```\r\n\r\nFor use with webpack. I'd like to make this more robust in the future - potentially at least addd another environment variable.\r\n\r\nIn the meantime, can you check if the NODE_ENV variable is set? If so, clearing it when starting the process might be a workaround in the meantime. Thanks for trying it out!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264713130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264713523", "body": "Thanks for the report and screenshot! I think it may be an issue with the rendering strategy I'm using. I think https://github.com/rhysd/NyaoVim handles some of the cases a bit better, need to try it out and see.\r\n\r\nThere's a few ideas in this StackOverflow post as well-\r\nhttp://stackoverflow.com/questions/4550926/subpixel-anti-aliased-text-on-html5s-canvas-element\r\n\r\nWill do some testing and report back", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264713523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264725397", "body": "Good question, it's just hard coded in a poor way right now. My initial thinking was to have a ~/.oni/keybindings.json, and create commands for these, like 'oni.menu.nextItem' with JSON bindings, and get to the point where 99% of the mappings could be done in the json file. \r\n\r\nIt does have the downside of having two places for bindings, and being foreign to power users. To bridge the gap, there are a few options I was thinking about:\r\n- Add a way to execute commands from VimScript, like: `OniCommand(\"oni.menu.nextItem\")` that could be part of key mappings\r\n- Add some information about the UI state in VimScript, sort of like how pumvisible() works\r\n\r\nLong-term, my vision for this project is to make modal editing through neovim more friendly and attractive to users of VSCode/Atom/etc, without having to dive into creating a _vimrc/init.vim... but still retaining much of the flexibility.\r\n\r\nThanks for calling out some ideas here and trying out the app, great to have your feedback!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264725397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264725601", "body": "Interesting, I haven't seen this - and it looks like the npm install step is working okay on TravisCI (which is Linux). \r\n\r\nIf you clone & build the repo, does it work?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264725601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726065", "body": "Ah yes, I haven't tested with any patched fonts. Thanks for the screenshot, that's really helpful.\r\n\r\nRight now, Oni doesn't check 'guifont', and renders based on a config setting in (Config.ts)[https://github.com/extr0py/oni/blob/master/browser/src/Config.ts]:\r\n```\r\nconst MacConfig: any = {\r\n    \"editor.fontFamily\": \"Monaco\"\r\n}\r\n\r\nconst WindowsConfig: any = {\r\n    \"editor.fontFamily\": \"Consolas\"\r\n}\r\n```\r\n\r\nYou could try editing this directly here to reflect your patched powerline font, and see if that works. \r\n\r\nThis value also gets ready in the ~/.oni/config.json, so you could add a config.json there that looks like:\r\n```\r\n{\r\n\"editor.fontFamily\": \"Patched Powerline Fontname\"\r\n}\r\n```\r\n\r\nLet me know if that works. Will add notes about this in the README - need to add some info about the non-standard configuration for these options.\r\n\r\nThanks for the feedback and for trying out the app!\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726482", "body": "I believe it may be a bug where the `reverse` option isn't correctly handled in all cases in the (msgpack_rpc)[https://neovim.io/doc/user/msgpack_rpc.html] API. \r\n\r\nAre you using a custom colorscheme?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726482/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726703", "body": "Awesome :) \r\n\r\nRegarding the bugs - separate issues would be ideal, since they might have different root causes.  Large issues can be tough to close! Worst case we can always split them up, too, though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264727741", "body": "Woah, this is awesome! Looks really cool - thanks for taking the time to do this!\r\n\r\nIt'd be great to use smaller versions of this as our app icon. But in the meantime, would you be up for sending a pull request to have this at the top of the README? We might need to size it down a bit - maybe 50% or so - but would look pretty nice there\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264727741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264728745", "body": " Thanks for taking the time to drill into details :) I really like the work you've done and you're thinking around centralizing the knowledge / not re-inventing the wheel.\r\n\r\nMy hesitation in terms of doing a deeper integration between this project and a VimL language server API layer stems from one of the goals I have in mind for the project:\r\n> _Rich plugin development_ - using JavaScript, instead of VimL, allowing deep language integration.\r\n\r\nAnd to be fair, this is partly for selfish reasons - I personally hate debugging and writing VimL :) But I also believe  there is a ton of value in JavaScript - even though it's not a perfect language by an stretch, there's a huge ecosystem and continual investment in tooling - and many of the modern editors like Atom, VSCode, went this route, and have been hugely successful in creating a vast ecosystem of high-value plugins. So I'm hoping that Oni could tap into that as well, and combined with the power of Neovim, could be a truly productive, modern (even next-gen), modal editor.\r\n\r\nFor those reasons, I would prefer not to call into a VimL layer to implement the language service abstraction, and instead implement it in the JS layer to align with the vision of the project.\r\n\r\nHowever, there is a ton of value in your project and in general to have the language server layer accessible in Neovim, and not just Oni - it allows terminal users to get the benefit of the language services, which is huge!  Oni is essentially ignoring that need because it doesn't run in the terminal, so it is a departure from a large part of the vim/neovim audience - but your plugin addresses that gap.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264728745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264736792", "body": "Thanks for doing this cleanup work!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264736792/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264736833", "body": "Will be really helpful as people contribute to help keep a more consistent standard, and catch more errors at compile time", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264736833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264737046", "body": "Thanks for the PR! Would it be possible to shrink the image a bit? I'm thinking maybe 128x128 or 256x256. It looks great but a bit overpowering at the moment ;)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264737046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264773321", "body": "Windows binaries are included, so if you used npm, `oni` or `oni-vim` at the command line will start the app.\r\n\r\nIf you used git clone, you'll need to run `npm install`,  `npm run build` and `npm link` and then you should be able to run it.\r\n\r\nAre you hitting an error when you try to launch?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264773321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264773817", "body": "Awesome, thanks @bert88sta!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264773817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264865078", "body": "Hi there,\r\n\r\nInteresting, I just tried it too, and see a similiar issue:\r\n\r\n```\r\nD:\\oni\\bin\\x86\\Neovim\\share\\nvim\\runtime\\autoload\\health\\nvim#check\r\n================================================================================\r\n  - ERROR: Failed to run healthcheck for \"D:\\oni\\bin\\x86\\Neovim\\share\\nvim\\runtime\\autoload\\health\\nvim#check\" plugin. Exception:\r\n    Vim(call):E107: Missing parentheses: D:\\oni\\bin\\x86\\Neovim\\share\\nvim\\runtime\\autoload\\health\\nvim#check()\r\n\r\nD:\\oni\\bin\\x86\\Neovim\\share\\nvim\\runtime\\autoload\\health\\provider#check\r\n================================================================================\r\n  - ERROR: Failed to run healthcheck for \"D:\\oni\\bin\\x86\\Neovim\\share\\nvim\\runtime\\autoload\\health\\provider#check\" plugin. Exception:\r\n    Vim(call):E107: Missing parentheses: D:\\oni\\bin\\x86\\Neovim\\share\\nvim\\runtime\\autoload\\health\\provider#check()\r\n\r\n```\r\n\r\nThese look like the Neovim/vim runtime plugins.\r\n\r\nRegarding jedi-vim, there could be a  separate issue, though - I've packaged a Windows neovim binary, but it doesn't have python support.  For the version I've bundled, it doesn't look like it has python support, as `echo has('python')` and `echo has('python3')` both return false. You might want to try modifying it to use your build. You can modify that it in NeovimInstance.ts when it spawns the process at the bottom. We should have a Config setting for this too.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264865078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264868546", "body": "Ah ok, seems like a potential issue with how the patched fonts are rendered in the app then. Patched fonts were always a pain for me even in normal VIM :)\r\n\r\nFor the statusline, I'm hoping to be able to move away from patched fonts. There's some really exciting UI work happening in the [External UI RFC](https://github.com/neovim/neovim/pull/5686) that I'd like to take advantage of in order to enable rich status lines, on par with something like Atom, without needing a patched font.  Even just having CSS styling plus font-awesome icons would give us a much improved look & feel.\r\n\r\nIf someone would be up for investigating the patched font rendering, the code in `CanvasRenderer.ts` would be a good place to start - it'd be interesting to know how the special font characters are being rendered there. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264868546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264893446", "body": "@jordwalke  - that would be incredible! What's the best way to chat about this?\r\n\r\nAn app icon / logo is a great starting point - there are some other long-term ideas I'm tossing around in terms of having a great first-run / unboxing experience, and potentially an improved vimtutor, etc. All of that would be a ways out though", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264893446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264897605", "body": "Good point. I believe there would be an efficient way to invoke VimScript commands over the msgpack RPC API, and there's already an entry point via the neovim/node-client. Need to validate the latency though beforehand and make sure that it is actually efficient. Regarding efficiency, eventually it'd be nice to run some input benchmarks, like this [article](https://pavelfatin.com/typing-with-pleasure/)... There is definitely more typing latency in Oni than GVim at the moment for me at the moment, but that's sort of a tangent.\r\n\r\nI like the idea of spitting out regular VimScript from json - things like inoremap/noremap could be emitted, so there wouldn't be any additional latency, and it would be relatively straightforward to implement. It gives us both the benefits of built-in performance and portability so that the config can still move freely. It also maps well to configuration options - moving some options like linenumbers, colorscheme, etc from init.vim to a configuration.json could be implemented in the exact same way. \r\n\r\nThis sounds like the direction we should move forward in - really gives us the best of both worlds.\r\n\r\nThis is great feedback, thanks for thinking about this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264897605/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264898554", "body": "@bert88sta - sorry, this issue wasn't very clear :) \r\n\r\nIn retrospect the switch really isn't too bad... The bigger problem is that there are a bunch of hardcoded keybindings, like in index.tsx:\r\n\r\n```\r\n        if (key === \"<f3>\") {\r\n            formatter.formatBuffer()\r\n            return\r\n        }\r\n\r\n        if (UI.isPopupMenuOpen()) {\r\n            if (key === \"<esc>\") {\r\n                UI.hidePopupMenu()\r\n            } else if (key === \"<enter>\") {\r\n                UI.selectPopupMenuItem(false)\r\n            } else if (key === \"<C-v>\") {\r\n                UI.selectPopupMenuItem(true)\r\n            } else if (key === \"<C-n>\") {\r\n                UI.nextPopupMenuItem()\r\n            } else if (key === \"<C-p>\") {\r\n                UI.previousPopupMenuItem()\r\n            }\r\n\r\n            return\r\n        }\r\n```\r\n\r\nSo making those configurable is a more pressing issue, since I'm sure my random defaults that work for me aren't for everyone :)\r\n\r\nThere's some good discussion on this in #20 - I'm going to close this one in favor of that, since that has more details about that problem and potential solutions.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264898554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264917880", "body": "@define-private-public - hmm, seems like npm failed to install electron - maybe related to one of these issues?\r\nhttps://github.com/electron/electron/issues/7007\r\nhttps://github.com/electron-userland/electron-prebuilt/issues/186", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264917880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265173616", "body": "Thanks @keforbes, great answer :) \r\n\r\nTerminals are usually limited to character-by-character rendering - sometimes there are very creative workarounds to draw more interesting things, like patched fonts, or some of the crazy stuff Emacs does, but in general you're limited to that restriction.\r\n\r\nNeovim's architecture is decoupled, meaning you aren't constrained to a terminal anymore, and so there are lots of front-end UIs now that render to places besides a terminal. Whether or not that is actually useful for you is for you to decide :)\r\n\r\nIf you're interested to see some others, check this out:\r\nhttps://github.com/neovim/neovim/wiki/Related-projects#gui-projects\r\n\r\nAnd just to give a comparison, this project was a pure-terminal progenitor to this one:\r\nhttps://github.com/extr0py/vim-electrify-typescript-completion\r\n\r\nThanks for checking out the project!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265173616/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265321859", "body": "Awesome, this looks great! Thanks for adding this, I had no idea which font would be a good default on Linux. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265321859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265331760", "body": "Thanks all for the great feedback / discussion! I feel bad in a way that I didn't have the repo in a better spot with more details on the vision of the project :) \r\n\r\nMy long-term vision would be to have a modal editor for the 21st century. I've gotten really hooked on Vim in the past year - in my opinion, it is the fastest way to author text. For a long time, I used visual studio with C# and I really enjoyed the intellisense and language features, but I tried coding on my laptop on a long flight, and realized how hard it was to deal with the trackpad... and realized there had to be a better way! \r\n\r\nI then got into Vim, using gvim on windows, but missed some of the language features. So then I tried Atom, and it's actually a very beautiful editor, with a mature VIM binding. However, as was pointed out, it's _slow_. Like, _so slow_ that I assumed Electron wasn't really a viable option for a while. I would love to just use Atom with Neovim, but when I looked at the performance, I found they weren't just one-off issues but core architectural issues. If you're interested in the performance work they are doing, check out these issues: \r\n\r\n- https://github.com/atom/atom/issues/2654 \r\n- https://github.com/atom/atom/issues/9572\r\n\r\nUnfortunately, they've been open for a year or more, and there are a few other issues that are non-starters for me.\r\n\r\nI then tried out https://github.com/microsoft/vscode, and VSCode is actually a really great editor - it's much faster than Atom in most areas, and I think it proves to people that an Electron-based app can be a viable editor. I've used the VIM plugin there: https://github.com/VSCodeVim/Vim and the author there has done fantastic work and it's very mature. I'm a big fan of both VSCode and VSCodeVim plugin, and I tried really, really hard to make that my primary editor. However, for VSCode, the lack of extensibility of the core editor was a problem for me, and no matter what vim emulation you do, there are always cases where something goes differently than you expect, and to me thats like nails on a chalkboard.\r\n\r\nI've also been really inspired by some talks like this:\r\n(A Whole New World - A new text editor) https://www.destroyallsoftware.com/talks/a-whole-new-world\r\n(React w/ Live Reloading) https://www.youtube.com/watch?v=xsSnOQynTHs \r\n\r\nAnd then projects like this:\r\nhttp://lighttable.com/\r\n\r\nI would really like to incorporate some of these concepts into an editor. Being able to see your code live as you edit is such a powerful concept, and it makes writing code a whole different ballgame. \r\n\r\nAt the end of the day, whether I was in Visual Studio, Atom, VSCode, I felt like I had to make a compromise in some direction, so that's sort of how this project came about - I just wanted to build an editor that fit my workflow and let me try out some of these ideas, without compromising. Neovim made that possible by allowing an arbitrary front-end and letting me preserve everything I enjoy about VIM.\r\n\r\nI've done a lot of rambling... but to give thoughts on the questions more directly:\r\n1) *Plugins* - I agree with both points above - to me, I use a relatively small set of plugins, but these are very personal. I would really like to make it easy to transition to Oni from Vim/Neovim if a developer feels it is the right fit for them - I think if #13, #20, and #33 can be implemented reasonably, then that would go a long way in bridging the gap for the transition. I think if we can also add a variable like g:oni or something, that could help people too.\r\n\r\n2) *Lua* - I'm actually not too familiar with how Lua is used in Vim - I've never used a Vim distro that was built with Lua support. I'm more familiar with it in the context of a scripting engine for games ;) Let me know if there are some concerns here, I imagine there are solutions - the worst case is Neovim always supports writing to stdin/stdout, so you can always implement a protocol over async.\r\n\r\n3) *Re-implementation* - I think we covered the Atom issues above, but I think even without Atom, we still have a ton of opportunity for reuse. The React community has an incredible set of controls and libraries (thanks @jordwalke !!) to leverage, and Microsoft has done a great job making their plugin infrastructure open - https://github.com/Microsoft/language-server-protocol - and the node community has such a rich set of NPM modules that can be used, so there's a ton of opportunity to reuse some existing controls. I'd like to reuse existing ones where we can, and then if we need to build new ones, eventually refactor and make available to the community.\r\n\r\nOh and by the way, @bert88sta , not stupid questions at all - thanks a lot for asking them!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265331760/reactions", "total_count": 6, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265332646", "body": "Bummer - thought this was fixed in the last npmjs update. I'll revisit it, it seems like publishing from a Windows machine is problematic.  Thanks for the details\r\n\r\nWe might need a .gitattributes file to have git ignore the line ending conversion for this file.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265332646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265334589", "body": "@bert88sta - ah ya, might be hard to repro without a mouse wheel!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265334589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265335297", "body": "Thanks for reporting! I think it might be interpreting Alt-Tab wrong, and actually firing the 'A'.\r\n\r\nPutting a breakpoint  in the keydown event listener in https://github.com/extr0py/oni/blob/master/browser/src/Input/Keyboard.ts would be a good place to start if someone wants to take a look", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265335297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265337444", "body": "Great feedback. I've been wondering how to handle color schemes. One option was just to stick with the default Vim colorschemes. \r\n\r\nI was taking a look at some other editors to see how they define colorschemes:\r\n1) VSCode - uses TextMate themes\r\n2) Atom - uses less files (makes sense based on the way it renders)\r\n\r\nI thought at first about just using the vim color themes, but we run into the problem where the UI extension don't respect the themes at all. One option I looked briefly at was reading the set of highlights and applying them to the UI - trying to pick good defaults for the built-in UI elements like the menu, etc. \r\n\r\nI like the idea of having the colorscheme configuration be in JS too though, to be consistent with the other configuration. The hardest part with that is to bridge the gap so that users can bring in the themes they are comfortable with. \r\n\r\nSo from that that, a `colors.js` file might look like this:\r\n```\r\nconst config = {\r\n\"base\": \"onedark.vim\",\r\n\"ui.bgColor\": \"black\",\r\n\"ui.autoComplete.border\": \"gray\",\r\n\"ui.autoComplete.background\": \"rgba(200, 200, 200, 0.5)\",\r\n..etc...\r\n} \r\n\r\nexport default config\r\n```\r\nAnd once we've parsed this file, we'd convert it the vim-syntax related items to highlight instructions, and preserve the rest to be used in the UI. Is that sort of what you were thinking?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265337444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265337595", "body": "Ah, if you downloaded the zip file, you'll need to build and run:\r\n\r\n- `npm run install`\r\n- `npm run build`\r\n- `npm run link`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265337595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265337835", "body": "Ya, bummer :( I was looking for a distribution too with Python so I could use Ultisnips but no luck. I'll close this for now then, since it's tracked by a Neovim issue.\r\n\r\nThe good news is I believe we could still support a python language service like Jedi, even without Python integration directly in Neovim. If you're interested in that, we can track in a separate issue. I'll close this for now though since it's not an Oni issue.\r\n\r\nCheers!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265337835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265338082", "body": "Thanks for looking at this, @bert88sta !\r\n\r\nAh ya, unfortunately there's a bug with neovim/node-client that causes an issue with this.\r\n\r\nTry starting from this branch: https://github.com/extr0py/oni/tree/extr0py/external-popup-menu\r\n\r\nThis commit specifically has the workaround I needed: https://github.com/extr0py/oni/commit/2d3e535eff2146fea529bae6a6e002c8b21c8ec1\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265338082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265338225", "body": "Hmm, I think I need to get rid of the `postinstall` script that runs `npm install` in the `oni-plugin-typescript` directory, and push those dependencies up.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265338225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265338735", "body": "@keforbes  - not ignorant at all, thanks for the suggestion :) \r\n\r\nWe use the font family to set the font in the canvas. For some reason I thought that you couldn't have font fallbacks in the canvas font, but I could very well be mistaken. \r\n\r\nIf you're up for it, feel free to send out a pull request with the fallback fonts! Would be helpful to have. DejaVu Sans Mon was just added for Linux by @JakubJecminek , but having additional fallbacks for all the platforms wouldn't hurt.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265338735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265339302", "body": "Oops, try `npm install`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265339302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265341401", "body": "That output looks right, now you need to do:\r\n`npm run build`\r\n`npm run start`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265341401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265341525", "body": "@Gajit - might be #19 also. I'll take a look at that one tomorrow, looks like quite a few people are hitting that", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265341525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265443139", "body": "Still need to upload this to npm for npm install -g to (hopefully) work better", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265443139/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265448205", "body": "Sweet! Thanks for the help, @JakubJecminek ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265448205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265450056", "body": "I've published version 0.1.2 at npm, so please try `sudo npm install -g oni-vim` again. The `postinstall` script that was causing problems was removed with #40. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265450056/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265450472", "body": "I published a new version to NPM - 0.1.2.\r\n\r\nI believe the line-endings issue should be fixed now. I downloaded the tarball here:\r\nhttps://registry.npmjs.org/oni-vim/-/oni-vim-0.1.2.tgz\r\n\r\nAnd validated that the line endings are LF in the cli/oni file. Hopefully that means users won't need the :set fileformat=unix workaround. Let me know though if that is still showing up!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265450472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265452575", "body": "> Are you looking for any help on the project?\r\n\r\n@JakubJecminek Definitely! I think this is an ambitious vision and to build something meaningful for the community I'll need a lot of help. I'll be porting over some of the items I had in my TODO backlog as bugs / features in the issue tracker here, it would be awesome to have your help in the ones that interest you. And if there are ideas you have that aren't tracked, feel free to log them here so we can discuss. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265452575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265453129", "body": "@darkwater  thanks for the jsfiddle, you're right, good call.\r\n\r\nIt seems like it would be helpful to have a set of fallback fonts that we append when drawing our text (in ctx.font) regardless of what that value is, so we can at least be guaranteed a monospace font even if the font doesn't exist. I believe this is similiar to how gvim behaves.\r\n\r\nPotentially we could add the fallback here, I'm thinking, when we set the font\r\nhttps://github.com/extr0py/oni/blob/master/browser/src/Renderer/RenderCache.ts\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265453129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265454852", "body": "Cool design, I hadn't seen it before, I like the idea a lot! It's nice to be able to opt-in to getting barraged with all the details. Would make a lot of sense to integrate in terms of messages, errors, etc.\r\n\r\nI believe this RFC will make it easier to get at the messages:\r\nhttps://github.com/neovim/neovim/pull/5686\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265454852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265458346", "body": "> The goodness of vim should not come with terrible user experiences that are only present because terminals 30 years ago didn't offer better solutions.\r\n\r\nYes, you hit the nail on the head here - this is really one of the implicit goals I had in mind, but didn't call out. This is an important goal of the project, so I added it in the README.\r\n\r\nIt would be great to improve that 'Hit enter to continue' experience. Need to check the msgpack-rpc API and see if there is a way today to get errors. That extended UI PR (https://github.com/neovim/neovim/pull/5686) seems like it will help here, by decoupling additional parts of the UI to allow us to choose how to render them.\r\n\r\nIn terms of errors specifically, there is definitely a problem with errors on startup not being reported by neovim to external UIs: https://github.com/neovim/neovim/issues/3901. Past startup, need to check and see if the msgpack-RPC API supports an event/notification for this. If there is a notification in parallel, we could potentially start the UI for this and implicit press enter for the user, until the external UI work is complete.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265458346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265460553", "body": "@bert88sta  - not sure if you saw this, but on the Neovim newsletter they called out:\r\n\r\n> ONI is an Electron-based Neovim IDE showing many exciting possiblities. It also has a __cool logo__ like NyaoVim :)\r\n\r\nThanks for the contribution!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265460553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265463987", "body": "@bert88sta - after this change I get your icon in the taskbar and on the app\r\n\r\n![image](https://cloud.githubusercontent.com/assets/13532591/20971870/e8a30d2a-bc47-11e6-8fff-1ae1eda87ea6.png)\r\n![image](https://cloud.githubusercontent.com/assets/13532591/20971915/0fb7349a-bc48-11e6-89dd-cf65c4182465.png)\r\n\r\nI also used the 128x128 in the README, hope that's alright with you! Wanted to reduce the scrolling on the main page a bit.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265463987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265464106", "body": "Relates to #4 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265464106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265464451", "body": "@jordwalke - I should probably break down and get a twitter account at some point :) I'll get an account and hit you up on there", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265464451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265475494", "body": "Starting a new PR", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265475494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265481167", "body": "@darkwater - I think this is getting closer now. Your suggestion to use runtime paths instead of overriding init.vim is implemented, so I think that should be helpful. \r\n\r\nIn addition, there's also a configuration option 'oni.useDefaultConfig' which defaults to true, but since the chosen defaults might conflict, this prevents those from being added to the runtimepath.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265481167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265481359", "body": "Remaining work is to fix outstanding build issues and add an entry in the readme / faq documenting this option. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265481359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265651810", "body": "Awesome, thanks for the PR @bert88sta ! Looks great!\r\n\r\nYa, regarding the artifacting - it's a 'feature' that the canvas is incrementally rendered, but ideally render would be fast enough that the 'incremental' isn't as necessary :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265651810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265652607", "body": "@bert88sta - thanks for the PR for scrolling! Sorry that I was slow to reply to this thread. Looks like you have a pretty good grasp on the mouse events in Input/Mouse.ts, so that's great - that and Input/Keyboard.ts is where most of the action is. \r\n\r\nThe Mozilla docs are a really good reference for the general mouse events: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\r\nbut seems like you already got the info on the scroll / delta to implement it.\r\n\r\nRegarding middle/right click, I think you're right, it should be safe to intercept them. I don't remember ever using right/middle click with GVIM. Right-click might be nice to show a context menu at some point, but the scrolling is the most important functionality at the moment - thanks again for implementing it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265652607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265652715", "body": "I'll close this since the most important case is addressed with #45, but if there is other mouse related functionality you'd like to explore we can open a new issue or re-open this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265652715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265652776", "body": "Minor tweak- you might want to do:\r\n`npm run build`\r\n`npm link`\r\n`oni'", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265652776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265653040", "body": "@darkwater - I believe you're correct. We're ignoring the `devicePixelRatio` value, which I believe on retina devices would be `2`. So we're using the device-independent pixels, which would basically render at quarter resolution. Seems like that may need to be accounted for in the canvas rendering logic and the resize logic.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265653040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265653109", "body": "Thanks for #45 ! Closing this out", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265653109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265656443", "body": "@bert88sta - that's awesome that you read through all that material! Really cool :)\r\n\r\nRegarding handling the completion completely externally or not, that's a great question - that's really the crux of the challenge here. The design in my mind was to handle the completion completely externally, as you suggested, just to simplify. I think it will be hard to get right otherwise, especially with some of the different completeopts, and this will make all the completion scenarios cohesive - completion will behave the same whether the entry point was from VIM or from a UI plugin. Thanks for thinking about this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265656443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265768637", "body": "Thanks for the report, @Dequisitor !\r\n\r\nA couple follow-up questions:\r\n1) What node version are you running? I'm assuming its 7+ based on the npm version, but wanted to check\r\n2) Are you on 32-bit or 64-bit Windows?\r\n\r\nIt sounds like there are some related reports:\r\nhttps://github.com/electron/electron/issues/2126\r\n\r\nMy hunch is it might be worth trying the 32-bit electron bits and see how they work", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265768637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265769267", "body": "Cool, that's great! If they have that mode added and it will show up in an update, that's cool - not worth us spending a ton of time on a workaround.\r\n\r\nI think this PR:\r\nhttps://github.com/neovim/neovim/pull/5686\r\n\r\nWill help a lot with some of theses issues in the future, too... Can't wait. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265769267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265769325", "body": "Thanks for looking at this, @bert88sta !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265769325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265769585", "body": "This fix will be enabled once the 'cmdline' mode is enabled downstream in neovim. Thanks @bert88sta !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265769585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265773988", "body": "@jordwalke - the config looks really cool! \r\n\r\n> I like the idea of either using everything out of the box, or a completely from-scratch config. \r\n\r\nYes, same here. I want to make sure the out-of-box experience is on point, and that the first time you launch the editor it _just feels good_. The first time I started VIM it felt like it was a wild beast that I would need to tame or something.... whereas installing and launching Atom was a very pleasant experience. Hopefully that makes drawing new people to modal editing easier...\r\n\r\nAnd then of course it's important for VIM veterans to be able to use their finely-honed and crafted config with no friction, and still experience some of the UI benefits.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265773988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265775311", "body": "Actually, markdown rendering is really easy because there are some great javascript libraries that handle this!\r\n\r\nI built a prototype for this in a previous project: https://github.com/extr0py/vim-electrify-markdown-preview\r\n\r\nThis library in particular is great : https://github.com/chjj/marked and allows options for github flavored markdown. (I also included another library called Mermaid, which allows diagram rendering from text).\r\n\r\nThe main use case for this feature for me is so that I can see my changes live as I change README.MD/ROADMAP.MD, otherwise I need to round-trip through a pull request to see my changes (or open VSCode), but of those options feel sloppy to me :)\r\n\r\nI think LaTex might be a bit harder from a cross-platform perspective, just because I believe the build tools are more of a pain to install in Windows. It would be awesome to have that as another plugin too though - I know a common case for Emacs is to draft and show text in LaTex immediately.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265775311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265788786", "body": "Make sure to set `oni.useDefaultConfig` to false in your config.json to try this out :) \r\n\r\nIf you see that the screen 'sticks' and waits for keypress on launch, that's an indication that something went wrong while loading init.vim - unfortunately Neovim doesn't bubble up the errors on launch, at the moment. Keep me posted if you see any issues like that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265788786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265789199", "body": "I believe this should be fixed by PR #18 - try out the `oni.useDefaultConfig` option and let me know.\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265789199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265852890", "body": "> First, the scroll bar jitters from left to right\r\n\r\nUnfortunately there's some bugs in `OverlayManager.ts` in terms of how the window position is calculated. Sometimes, it gets off a bit. I think we could use some of the API members in the `msgpack-rpc` API to get the open windows - there's methods to get all the windows, and then their position and size - that would be a much more reliable way than the current strategy. It actually impacts everything that is an _overlay_ - you can even see it in the last animated gif in the readme for live evaluation :( As well as the error messages.\r\n\r\nWe can also always get the currentBuffer / currentWindow from those same msgpack-rpc APIs (They live in `_neovim` on NeovimInstance - there aren't good typings for it, but you can see some of the members in the debugger -> `window.neovim._neovim` gives some details). Fixing the OverlayManager to give more reliable window dimensions will help across the board, and I anticipate several other pieces of functionality being built on top of it later too (overlaying git blame / git changes, etc)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265852890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265853157", "body": "Regarding needing the current buffer for scrolling without clicking - I think if you just send the scroll commands as input, it should 'just work' as Neovim will apply those to the currently active buffer. Does that not work?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265853157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265916848", "body": "Derp, thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265916848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265916882", "body": "Thanks @JakubJecminek !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265916882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265919667", "body": "Still need to take advantage of some of the new features :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265919667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265920525", "body": "@bert88sta -Hmm, I don't think there is any more mouse functionality I had in mind in the short-term. Eventually for some of the enhanced UI components like auto-complete, quick-open, etc it might be helpful to add some click handling, but not really needed for now and it's separate from Mouse.ts - that would be handled in the components.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265920525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266069090", "body": "Still looks fine on my low DPI monitor too", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266069090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266156587", "body": "Nice! Thanks @keforbes , this will look much nicer!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266156587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266157720", "body": "Thanks @bert88sta ! Are you thinking like the actual letter keys, or something higher level like commands?\r\n\r\nIf its the former, we could have a `Keys` enum that maps to the letter value. If it's the latter, I think we might need to introduce a new concept like 'Command` and reference it like `Command.autoCompleteNext`. \r\n\r\nFor key handling, I'm picturing we'll have a couple pieces:\r\n1) A VIM-command like `OniExecute` that lets us run Oni-facing commands - like `:OniExecute(\"editor.menu.next\")`. This means we can do things like imaps and nmaps and have them push back to our VIM layer.\r\n2) Have NeovimInstance listen for the `OniExecute` messages and emit them\r\n3) Have the 'Services' like Format, QuickOpen, etc listen to these commands and react (like send a ui action or something). Some of the existing concepts that are baked into index.tsx, like the menus or autocompletion, should probably get their own editor 'service' to manage the state\r\n\r\nThat's at least what I was thinking - hope that can help get you started. Thanks for looking at it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266157720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266158262", "body": "Will close this out since I don't believe any further action is required - but lmk if you are still having trouble running it. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266158262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174003", "body": "Thanks for fixing the spacing issue, @bert88sta !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174377", "body": "Hmm, did you install via `npm install -g oni-vim` or by cloning and building? \r\n\r\nNode 7.2 should be fine - could be related to #22 as well.\r\n\r\nThanks for trying it out!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174523", "body": "The generic functions sound great, makes sense to generalize those.\r\n\r\nRegarding the command execution, this file is a good place to start:\r\nhttps://github.com/extr0py/oni/blob/master/vim/core/oni-core-interop/plugin/init.vim\r\n\r\nThis is all the special interop logic - the extra things we send over the wire that Neovim doesn't send out of the box. So might be a good place to define that function.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174757", "body": "Looks like the package is busted - some of the built files were .gitignored. I'll publish an updated package", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266175167", "body": "Published 0.1.3, and verified the built files are included. Hope it works better now!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266175167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266175792", "body": "Hi @Dequisitor  - there was a bug with this package where the built files weren't included... so that is likely the culprit. I've published a new package v0.1.3 - try that out and see if it works better!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266175792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266216268", "body": "Closed this out since most of the conversation was specific to fonts... I'm sure there are lots of other Linux-specific issues, though. Feel free to log additional issues as they come up (I don't use Linux for development at the moment, so these are the last issues for me to find)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266216268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266219580", "body": "I was just taking a quick look at this... I believe I can reproduce it reliably like this:\r\n1) :colorscheme monokai\r\n2) :color \r\n3) Press `<TAB>`\r\n![image](https://cloud.githubusercontent.com/assets/13532591/21074490/2e217e90-beaf-11e6-832b-75e8939df6ef.png)\r\n\r\nThe highlight for the second colorscheme is messed up - the background color is okay (it's yellow as it should be), but the foreground color is white instead of gray.\r\n\r\nIn `Screen.ts` there is some code for handling this:\r\n```\r\n                let foregroundColor = this._currentHighlight.foregroundColor ? this._currentHighlight.foregroundColor : this._foregroundColor\r\n                let backgroundColor = this._currentHighlight.backgroundColor ? this._currentHighlight.backgroundColor : this._backgroundColor\r\n\r\n                if (this._currentHighlight.reverse) {\r\n                    const temp = foregroundColor\r\n                    foregroundColor = backgroundColor\r\n                    backgroundColor = temp\r\n                }\r\n```\r\n\r\nBut `reverse` isn't being set to true, and I don't see it being set.\r\n\r\nThere's also some interesting stuff happening in `NeovimInstance.ts` where we directly process the message:\r\n```\r\n            } else if (command === \"highlight_set\") {\r\n\r\n                const count = a.length\r\n\r\n                const highlightInfo = a[count - 1][0]\r\n\r\n                this.emit(\"action\", Actions.setHighlight(\r\n                    !!highlightInfo.bold,\r\n                    !!highlightInfo.italic,\r\n                    !!highlightInfo.reverse,\r\n                    !!highlightInfo.underline,\r\n                    !!highlightInfo.undercurl,\r\n                    highlightInfo.foreground,\r\n                    highlightInfo.background,\r\n                ))\r\n```\r\n\r\nParticularly the `a[count - 1]` - there were some cases we were getting multiple highlight calls, and only the last one seemed to be valid. This isn't hitting that case though.\r\n\r\nIt would be interesting to see how this behaves in other Neovim front-ends - there's a possibility that it is a Neovim bug.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266219580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266243676", "body": "Thanks @sitedyno  for fixing this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266243676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266246213", "body": "Interesting, guess I never hit this case since I'm usually on Windows. I think I know how to fix it though", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266246213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266248332", "body": "Hmm, ya, we could always send information down to the Neovim layer by executing a command (`NeovimInstance` has a `command` method that would be good for this). So we could notify Neovim when a menu is up, autocomplete is up, etc, and set some global variable, like `g:oni_ui_menu` or something.\r\n\r\nWe'd probably need to do the following:\r\n- Define a handler in the default's init.vim to listen for these commands\r\n   - Populate some global variable\r\n- Call the handler from `NeovimInstance.command` when the UI state changes\r\n\r\nThat way, the Vim key bindings can apply depending on the oni state. I think it'd also be good to declare a general global variable like `g:is_oni` so that users could differentiate in their init.vim if they needed to\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266248332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266249901", "body": "@bert88sta - hopefully this fixes the issue you were seeing!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266249901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266250458", "body": "@pmurias - thanks for the feedback. I'll keep an empty background for now (so it's just the colorscheme's bgcolor), and then the README.md documents how to change the background image if it is important for someone.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266250458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266250550", "body": "Fix #59 - remove background", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266250550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266250799", "body": "We should keep track of the last accepted suggestion / cursor position and not pop up the menu in that case", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266250799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266251965", "body": "No worries @pmurias , I imagine there are others that felt the same way too :) Will close this out", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266251965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266298930", "body": "@Rafi993 - did you install with `npm install -g oni-vim` or did you clone/build locally?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266298930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266298974", "body": "@pmurias - Hmm, which OS are you on?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266298974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266346631", "body": "@Rafi993 - thanks for the info! Glad it's working now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266346631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266347544", "body": "Definitely! It's on the roadmap, but hasn't been thought through yet. No IDE would be complete without debugging support :)\r\n\r\nLikely this will come after some of the other rich language integration features like completion, but is definitely something we want. My vision for this would be not just stopping at VSCode-level debugging, but to bring in some ideas from IDEs like LightTable as well. \r\n\r\nLet me know if you have any ideas or thoughts-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266347544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266462224", "body": "Thanks for the update @Dequisitor , and all the detailed info! Glad you got it running. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266462224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266463549", "body": "@pmurias - interesting, thanks for the details. That's strange that it works when built locally but not via `npm install -g oni-vim`. I just tried on my windows box (unfortunately, I don't have an easily accessible Linux box at the moment), and was unable to repro.\r\n\r\nThe command-line parsing makes the assumption that there will be two items prior to the filename - this is the relevant code in `main.js`:\r\n```\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.on('ready', () => {\r\n    createWindow(process.argv.slice(2))\r\n})\r\n```\r\n\r\nWould be interesting to know what process.argv is in both those cases, (like using `console.dir(process.argv)`)\r\n\r\nThere's also a potential that something in the ipc layer is working differently. The browser process gets the argument at the bottom of `browser\\src\\index.tsx`:\r\n```\r\nipcRenderer.on(\"init\", (_evt, message) => {\r\n    start(__message.args__)\r\n})\r\n```\r\n\r\nWould be useful to know what `message.args` is in this case\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266463549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267041932", "body": "Great investigation @keforbes - thanks for all the details! Makes sense, it seems like the CRLF is clearly the culprit. I'll plan on doing future submissions from a Linux machine, since that seems like the safest route. Additionally, it'd be nice to configure auto-publish for TravisCI on tagged commits, which would help here too. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267041932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267044543", "body": "Thanks for the report, @trusktr ! Seems related to #88 \r\n\r\nLuckily I believe there is a lot of room for improvement here - the strategy the current `CanvasRenderer` is using is really naive and is essentially a prototype. It's promising that in a smaller window it's on par with terminal VIM... means that there should be no fundamental blockers to achieving that in a larger window too.\r\n\r\nI'll close this out as a duplicate of #88, since I'll start adding some ideas for discussion there. If you feel like this might be different or unrelated, feel free to re-open. Thanks for trying it out!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267044543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267048550", "body": "I've done a few investigations here. One helpful thing to do before testing out the perf here is to max out the maxCellsToRender setting in `Config.ts`:\r\n```\r\n    \"prototype.editor.maxCellsToRender\": Math.max,\r\n```\r\n\r\nThe canvas is drawn ~60 FPS (each tick of requestAnimationFrame), and this variable controls how many cells to re-draw each frame. This is why we get the 'sparkler' effect - only a subset of the cells are drawn. Setting this to max makes it easier to see the issues come up in the profiler.\r\n\r\nThis setting was added as a hack basically because drawing the cells is pretty expensive. We redraw cells aggressively in `CanvasRenderer.ts`. The only optimization at the moment is to cache individual letters as images, because it turns out the `fillText' method on canvas is actually more expensive than `drawImage` - at least on the machines I've tested.\r\n\r\nA good investigation around this is here:\r\nhttp://simonsarris.com/blog/322-canvas-drawtext-considered-harmful\r\n\r\nThe other optimization that has been implemented is to only keep track of cells that have changed, which is what `deltaRegionTracker.getModifiedCells()` gives us. However, it turns out that when scrolling the whole buffer, pretty much everything changes on the screen, so the delta tracking doesn't help much there :)\r\n\r\nIn terms of next steps for optimizations:\r\n1) It'd be great to get a fresh profile of the bottlenecks when drawing - the profiler in the Electron debug tool is very helpful for this\r\n2) If the drawText/drawImage is still the bottleneck, we can potentially do more aggressive caching - we could cache entire words instead of just letters. We'd need to make sure to have a fixed size for this cache as it could potentially grow in memory, but this would likely speed up rendering significantly, because it turns out code/text tends to have a lot of repeated words.\r\n3) If the clearRect is the bottleneck, we can potentially coalesce those calls and clear a larger rectangle.\r\n\r\nThere's also some other tools the canvas gives us that might help - we can use the `getImageData` to cache a chunk of the screen and scroll it just by rendering that in a different place. \r\n\r\nIn addition, we could ditch the canvas altogether and test out a DOM based approach to rendering, too.\r\n\r\nLots of options to explore. Let me know if you have questions about any of those ideas or need help getting started\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267048550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267048806", "body": "Great point, I just sort of through those up there and if people don't know where to look or where the support lives... they are probably pretty disappointed when they open the app :) I'll start calling them out in the docs shortly", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267048806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267050997", "body": "Awesome, thanks for doing this profile, @bert88sta ! It unfortunately is a bit high, but its sort of what I expected today. I think some good goals for this would be to get the min < 10ms and the avg around 15 ms - those might be aggressive goals though.\r\n\r\nA bunch of stuff happens when we press a key:\r\n1) Keydown event gets triggered, and handled in `Keyboard.ts`\r\n2) Keyboard converts to VIM-style key press and emits another `keydown` event\r\n3) Key press is sent to the NeovimInstance via the msgpack-RPC API\r\n4) Neovim processes the command, and then lets us know the updated state via an action\r\n5) The screen listens to the action, and updates state\r\n6) The renderer picks up the updated screen state, and draws on the screen\r\n\r\nSo there is actually a lot happening between pressing the key, and seeing it on the screen. When tackling performance improvements, it's important to know where the bottleneck is - so that we are focusing on the right place, and also so that we can measure the improvement.\r\n\r\nOne strategy we could do is add some console.logs in each of these places, like:\r\nconsole.log(`Keydown handler: ${performance.now()}`)\r\n..\r\nconsole.log(`Renderer processing action: ${performance.now()}`\r\netc\r\n\r\nAnd then we can take a look at the console. The steps I'm suspecting are the round-trip between us to Neovim - steps 3 and 4, but I could be wrong, as the delay could be anywhere in that path above.\r\n\r\nIf it turns out that the round-trip between Neovim and our UI is the culprit, one thing we could do (at least in insert mode), is to apply *optimistic updates* - we start showing key presses on the screen before we get confirmation from Neovim, and then once Neovim sends us the updated state, we reconcile it. This actually is not too different from how multiplayer games work:\r\nhttps://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking\r\n\r\nIt's just that, in this case, our 'client' is our Electron UI, and the 'server' is NeoVim, and instead of latency being due to network, it's due to the latency in the msgpack-rpc API.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267050997/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267051347", "body": "Need to find exactly the bottlenecks, but this might be interesting to look at:\r\nhttps://github.com/nolanlawson/optimize-js\r\n\r\nIt looks like on Chrome, wrapping in IIFEs can speed up parsing\r\n\r\n(Need to benchmark to see exactly where the bottlenecks are though). There are also opportunities to improve perceived perf - right now, if startup is slow, we just see black screen with a blinking red cursor....", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267051347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267052650", "body": "@kopischke - good point, thanks! I opened issue #94 to track setting `gui_oni` to follow that convention.\r\n\r\n@bert88sta - IMO, it would be a poor user experience to have multiple menus up, so we should avoid that. And it seems like it might also be unclear to the user what the result of <c-p> might be in that case, so I don't believe there'd be a case to have multiple menus / list up at one time.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267052650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267053117", "body": "Should be relatively straightforward - it'd be really easy if we could just add this to one of the plugins, like the core-interop plugin. However, I'm not sure of the timing of that (if it would be loaded prior to sourcing init.vim). Otherwise, it seems like it could be added on the command line when we launch the app", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267053117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267060078", "body": "For now, all publishes should come from a Linux or OSX box due to #84 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267060078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267060224", "body": "I set up Ubuntu on a spare machine and pushed 0.1.4 from there. Installing via `npm install -g oni-vim` works, and I can also do `oni <filename>`. Closing this out, but in the future the publish could be automated from TravisCI, which would be nice - used #95 to track that. Thanks again for the investigation, @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267060224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267326438", "body": "Fix #47 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267326438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267328936", "body": "Fixed by #97 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267328936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267362519", "body": "Remaining work:\r\n1) Clean up TSLint errors\r\n2) Test on Linux\r\n3) Rationalize the 'launch' argument, and process build tasks. Need to run dependent tasks in that case", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267362519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267364538", "body": "Thanks for the suggestions, @trusktr !\r\n\r\nI've actually looked through both these options. Unfortunately, at least with the current `CanvasRenderer` implementation, even though only the new stuff is the line at the bottom, we still need to re-render all the above rows, because they've all changed (it's not like the terminal where we'd get that shift for free in some cases).\r\n\r\nThe buffer height being larger would be really nice, inertial scrolling would be awesome to have. The problem here is that with the current Neovim msgpack-RPC interface (in lieue of some of the enhancements in PR), we're not only rendering the buffer, but also the status lines and other pieces of UI. So if we artificially inflated the viewport height, we'd actually be rendering the statusline offscreen. In addition, horizontal splits would be broken too, along with various cursor motions and movements. You could try and workaround each of these problems, but it would end up being pretty complicated. There's a PR in progress in Neovim to decouple window rendering, which potentially could help us to remove some of those limitations.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267364538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267740911", "body": "Thanks for looking at this, @keforbes !\r\n\r\nI like the idea you have using <cword> to grab the base - and I think it will generalize to other types of autocompletion (like, integrating with neovim's external popupmenu UI). Prior to your change, I was thinking that we might have to do something besides vim commands: Like call getline() directly on the buffer, replace the word based on the completion base and the cursor position with the completion candidate, and then call setline(). \r\n\r\nThere might be some cases where <cword> still doesn't work 100% (like if there is a hyphenated token, ie 'neovim-actions'), but it's much better than the logic today, and I'm not sure if those cases would even come up in practice. I'll take this PR since it makes completion much better, and if we see cases where the expand(<cword>) + replace logic isn't enough, we can revisit at that time with a new issue.\r\n\r\nReally appreciate your help!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267740911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267741009", "body": "Hi @Ilphrin ! Thanks for the kind words!\r\n\r\nYes, this definitely looks like a rendering bug. I believe I hit this on Windows too on startup - it seems like the beginning of the first line is always problematic. It might be we're missing or not handling one of the neovim msgpack-RPC actions correctly.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267741009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267741149", "body": "Ya good call!\r\n\r\n> And define an `NPM_TOKEN` environment variable in your TravisCI account so your `api_key` isn't publicly visible.\r\n\r\nI was looking through the travisCI docs and getting the travis-ci client running on Windows seemed painful, but I have Ubuntu set up to dual boot, so I think now that shouldn't be as much of a hurdle anymore. Will try it out soon.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267741149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267774984", "body": "Revamping this a bit", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267774984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267775038", "body": "With @keforbes recent fix for autocompletion, this integration works a lot better, since we don't really need to take into account the base position (which we don't get from popupmenu_external)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267775038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267775789", "body": "Adding some documentation around current completion commands for #92 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267775789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267776893", "body": "Fix #9 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267776893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267783094", "body": "Also addresses #60 - brings in react-hot-loader", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267783094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267783901", "body": "Fixed by #109 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267783901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267795524", "body": "This fixes the jitteriness mentioned in #61, because we now have a more reliable way to calculate the window dimensions that doesn't depend on the cursor position", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267795524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267795554", "body": "Jitteriness is fixed by #75 - if there any issues we want to track, feel free to log them as separate items!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267795554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267796567", "body": "Still need to do the following:\r\n- Add a command to switch between instances\r\n- Send it to main process via IPC\r\n- Add logic in main.js to focus window", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267796567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267984486", "body": "Enables switching between active running instances via `<C-PageUp>` and `<C-PageDown>` - this is useful for some of my workflows", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267984486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267984911", "body": "Also adds a '--verbose' flag which is recognized by the main process, which does some logging to the console", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267984911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268235441", "body": "Fix #112 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268235441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268236282", "body": "Cheers @cjb ! Looks great. It was previously much uglier on Linux before @JakubJecminek fixed the fonts. :)\r\n\r\nThe <PageUp>/<PageDown> issue should be fixed, and I have a PR to fix the bottom line issue out now. I'll publish a new NPM package today too with those fixes.\r\n\r\nThanks for trying it out and reporting those issues!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268236282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268250096", "body": "Fix #106 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268250096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268251342", "body": "In addition to the core fix of resetting the cursor position, this also implements a couple of improvements:\r\n1) Do not always resize on initial render - we have enough information to know the proper dimensions when we call nvim_ui_attach, so we should use those instead of the baked [80, 40] value.\r\n2) Do not resize if the rows,cols values are unchanged, by caching them on NeovimInstance", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268251342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268251708", "body": "Awesome, would be great to have the help! :)\r\n\r\nI just checked out this issue... It looks like it was a bug that was caused by a couple of contributing factors:\r\n1) On startup, we would tell Neovim that we had a fixed size screen (80 cols x 40 rows), and then we would always resize to the proper size based on the font afterwards\r\n2) During resize, Neovim sends a `CLEAR` action via the msgpack-rpc API. For that action, the cursor position wasn't being reset - so after clearing, it would just start rendering the first line whereever the cursor had been previously. So that was the root problem, and easy to fix.  \r\n\r\nShould be addressed now by PR #115 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268251708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268266887", "body": "Set up now and v0.1.5 was pushed via TravisCI - thanks for the tips, @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268266887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268266986", "body": "Just pushed 0.1.5 to NPM - should be fixed now. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268266986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268399177", "body": "Thanks for the fixes!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268399177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268882591", "body": "Looks much nicer now after @keforbes fix - thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268882591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269039767", "body": "Makes sense, this can be pretty noisy, thanks for the suggestion\r\n\r\nOne alternative I was thinking of as well was to have a command to toggle QuickInfo on/off - would that be helpful here? The 500ms delay sounds pretty good too - sort of like the CursorHold event in VIM.\r\n\r\nThere's also the setting `editor.quickInfo.enabled`, to disable it completely, but it's not very discoverable at the moment.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269039767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269040269", "body": "Thanks for making these @keforbes , appreciate it! Hopefully once #56  is here these will be discoverable inside ONI as well. The change looks good overall, but it seems like there is a compile error in the typescript plugin - I'll approve it and merge once that's fixed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269040269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269040991", "body": "Interesting... It looks like somehow the typescript plugin isn't being fully initialized until a change is being made. It also seems like the syntax highlighting from the plugin isn't working.\r\n\r\nDo you know what version of typescript is installed? You can check in `node_modules/typescript/package.json`. It might be worth bumping that to the latest, just to rule out a typescript version issue.\r\n\r\nYou can also debug the typescript plugin by changing the `debugging: false` line (line 13) in `vim\\core\\oni-plugin-typescript\\package.json` to `debugging: true`. With that change, when the plugin initializes, it'll pop open a debugger window. I wonder if there is a script error or something there.\r\n\r\nUnfortunately, I'm not able to reproduce this on my build (on either Win10 or Linux) - which OS are you on?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269040991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269041258", "body": "Hi @bert88sta ,\r\n\r\nDo you have these options set in the config.json?\r\n\r\n```\r\n\"oni.loadInitVim\": true,\r\n\"oni.useDefaultConfig\": false\r\n```\r\n\r\nRight now, even if the init.vim is loaded, the default config is loaded after, and that sets the `onedark` colorscheme. It's a little confusing at the moment that both these properties have to be set. Does it work with those settings?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269041258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269041350", "body": "Need to hook up an OS X build of Neovim, and add the `gui_oni` feature (so `has(\"gui_oni\")` returns `1`)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269041350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269134407", "body": "Makes sense, maybe long-term we could set it up to source the init.vim after the defaults are set (so they are overridden by the init.vim). I'll close it for now though but let me know if you have any ideas. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269134407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269137672", "body": "Looks like the `object-key-literal-quotes` rule is causing problems in tslint, which was just fixed recently:\r\nhttps://github.com/palantir/tslint/issues/1916\r\n\r\nI'll ignore the rule for now until we can pull the fix in", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269137672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269352384", "body": "I'm able to reproduce too with my non-git home directory (just a different file shows up EBUSY: hiberfile.sys). \r\n\r\nSeems like the `recursive-readdir` library we're using at the moment will fail as soon as it hits an issue, and not return a list of files. Couple of options for fixing this:\r\n1) Use an alternative library that handles these cases more robustly (`shelljs` might be a good choice - I'd like to bring this in for some other scenarios as well - it has an ls command that might work better)\r\n2) Use a default command for UNIX / Windows that doesn't require an additional node library\r\n\r\nAlso, we might want to update the Menu component to handle asynchronicity better - right now, we synchronously populate the menu which blocks. It'd be nice if we showed a spinner or something and items as they populate. I'll log a separate task for this shortly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269352384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269502274", "body": "Thanks for the report, @wbs0829 ! Do you happen to have a sample Unicode file that I could use to reproduce the issue? \r\n\r\nI believe it should be a relatively simple fix, but would like to double-check against terminal neovim and GVim to make sure I've handled it properly. Would be great to have this support in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269502274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269503739", "body": "I think this repros it:\r\n[multibyte.txt](https://github.com/extr0py/oni/files/675890/multibyte.txt)\r\n\r\nWanted to see if Neovim reserved space for the multibyte characters, and it seems like it does. For this, we might be able to simply adjust the font rendering to expand based on the size of the character. This would involve a little bit of refactoring to the RenderCache", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269503739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269583663", "body": "Renders full character. Still some remaining work:\r\n1) Cursor should resize to cover multibyte characters\r\n2) When highlighting, the character sometimes gets overwritten. I believe this is because part of the cell is getting 'cleared' after it is being drawn", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269583663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269679967", "body": "Cursor pixel width looks good now, and refactored so wcwidth isn't called everywhere. There's some additional work to properly clear characters now", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269679967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269704231", "body": "Just merged in a change for this - #128 . Give it a try and let me know if there any issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269704231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269728020", "body": "Thanks for the update and the additional info!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269728020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269728179", "body": "Reopened this to track. It looks like on scroll, all the cells are dirtied, which overwrites half of the characters. Will look at a more robust fix that also handles this case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269728179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269872963", "body": "Thanks for the fix, @kybaeus !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269872963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269874848", "body": "Fixes #56 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269874848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269877675", "body": "Adds tslint warnings as yellow:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/21578879/07a8db48-cf47-11e6-848d-d15101f9b1dd.png)\r\n\r\nAnd serves as a demo of how other linters could be hooked up", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269877675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269879343", "body": "Thanks for all the fixes here, @keforbes ! I merged in master which fixed the previous error, and set up the package.json so it will catch these lint errors in the future. Also with #132, these show up in ONI now", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269879343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269879381", "body": "Finished this up in PR #133 - thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269879381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269884729", "body": "Fixes for #126 (part 2) in progress", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269884729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270004106", "body": "Fix #134 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270004106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270004381", "body": "Fixed by #139 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270004381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270021979", "body": "Thanks for the report! This is interesting, I haven't used fonts that support ligature for development. I'm trying out Fira Code now.\r\n\r\nOne investigation I have ongoing is looking at using  a DOM-based rendering strategy (as opposed to Canvas). I believe this could potentially be more performant, and could potentially solve this problem. It potentially would also help with #126 as well, since we could leverage the browser's flowing of text instead of manually handling the positions in the canvas renderer.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270021979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270032634", "body": "I started looking at a DOM strategy, and it looks promising (PR #140). The ligatures are rendering correctly:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/21597543/08836644-d101-11e6-88f4-e9c0849995f4.png)\r\n\r\nSome bugs though, and performance regressions - but there is a lot of opportunity to optimize and I believe it has the potential to be more performant than the existing canvas render strategy. Will continue to look.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270032634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270148481", "body": "Sweeet! Thanks @kybaeus ! I'll close this out", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270148481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270635700", "body": "Hi @sharksforarms - can you please detail the exact commands you used for installing & cloning & building? \r\n\r\nIn your built directory, you want to make sure that you have run - `npm link`, and you'll want to remove the global reference if it exists from the install step, so you'd want to run these commands from the cloned directory:\r\n`npm rm -g oni-vim`\r\n`npm link`\r\n\r\n(You may have to prefix with `sudo` depending on your folder permission structure)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270635700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270657588", "body": "Thanks for the detailed report, @metalelf0 \r\n\r\nLooks like the latest version of TypeScript found an issue that previous versions didn't :) I have this fixed in PR #144 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270657588/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270917178", "body": "Cool, I like this approach, it's much more concise - thanks for making the change, @Rafi993 !\r\n\r\nIt looks like there are a few tslint issues in AutoCompletion.tsx - once those are addressed I'll merge in this PR.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270917178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270919564", "body": "\ud83d\udc4d \r\n\r\nThanks for making this change, @Rafi993 ! It's really cool to have the direct links to Github (as opposed to the Electron github), and gives us a solid foundation to build on to add more menu options later.\r\n\r\nI added a few comments on the files - can you please take a look at those and see how you feel? The main concern I had was that the `Oni` item looks unnatural on Windows, so making that specific to OSX / Linux would help a lot.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270919564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270921201", "body": "I'm open to it! I actually don't know that much about ramda. I used lodash just because I was familiar with that from my day job, so it was my default choice :)\r\n\r\nI see a few discussions here:\r\nhttps://www.reddit.com/r/javascript/comments/3537kx/underscore_lodash_ramda/\r\nhttp://funkyjavascript.com/i-think-ramda-might-be-better-than-lodash-or-underscore/\r\n\r\nIt seems like lodash still has a lot more volume in terms of npm downloads today. It'd be interesting to see what the impact of it would be (for example, if there places where lodash is being used today in Oni that could be improved with ramda). I know there are a few places where the chaining is awkward with the lodash functions", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270921201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270921792", "body": "Interesting, sorry there are still problems. I haven't tested on Fedora 25, my Linux machine is on Ubuntu, which seems to work.\r\n\r\nOne thing you can try, to rule out an `npm link` issue, is:\r\n```\r\ncd oni\r\nnode cli/oni\r\n```\r\n\r\nIf that works, than it means that there is a problem with the way NPM linked to this file.\r\n\r\nif that does not work, then there's something else going on (maybe a node version issue? Would be helpful to know the node / npm version in this case). You could also try adding some debug logging in cli/oni via `console.log(...)` to see if it is crashing at a particular point.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270921792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270923717", "body": "\ud83d\udc4d \ud83d\udc4d \r\n\r\nThanks for logging this, @xangelux ! Agreed, this is annoying, would be nice to have a fix for it. If anyone is up for looking at this, it's definitely a problem with the way we are starting the process in `cli\\oni`. \r\n\r\nThis is some good info: http://stackoverflow.com/questions/12871740/how-to-detach-a-spawned-child-process-in-a-node-js-script\r\n\r\nA few things we likely need to do here:\r\n1) Set the `detached` flag to true\r\n2) Stop piping stdin/stdout/stderr", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270923717/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270924515", "body": "@keforbes - cool concept! Thanks for mocking it up and sharing it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270924515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270937402", "body": "Makes sense. Long-term I'm thinking of adding additional items to the `File` menu, something like VSCode has:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/21723964/4acba6ae-d3e7-11e6-8506-d0cb2d37c374.png)\r\n\r\nSpecifically, make it really easy to get to `init.vim` and `config.js` along with any other configuration (key bindings, snippets, etc). In addition, the save / new / open commands would be helpful for someone new to  vim/neovim. But those can all come later - it will be much easier to add this functionality now with the work you're doing with this PR.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270937402/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270938814", "body": "Looks great - thanks @Rafi993 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270938814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271107140", "body": "Thanks for updating this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271107140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271108449", "body": "Thanks @Rafi993 ! I'll bring this in for Linux. On Windows, there is still an issue where a node prompt pops up when the app is started. I think we need to use spawn with `cmd.exe /c` on Windows, I'll address that in another PR for #146 on top of this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271108449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271108614", "body": "Thanks @Rafi993 ! Works great on Linux. There is still a problem in Windows - it does immediately exit the terminal process, but it also spins up a separate Node console. I'll open a separate PR to address the windows issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271108614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271109027", "body": "I'm open to a replacement - I'm sure there are better icons too for the completion than the ones I chose from fontawesome! It looks like the react-icons project has a pretty small set of icons, though.\r\n\r\nI saw this project: http://fontello.com/\r\n\r\nThis has a compilation of icons across projects, and let you build a font that only includes the icons you need - looks pretty cool", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271109027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271109131", "body": "Thanks for the update, @sharksforarms ! Glad it is working now. Feel free to submit a PR if there are some additions we should make to the installation instructrion to make this easier in the future. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271109131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271112202", "body": "Fix #146 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271112202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271112206", "body": "Verified Linux still works correctly", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271112206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271113325", "body": "Will close this since it was addressed - thanks @gaving ! @dengxqi , feel free to reopen this to continue the discussion if it is still not opening for you.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271113325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271316749", "body": "@justinmk - Nice! Thanks for the update! I'll pick up the binaries soon", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271316749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271324423", "body": "Yes, right now Oni makes the assumption that it is going to spin up the Neovim instance and talk directly to it. This is something we can support though - we'll just need to parse that argument and connect to the running instance, as opposed to spinning up a new one.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271324423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271324733", "body": "@justinmk - cool, thanks for the heads up! I'll wait for the Windows patches to make it in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271324733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271566018", "body": "Cheers @nixterrimus !\r\n\r\nIt's great that you're checking out that feature - and funny because I ran into the same issue a day or so ago. It makes it pretty hard to use if it is silently failing.\r\n\r\nRight now, the live-eval marker has a yellow border on the side - the design I was considering is:\r\n1) Show a *spinner* while the code section is being evaluated\r\n2) Show a *green border* when the code section has been successfully evaluated\r\n3) Show a *red border* when the code section has failed to evaluate. In addition, in the error case, show the actual error message\r\n\r\nThe live evaluation handlers actually already return the error message as part of the payload, so the work is really to tweak the overlay to show this extra data in `LiveEvalMarker.tsx`\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271566018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271586042", "body": "@kybaeus , thanks for trying it out! Glad it worked.\r\n\r\nI just started working on the delta rendering. For the really performance sensitive pieces (like the rendering), I'm planning on not using React, so that we can have more flexibility in tuning it.  My first render strategy, before the canvas, was using React, and there was some performance overhead that was difficult to workaround.\r\n\r\nI definitely prefer writing code in React, so for other things like the the autocompletion/popup menu/etc, the rendering isn't the bottleneck and it makes sense to leverage it.\r\n\r\nWith the latest changes, the performance seems better, but there is one issue with the delta rendering - sometimes it will split `<span>` and break the ligature rendering. \r\n\r\nSo there is the following outstanding work left:\r\n- Fix that split span case, I'm planning on adding to the logic adding a character directly to a span in cases where it makes sense (ie, merging with a previous span)\r\n- Add unit tests for some of the delta / merging / coalescing logic\r\n- Remove the `force` flag on the delta region tracker, since it was really just a hack\r\n- Split out the tokenrenderer items to separate files ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271586042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271594465", "body": "WIP to fix #154 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271594465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272066084", "body": "Thanks for looking at this @keforbes !\r\n\r\nGood catch, thanks for looking at it. I'd like to have a nice (subtle) default background just to showcase the ability to have a background. We had a discussion in #59  - the original default I had wasn't very good since it was text on text. But if we could find something more subtle & less distracting, it would be great to add it in so people know right away this feature is available. Let me know if you have any ideas!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272066084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272069968", "body": "Thanks for the detailed info @keforbes ! Having the gif and the description was very helpful.\r\n\r\nLooks like this was a regression from #148  - it was somewhat bizarre. The code completion would come with a value of `constructor`, and it would use the constructor function instead of a React component, which caused that error message. I'll send a PR to address this shortly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272069968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272153518", "body": "Looks great! Thanks for the contribution, @Rafi993 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272153518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272154506", "body": "PR #147 by @Rafi993  gives us a framework to make this much easier!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272154506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272155875", "body": "Cool idea, @jordwalke - having an \"oracle\" like you describe would make it really easy to apply optimistic updates. One crazy idea I had was to try and compile Neovim to WebAssembly and get it to run directly in electron (or have it built as a native node module) to reduce the interop time. But the engine you describe is interesting.\r\n\r\nThanks for checking those traces out, @keforbes ! I believe those are used for all the overlay UI. That's stuff like the error squiggles, live evaluation markers, and scrollbar. You can test if things are still okay after that by creating a split and getting some error messages, and switching between buffers. I don't think those calls are blocking (since all those calls are async) - but that 10ms appears to be the roundtrip latency between Oni <-> Neovim for most of the commands. It seems like for processes talking locally to each other we should be able to reduce that roundtrip time, which would have benefits across the board. The next step there would be to identify the bottleneck - is it something on our end when we are serializing the message to go to Neovim via msgpack-rpc? One reductionist approach would be to write a very minimal client - the minimal needed to talk to neovim - and benchmark how quickly that roundtrip is. Then we start adding pieces in until we find the bottleneck. But I don't think that particular call is impacting typing latency (although we'd have to test to be sure)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272155875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272179927", "body": "Making progress.... The errors are showing up now\r\n\r\nJust need a few things:\r\n1) Code cleanup - consolidate the error paths, and since that `evaluateBlock` method is getting large, factor it into a separate file / split it up into compilation and execution paths\r\n2) Fix the CSS for the live evaluation marker (add some padding / ellipsis)\r\n3) Unit test for that method\r\n![live-eval-errors](https://cloud.githubusercontent.com/assets/13532591/21893939/1c78bd1e-d892-11e6-906d-d867d2e2d13f.gif)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272179927/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272598337", "body": "Weird! Definitely a bug, thanks for the screenshot:\r\n\r\n1) What OS is this?\r\n2) Did you customize the font / font size? If so, what are the settings for that?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272598337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272598830", "body": "Also, I wonder if the DOM rendering PR (#140) fixes this", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272598830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272605515", "body": "Wasn't able to repro it on Windows! But I just tried on an Ubuntu Linux box and was able to repro, same behavior", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272605515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272898169", "body": "Thanks @Rafi993 ! Yes, I think we need to add a scrollbar + a way to manage the active view of these components (the Menu also has this same problem).  Appreciate the PR!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272898169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272899357", "body": "Looks good! Thanks for the contribution, @Rafi993 ! I opened #166 to track some other scroll issues", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272899357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272903433", "body": "Good idea. I've hooked it up to have a page at https://extr0py.github.io/oni - will hook up some of the documentation to it later.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272903433/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272955772", "body": "Looks like the DOM rendering PR i'm working on in #140 helps this", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272955772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272982865", "body": "More work:\r\n- Move console.log -> Log, only log if not debug\r\n- Modify Performance to only log if debug\r\n- Fix tests after splitting apart files\r\n- Fix bug with coalescing spans - should not coalesce whitespace / non whitespace\r\n- Fix issue with multibyte characters (make isWhitespace return correct value)\r\n- Scrolling - performance work\r\n- Fix issue on Linux with '_' (set z-index based on column)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272982865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273152499", "body": "PR #140 helps a lot with this - the DOM rendering implementation is actually much faster than the canvas, so we no longer need the incremental rendering. This removes the 'sparkler' effect.\r\n\r\nScrolling can still be made faster, by adjusting the elements in the scroll region when the scroll action comes in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273152499/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273154852", "body": "Fixed by #140, which switches to a DOM rendering strategy (so ligature comes free with that) - I'm enjoying ligatures via Fira Code now :)\r\n\r\nLet me know if you still see any issues!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273154852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273208217", "body": "Thanks for the report, @rockneverdies55 !\r\n\r\nWhat version of `node` do you have? You can check by running `node --version` at the command prompt.\r\n\r\nI'll have a fix for this shortly - I believe some of the ES6 constructs we are using in the script may not be supported by older node versions.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273208217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273209211", "body": "Pushed a fix to master, will bump the release as well", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273209211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273209400", "body": "Resolved by this change: https://github.com/extr0py/oni/commit/356cff48e26a4b4b0bf1ad8fa1dc4c7bcf42dc52", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273209400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273464641", "body": "Just saw your PR - thanks for the suggestions! Will be nice to showcase this feature :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273464641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273464917", "body": "Hey @keforbes ! Sorry I just saw I missed your comment on #156 \r\n\r\nThanks for going through and finding a good background to use. The background looks great to me.\r\n\r\nJust a couple of minor comments on the code-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273464917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273465667", "body": "Thanks for the report, @xangelux . Which colorscheme are you using? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273465667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273467172", "body": "Just tested this for me (on latest master)\r\n\r\nWindows:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/13532591/22064716/8f39ade4-dd39-11e6-8ae2-60f957cfe25e.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273467172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273467422", "body": "And Ubuntu Linux:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/22064753/cb160754-dd39-11e6-9aa4-84ad64557281.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273467422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273468361", "body": "So looks like mine is working okay - but there could've been some change that impacted this on another environment.\r\n\r\nCouple things to try:\r\n1) If you revert back to the v0.1.6.1 release (https://github.com/extr0py/oni/releases/tag/v0.1.6.1), does the application icon start working again? That would indicate there was a change between then and v0.1.8 that broke something.\r\n2) You could try running `npm rm -g oni-vim` and `npm link` from the project directory\r\n\r\nIt's possible that one of these PRs - #150 or #152 impacted this, so it might be worth reverting / tweaking those specifically to see if they are the culprits\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273468361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273468615", "body": "This isn't a pressing need for now and makes it more complicated to checkout the repo, so will close this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273468615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273596271", "body": "Awesome, thanks @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273596271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273776362", "body": "Besides the red/green color change, I also made the error case show up dashed:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/22108466/2cd819cc-de08-11e6-893b-9e2e5f2bbb6b.png)\r\n\r\nLet me know if you have any other ideas or feedback for the feature! It's really a proof-of-concept at the moment, but I think if it is extended there could be some really creative ways to use it. I use it to iterate quickly on prototypes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273776362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273777594", "body": "Resolved by #155", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273777594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273783514", "body": "Thanks for the suggestion, @metalelf0 !\r\n\r\nI think we could potentially add this by factoring in the line-height when we measure the font, and making sure the text is vertically centered within that line (which should happen for free by setting the line-height css property). The cursor size would also need to be addressed - it is sized with font size, so would encompass the entire line. We could potentially handle this by doing a separate measurement (one with line-height, one without - the latter being to size the cursor). Seems doable though, and the PR you linked to is definitely helpful", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273783514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273785328", "body": "Ah, cool, thanks @justinmk  - didn't know about that option. I'll read up on `:help linespace` and investigate leveraging that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273785328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273785934", "body": "Yeah, totally, we need to fix some of those performance issues still. Thanks for the report!\r\n\r\nThere are a few potential bottlenecks I saw in my last round of profiling:\r\n1) Need to add incremental render checks (sometimes we update the elements too aggressively, even if they haven't changed)\r\n2) Scrolling needs to be optimized via #88 \r\n3) In some cases, the it looks like the traversal of data we get via msgpack-rpc can be the bottleneck - need to investigate that further", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273785934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274274323", "body": "Thanks @keforbes and @justinmk , this looks great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274274323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274275304", "body": "Even after updating the executable, still had issues with `xp` - the character would be placed on a newline. Removed the `set clipboard=unnamed` fixed this, and then using the `+` and `*` registers for system paste worked ok with the existing win32yank.exe", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274275304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274275369", "body": "Fix #176 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274275369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274280028", "body": "Good question @keforbes , I've been meaning to document this (and improve this).\r\n\r\nI'm a sadist so I usually debug without sourcemaps.... But they are really helpful.\r\n\r\nI started PR #180 to add the following:\r\n- Documentation via CONTRIBUTING.md\r\n- A `npm run build-debug` command that preserves sourcemaps\r\n- Adding sourcemaps to `npm run start` (hot-reloading)\r\n\r\nI hope that helps. Let me know if you have any feedback or other ideas to improve this. I want it to be easy to contribute!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274280028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274280337", "body": "I'll close this out since i merged in #180 - but keep me posted if there are still issues getting sourcemaps.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274280337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274280886", "body": "Unfortunately I'm not able to repro this (although I'm only testing on Windows & Linux) - perhaps its an OSX specific rendering issue? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274280886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274280914", "body": "I poked around a bit and set `colorcolumn=80` and changed to `Monokai` colorscheme, and I do see a few rendering irregularities on Windows:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/22176903/a4559102-dfc8-11e6-9a99-4ea48b66edec.png)\r\n\r\nCould potentially be related\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274280914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274286270", "body": "Seems like it might be related to #125 (at least, the error message).\r\n\r\nRight now,  in a non-git folder, we recursively read all directories / files for the 'quick open' service. Having a blacklist sounds good - for example, VSCode has the `files.exclude` setting in its config, would make sense to have a similiar option. \r\n\r\nI like the idea of linking it to the whitelist property, too - seems like #20 might apply in terms of how we synchronize the VIM/JS configuration & keybindings.\r\n\r\nRegarding the configuration, a reasonable set of defaults could be:\r\n```\r\n[\"**/.git\", \"**/.svn\", \"**/.hg\", \"**/.DS_Store\", \"**/.Trash\"]\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274286270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274287383", "body": "I think I am seeing something similiar now - I don't get any highlighting, etc, until I move around the file. Need to investigate the plugin lifecycle and see if it was waiting for a specific event from Vim before it kicks off the integration.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274287383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274297136", "body": "Nice! That would be great to have it in core. I'll keep this on the backburner then, thanks for the heads up.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274297136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274297290", "body": "We might be able to use the work done in this electron PR:\r\nhttps://github.com/electron/electron/pull/2776\r\n\r\nUse the 'hidden' or 'hidden-insert' option for the titlebar - will need to try it out\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274297290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274524089", "body": "This is a pre-req for some of the language service work... There needs to be a robust way to add language service providers.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274524089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276667396", "body": "Sweet, that would be great @bert88sta :) Our documentation could definitely use some help! I'm working on just having it hooked up to the README.md for now, but it'd be nice to have something a bit more high-level for the github page.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276667396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276668058", "body": "Good to have you back! I've unfortunately been AWOL this past week or so too - Feb is going to busy for me but I'm hoping can start to tackle some interesting stuff soon :)\r\n\r\nHopefully this will make it in soon! Will open up a lot of exciting scenarios for ONI", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276668058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276669040", "body": "Interesting. A couple of things to try would be to look at the DOM - with our new rendering strategy you can see all the elements and the colors associated with them:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/22510401/b1317f18-e846-11e6-8cf3-12a9dc69c003.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276669040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276669368", "body": "And then the code that actually converts the colors is in `browser\\src\\action.ts` - the `colorToString` method:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/22510467/e28bbb50-e846-11e6-9fbb-cae48f6f07c0.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276669368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276818369", "body": "Thanks for the update, @keforbes ! I actually do see this too. It looks like I don't need to modify the file - just moving around gets the quick info / highlighting to kick in. I believe the reason I was not seeing this was because I was habitually pressing `j` when opening a file :) This on my list to look at - the info you gave is helpful.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276818369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276818433", "body": "Thanks for doing this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276818433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277271463", "body": "Thanks @v3ss0n for the report. \r\n\r\nA few questions:\r\n1) Was this installed via `npm install -g oni-vim` or git cloned and then `npm install` / `npm run build`? It sounds like the latter but wanted to check\r\n2) Do you have a screenshot of the error?\r\n3) Is the error in the terminal, or does ONI start and then show the error in an alert?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277271463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277451988", "body": "Interesting, thanks for the update. That helps to know it is when the app has started and created the window.\r\n\r\nAfter you dismiss the alert, can you try the following:\r\n1) Open up the Developer Tools (from the command menu)\r\n2) Type 'window.location.reload()' in the developer console\r\n\r\nThe error should pop up there with a callstack - that would help significantly in troubleshooting. \r\n\r\nI'm wondering also if it is related to how we look for config files - maybe the directory we are looking for the config files is not correct on that Linux distro.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277451988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277452112", "body": "Great contribution, @keforbes ! I really like this.\r\n\r\nI could see lots of other ways to extend this as well - like creating new buffers, save, etc - all this would help a lot in terms of bringing non-vim users to ONI as well.\r\n\r\nAnd we can track the `Redo` command in a separate issue - as you mentioned, this is a big step forward from what we have today :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277452112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277452685", "body": "Hi @bert88sta ,\r\n\r\nHmm, in terms of VimScript, ONI has a pretty low surface area right now. Most of the ONI-facing functionality is in: `oni/vim/core/oni-core-interop/plugin/init.vim`\r\n\r\nAnd there are three major responsibilities there:\r\n- Send buffer updates\r\n- Send vim-facing events that aren't captured via the `msgpack-rpc` API\r\n- Send information about the window size / lines rendered\r\n\r\nAlso there's the set of defaults we have in `oni/vim/default/bundle/oni-vim-defaults` that could be curated. There's also some other plugin defaults we could add - I like `vim-surround` a lot, and I know @keforbes  recommend `vim-airline` as well - so we could look at adding some of those into our default set.\r\n\r\nIn terms of other contribution ideas, documentation could use some help! The README currently is kind of chaotic :)\r\n\r\nAnd in terms of TypeScript & JavaScript, it's really never been a better time to get into front-end development! Would be great to have your help there too.\r\n\r\nPeople are doing some amazing things with JavaScript - like [3d graphics](https://threejs.org/), [time travel debugging with hot-reload](https://www.youtube.com/watch?v=xsSnOQynTHs), [games](https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser). There's tons of momentum and it's a great skill to learn - you can take this and even build apps with [Cordova](https://cordova.apache.org/) and [React-Native](https://facebook.github.io/react-native/), and this project is a great way to start playing around with some of that technology.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277452685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277452795", "body": "Definitely, this is not the right behavior! Thanks for tracking. I think we assume when we're in insert mode, if the cursor moves, we should still be displaying the completion... But that is certainly wrong in this case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277452795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277452837", "body": "Hi @HiCodin ,\r\n\r\nWhich platform are you using? Are you looking to have ONI default to maximize on startup? I don't think there is actually a setting for that, but it would make sense to have one for sure", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277452837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277452970", "body": "Oh just saw this in hacker news too - this is a cool React+Redux project: [react-tetris](https://chvin.github.io/react-tetris)!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277452970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277453532", "body": "Agree, it's almost not usable in some cases - hopefully can get some time to look at the performance soon. That's the biggest pain point for me in using ONI for my daily editing tasks - the completion just breaks my flow at the moment.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277453532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277533071", "body": "Awesome! Glad you're diving in :)\r\n\r\nIn terms of this - my hope was we could reuse the existing javascript / typescript plugin infrastructure for this. So basically it would work as follows:\r\n- Create a copy of `oni\\vim\\core\\oni-plugin-tslint`\r\n- Rename it to something like `oni-plugin-tslint` -> `oni-plugin-markdown`\r\n- Update the `package.json` - set the debug flag to true temporarily - this will pop open the debug window and let you put breakpoints and debug\r\n- Create a browser window to do to the rendering - you can use electron APIs for this\r\n\r\nThere's a lot of \"plumbing\" for this, though, to set everything up - so something that is more changing source code might be more interesting. Some of the difficulty: easy ones might be worth looking at:\r\nhttps://github.com/extr0py/oni/labels/difficulty%3A%20easy\r\n\r\nThis issue might be a good one to try: https://github.com/extr0py/oni/issues/195", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277533071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277533150", "body": "Seems like the work here would be:\r\n- Add a new config setting, like `oni.editor.maximizeOnStart` to `Config.ts`\r\n- In our index file, add a call to the browser window API that maximizes our current window: https://github.com/electron/electron/blob/master/docs/api/browser-window.md", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277533150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277716125", "body": "Nice, thanks for the fix, @bert88sta ! Looks great", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277716125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278018170", "body": "Hey @bert88sta , oh no worries :) It's great to see your initiative! Sorry if my responses are a bit delayed... I promise I'm not ignoring you, work has just been taking up a lot of my time this past couple of weeks.\r\n\r\nYou've done an excellent job diving in - yes, this method `remote.BrowserWindow.getFocusedWindow().maximize()` is exactly what we need.\r\n\r\nIn terms of implementation, it does seem like we have two potential ways we can implement it:\r\n- `main.js` - on the upside, this would let us maximize immediately, but on the downside, there isn't any config plumbing there (at the moment).\r\n- 'browser\\src\\index.tsx` - on the upside, this has config stuff already there - like setting the font value. The downside though is as you mentioned it starts out not fullscreen and then maximizes.\r\n\r\nI think, for now, implementing in `browser\\src\\index.tsx` would be the most straightforward, since the config info is already there. Ideally, we can improve startup time so that delta is less visible. I like to defer to the simplest solution barring any other constraints. Somewhere in that `start` method - probably towards the top. Plus, if we can fix the startup time, it begins a non-issue\r\n\r\nFor the project structure, you have a great point, it might be worth adding some notes in the `CONTRIBUTING.md` about the structure. I'm thinking of some starting notes like:\r\n\r\n- `\\`\r\n  - `main.js` - entry point for the app that creates the app window\r\n  - `browser\\src` - ONI application code (UI / neovim integration)\r\n    - `browser\\src\\index.tsx` - initialization logic that starts up Neovim, hooks up to the interop layer\r\n    - `browser\\src\\UI` - folder that contains all the rich UI components (React + Redux)\r\n    - `browser\\src\\Services` - contains editor services like live evaluation, quick open, error management\r\n  - `vim` - packaged vim plugins, default plugins\r\n  - `plugin_api` - API surface that is exposed to javascript plugins\r\n\r\nBut it'd be helpful to get your ideas since you have a fresh perspective-\r\n\r\nHope that helps! Thanks for your contributions\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278018170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278019043", "body": "Good catch @keforbes , sorry I missed this when merging in", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278019043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278019471", "body": "Thanks @bert88sta for the quick fix!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278019471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278339796", "body": "That's great that you're getting your feet wet in the typescript world :) Overall the change looks good, I just had some minor comments. It looks like the build is failing as well - seems like a missing comma / lint issue in Config.ts. Thanks for the PR!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278339796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278344787", "body": "Definitely, I agree 100%! I was just thinking about this in the context for all our UI - comparing oni to something like VSCode, Atom, or Sublime, it still does not look modern. I think creating skeletons for some new UI pieces like tabs, window splits, etc would go a long way - but that statusbar here is the perfect place to start.\r\n\r\nI agree with the customizability. The weather, e-mail, etc are really cool ideas. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278344787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278353407", "body": "I'll see if I can get a chance to put together the skeleton shortly, and then we can work together on finalizing it and prototyping some of the extensions, if you're up for it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278353407/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278968398", "body": "@bert88sta - great, the diff looks good now! As long as the 'compare' section looks good then we're set. You could potentially 'rebase', which lets you pick and choose commits to be applied on top of master, to get rid of those old ones - but I'll do a squash merge here, which will combine all the commits into a single commit and bring into master. Git can be pretty intense, especially at first :)\r\n\r\nThanks for the contribution!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278968398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278968547", "body": "Thanks @bert88sta !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278968547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278971123", "body": "Awesome, it would be great to have your help. The starting point for `cursorline` sounds great. You probably want to create a copy of `browser\\src\\UI\\components\\Cursor.tsx`. \r\n\r\nTo understand the `CursorRenderer` piece, it might be worth reading up on React. That part isn't too bad - it's really just rendering a div based on a bunch of options (and styling it to be at the right position).\r\n\r\nThe `connect` and `mapstateToProps` piece is more interesting - you might want to read up on redux: http://redux.js.org. Basically, we have a State object in `browser\\src\\UI\\State.ts` that contains all the Overlay UI state, and that function hooks up our UI state to the cursor state. Pretty much all the UI, aside from the actual neovim rendering, is contained here - so there is state for things like autoCompletion, quickInfo, popupMenu, signatureHelp, etc (and all the cursor stuff of course).\r\n\r\nBut ya, it should be basically the same as the state we need for the cursor. Once you have that, you'll want to add it to `browser\\src\\UI\\RootComponent.tsx` to get it rendering. Sometimes I color things bright red and make them take up the whole screen, just so I have confidence that it is actually rendering.\r\n\r\nFor now, we could add another setting, like `Oni.editor.cursorLine` to decide if we render this or not. We still need to have a story to synchronize this with the VIM settings, but we can use a separate issue for that.\r\n\r\nAnd then, `cursorcolumn` would be basically the same... just the height would need to go to window/buffer height.\r\n\r\nLet me know if you have any questions along the way!\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278971123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278972601", "body": "I initially profiled and saw lots of noise with `send` (which actually calls `sendSync` anyway)... for our plugin protocol, so it is clearly a bottleneck, especially since we send large data like buffer updates.\r\n\r\nI started down a path to use `socket.io` to communicate from host -> plugin, but this also has the undesirable effect of popping up firewall warnings for the port. Not ideal.\r\n\r\nI'll start looking at stdin/stdout IPC - vscode actually has a very convenient module: `vscode-jsonrpc`. I'll prototype this next. We'll need to not use the `BrowserWindow` process, but this actually extra weight anyway. The downside is that I was using the built-in BrowserWindow debug tools to pop open the debugger, but this can be addressed by passing the `debug` parameter to the node process and attaching chrome-devtools to it, which I believe can be easily accomplished through Electron.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278972601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279156946", "body": "Awesome, thanks for confirming @HiCodin - and thanks for the fix @bert88sta ! Will close this out. We might want to add this to the README.md as well as one of the configuration options-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279156946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279157150", "body": ":+1 Agree with @bert88sta - all the existing completion providers (deoplete, YCM, etc) should continue to be supported through our hook up with the external popupmenu UI. Any fix we make there will benefit all of these providers, so we should focus on improving the performance there and fixing any issues. Feel free to track specific issues you're having with that - having reproducible steps helps. Thanks for the feedback!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279157150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279157753", "body": "\ud83d\udc4d , thanks @justinmk for your help with these features. It's really great to have your involvement!\r\n\r\nRegarding the window sizing - ya, that is actually likely the hardest part of the feature. Having the external window UI would help a lot because we could isolate each buffer window into its own element, and then your 100% width / height logic would work great.\r\n\r\nFor the time being, though, we can potentially push that into the state. We actually do have some code that keeps track of the window size and positions (there's actually a VimL portion in 'vim\\core\\oni-core-interop\\plugin\\init.vim` in the `OniUpdateWindowDisplaymap`). \r\n\r\nThere is code that listens to this in `browser\\src\\UI\\Overlay\\OverlayManager.ts` and grabs all the window dimensions. It's (overly) complex at the moment. I'd like to refactor this to having a `WindowManager` class where we can directly query to get the window state, but I'm holding off on that until we set up the external UI. But what we could do is from the method in there where it recalculates all the window positions, is push that to the UI so the UI knows about the current windows. Then, the cursor component would need to figure out which window it is in, and constrain it's size there. I can help with a PR for that piece - opened #207 to track.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279157753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279163613", "body": "Addressed with PR #208 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279163613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279165649", "body": "FYI, I started PR #209 which brings in the window dimensions into our redux store, which will give those new components context in terms of setting the current width and height values", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279165649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279169906", "body": "Sure, I'll loop you in on the PR requests as I go. Yes, there's definitely some complexity - I'm trying to keep the UI components (autocomplete, quickinfo, pop up menu, etc) as decoupled as I can from Neovim - so they are almost entirely driven by the store state. There will be opportunites to clean things up / simplify too as we start adding some of these new UI extensions.\r\n\r\nI'm thinking about some of these as initial first steps:\r\n- Rename overlay-ui -> ui\r\n- Create <Window> container\r\n- Create container like:\r\n```\t\r\n<Oni>\r\n<Editor>\r\n<Window>\r\n<Neovim>\r\n<...>\r\n</Window>\r\n</Editor>\r\n<Status>\r\n</Oni>\r\n```\r\n\r\n- Move background into that concept\r\n\r\nThen, create some hooks for the status bar - I'd like to have some JS extensibility via the Oni plugin interface, and we'll need to make sure it will support the messages coming from Neovim's msgpack-rpc API as well", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279169906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279170258", "body": "Going to pursue an in-proc solution as opposed to the socket.io solution", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279170258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279174666", "body": "Looks good! Thanks for the fix, @bert88sta !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279174666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279189151", "body": "I closed #207 with #209 - you should be able to get the width/height of the active window (which should always be where the cursor is) and use that for the position and size of `cursorline` and `cursorcolumn`. Let me know if you have any issues integrating", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279189151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279224702", "body": "Cool, `RootComponent` is fine, that's where all the UI elements are null..\r\n\r\nRegarding the `object may be null` error - is that when you are trying to access the `activeWindowDimensions` value?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279224702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279225074", "body": "Cool, I opened #213 - it's a valid complaint from TypeScript. With the way I had set it up before, until the UI knows about the dimensions, the activeWindowDimensions is null - so if you use state.activeWindowDimensions.x, there might be a timeframe where it would blow up. But I changed it to not have a `null` state so it should be fine after that PR\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279225074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279225313", "body": "Regarding adding the cursor line dynamically, there are two options:\r\n- For the other components like `QuickInfo`, completion, etc - they are always in `RootComponent` but they get a visible flag passed to them, deciding whether or not they should render. For some of those, they just toggle their opacity or display properties - this is actually faster than re-rendering the DOM of the component. You could use this approach for cursorline / cursorcolumn too.\r\n\r\nIf you wanted to dynamically render it, and not just toggle visibility, you could do something like this in RootComponent's `render`:\r\n```\r\nexport class RootComponent extends React.Component<void, void> {\r\n    public render() {\r\n        const componentsToRender = [\r\n            <Cursor />\r\n            <QuickInfoContainer />\r\n            <SignatureHelpContainer />\r\n            <MenuContainer />\r\n            <AutoCompletionContainer />\r\n        ]\r\n\r\n        if (shouldRenderCursorLine) {\r\n            componentsToRender.push(<CursorLine />)\r\n        }\r\n\r\n        return <div className=\"ui-overlay\">\r\n            {componentsToRender}\r\n        </div>\r\n    }\r\n}\r\n```\r\n\r\nI think sticking with the `visible` flag is probably easiest, but up to you. Hope that helps.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279225313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279225364", "body": "@bert88sta  - FYI, I think once you pick this up you shouldn't get that `object can be null` error", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279225364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279226953", "body": "Thanks for the fix! Looks like this is addressed. I'll close this now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279226953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279227316", "body": "Need to clean up tslint issues", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279227316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279227400", "body": "I realized why the firstTen was used now... There is some expensive logic that iterates over all the entries at the moment. We'll need another way of filtering them and a different scrollbar mechanism.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279227400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279227677", "body": "Need to be on the lookout for a deterministic repro for this in order to test.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279227677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279228034", "body": "Also need to re-enable tslint to be performant, now that it is in-proc", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279228034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279228229", "body": "I believe this is a contributing factor as well to why typescript completion can be slow - in insert mode, even if we just add a single character, we're asking the typescript language service to reparse the entire file - and for large files, this is not trivial.\r\n\r\nFor typescript specifically: https://github.com/Microsoft/TypeScript/blob/master/lib/protocol.d.ts\r\n\r\nThey support the `change` event which is what we want. And the Microsoft Language Service protocol also supports a similiar event.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279228229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279711143", "body": "Looks like you're a Redux/React master now, @bert88sta ! You should try out the hot reloading with `npm run start` or try out the redux dev tools with `ctrl-shift-i` - these actions seem like they would work well with the \"time-travel\" debugging. \r\n\r\nThere are a couple of places we could look at removing duplication (CursorLineRenderer / CursorColumnRenderer are exactly the same - we could move that to a shared class or just reuse `CursorLineRenderer` for both). It seems like there are a few lint issues to clean up, but the overall change looks good. Thanks for making the change, this is great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279711143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279714602", "body": "Yep, seems like it would be straightforward. I think we can just use this CSS style:\r\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/user-select\r\n\r\nAnd add something like:\r\n```\r\nbody, html {\r\nuser-select: none;\r\n-webkit-user-select: none;\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279714602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279727006", "body": "Awesome! Let us know how it goes. Node 6.x+ is fine for both running and building. I'll look at adding this to the documentation in a bit.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279727006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279731565", "body": "Tslint is now re-enabled - but discovered there is a regression where plugin events are being broadcasted to all plugins, all the time, due to all plugins sharing a single channel. Need to take a look at that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279731565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279865287", "body": "Interesting... One more question: What Neovim version are you running? We don't do a version check at the moment, so it's possible it's the wrong API version.\r\n\r\nYou can check with:\r\n`nvim --version`\r\n\r\nThanks for the update!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279865287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280010725", "body": "This is really cool! One of the goals I have for the project, longer-term, is to lower the barrier to entry for modal editing - and having these menu options definitely helps. And even though this isn't a GVim clone, having basic parity with GVim makes sense - a barrier to entry I've heard for Windows devs in adopting Neovim is that there is no GVim-equivalent, so changes like this can help Oni fill that niche.\r\n\r\nThanks for calling out the `Split File Explorer` option - I tried it out and you're right, 20 columns would be too small - the default of 30 sounds like the right choice.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280010725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280010758", "body": "Merged - Thanks @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280010758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280011726", "body": "Cool, that helps! Oni needs Neovim *0.1.6* for the API updates - so I believe that may be the issue.\r\n\r\nHowever, Oni should tell you that in a better way instead of some obscure error box. We should have the following:\r\n- A _Prerequisites_ section for installation, calling this out\r\n- A runtime check, with a friendlier / more actionable error message\r\n\r\nI'm going to update this title to track these issues.\r\n\r\nIn the meantime, if you are up for [upgrading to Neovim 0.1.6](https://github.com/neovim/neovim/wiki/Installing-Neovim), try out Oni again on top of Neovim 0.1.6 and let us know if it works.\r\n\r\nThanks for your help troubleshooting this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280011726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280013813", "body": "Nice! Thanks @justinmk . That will make it easy for us to check the capabilities without a hard dependency on the neovim version.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280013813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280014636", "body": "Fixed remaining tslint & test issues - green now. Still need to fix the plugin performance regression though-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280014636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280016370", "body": "Yep, a few things you need to do:\r\n\r\nFirst, update `mapStateToProps` to take an argument. So something like this:\r\n```\r\ninterface ICursorLineProps {\r\n   type: string; // An enum might be better here since we get type safety\r\n}\r\n\r\nconst mapStateToProps = (state: State.IState, props: ICursorLineProps) => {\r\n     return {\r\n         x: props.type === \"line\" ? state.activeWindowDimensions.x : state.cursorPixelX\r\n         y: props.type === \"line\" ? state.cursorPixelY : state.activeWindowDimensions.y\r\n         ...\r\n     }\r\n }\r\n```\r\n\r\nNote that there is actually already an `ICursorLineProps` so you might want to rename that `ICursorLineRendererProps`. We basically need two props - one for the rendered component (width, height, color, visible, etc), and the other for the _connected_ component - which is just the type (line/column).  This article has some great information about the difference between these two components: [Presentational and Container Components](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.ba0gew8ec)\r\n\r\nSecond, pass in your argument - it would look like this:\r\n\r\n```\r\n<... />\r\n<CursorLine type={\"line\"} />\r\n<CursorLine type={\"column\"} />\r\n<... />\r\n```\r\n\r\nAnd for bonus points, we could use an enum, so we'd get:\r\n```\r\n<... />\r\n<CursorLine type={CursorLineType.Line} />\r\n<CursorLine type={CursorLineType.Column} />\r\n<... />\r\n```\r\n\r\nHope that helps!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280016370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280037936", "body": "Right, that's a good point. Seems like we might want to call `preventDefault` on all actions we handle by default.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280037936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280040135", "body": "Cool, gitter seems really popular - Neovim has a gitter, Angular, Vue, Vrapper, etc - I'll create one shortly for this project. It does seem like a much better medium for lightweight questions and more real-time collaboration. I'll set it up this weekend.\r\n\r\nDiscord looks cool too, didn't know about it. Been using TeamSpeak so long for gaming, maybe it's time to replace it :) I'll stick with gitter for this project just because there is the precedent with Neovim. Thanks for the suggestion!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280040135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280049203", "body": "Good catch! Thanks for the fix!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280049203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280049629", "body": "Great, thanks! The only downside that I can see is that I can't use `Control+Shift+I` to open the dev tools anymore - but it still works from the menubar, right?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280049629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280050021", "body": "Woohoo! Green build is nice to see :) Let me know if you're all set with this and I'll merge it in. The change looks good. Looking forward to switching my config over to this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280050021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280050463", "body": "That's the only one I can think of for now - thanks for whitelisting it", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280050463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280083464", "body": "Looks like it's `Cmd+Opt+I` on Mac - try that and see if they open. Sorry, the `Ctrl+Shift+I` is the windows shortcut.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280083464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280859427", "body": "Hey all, sorry I'm late to this thread! Great discussion and thanks for the PR.\r\n\r\nThis is really the intended use case for the `oni.useDefaultPlugins` flag - someone has their own `init.vim` that they want to bring and use rather than Oni's set of defaults. Turning this to `false` only disables the default config (stuff in `oni/vim/default`), but not Oni's UI integrations + javascript plugins, which live in `oni/vim/core`. \r\n\r\nThere really isn't much to build on top of here:\r\n`https://github.com/extr0py/oni/blob/master/vim/default/bundle/oni-vim-defaults/plugin/init.vim` -\r\nas only the `completeopt` is really needed to make the popupmenu work in a predictable way for Oni... and given that, it probably belongs somewhere where it can't be turned off.\r\n\r\nIt looks like from the discussion in #225 that if `oni.useDefaultConfig` is `false`, things mostly work - except the colorscheme. If you set the colorscheme explicitly in your `init.vim` (you could do `colorscheme onedark` to get the default look), does that make Oni behave as you expect? We might have to move the `onedark` colorscheme to be in core instead of default, but if that works we might want to just go with that.\r\n\r\nThe loading sequence I'm picturing is:\r\n- Load `init.vim` (default Neovim behavior)\r\n- Load plugins in `runtimepath` (default Neovim behavior, but we also add to it to pick up some of Oni's plugins)\r\n- Load the config in `config.js` (new Oni behavior - UI toggles as well as the loading behavior)\r\n\r\nI'm thinking it's already a pretty complicated loading sequence as it stands, so I'd like to see if we could use the existing settings to make it work. \r\n\r\nSo, TL:DR-\r\n- Does `oni.useDefaultConfig` set to `false` + setting the `colorscheme` in your `init.vim` give you the desired result? If so, I would lean towards that. And if that works, maybe we could update the documentation to be more clearer about the intended purpose / use of this setting?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280859427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280859491", "body": "Just added a long comment in #227 :) Thanks for all the details, it's very helpful!\r\n\r\nHere's the TL;DR from the notes I put in the PR:\r\nDoes oni.useDefaultConfig set to false + setting the colorscheme in your init.vim give you the desired result? If so, I would lean towards that. And if that works, maybe we could update the documentation to be more clearer about the intended purpose / use of this setting?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280859491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280860193", "body": "Just tested it out - looks great, @bert88sta ! Nice work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280860193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280860691", "body": "I was able to repro this on Mac as well, it looks like there is some craziness there. I'm wondering if at this point, we should just scrap the default menu and use the custom built one we have.\r\n\r\nThis PR looks good though in the scope of fixing this bug. We can continue to iterate / improve the menu - it would be worth having a separate issue to track the Mac menu craziness. \r\n\r\nThanks for the PR @bert88sta ! I'll merge it in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280860691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280860807", "body": "Awesome, thanks for this @keforbes ! This definitely does make the intention of the menu items more clear. Will bring this in", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280860807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280861267", "body": "Badge was added in wrong place in readme.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280861267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280956697", "body": "Alright, added it to the README - and I just saw @TalAmuyal and @bert88sta in the channel, so looks like its working :) Look forward to catching you there! Closing this issue-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280956697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280956861", "body": "Things are working again, and performance is improved with this strategy because the `sendSync` calls for IPC were adding a lot of overhead. This also has the additional benefit that plugins are easier to debug with the same debug session. The downside is that slow plugins can bog down the editor, but this is an issue with VimScript today too anyway, and JavaScript/TypeScript has async out of the box.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280956861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280956934", "body": "This is fixed in #210 - we no longer use IPC, instead just in-proc messaging by instantiating the plugins in the sandbox. This also takes some steps to refactor the communication layer so it'd be easier to swap out later (in `Channel.ts`)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280956934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280988625", "body": "I'm thinking something along similiar lines - maybe we could do the following:\r\n1) Move the `onedark` colorscheme from `default` to `core`\r\n2) Move the `set completeopt=longest,menu` to the `init.vim` in `oni-plugin-interop`\r\n\r\nThen, if you set `colorscheme onedark` in your own `init.vim`, and set the `oni.useDefaultPlugins` to `false` in `config.js`, I believe everything should work - and we won't need to change the config loaded pipeline or add additional complexity there. Let me know if there would be any issues with that - I'm happy to help put together a PR tomorrow if it seems like it would work for you (or if you'd like to make those changes, that'd be great too!)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280988625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281122273", "body": "Yes, there's actually two main issues with the buffer updates right now.\r\n\r\n- **neovim -> oni** - whenever the buffer is changed, we send the full buffer update to ONI. If the buffer is large, this seems like it can cause a performance hit. I did some investigation of this and put the results in #229 - it seems like there are other optimizations we can make on the `msgpack-rpc` transport layer to improve perf.\r\n\r\n- **oni -> language service (typescript)** - once we get the full buffer update, we tell the language service that the whole file has changed. This is bad for the TypeScript language service, because it has to re-parse the entire file before it can give us completions. For large TypeScript files, this can take a non-trivial amount of time (which causes a delay in resolving the completions). The language service protocol, along with TypeScript, can take incremental updates which let the language service know it only has to re-parse / process a subset of the file.\r\n\r\nFor this issue, I was thinking about the second case - reducing the load on the typescript language service when we have a buffer update. Especially in the case when we're typing in insert mode and there are not a lot of other changes, we should be able to handle that case very efficiently. Right now, at least for my environment, this is the biggest blocker - the completions take a half second or so to populate, which is enough to be annoying.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281122273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281122395", "body": "Looks like this is fixed now :) Thanks @bert88sta !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281122395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281139306", "body": "Tracked by #230 now", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281139306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281147581", "body": "Closing this out! Thanks for the implementation @bert88sta - nice work!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281147581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281205423", "body": "Thanks for looking at this, @bert88sta !\r\n\r\nThere's a few things I'm not sure how they will work with this PR:\r\n1) Right now, when we receive the `buffer_update` event in UI (which happens in NeovimInstance.ts), it emits an event where the listeners expect all the buffer lines. We might have to add some context around which line numbers we are sending, in the case we send a subset. Right now we just send an array of lines, but maybe we should send something like { startLine, endLine, array of lines that changed }\r\n\r\n2) It doesn't look like we're ever sending the full contents over. I'm thinking that, for the first change, we'd send over the entire file, but then, for incremental changes, we'd send over only the lines that changed, something like.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281205423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281378463", "body": "Some of our settings our UI driven, but not all of them. The functionality in our Current config object is mostly to load settings from the file system, and that responsibility wouldn't make sense to be a React component, since it isn't a UI functionality.\r\n\r\nI think it does makes sense to have some of the settings in our application state - maybe even exposing a \"configuration\" node on our state tree. For now, what we could have happen is, listening to that Config changed event, we dispatch a `CONFIGURATION_UPDATED` action that sets that node in the tree. To start, we can explicitly add these settings to the state tree, and potentially later maybe generalize it as we start to identify a pattern.\r\n\r\nIn addition, keeping the Config loading logic separate from our UI logic helps keep our app [loosely coupled[(https://en.wikipedia.org/wiki/Loose_coupling), which is a desirable property for software because it means you can easily change out pieces of it (and it makes it easier to understand, since the pieces / areas of responsibility should stay small for each component)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281378463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281380251", "body": "The sort of issues you'd see here would be that completion or quick info might not work as expected. \r\n\r\nYou might want to try setting a breakpoint in `vim\\core\\oni-plugin-typescript\\src\\index.ts` in the `Oni.on(\"buffer-update\", ...)` section, around line 255 - and check out the buffer being passed in. It looks like what would happen here is that we'd only send a subset of the current file, but we'd be telling the language service provider that it is the whole file.\r\n\r\nA scenario to try might be to open up `NeovimInstance.ts` and try typing `Neov` at the top and see if you get that completion picked up - I would guess it may not come up, because that wouldn't be in the buffer.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281380251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281535405", "body": "Agreed - perhaps we could add a setting like ``editor.cursorLineOpacity` / `editor.cursorColumnOpacity` options to tone it down a bit? And set the default to be more transparent?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281535405/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281716643", "body": "Need to hook up filter, so that the right plugin is targetted for sending a command.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281716643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281719833", "body": "FYI - @keforbes ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281719833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282023244", "body": "Thanks @keforbes , good point. I have this also accessible via the command palette `Ctrl+Shift+P`, which is how I'm using it anyway.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282023244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282023866", "body": "- Need to figure out what the UI would look like. The quick fix might make sense in both `insert` and `normal` mode. In both modes, maybe we could re-use the quick info paradigm? Or, if there is both quickinfo + a fix, show the fix listed in the quickinfo box?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282023866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282024031", "body": "Good point, thanks for tracking this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282024031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282024819", "body": "We can potentially do the following:\r\n- add `minimist` library to `main.js`\r\n- look for `-h, --help` options\r\n- print out some canonical help text with our current supported options", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282024819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282025367", "body": "Ya, I was wondering the same thing as @bert88sta - doesn't Vim have a clientserver mode already? Agree if Neovim is planning to support this, it'd make sense to have this in Neovim core. If not, we could create like a `neovim-node-server` that exposes the `msgpack-rpc` layer through a websocket, and Oni could connect to that. @justinmk might have context whether this is coming into neovim core, though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282025367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282027081", "body": "The `0.1` opacity on the default color scheme looks pretty good too. And it is also much dimmer than visual selection also. Let's try setting that opacity to `0.1` as the default and go with that - seems like a simple / quick fix if everyone agrees.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282027081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282034613", "body": "Fix #244 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282034613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282046886", "body": "Sweet! There isn't a library you need to use, the built in `require` functionality does this:\r\n\r\n```\r\nlet userRuntimeConfig = {}\r\nif (fs.existsSync(userJsConfig)) {\r\n    userRuntimeConfig = global[\"require\"](userJsConfig) // tslint:disable-line no-string-literal\r\n}\r\n```\r\n\r\nWe'd just want to re-run that global[\"require\"](userJsConfig). (We could use the `nodeRequire` utility that was added too, which does the same thing). That will get a new version of the config. We might want to tuck this in a `loadConfig` method and just re-call it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282046886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282336903", "body": "Thanks for the suggestion! I created this issue to track:\r\nhttps://github.com/extr0py/oni/issues/252", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282336903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282339215", "body": "It looks like this is because we are using `Menu.setApplicationMenu` - and the behavior for that is to set the menu for __all__ BrowserWindow instances. When the new window is created, this overrides the previous window.\r\n\r\nWe have a few options:\r\n- Check to see if there is a way to set the menu per-`BrowserWindow`.' I checked quickly at the electron API docs and it didn't look like it... But it'd be worth a more thorough check because this would be the most straightforward way\r\n- Hook the `activate` or `focus` event of the `BrowserWindow` (can't remember the exact name) - and build the menu at that time. Eventually, we'll want to support this dynamic menu creation anyway - an example of this is that, I'd like to be able to add the language service commands like \"Goto Definition\", \"Quick Fix\", etc - and it'd be nice to be able to disable/enable them dynamically based on what the current language plugin supports.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282339215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282362460", "body": "Once #6 is implemented, we'll be able to pick up implementations for C++, C, and python. So it's definitely in the works :)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282362460/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282362664", "body": "Sounds good - thanks for the update", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282362664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282447726", "body": "Thanks @bert88sta ! Looks great", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282447726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282448104", "body": "Interesting :) I'm not offended at all, I'm actually a big fan of VSCode... I tried really hard to use it before starting Oni, but if their extensibility model was a bit more open, and it was easier to integrate Neovim, this project might not even exist.  Maybe if there was a debugger in Oni I'd lean towards leveraging that instead... but until that point this is great.\r\n\r\nI'm glad that you have this set up to debug the Main process too - that's not easy to do at the moment. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282448104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282455232", "body": "@TalAmuyal  - I tried this out in this PR:\r\nhttps://github.com/extr0py/oni/pull/256", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282455232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282455260", "body": "If you grab that PR, and set `oni.useDefaultPlugins` to false + set `colorscheme onedark` in your init.vim, do things work as expected?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282455260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282569512", "body": "The nice thing is that, since Neovim enables the `externalpopupmenu` UI option, and we pick that up in Oni  is that regardless of your completion provider (vanilla omnicomplete, YCM, deoplete, etc) - you should get that same look and feel. There are some bugs around this but that is the goal.\r\n\r\nOn top of that, Oni will expose some additional rich completion options (like completion signature details, method signature help) that there isn't really a concept for in vanilla Vim or Neovim today. The language server protocol gives us this information, and so Oni can act as a bridge this into the Vim world.\r\n\r\nFor YCM, I had a heck of a time getting it running on Windows. It was pretty brutal... Lots of issues with Python versions, conflicts with some ms*.dlls, etc... For Oni, I want that to be a bit easier :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282569512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282754807", "body": "Hmm, in theory it should work - but it looks like somehow `solarized` isn't being picked up by the neovim instance that we're using in Oni.\r\n\r\nOne question - where are you saving `solarized`? Are you saving it in your `nvim\\colors` directory or are you using a plugin manager and saving it elsewhere?\r\n\r\nIn addition, the output of `:set runtimepath` in both the Oni and Neovim case would be helpful - we can compare and see if there is a runtimepath not being set when Oni is running, and then troubleshoot from there. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282754807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282758011", "body": "Looks like this was fixed by #254 . If it is not fully addressed, please feel free to reopen. Thanks @bert88sta !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282758011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282767851", "body": "This results in **much** improved / faster auto completion for the typescript language service. Re-parsing the entire file for each keystroke is non-trivial...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282767851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282775614", "body": "For the language service side (which was the largest bottleneck), this was addressed by #257. We can look at #229 later for further improvements.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282775614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283051621", "body": "This is implemented now", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283051621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283051775", "body": "Great! Thanks for the confirmation, @TalAmuyal ! I'll bring this in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283051775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283352384", "body": "Nice find! Setting it per `BrowserWindow` makes sense. I'll test #250 on a Mac when I get a chance - I imagine it may have a similiar issue (last menu wins). But this seems like it would improve things for Windows and Linux. Thanks @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283352384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283353336", "body": "Thanks for the issue and the investigation!\r\n\r\nOption 1 makes sense to me. We can configure logging as a debug option or command line parameter. The current logging is a no-op anyway because most of the interesting logging happens in the render process.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283353336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283354201", "body": "FYI - @keforbes ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283354201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283986028", "body": "Thanks @keforbes ! This is very helpful in terms of lowering the bar for customization and modifying the config. Looks great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283986028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283986422", "body": "I use Oni as my editor at work... and these sorts of issues are embarrassing when I have a coworker trying to use it :) Thanks for opening the issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283986422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283986643", "body": "Looks like it was bumped to 1.6.2", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283986643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284006275", "body": "Thanks for the fix!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284006275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284013038", "body": "1.6.1 is now a stable release", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284013038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284171859", "body": "Thanks for this fix, @keforbes ! The loading indicator is a huge improvement.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284171859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284172120", "body": "Looks good except for some minor whitespace issues in `init.vim`. I'll pull this in once that's addressed. Thanks for the PR, @bert88sta !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284172120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284178713", "body": "Sorry @lasypig , it fell off my radar a bit. I'll try to revisit it soon. It is high on my priority list!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284178713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284250972", "body": "TypeScript support is just  a wrapper around tslint... so abandoing for now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284250972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284252553", "body": "Addressed in PR #270 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284252553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284259375", "body": "Sounds like this has been addressed by PR #256 , so I'll close. Feel free to reopen if this wasn't fully addressed", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284259375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284433173", "body": "Fix #274 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284433173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284433618", "body": "Fix #265 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284433618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284475908", "body": "Sorry about the confusion there... I wish I could grab the `oni` name. Thanks for catching that, @adelarsq !\r\n\r\nI'm also considering change the name to `onivim` and grabbing that package name, so that the repo name + package name match. Let me know if you have feedback or ideas.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284475908/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284483133", "body": "Good point - worth at least reaching out to see. Logged #279 to track this further.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284483133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284489343", "body": "Awesome! It's possible the electron upgrade could've helped here, as they bumped up the renderer version and picked up the latest fixes from Chrome.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284489343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284750479", "body": "Thanks @bert88sta for the fix, and @kopischke & @justinmk for the feedback!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284750479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284750679", "body": "Awesome! Thanks @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284750679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284751409", "body": "Thanks @bert88sta and @keforbes for the suggestion. I've removed the command for now and made this only accessible via the command palette (`Ctrl+Shift+P`).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284751409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284754267", "body": "Fixed with PR #260 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284754267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284850783", "body": "Thanks for the fix & validation! Closing-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284850783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285105838", "body": "Thanks for the fix, @keforbes . This looks like a better experience until #166 is implemented... it doesn't make sense for it to just disappear when going upwards. Glad you caught that bug.\r\n\r\nRegarding the hardcoded `10`, I think the TODO is reasonable for now, since it would go away once #166 is fixed. It's great that the TODO is in both places so at least it is obvious.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285105838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285168217", "body": "Ya, by default we set `:set relativenumber`. You can turn this off by running `:set norelativenumber`\r\n\r\nThis is a somewhat opinionated default, since it isn't on by default in Neovim. I'd be okay changing this back, if it is confusing.\r\n\r\nIn the meantime, the workaround would be to add `:set norelativenumber` to your `init.vim`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285168217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285720503", "body": "Awesome! I'm hoping as part of #163 we can address some of the duplication between the autocomplete / menu - it's essentially the same operation so we should be able to consolidate it a bit. Thanks for fixing this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285720503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285721563", "body": "Looks like there might be a regression from this: #287 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285721563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285722573", "body": "Thank you for cleaning this up! The changes you made to the detail text and hover color look great - it's a subtle but significant improvement in the completion / popup menu. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285722573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285777424", "body": "Error message looks better now! On Windows, I'm still seeing the error message. The binary I'm included is at 0.1.6, but it doesn't seem to have version defined on api_info(). Need to investigate more this weekend...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285777424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285777616", "body": "With #288, the error message is improved, but it's confusing on Windows - neovim 0.1.6 is included in the package, but I still get the error. I need to check and see if I should upgrade the binary or if the version in api_info is coming across differently", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285777616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285961712", "body": "Fix #287", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285961712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285962380", "body": "Thanks @justinmk, look forward to testing out these fixes!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285962380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285962397", "body": "Fixed by #289 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285962397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285964459", "body": "Interesting, I actually haven't used `hyper` but it looks like a cool project.\r\n\r\nIn theory, it should be doable - in practice, there might be some tricky aspects - there are things that we handle outside the BrowserWindow (like ensuring a single instance and communicating between Oni processes). In addition, there are potential issues with conflicting electron versions.\r\n\r\nPersonally, I'm more interested in the opposite scenario - hosting a terminal inside Neovim / Oni - but I'm open to PRs here if this is something that would be useful to others. Thanks for the suggestion!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285964459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285965316", "body": "Yep, same name on npm.\r\n\r\nI started looking at `oni` vs `onivim` and it seems like in general `onivim` is more available:\r\n1) `onivim.io` is available \r\n2) Subreddit is available: http://www.reddit.com/r/onivim\r\n3) npm package `onivim` is available\r\n\r\nI snagged all of those above :)\r\n\r\nFor the next release (likely `0.1.11`), I'm planning on making the switch.  If we stick with just `oni`, it'd be harder to get the rest of those collateral. Let me know if you have any concerns @keforbes @bert88sta ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285965316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285966231", "body": "Yes, for sure, I'd prefer to make this build-time instead - I'd like to build and package both the Windows and OSX binaries so it is a one-step process for install (like VimR) on those platforms. \r\n\r\nI have #123 tracking this - unfortunately I just haven't had time to pursue it in-depth, so I took the shortcut of checking in the built binaries.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285966231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285966615", "body": "Also #99 for the OSX pre-built binary.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285966615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285966738", "body": "Clipboard integration seems to work much better in 0.2.0 on Windows... awesome!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285966738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285969768", "body": "Sweet! Thanks @bert88sta for reaching out - you rock.\r\n\r\nYes, `npm owner add extr0py oni` is all that would be needed. We should also check with Till and see if he has a twitter handle or a website he'd like us to plug - we should put a special thanks message in our README.md like \"Special thanks to Till for handing over the `oni` NPM package name\", with a link to his website/twitter. Not that we can get a lot of traffic now, but maybe one day ;)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285969768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285970069", "body": "And ya, since you did all this legwork, I agree - having the `oni` name would be awesome, we'll stick with that as our name. I do prefer having a short, easily identifiable name.\r\n\r\nI have the onivim subreddit and onivim.io domains - it's a bummer we can't get just `oni` for those, but not the end of the world.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285970069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285975603", "body": "Revisiting this in #290, the fix will be a little different now that we have DOM rendering.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285975603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285978044", "body": "Thanks @tillarnold for letting us have the `oni` package name, and thanks @bert88sta for reaching out!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285978044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285978104", "body": "Fix #279 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285978104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285979177", "body": "Awesome! It's up at npm: https://www.npmjs.com/package/oni\r\n\r\nI'm adding a deprecation notice to the `oni-vim` npm package. Thanks for all the help!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285979177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285980444", "body": "Aaaand https://www.npmjs.com/package/oni-vim is marked as deprecated. Thanks all for the help, and especially @tillarnold for giving us the package name. Cheers!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285980444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286533478", "body": "Ah, sorry about that, you're right, I forgot that the `requires` are cached. \r\n\r\nMaybe this stackoverflow thread has some ideas: http://stackoverflow.com/questions/9210542/node-js-require-cache-possible-to-invalidate\r\n\r\nOr perhaps this NPM module would be helpful as well: https://www.npmjs.com/package/decache", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286533478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286538823", "body": "Ouch ya another \"gotcha\" - we use the `webpack` bundler with the project, and it treats require in a special way. Webpack doesn't recognize the `global[\"require\"]`, so that's our workaround to get it to ignore those (otherwise, webpack actually tries to load the file during build time and bundle it into the JavaScript file!).\r\n\r\nNice find on the fix, deleting from that cache looks like it should work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286538823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286719606", "body": "We could consider refactoring this to a class, like:\r\n\r\n```\r\nclass Config {\r\n...\r\n}\r\n```\r\n\r\nAnd then export it like:\r\n```\r\nconst _config = new Config(...);\r\nexport const getConfig = () => this._config;\r\n```\r\n\r\nWhich is basically creating a singleton and exposing the `getConfig` function. The nice thing about that is it becomes easier to unit test. But we can look at that refactoring later.\r\n\r\nThanks for tackling this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286719606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286721999", "body": "Overall looks great! Would you mind checking out if we can replace the `Observer` implementation in `Config.ts` with the `EventEmitter`? Otherwise I'm good to bring this in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286721999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286722844", "body": "Oh and by the way... I wanted to try out BountySource. I put a bounty on this bug:\r\n\r\nhttps://www.bountysource.com/issues/42243372-configuration-when-config-js-changes-trigger-a-reload-of-settings\r\n\r\nWanted to try out that process and see how it works - not much, but at least it would be some beer money as a thank you for contributing!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286722844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287166303", "body": "At a high-level, it would be nice to have the following methods on `NeovimInstance`\r\n- `anyBuffersModified(): Promise<boolean>` - returns true if a buffer has an unsaved edit, false otherwise\r\n- `saveAll(): Promise<void>` - saves all active buffers\r\n\r\nAnd then per-`Buffer` instance:\r\n- `isModified(): Promise<boolean>`\r\n- `save(): Promise<boolean>`\r\n\r\nFor our entry points to our close-UI, we can check `anyBuffersModified` and then pop-up our own UI. I think it's OK to do this in the interim - this is an experience that is really important in other editors, and how a user expects \"Close/Quit\" will behave - so without this, we have an experience that might mean someone loses their changes..\r\n\r\nAlso, the above methods will be useful in general for other functionality - so I believe it'd be reasonable to implement it that way.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287166303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287544036", "body": "Nice! I tried this out and it works well. Cool to see the results instantly when changing the fonts or the cursorLine settings. Thanks for investigating this and doing the refactor!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287544036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287544176", "body": "I'll bring in this PR. Check out the bounty and let me know how easy it is to claim it:\r\nhttps://www.bountysource.com/issues/42243372-configuration-when-config-js-changes-trigger-a-reload-of-settings\r\n\r\nThanks @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287544176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287545205", "body": "Closing this PR since it looks like it was addressed by #256. Feel free to open a new issue if there is still something untracked here. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287545205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287546271", "body": "I just merged in PR #290 that should have fixed a lot of these issues. @lasypig was interested in this too.\r\n\r\nPlease test it out and let me know if you have any issues. I'll close this for now, but feel free to reopen if there are still issues around multibyte character support. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287546271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287546290", "body": "This was fixed by PR #292 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287546290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287638122", "body": "I approved it! Hopefully it went through", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287638122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287638479", "body": "Works great on Windows. Easy to test with the auto-reload of the config as well. Thanks for the PR!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287638479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287643220", "body": "Given @justinmk 's concern here, I would prefer to hold off on this PR. It might mean that someone's `init.vim` is basically not editable in oni (or at least, saveable), and it would be hard to understand why. If someone wanted this behavior, they could bring in a plugin like [vim-reload](https://github.com/xolox/vim-reload)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287643220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287788346", "body": "Yep, the algorithm is a bit busted. Most of this happens in `browser\\src\\UI\\Reducer.ts` in `fuzzyMatchCharacters`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287788346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287789716", "body": "Might be worth replacing the algorithm we're using with a library like [fuzzy](https://www.npmjs.com/package/fuzzy).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287789716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287791682", "body": "This library also looked interesting: http://fusejs.io/", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287791682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288048934", "body": "Thanks for cleaning this up, @jasonszhao !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288048934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288052128", "body": "Ya, I just tried it out, and the `fuse` algorithm seems more forgiving - especially if I type like `NeovimInstance` and then add `browser/src` on it.\r\n\r\nThe only concern I had when I was testing it out is that sometimes it seemed slow - for example, if I typed `NeovimInstancebrows` and then started pressing backspace, it felt much slower than the previous implementation. \r\n\r\nWhen I profiled, I saw that `fuse` was doing a _lot_ of work:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/24145683/86c66134-0def-11e7-9530-8db7de23f134.png)\r\n(The `BitapSearcher` looks like the core of Fuse)\r\n\r\nI don't want to regress performance here though - I think there are strategies we could use to make Fuse work - like potentially some memoization for the backspace case. I also wonder if there is a lighterweight algorithm we could use though - I'm curious what algorithm CtrlP or Sublime use for their fuzzy-finders.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288052128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288052449", "body": "Interesting discussion here: https://www.quora.com/How-is-the-fuzzy-search-algorithm-in-Sublime-Text-designed", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288052449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288053683", "body": "One more optimization I'm thinking about - maybe we could do a \"pre-pass\" of the strings, and do a quick filter where we filter for only items that contain all the characters. I think this would improve performance greatly, because most of the issues I saw only occurred once all the characters were typed in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288053683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288054199", "body": "The initial work will be a bit hard to parallelize - but there is some help I'll need shortly for this:\r\n\r\n1) Some example plugins leveraging the status bar - I want to include a git integration out of the box, but also an example of something more interesting like a github notifications or weather statusbar plugin\r\n\r\n2) Improving our documentation - our README.md is a bit hard to digest at the moment. I want to have a more concise demo gif / youtube video, and then distill some of the information in a better format (like a [gitbook](https://www.gitbook.com/@extr0py/dashboard))\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288054199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288055539", "body": "Thinking about this, I believe it is better to have line numbers (not relative) as the default - that's a bit more friendly to people trying out ONI for the first time. @bert88sta - would you be up for changing our default here? I wanted to give you a bounty as a thank-you for your contributions", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288055539/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288063377", "body": "Fix #305 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288063377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288102437", "body": "Electron packager: https://github.com/electron-userland/electron-packager", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288102437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288102761", "body": "The end goal is to have download links to lower the barrier to entry to trying ONI", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288102761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288112901", "body": "It could be potentially moved to `RootComponent`, we just need to have some redux state + actions to control rendering it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288112901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288123257", "body": "Cool, no rush, getting financial aid set up is much more important! \ud83d\udcb5 \ud83d\udcb5 Good luck!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288123257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288170296", "body": "For caching, I was playing with this now and I realized it would cause problems when we start hooking up this async behavior:\r\nhttps://github.com/extr0py/oni/issues/269 (supporting incremental results in QuickOpen). It's also fragile in that, if a file gets added outside Oni, it might not show up in the list - this would be confusing / frustrating.\r\n\r\nI tried this out really quickly for filtering:\r\n```\r\n    const filteredOptions = options.filter((o) => {\r\n        const combined = o.label + o.detail\r\n\r\n        for (var i = 0; i < searchString.length; i++) {\r\n            if (combined.indexOf(searchString[i]) === -1)\r\n                return false\r\n        }\r\n\r\n        return true\r\n    })\r\n...\r\n    const fuse = new Fuse(filteredOptions, fuseOptions)\r\n```\r\n\r\nAnd it seemed like it addressed the performance concern I had, and doesn't have the drawbacks above - it would work fine for the incremental / async population as well.\r\n\r\nIt could be cleaned up a bit, and it could be optiimzed further to take into account the number of characters, but perhaps we could try that instead? Thanks for looking at this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288170296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288170672", "body": "Oh, and did you figure out what was happening with the DirChanged event? it sounds like there is maybe some `init.vim` error or something popping up. Unfortunately we don't have a good way to bubble that up at the moment... but running neovim separately or in the terminal can help isolate this", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288170672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288197828", "body": "http://electron.rocks/electron-angular-packing-and-distribution/ looks helpful", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288197828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288202898", "body": "Oh ya, it's in a bad state right now, I gutted the whole UI temporarily to create an <EditorHost /> component. That will open the door for some really interesting UI integrations, after this work is done-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288202898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288375028", "body": "Nice, thanks for adding this section! There's just one minor typo (Pallette instead of Palette) - other than that looks great. I'll pull this in once that is addressed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288375028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288376709", "body": "Cool, thanks! I tested this out and the behavior seems greatly improved now, and the performance is smooth.\r\n\r\nBummer about the `DirChanged` event - as you mentioned above, if Oni isn't connecting until you hit enter, that means usually that there is some VimL error on launch. You could try clearing out your `init.vim`, and if that doesn't work, it means probably one of the core changes caused a regression. If you set `oni.loadInitVim` and `oni.useDefaultConfig` to false, that should disable both of these too. Keep me posted if you're not able to get that figured out.\r\n\r\nThis PR looks great though. I'll bring it in. Thanks for the contribution!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288376709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288427478", "body": "Cheers, thanks for the fix! Merging in now-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288427478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288547346", "body": "Awesome! Thanks for fixing these. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288547346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288556408", "body": "Thanks for bringing some sanity to our config settings! I like that you made sure to explicitly calling this out in the title.. will make it easy for me to see when I put together the release notes. Looks great to me. I'm glad we'll have some standards in place here moving forward. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288556408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288580068", "body": "Need to switch to `electron-builder`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288580068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288753006", "body": "Excellent, having the video would be a huge help. The script looks great to me, as it highlights all of the main features we have in Oni today that work out of the box, progressively. It consolidates all the items in the gifs to a single script.\r\n\r\nI'm also thinking it'd be helpful to have a quick animated gif on the github landing page - maybe a subset, so just steps 1-6 - completion is probably the most compelling feature we have today. Thanks for thinking about this!\r\n\r\n@bert88sta - would you be up for making the gif & video? We could create an issue specific to that, so I can get a bounty to you.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288753006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288771500", "body": "This path resolution logic doesn't seem correct here, for this case:\r\n\r\n```\r\n// In Windows, directly call into the electron executable - otherwise we\"ll end up with a floating node console\r\nvar nonWindowsElectronPath = path.join(__dirname, \"..\", \"node_modules\", \".bin\", \"electron\")\r\nvar windowsElectronPath = path.join(__dirname, \"..\", \"node_modules\", \"electron\", \"dist\", \"electron.exe\")\r\nvar spawnProcess = isWindows ? windowsElectronPath : nonWindowsElectronPath\r\n```\r\n\r\nWe make the assumption that node_modules will be at the oni root, but looks like, in the local install case, that might not always be true. Maybe we need to revise this to search upwards for the node_modules/electron folder, and launch it from there", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288771500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288775728", "body": "Good point, #312 is really the way forward here - having platform-specific builds that don't depend on Node/NPM will be a huge step forward for this project (and solve the problem described in our gitter channel)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288775728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288776262", "body": "I'll close this in favor of investing in #312 . FYI @teto", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288776262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289021656", "body": "Hmm, might have something to do with our logic in `_convertEventToPosition` in `Mouse.ts` - maybe `round` is the wrong thing to do? It seems like the coordinates maybe are getting clamped the wrong way. We might want to experiment with that function and see if we can get better results.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289021656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289451108", "body": "Looks good to me! I updated the title so I remember to call this out as a breaking change in the release notes. I also associated a bounty with this - so please submit a claim on bountysource (https://www.bountysource.com/issues/43365739-inaccurate-clicking). Thanks for the fix!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289451108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289452080", "body": "This default has been removed, so this is now addressed. Thanks @bert88sta !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289452080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289754165", "body": "Sounds like a plan - I'm hoping to have this all set by the weekend - perfect time for a new release!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289754165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289762043", "body": "Using #326 to track real OSX build.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289762043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289762126", "body": "As part of the build, we should be adding the `gui_oni` feature, such that `has(\"gui_oni\")` returns `1`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289762126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289777853", "body": "Fix #99 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289777853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289786186", "body": "Will need a couple of follow up issues for this:\r\n- Move some `dependencies` to `devDependencies` if they are being bundled in the webpack `bundle.js`, so they are not included twice\r\n- Create `x64` build for Windows", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289786186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289906315", "body": "Good point - updated the README in a separate commit.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289906315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290102864", "body": "Thanks all for the detailed investigation, and @am2605 for reporting this! I'm able to repro this on Windows as well so I can test out some of the fixes\r\n\r\nIt seems like based on the notes on `path` here: https://nodejs.org/api/path.html that Windows will support both styles of path characters - `\\` and `/`, however the node APIs only return `\\`, and this causes problems for VIM.\r\n\r\nI think a reasonable workaround is to coerce those slashes to `/`, which should have no impact on Mac/Linux AFAIK. I imagine there are other places we're hitting this issue as well\r\n\r\nOne other issue is that the `name` argument from `openDialog` in `Menu.js` is actually an array of strings - so there is a chance that we could get more than one filename (although based on the current args, I don't think this is the case). I'll open a PR for the fix I tested out for some feedback.\r\n\r\nI realized I mostly use `QuickOpen` or `:e {file}` in my workflow so no wonder I haven't hit this. This is probably the very first thing most people try though when testing a new editor... would be a rocky first impression!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290102864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290107170", "body": "- Validated menu still works correctly on OSX", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290107170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290119037", "body": "Fix #327 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290119037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290119559", "body": "Good point, you're right, we shouldn't have to worry about the multi-selection case for now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290119559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290191315", "body": "Ah, great - thanks for sharing that. I'll make the change.\r\n\r\nFor the environment variables, I don't think this code should be impacted, as we're adding all the runtime paths for the built-in plugins (and other plugins the plugin manager cares about). In other words, they should all be fully resolved.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290191315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290192711", "body": "Looks like it works great! Thanks for the suggestion, @justinmk ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290192711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290248469", "body": "Cheers, thanks for validating the fix and the kind words! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290248469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290249149", "body": "Ah, interesting - I noticed this too intermittently but wasn't able to isolate a repro. It's great that you caught it in action \ud83d\udc4d \r\n\r\nI'm wondering if there is some behavior / event timing difference in the latest Neovim. I didn't notice this until I updated the windows binaries. Or maybe there is a new value that comes from the `mode_change` event from the `msgpack-rpc` interface. It'd be helpful to audit the `mode_change` events  we get in `NeovimInstance`:\r\n```\r\n            } else if (command === \"mode_change\") {\r\n                const newMode = a[0][0]\r\n                this.emit(\"action\", Actions.changeMode(newMode))\r\n                this.emit(\"mode-change\", newMode)\r\n                ...\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290249149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290418647", "body": "Strange - I wonder what we are sending over in `browser\\src\\index.tsx`:\r\n```\r\n    ipcRenderer.on(\"menu-item-click\", (_evt, message: string) => {\r\n        if (message.startsWith(\":\")) {\r\n            instance.command(\"exec \\\"\" + message + \"\\\"\")\r\n        } else {\r\n            instance.command(\"exec \\\":normal! \" + message + \"\\\"\")\r\n        }\r\n    })\r\n```\r\n\r\nAlso, if you start `Oni`, and then type `:e $MYVIMRC`, do you get a different result? I'm wondering if there is some difference in terms of how we are opening it up", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290418647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290419382", "body": "Weird, I was able to  reproduce this on my Linux box but not on my Windows box. And if I run `nvim` from terminal, I get the same issue - so this might be an issue with neovim itself as opposed to Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290419382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290422556", "body": "Thanks @bert88sta ! Yes, unfortunately I haven't been able to spend much time on this PR - but the changes will definitely help us. The UI will be in a more sane format so that we can add something like the tabline above, and be able to have some first-class styling for it.\r\n\r\nWith the component-ized UI:\r\n```\r\n   return <div className=\"container vertical full\">\r\n             <div className=\"container full\">\r\n                <EditorHost editor={this.props.editor} />\r\n                <Cursor />\r\n                <CursorLine lineType={\"line\"} />\r\n                <CursorLine lineType={\"column\"} />\r\n                <SignatureHelpContainer />\r\n                <QuickInfoContainer />\r\n                <SignatureHelpContainer />\r\n                <MenuContainer />\r\n                <AutoCompletionContainer />\r\n            </div>\r\n            <div className=\"container fixed\">\r\n                <StatusBar />\r\n            </div>\r\n          </div>\r\n```\r\n\r\nWe'd be able to easily add a `<TabBar />` at the top of the UI. The other pieces that would be helpful would be thinking about what sort of state we need in the redux store (certainly an array of `TabInfo` - which would have things like `fileName`, `isModified`, maybe `filetype` for an icon), and then how to populate that state from Neovim", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290422556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290723087", "body": "Oh, nice find! This explains the behavior I'm seeing now. On my Windows box, I have `oni.loadInitVim` set to `true` - whereas my Linux box I don't have it set. This explains why it works correctly on Windows, but not Linux for me. Thanks for the investigation - glad we know what is going on now! :smile:\r\n\r\nYes, based on the snippet from the docs you posted, it seems this would be expected behavior.\r\n\r\nHowever, I think there are potentially ways we could streamline this experience to make this more intuitive and simpler for the user. Here's a couple of ideas off the top of my head:\r\n\r\n### Option 1: Don't use $MYVIMRC variable\r\n\r\nFor this option, we could resolve the $MYVIMRC path outside of Neovim. We could just open up the one in $XDG_CONFIG_HOME/nvim/init.vim, we'd just need to setup the cross-platform way to get that folder.\r\n\r\nThen, when the _Open Neovim Config_ option is selected in the menu, we'd check and see if the `oni.loadInitVim` option is set. If it isn't, we could pop up some UI letting the user know they need to make this change for their `init.vim` to load.\r\n\r\n### Option 2: Don't show the _Open Neovim Config_ option unless `oni.loadInitVim` is true or `oni.useDefaultConfig` is false.\r\n\r\nFor this option - I'm thinking we'd basically hide the _Open Neovim Config_ option unless the user has opted into loading the init vim by setting either of the above config options. I'm gearing Oni towards web developers so my preference is to steer them towards the javascript config (and expose more and more options from there), and only to expose the `init.vim` concept for more advanced Vim users. In this way, the complexity of having two modes of configuration would be hidden, unless a user has specifically opted-in to loading their `init.vim`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290723087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290729179", "body": "Nice, thanks for fixing this! I really just hacked it together quick, so I'm glad you went through and cleaned it up and fixed those problems. It looks much nicer now after your changes.\r\n\r\nThis reminded me of a grievance I have with the current design - that if an error is near the end of the line, the error marker overlaps it and it becomes hard to fix. I created issue #335 to track a new design (Atom has a good model for this, I think)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290729179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290839457", "body": "The change looks great to me! Thanks for the quick fix. I think it will help alleviate some confusion - I'm hoping to move some additional configuration over like line numbering, colorscheme, etc to the `config.js` concept soon, so there are less reasons to need to turn on `oni.loadInitVim`.\r\n\r\nGood point about the comment. I think it does make sense to potentially add some comments in the default `config.js` to explain some of the features / defaults, but you're right in this case it may have been superfluous.\r\n\r\nI'm thinking that maybe later it would make sense to move the menu-building logic over to the _renderer_, and then pass the menu template to the _main_ process by passing it via ipc. That might make it easier to enable other dynamic menu options later (like turning on/off language service-specific functionality depending on if the current filetype supports it).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290839457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290841200", "body": "There are still some improvements we can make here, but we can track them as separate issues. I'm searching the first binary release will be a bit rocky, but we can continue to improve.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290841200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290841698", "body": "We now generate linux (deb, rpm, tar.gz), osx (dmg) and windows (exe, zip) packages for tags. Will create a new release on Sunday!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290841698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290844502", "body": "Committed a fix to add quotes around the path", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290844502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290845550", "body": "Nice find here! I would imagine those issues you linked are responsible. We may want some additional logging to see the sort of requests we are making to Neovim via msgpack-rpc. It's possible that there are some cases where we are making queries in the background, and that is interrupting the command sequence. \r\n\r\nFor the cursor case in particular, we might be able to handle that by handling that array of items, instead of dropping the other ones.\r\n\r\nI've seen some cases where I'd run a command like `dt(` and it would just be a no-op. That jives with the issue you linked - where perhaps that command sequence is being interrupted. It's never able to be reproduced, but maybe some additional logging could help when we do hit this. It's really helpful to know that executing those commands causes problems if hit in the middle of an input sequence.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290845550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290995905", "body": "Tracked in #339 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290995905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291151237", "body": "Thanks for the report @FrigoEU and for digging in to debug it!\r\n\r\nJust a couple questions:\r\n- Which platform is this?\r\n- Which installer package did you use?\r\n\r\nAppreciate the heads up!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291151237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291155236", "body": "Hi @John0x , thanks for trying out the project! One of the long-standing goals is to have tight-knit integration with the language server protocol - and we're tracking this with #6 \r\n\r\nFor now, though, until #6 is resolved - you'll want to use LanguageClient-Neovim for this. By default, Oni does not load the `init.vim`, in order to avoid collisions with Oni's settings. You can set the `oni.loadInitVim` configuration value to try by doing the following:\r\n- Open Oni\r\n- File -> Preferences -> Edit Oni Config\r\n- Add an entry that looks like:\r\n```\r\n   \"oni.loadInitVim\": true,\r\n```\r\n\r\nThen, as long as you've installed vim-plug plus the plugins as described here: https://github.com/junegunn/vim-plug, you should be in good shape.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291155236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291157023", "body": "I'm not able to reproduce this with the Windows binary or with the Mac dmg - but let me know which platform you used. I'm wondering if it is there is a different configuration on my machine, or if I haven't tested the right platform. Thanks for your help!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291157023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291157586", "body": "I realized that the Neovim binary that is packaged with Windows does not include Python support, but vim-plug requires Python. Are you able to run the `LanguageClient-neovim` with neovim-qt?\r\n\r\nI think we would need another configuration option for this - the ability to specify an alternate neovim binary - something like `oni.neovimPath`, which we don't have yet.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291157586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291242213", "body": "Thanks all for the details, and @keforbes for the quick fix! I'm able to reproduce it by removing my `.oni` folder. I'll pick up @keforbes fix ASAP and push out a new release.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291242213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291243504", "body": "I'm hoping that #298 will help build a safety net for this in the fture - running a quick integration test where start up the app and validate some simple scenarios. This would've helped here since the build machines wouldn't have had a `.oni` folder", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291243504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291244139", "body": "Makes sense, sounds reasonable. We can always tackle the edit-config-on-first-launch scenario at a future time.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291244139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291282143", "body": "Release has been updated: https://github.com/extr0py/oni/releases/tag/v0.2.2-recovery", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291282143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291474551", "body": "Nice, that's great news!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291474551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291889024", "body": "Good question! This is something I deliberated about at length. \r\n\r\nFor Oni, I decided _against_ using the existing VimL language service shims. I also discussed this a bit in #6 but the main reason is that one of the goals of this project is to __move away from VimL and leverage JavaScript__ (or BuckleScript/ClojureScript/JavaScript) for the plugin infrastructure. This is part of my broader vision to lower the barrier to entry to Neovim and modal editing in general. Taking a large VimL dependency to implement this would be counter to that vision. We also have some open issues around key-bindings and configuration (#20 - thanks for your input on those!), I hope I can revisit those shortly for 0.4 - but I'd like to see those moved as well to JavaScript.\r\n\r\nAside from just the fuzzy this-is-my-vision reasoning, there were also more practical technical considerations to pursue a non-VimL-driven approach:\r\n- There are some aspects of the protocol __that will not be handled by the VimL approach__. One example is the `completion details` part of the protocol - there isn't a great way to handle this with Vim/Neovim's _omnifunc_ capabilities. There are other cases like CodeLens where it is more straightforward to take advantage of this rich pieces of functionality in the `Oni` layer than the `Neovim` layer.\r\n- __Multiplexed Neovim Instances__ - I have some longer term plans to update the UX to rival or at least have parity with Atom, VSCode, and Brackets - I want Oni to be a beautiful editor, from the install to the opening experience. We have a long way to go in that aspect, but one piece I'm investigating is multiplexing the Neovim processes in order to support some advanced UI scenarios, different tab/window experiences, etc - @justinmk sums up some of the considerations here nicely: [Future of UI](https://www.reddit.com/r/neovim/comments/5ym9p3/future_of_ui/). The difficulty with a VimL LSP solution in this world is that the Neovim instances would not have much knowledge of each other (worst case - spawning new instances of LSP for every window/split/tab), whereas a LSP implemented in the Oni layer could be shared.\r\n- __Excellent JS Tooling__ - VSCode actually has some great node modules for integrating the LSP into a JS app, like https://github.com/Microsoft/vscode-languageserver-node. Leveraging this as a dependency will make it easier to keep the protocol up-to-date.\r\n- __Windows Support__ - Oni should work out of the box on Windows. All of the language server clients in VimL have a dependency on Python, which is not available out of the box on Windows. \r\n\r\nI also called out a more selfish reason in #6 - I personally am not very productive in VimL. I spent some time going down that rabbit hole when I was learning Vim, but I also wasted a lot of time. I've come to my terms with the fact that I'll never be another tpope :smile: Given that I'm building this in my spare time, I'd prefer not to use VimL.\r\n\r\nWhen I look at things like the [Stack Overflow Developer Survey](https://stackoverflow.com/insights/survey/2017) and see JavaScript at the top of the programming languages engineers use, it affirms to me that this is the proper direction for Oni to pursue.\r\n\r\nLet me know if you have feedback or ideas though! As developers, it is easy to fall into the trap of [Not Invented Here](https://en.wikipedia.org/wiki/Not_invented_here) and continuously reimplement the wheel, so its important to critically evaluate when we choose not to leverage an existing solution. \r\n\r\nThe existing LSP VimL clients are awesome and both of the authors have done incredible work, but the end goals / vision are simply different.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291889024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291890383", "body": "Looks like this has been fully addressed by @keforbes fix - feel free to open a new issue if there is additional work we should look at here!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291890383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291891190", "body": "Looks like this is no longer applicable, since we now use binary releases.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291891190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291891502", "body": "Closing since this was fixed by @jasonszhao . Will look forward to picking up that Neovim change and including those commands in the Oni command palette :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291891502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291891812", "body": "Thanks @keforbes ! I'll close this since the fix is in now. @jordwalke , feel free to reopen if you are still seeing issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291891812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291892924", "body": "We have most of the keyboard shortcuts documented now, and are in the process of moving some of our documentation to the gitbook / wiki.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291892924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291893314", "body": "Looks like this issue is resolved, and #201 is tracking an external statusline implementation, which should help making Oni look like a real IDE :smile:", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291893314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291915266", "body": "Looks like this was addressed by #256, so closing this one. Feel free to open a new issue if there are still any concerns. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291915266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292178377", "body": "Hi @FrigoEU , sorry for the slow response on my end! Good question about the Redux store. I could see us migrating these config options at some point to the redux store, but I looked at your PR and you did the right thing here - added `backgroundColor` to the redux store and leveraged the rest from config values. I opened #353 to track discussion around this but it isn't pressing and certainly shouldn't block this PR. Overall your PR looks great - thanks for taking this on!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292178377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292179490", "body": "Thanks for the kind words on the project! The change looks great to me. \r\n\r\n> I tried to add the Background component to the RootComponent, but that didn't really work out too well since the text editor needs to be \"in between\" the background and the rest of the React UI in terms of DOM nodes\r\n\r\nYes, this is definitely painful. I like the solution you chose for now - just having ReactDOM.render directly to another element. I'm working on another PR - #303 - which refactors the UI structure a bit, so we end up with something like this:\r\n```\r\nexport class RootComponent extends React.Component<IRootComponentProps, void> {\r\n\r\n    public render(): JSX.Element {\r\n\r\n        return <div className=\"container vertical full\">\r\n            <div className=\"container full\">\r\n                <EditorHost editor={this.props.editor} />\r\n                <Cursor />\r\n                <CursorLine lineType={\"line\"} />\r\n                <CursorLine lineType={\"column\"} />\r\n ...\r\n            </div>\r\n            <div className=\"container fixed\">\r\n                <StatusBar />\r\n            </div>\r\n          </div>\r\n```\r\n\r\nYour solution here will fit nicely with that PR because we can just pick up your <Background /> component and place it in the right level there.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292179490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292180640", "body": "Looks great, nice work & thanks for the contribution @FrigoEU ! I'll merge this in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292180640/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292180776", "body": "Fixed by #352 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292180776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292181388", "body": "The fix for this issue should:\r\n- No longer have the warning that our app is not packaged via asar\r\n- All app contents bundled in the `asar`, except for things that truly cannot like the Neovim binaries\r\n- Work on all platforms (Windows, OSX, Linux)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292181388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292615514", "body": "This is excellent! I didn't know some of those typing constraints were possible - I learned something new with `Partial` and with the construct used like:\r\n```\r\nexport function setConfigurationValue<K extends keyof Config.IConfigValues>(k: K, v: Config.IConfigValues[K]): Actions.ISetConfigurationValue<K>\r\n```\r\nI didn't realize we'd be able to get that level of typing granularity - very cool.\r\n\r\n> Secondly I only updated the components to read from the redux store. Services that want to read from the config keep their own reference to the instance, which is OK for now I think. The Error.tsx component isn't hooked up to redux, so I left that for now.\r\n\r\nThis sounds totally reasonable to me. I'd like to incrementally refactor these to be bound to the redux store. \r\n\r\nThe only concern I have is that it looks like all of the reducers in `browser/src/UI/Reducer.ts` have to add the `<K extends keyof Config.IConfigValues>` to accept the new Action union type. I wonder if there is a way to limit that - reducers like the `autoCompletionReducer` and `popupMenuReducer` probably shouldn't need to know the details of the Config typing. Could you please take a look at that and see if there is a way we can make most of the reducers agnostic of the type?\r\n\r\nOne way to address that might be to have a separate union type that doesn't contain the `ISetConfigurationValue` action, and use those for the downstream reducers. \r\n\r\nOtherwise, the PR looks great, and is a big improvement both in our typing robustness and improving the architecture of our React components. Let me know what you think about the reducer typing and I'll merge it in afterwards. Thanks for taking this on!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292615514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292617677", "body": "Yes, sounds like we're pretty much on the same page here! One benefit of the architecture Oni has - that of running JavaScript plugins outside of Neovim - is that we can load them in parallel while Oni is loading.  As you mention, you really don't need all of the quickinfo/autocomplete immediately, and that can be deferred and parallelized until we've actually rendered some UI.\r\n\r\nAnother nice thing is that, as we start externalizing the UI (#201, and then perhaps tab menu), is that we can start rendering those items before the Neovim process even starts. \r\n\r\n> I guess in my mind, if I see the text of a file immediately and then 2 seconds later the syntax highlighting kicks in, that doesn't bother me. I don't consider that a slow application. \r\n\r\nAgree 100%. One of the most important metrics we should start tracking is \"time to show something\" - basically the time from starting to seeing _something_ from the UI. I believe we actually have a lot of room for improvement here, since there has been almost no optimization in the load pipeline currently. https://github.com/electron/spectron seems like a pretty cool tool that can help us get this measurement - if we had an automated test with spectron that measures the time for the first BrowserWindow to show, that could be a good first step. We could make sure that we aren't regressing performance with changes and also that performance improvements actually have a measurable impact. I had this #298 open for a simple validation test (to make sure Oni launches on all platforms), but a good next step would be the performance validation", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292617677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292725367", "body": "Thanks for making the change! Looks good to me. I'm not sure if there is a better solution either, but we can always make a PR if we find another way to handle the typing. Overall this PR is a major improvement in how we handle typing of Config options. Later, I'm also thinking it would be nice to have completion and quickinfo specific for the `config.js` file - having this typing info would make that goal more achievable. \r\n\r\nNice work, appreciate the contribution! I'll merge this in shortly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292725367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293115063", "body": "I'm very sorry for the slow response on my end! Had some family obligations this weekend so wasn't on the computer much. This is an awesome PR @FrigoEU - great to see the design & usability improvements! Excellent work. \ud83d\udc4d \ud83d\udc4d \ud83d\udc4d \r\n\r\nI really like the restyling and the thought you put in as to whether it should open above or below.\r\n\r\nI agree with the sentiment around the background color - it would make sense for this to be consistent with the quick info, completion, and popup menu UI. We have the `@background-color` constant in .less we could leverage. Regarding the colorscheme - makes sense to sync once we are able to do that - that work is tracked by #33. But it won't be straightforward until we address that issue, so just making it match with the other elements would be a reasonable goal. \r\n\r\nI experimented a bit and using the `@background-color` constant along with a drop shadow (`box-shadow: 3px 3px rgba(0, 0, 0, 0.2)` doesn't look too bad and is relatively consistent:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/24886944/34c69e70-1e0d-11e7-925d-32f32e5e7980.png)\r\n\r\nThe only other thing I was thinking about was - does it make sense for the errors to be centered under the item? Something like this:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/24887055/08b9c82e-1e0e-11e7-9659-e56b3a5ead02.png).\r\n\r\nThis is the sort of experience and change that helps move us towards the __Modern UX__. Looking at the current experience and this PR, it's night and day, and it is leaps and bounds ahead of the UI that is possible with the terminal limitations. Awesome job! \ud83d\udc4d \ud83d\udc4d \r\n\r\nThe only item I'd like to see addressed is making the background color consistent with the other popup elements - otherwise I'm ready to merge it in. Can't wait to start using it! \ud83d\ude04  \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293115063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293116364", "body": "Thanks @keforbes  for catching this regression and fixing it! Hopefully with #98 we can have a nicer way to show the errors eventually (this is a general problem not specific to the PR, lots of places where `alert` is being used), but just tried it out and the functionality is great.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293116364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293274676", "body": "The work in #201 is sort of a pre-req to this, as it contains some DOM refactoring that would make it easier. However, the `Tabs` and `Tab` component could be developed in isolation in the iterim", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293274676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293277310", "body": "> I made the changes to use the @background-color variable and the dropshadow as mentioned above. I think it's not a bad idea to try it out for a bit and then see what everybody thinks about it. There are still issue with the errors, like when you have two on one line they go over/under eachother, so this is definitely not the end.\r\n\r\nSounds great! I checked out the changes and they fit in well with the UI. Thanks for making the updates. As you mentioned we can always tweak it later, but this moves much closer to the experience you get with something like Atom!\r\n\r\n> Just wanted to say thanks for the enthousiasm and encouragement I've been getting on all my PR's, it makes all the difference.\r\n\r\nDefinitely, thank you for taking the time to learn about and contribute to the project, and for being so open to feedback! Really appreciate your contributions.\r\n\r\n> It hurts my head a little bit trying to figure out the proper structure to handle the correct level positioning of all these overlay elements. As I can see we have these \"kinds\" of overlays:\r\n\r\nUnfortunately, the overlay management system is a mess at the moment. IMO it is the most convoluted and confusing part of the codebase at the moment. It hurts my head too and I wrote it \ud83d\ude26 The main problem is there is a bunch of complexity in terms of managing the 'overlays' today - because the Neovim instance is one giant `<div>`, and when there is a split or changes in the split size, there are a bunch of hacky hooks to get the errors and scrollbar to render 'on top' of the appropriate area. \r\n\r\nI'd like to look at _handling window management explicitly_ and _multiplexing Neovim instances_ to solve this problem.  This has been alluded to in a couple PRs, but I logged this issue - #362 - to explicitly track this. \r\n\r\nThe goal with that work would be to keep everything in our React component hierarchy, so we don't hit those annoyances you mentioned. Let me know if you want to chat more. PR #303 is the first step I had in refactoring some of the React components and creating a React component to host the Neovim process - #362 might be more doable after that PR. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293277310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293277453", "body": "I'll bring this change in! Thanks for the contribution, @FrigoEU , excellent work!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293277453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293277970", "body": "Nice, thanks for making this proactive fix to address the typing - this will definitely improve our \"safety net\"", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293277970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293278759", "body": "Awesome, this is great! Having the `if` in RootComponent for this scenario makes sense to me. Maybe later we can have some sort of splash screen or something, but this works fine for now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293278759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293423245", "body": "Awesome! I'll test it out tomorrow \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293423245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293569106", "body": "Meant to merge this in yesterday - bringing it in now. Thanks for the contribution, @FrigoEU !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293569106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293573393", "body": "I tested it out in Windows, and it looks much improved! Good idea to use that build metadata, so we don't have to duplicate the name (and removing the existing duplication).\r\n\r\nI still see a few of places where `oni` shows up instead of `Oni`, which looks out of place in Windows.\r\n![image](https://cloud.githubusercontent.com/assets/13532591/24959266/217b3b9c-1f47-11e7-8ee5-17ee16d63a06.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/13532591/24959547/f7b019e4-1f47-11e7-972a-d6f6c4341ae3.png)\r\n![image](https://cloud.githubusercontent.com/assets/13532591/24959659/320ddc52-1f48-11e7-8016-4706137a1c26.png)\r\n\r\nI'm thinking it just makes sense to set `\"AppName\": prodName` so it updates all the entries needed.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293573393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293573938", "body": "Thanks for your help with this! It will definitely improve the Windows experience.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293573938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293994664", "body": "Wow, this change looks awesome! Thanks a lot for including the screenshot. The UI looks really great and since it was inspired by Atom it has that modern UX feel.\r\n\r\nThis seems like it would be a convenient place for hosting the compile errors & warnings as well, at some point. The redux state changes look solid to me.\r\n\r\nI added a few comments inline, and then just had these questions:\r\n- Is it possible to style the scrollbar that comes up? At least on Windows, it looks pretty out-of-place:\r\n- I'm wondering if the current component should be named `Logs`/`LogRenderer`? When I think of Notifications, I think of the pop-up notifications like:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/25019828/e907ed50-2040-11e7-87d1-88eff76eee50.png)\r\nI imagine we'll have the need for both styles of Notifications, so naming the component in the PR `Logs` will mean we can use `Notifications` for that pop-up experience.\r\n\r\nAnother thing I'm thinking about in the longer-term is how to keep Oni keyboard-friendly with these new components. Something like the vimium behavior might be really helpful - I created #366 to discuss this. Not something we need to tackle now but longer-term it'd be useful, especially as we add more of these rich UI experiences to Oni.\r\n\r\nExcellent work, this looks great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293994664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294161489", "body": "Awesome, thanks @FrigoEU ! This looks excellent. Appreciate you taking the time to do the rename... we need to get the `rename` IDE functionality in here to make that easier :smile:\r\n\r\nWe can track the scrollbar issue separately, I'm happy to take a look at that since my main dev machine is Windows.\r\n\r\nThe only thing left is that we should remove the placeholder logs, could you please take those out? Otherwise I'm set to merge this in! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294161489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294168892", "body": "This is really cool! It addresses one of the issues I started having with the new error marker system - sometimes they would overlap. Having this coalescing behavior is huge improvement in usability for that scenario!\r\n\r\nAnd the `WindowContext` code to try and reason about the position of the window/screen/buffer/lines is one of the most complicated pieces of the code. I really like your explicit comments around some of the operations to make sense of that - I wish I would've done more of that earlier. The details around `getColumnOffset` are particularly helpful \ud83d\udc4d \ud83d\udc4d The way you differentiated between `Buffer`, `Window`, and `Screen` lines makes a lot of sense. Thanks for renaming some of those methods to make it clear!\r\n\r\n> Also getting a hold of the \"offset\" on the left side of the screen caused by eg. set numbers is awful, so I had to deduced it from the info I did have. If we could just ask that to neovim that would be much easier!\r\n\r\nDefinitely... I like the way you derived both of those from the `wincol`/`winline` - at least you solved that problem in a way that others won't have to worry about it! Even once we do the window management work in #362, we'll still have this issue for line numbers, unless we externalized those too - so it's great that this is there.\r\n\r\nThe code overall looks excellent to me!\r\n\r\nThe only thing I'm wondering about is if we can include the source of the error. For example, in this case,  I have two errors - one from `tslint` and one from `typescript`:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/25046292/812b5dd4-20e5-11e7-9cb7-cacc1f5bd702.png)\r\n\r\nWe set a key here in `index.tsx`:\r\n```\r\n\t    pluginManager.on(\"set-errors\", (key, fileName, errors, color) => {\r\n\t        errorService.setErrors(fileName, errors);\r\n\t        color = color || \"red\";\r\n\t        errorOverlay.setErrors(key, fileName, errors, color);\r\n\t        const errorMarkers = errors.map((e) => ({\r\n\t            line: e.lineNumber,\r\n\t            height: 1,\r\n\t            color,\r\n\t        }));\r\n\t        scrollbarOverlay.setMarkers(path.resolve(fileName), key, errorMarkers);\r\n\t    });\r\n```\r\nI think we could potentially use that. Right now they are a bit verbose, like `typescript-compiler` and `ts-tslint`. But I'm thinking we could have something like this:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/25046625/55751f34-20e7-11e7-8dcf-cab74e0d3ece.png)\r\n(my quick hacking in the dom explorer looks really ugly, so i'm not prescribing the design - just the idea of having the source in the error too :smile:)\r\n\r\nSort of inspired by this, which looks cleaner than my DOM hacking:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/25046647/77cf1b98-20e7-11e7-8810-c142836e5f9b.png)\r\n\r\nIt'd be awesome to have the source next to the error (typescript/tslint in our case!). And you're right, it would be better to have some standard error types like warning/error/etc, instead of an arbitrary color sent from the error provider. \r\n\r\nThis change would be important for my workflow, where I tend to ignore the tslint errors in lieu of the typescript errors, at least while iterating. The colors don't matter as much to me as the source - I like to have a way to quickly differentiate between the compiler and lint issues. \r\n\r\n> Commit 4: Using the above functions from Commit 3, I added support for showing errors to the left if there is not enough real estate on the right side.\r\n\r\nNice - this a huge improvement!\r\n\r\nThanks for continuing to improve this, it's awesome to see the progress! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294168892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294242928", "body": "Awesome, thanks for addressing those! I'll open an issue for the windows scrollbar. I'm merging in now - thanks for the contribution, @FrigoEU !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294242928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294243087", "body": "#365 makes progress towards this - I think it makes sense to keep open to track the alert / pop-up notification scenario, though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294243087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294243784", "body": "FYI - logged #370 to track the windows styling issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294243784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294315242", "body": "Resolved by #371 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294315242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294315369", "body": "Sure, I can try making that later and testing it out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294315369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294315379", "body": "I'll merge this in now - thanks for your help with this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294315379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294501138", "body": "The C# integration is blocked on OSX & Linux by omnisharp/omnisharp-node-client#411", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294501138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295231339", "body": "> Just a heads up, I'm trying out some new design ideas for the errors since I'm not satisified with how it is currently. I'll make sure I bring in your request for mentioning from which plugin the errors are coming. Do you want this mostly when there are errors from multiple sources on the same line? Or just always?\r\n\r\nSweet! I'm excited to check out the new design ideas. :smile: Having the source always present would be helpful - I like to be able to quickly differentiate if it is a typescript or tslint issue, for example, even if it is the only error on the line. The way Atom had it in that screenshot seemed pretty nice. Thanks for looking at this!\r\n\r\n> Secondly this weekend I've been working on a PureScript plugin for Oni. Some stuff works really well, other things I don't know how to do. I'll let you work on the omnisharp plugin first before I bombard you with questions though :)\r\n\r\nAwesome! I think that will make you the first person to write a plugin for Oni.  I'm trying to wrap up the initial language client work, and then let me know what questions you have. I'm going on vacation + camping the next week, so I may be a bit slow to reply. One recommendation I would have is to create a generic language service, if there isn't one already. I look through [langserver.org](http://langserver.org/) and unfortunately didn't see one for PureScript. The advantage of creating a language server is that other editors can benefit too. For TypeScript, for example, I'd like to either move the implementation we have today to a language server, or use an existing one like https://github.com/sourcegraph/javascript-typescript-langserver\r\n\r\nKeep me posted though if you have any questions!\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295231339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295233859", "body": "In general, for the Oni plugin API, we should use those VS types as well for things like quick info, find definition, etc.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295233859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295235804", "body": "Hi @corelon ,\r\n\r\nThanks for trying out Oni and for the feedback!\r\n\r\nThere is no setting that exists today, ligatures are always on, but I believe this should be relatively straightforward - the ligatures are controlled by a CSS property `font-variant-ligatures`. So we'd just need to add a config that controls this property: \r\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-ligatures", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295235804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295238388", "body": "One possible avenue to help with #355, but improving the real startup performance.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295238388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295244895", "body": "Alright, seems like this is good to go... I logged several follow-up issues though:\r\n#382 #381 #380 #379 #378 #377 #376 #375 \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295244895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295246748", "body": "Thanks for catching this, @keforbes . Seems like we need to rationalize the way we are handling the scroll event - I think we just put it on the `document.body`, but for the editor itself, we should be listening to the root element.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295246748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295256336", "body": "Fix #374 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295256336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295272260", "body": "Fix #387 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295272260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295272723", "body": "Based on what the language server protocol gives us for this, the signature help UI might need to be restyled.\r\n\r\nThe typescript language service gives us separator characters for each parameter. However, the language server just gives the function name, a description, and argument info. A better format for representing that might be a bulleted list, and the selected argument can be highlighted.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295272723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295390207", "body": "Initial LSP support is now in Oni - a reference plugin leveraging the language client is available in the `oni\\vim\\core\\oni-plugin-csharp`.\r\n\r\nAs mentioned in the PR, have several follow up issues being tracked (additional functionality, additional out-of-the-box language support, etc):\r\n#382 #381 #380 #379 #378 #377 #376 #375", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295390207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295390945", "body": "Closing as the core implementation is complete - tracking remaining work in other issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295390945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295391646", "body": "Cheers, thank you very much @keforbes ! \ud83d\ude04  Just submitted the claim. I'll use it to post up more bounties.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295391646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295392474", "body": "> Of course, with all that said, I really did it because I find switch statements easier to read. \ud83d\ude06\r\n\r\nThanks for doing this refactoring! Agreed \ud83d\udc4d The big if..else blocks are pretty annoying. Sometimes they start out as just a condition or two and then grow organically out of control", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295392474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295402071", "body": "> I agree a language server for purescript would be really nice, but that would take me much longer than a weekend to get running :).\r\n\r\nAh ya, makes sense \ud83d\ude04 In that case, `oni/vim/core/oni-plugin-typescript` has examples of some of the extensibility points. The `package.json` is particularly important because Oni decides which events to send to the plugin side based on that. Good luck!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295402071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295405823", "body": ">  I love Vim's editing experience but hate its extensibility story.\r\n\r\nI'm with you 100% here. This is exactly what motivated the creation of this project.\r\n\r\n> For me, this issue is super important, but also still very vague\r\n\r\nDefinitely! I have some ideas in my head, but haven't had much chance to experiment yet... I think it's worth calling out some of the primary goals:\r\n- Git interface\r\n- Git blame annotations\r\n- Keybindings explorer\r\n- Compilation feedback\r\n- Search\r\n- Live Preview (React components, HTML, Markdown)\r\n- File Explorer\r\n- Plugin Manager\r\n\r\nI see three broad classifications of these:\r\n- _Floating Panels_ - these are independent pieces of UI that exist independently or on top of the editors. The log panel you implemented is a good example. The file explorer and git interface also potentially fit this, but would be on the side.\r\n- _Overlays_ - these are UI entry points that place UI on top of an editor window. We have lots of examples today - the completion, the error bubble, the quick info bubble. Other items I could see extending this would be things like `git blame`. \r\n- _Additional Renderer Types_ - preview modes would fall into these. They might be rendered completely differently from how we render the windows today, but maybe that is as simple as specifying a separate render strategy that is provided by a plugin.\r\n\r\n_Floating Panels_ would be completely new UI, independent of the `editor`. _Overlays_ would be layers on top of the editor window - so they would augment the existing editor rendering strategy. _Additional Renderer Types_ would competely replace the existing editor rendering strategy.\r\n\r\nOne thing that is important to me is maintaining Vim key bindings across these different windows. So I should be able to use the keys I'm comfortable with for navigating my file explorer, my git interface, my keybindings explorer, etc. One thing I'm experimenting with is supporting custom _renderers_ for a buffer - sort of like how NERDTree renders to a scratch buffer, we'd have a scratch Neovim instance that would could be used for navigation, but I could do custom rendering for that neovim instance / window - so I could add folder and file icons without needing a font hack. This will be more realistic once the refactoring to support #201 is complete.\r\n\r\nSorry if this isn't very clear, just sort of thinking and brainstorming through the keyboard. \ud83d\ude04  But I agree with you, I think if we can have a reasonable story for all those - like exposing an API that takes a React component as you suggest, along with some of the other plugin capabilities - we could go pretty far in tackling many of these scenarios.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295405823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295766058", "body": "Definitely! Thanks for your comments on the PR. I'll reopen this to track more fine-grained control of the ligature support as you suggested.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295766058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296225354", "body": "> My fix is to just ignore the event if mainWindow is null. So it avoids the error but I feel like in the future we should find a way to isolate the Oni instances a little better.\r\n\r\nSounds good for now. At least this will suppress the error. I think that the event object returned from `ipcMain` has a `WebContents` instance through the `sender` event property of the object it returns. It looks like we need the `BrowserWindow` instance though - but maybe we can derive that from the `WebContents`. That way, we could pass in the `BrowserWindow` that is relevant for the event to `rebuildMenu`.\r\n\r\nI'm also wondering if later there is a way to handle more of the menu logic in `browser/src` instead of building it from `main.js` - I think we might be able to call those methods directly from the browser process without needing to ipc out, and that might help us out here.\r\n\r\nIn the meantime this will definitely help alleviate that pain point - thanks for the fix, @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296225354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297405058", "body": "Yep, good suggestion. The scrolling behavior in Oni doesn't really fit with what you'd expect from a modern modal editor.\r\n\r\nThere were some related ideas that @trusktr brought up in #88 - we could implement _smooth scrolling_ if we render a larger area. This would be very difficult currently until we implement #362 , which externalizes the window / buffer management. The problem today is that if you attempted to attach  Neovim to a larger window size, that would apply to all splits and cause problems (one being that the command line and statusbar would be offscreen). Once the window management is externalized, though, we'd have the flexibility to implement this.\r\n\r\nI put this in milestone 0.4, which is going to be heavily focused on the UI modernization aspects of Oni. Having scroll behave as you expect is an important goal \ud83d\ude04 \r\n\r\nOne thing I'm not sure about is if we would need any changes to Neovim core to support this scenario, so that will be a piece of this investigation.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297405058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297410848", "body": "Thanks for the issue! There are a few places where we are hard-coding keybindings in the code (while working on a full solution for #20). Out of the box, `<C-PageUp>` and `<C-PageDown>` switch between active Oni processes, but I think I may be the only one using that functionality and it isn't well documented.\r\n\r\nThey are hardcoded here in `browser/src/index.tsx`:\r\n```\r\n        if (key === \"<f12>\") {\r\n            commandManager.executeCommand(\"oni.editor.gotoDefinition\", null)\r\n        } else if (key === \"<C-p>\" && screen.mode === \"normal\") {\r\n            quickOpen.show()\r\n        } else if (key === \"<C-P>\" && screen.mode === \"normal\") {\r\n            tasks.show()\r\n        } else if (key === \"<C-pageup>\") {\r\n            multiProcess.focusPreviousInstance()\r\n        } else if (key === \"<C-pagedown>\") {\r\n            multiProcess.focusNextInstance()\r\n        } else {\r\n            instance.input(key)\r\n        }\r\n```\r\n\r\nFor the `<C-pageup>` and `<C-pagedown>` bindings, we could do an interim solution while #20 is in progress:\r\n- Create __commands__ to represent these, like `oni.nextActiveProcess` and `oni.previousActiveProcess`\r\n- Create a VimL bridge for executing commands (like `OniExecuteCommand('oni.nextActiveProcess')`), and then in my `init.vim` I can include these bindings. Once the work for #20 is complete, I could include these in `config.js` instead.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297410848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297426161", "body": "Weird - I'm assuming by git version, you mean building from sources? Or did you install the dmg via the Releases tab (https://github.com/extr0py/oni/releases)?\r\n\r\nThe `npm` version is a bit outdated - I've added a deprecation page to the entry for `oni` on npmjs.org. It's strange that your config isn't loading, though. Might be worth putting a breakpoint in the `configChange` handler in `browser/src/index.tsx` to see what it is picking up in terms of `editor.fontFamily`.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297426161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297455249", "body": "Interesting - I wonder if it is picking up the right config file. I'll see if I can repro in OSX + tmux later on.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297455249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297456654", "body": "Thanks for the detailed issue, @unclechu ! Having the screenshots is very helpful.\r\n\r\nThe autocompletion issue may be related to #376. There aren't any tests with that logic with Unicode strings, so it's possible that the logic being used there doesn't handle Unicode characters correctly.\r\n\r\nThe other issue seems related to the rendering strategy - it would be helpful to have a separate issue for that. The DOM renderer creates an element for strings, and it is sized to fit the string - if it doesn't measure the unicode characters correctly and the characters are wider, it can cause that wrapping behavior.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297456654/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297459400", "body": "Yep, it looks like this is tracked by #246 (help on command line) and #247 (remote capabilities). I'll resolve this as a duplicate but let me know if there is something additional we should track. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297459400/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297460846", "body": "Ya, unfortunately it looks like `vscode-languageserver-types` has this error when we include via webpack, due to the way it is compiled. It doesn't impact the runtime behavior, so it's safe to ignore - would be nice if there was  a way to filter this out or if that module was made more webpack-friendly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297460846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297461737", "body": "Yep, seems like the same issue as #331 - just a different manifestation of it. Thanks for including the video, @unclechu , that's very helpful.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297461737/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297463213", "body": "Interesting, didn't know about `virtualedit` until now \ud83d\ude04 . Seems like it isn't working at all in Oni.\r\n\r\nI was curious if this was specific to Oni, and tried it out in neovim-qt.exe, which is working fine. Curious to see why this isn't working in Oni - I wonder if there is a conflict with some of the built-in settings.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297463213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297464586", "body": "Windows has a concept of an [IME](https://msdn.microsoft.com/en-us/library/windows/desktop/ee418266(v=vs.85).aspx), which lets you use extended character sets of change the keyboard layout. In theory this should work by default in the browser with input forms, but I'm guessing because we just pick up key events, IME doesn't work correctly.\r\n\r\n@saibing - would it be possible to get a video or screenshot of the IME you use that works outside of Oni? Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297464586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297466280", "body": "Nice, thanks @justinmk ! Look forward to checking this out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297466280/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297761948", "body": "Interesting, I haven't used `fzf` much. If anyone would be up for taking a look at this, `browser\\src\\Services\\QuickOpen.ts` would be a good starting point, particularly this code path:\r\n```\r\n    public show(): void {\r\n        const config = Config.instance()\r\n        const overrriddenCommand = config.getValue(\"editor.quickOpen.execCommand\")\r\n        const exclude = config.getValue(\"oni.exclude\")\r\n\r\n        UI.Actions.showPopupMenu(\"quickOpen\", [{\r\n            icon: \"refresh fa-spin fa-fw\",\r\n            label: \"Loading Files...\",\r\n            detail: \"\",\r\n            pinned: false,\r\n        }])\r\n\r\n        // Overridden strategy\r\n        if (overrriddenCommand) {\r\n            const files = execSync(overrriddenCommand)\r\n                .toString(\"utf8\")\r\n                .split(\"\\n\")\r\n            this._showMenuFromFiles(files)\r\n            return\r\n        }\r\n...\r\n```\r\n\r\nA couple of things to sanity-check:\r\n- Is `overriddenCommand` being set correctly?\r\n- Does `fzf` need arguments passed to it? We may need a way to update the `execCommand` string to incorporate the search arguments.\r\n- I wonder if the command is being executed from the correct working directory - it seems like we may need to set the working directory here for it to work as expected.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297761948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297762511", "body": "@bert88sta - \ud83d\udc4d , I agree, this seems like a natural time to even bring in a `keybindings.js` so we can stop baking in commands and start having them be configurable. This would remove a large chunk of if-statements especially in `index.tsx`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297762511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297769629", "body": "WIP to Fix #404 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297769629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297769682", "body": "WIP to Fix #377 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297769682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297772479", "body": "This was just merged in via @justinmk with this PR: https://github.com/neovim/neovim/pull/6583 . Look forward to integrating with this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297772479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297823778", "body": "Bummer! \r\n\r\nYou probably want to remove the npm-installed version of oni by doing `npm rm -g oni` (and potentially `npm rm -g oni-vim` might be around). \r\n\r\nOnce you've uninstalled the global installations, I'd recommend doing the following from the `oni` folder:\r\n- `git clean -dxf`\r\n- `git pull origin master`\r\n- `npm install`\r\n- `npm run build`\r\n- `npm link`\r\n\r\nThat should give you a clean slate to work with-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297823778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297828636", "body": "@unclechu , couple of follow-up questions for you:\r\n- I'm assuming you're running on Fedora25, is that correct?\r\n- Would you mind posting the `init.vim` with the `xnoremap` line that is problematic? I'm not able to repro these wrapping issues on Windows, but I'm wondering if it is specific to a font.\r\n- Are you using the default font with Oni or have you overridden it with `editor.fontFamily`?\r\n- Do you have a document I can reproduce the completion behavior on? Unfortunately the youtube video did not work for me.\r\n\r\nThanks for your help!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297828636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297849538", "body": "Weird, if you can post the error that would be helpful. Upgrade your node/npm versions may be helpful as well (or using `yarn` -> `yarn install`) if it is an error installing the NPM dependencies.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297849538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298008265", "body": "I experimented and dug around a bit, and it looks like VSCode implemented this a bit differently:\r\nhttps://github.com/Microsoft/vscode/issues/192\r\n```\r\n.monaco-editor.enable-ligatures {\r\n    -webkit-font-feature-settings: \"liga\" on, \"calt\" on;\r\n    font-feature-settings: \"liga\" on, \"calt\" on;\r\n}\r\n```\r\nI was hoping that this would enable a bit of finer-grained control over the behavior of the ligatures, to exclude some and not others, but it still causes the `fi` ligature to be rendered via Space Mono. So I tried out with Space Mono, and it doesn't help the situation there.\r\n\r\nLooking at Space Mono, the best bet is to disable ligatures for that font via `editor.fontLigatures` = false. It seems like it is mostly a stylistic font as opposed to a development font.\r\n\r\nI'm also tracking some extensibility to this with #412 - having CSS theming support for Oni plugins. With that, a plugin could do some more fine-grained control over text rendering too.\r\n\r\nI'll close this for now as I think the best bet for Space Mono is to use `editor.fontLigatures` false, but feel free to reopen if there is something I missed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298008265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298021481", "body": "WIP for #384 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298021481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298181818", "body": "This was a blocker for the C# autocompletion, which is the main feature implemented so far, so I wanted to get it in prior to pushing the release.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298181818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298181945", "body": "Hi @Waqar144 ,\r\n\r\nThanks for the issue report! A couple questions:\r\n- Would it be possible to get a screenshot or a gif/video if the repro? I'm wondering in particular how many entries are being shown in the completion dialog. Is it only a single item?\r\n- Can you please run `:set completeopt` in Oni and let me know what is returned? There could be a conflicting setting there.\r\n\r\nThanks!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298181945/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298205126", "body": "Looks like the build issues may be related to: https://github.com/electron/electron/issues/9323", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298205126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298209060", "body": "Fix #419 by including the needed dependencies", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298209060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298209419", "body": "Fixed by #418 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298209419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298241692", "body": "Fixed by #421 . However, there is still #423 that causes issues and should be documented.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298241692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298247657", "body": "Fixed by #415 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298247657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298251047", "body": "Seems like TSLint is working fine when built locally, but when used with the dmg, it is no longer working. \r\n\r\nThere isn't a clear error message in the console.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298251047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298251069", "body": "This is failing both for local build and DMG. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298251069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298251158", "body": "Getting this error message: \r\n```\r\n\"{\"jsonrpc\":\"2.0\",\"id\":0,\"error\":{\"code\":-32603,\"message\":\"Request initialize failed with message: Cannot read property 'split' of undefined\"}}\"\r\n```\r\n\r\nNot sure where the `split` is coming from. At some point, this was working - it seems like it could potentially be an Omnisharp bug, or an issue with the pathing / initialization parameters.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298251158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298251682", "body": "Looks like this is a regression of removing the `node` dependency - we weren't passing the full set of environment variables, and `path` was being used by `omnisharp-node-client`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298251682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298252683", "body": "Looks like the error message could potentially be getting swallowed by the `executeTsLint` function - should add an error handler and see if anything is bubbling up there.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298252683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298611101", "body": "Hi @gglanzani ,\r\n\r\nThanks for the issue! Ah yes, this is related to #332 .\r\n\r\nIf you want to use an `init.vim` file with Oni, you need to set the `oni.loadInitVim` value to true. You can do this as follows:\r\n1) Open Oni\r\n2) File -> Preferences - Edit Oni Config\r\n3) Add an entry as follows:\r\n```\r\n...\r\n\"oni.loadInitVim\": true,\r\n...\r\n```\r\n\r\nWithout this setting, `$MYVIMRC` isn't populated correctly. \r\n\r\nHope that helps!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298611101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298611358", "body": "It'd be nice to streamline this on Windows in the feature, by detecting this case and showing some actionable message to the user.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298611358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298612429", "body": "Hi @josemarluedke , cheers, thanks for reporting the issue!\r\n\r\nOut of the box, Vim / Neovim does not support the standard platform hotkeys for cut/copy/paste (Control/Command + c and Control/Command + v mean different things in Vim).\r\n\r\nI've been thinking about how to handle this as part of the goal of \"lowering the barrier to entry\" to modal editing. I believe that it makes sense to add support for the platform specific hot keys - I'm thinking of the following behavior:\r\n\r\n__Visual Mode__\r\n<Control/Command + c> - copy the selected text to the clipboard\r\n\r\n__Insert Mode__\r\n<Control/Command + v> - paste the clipboard text\r\n\r\nNeovim has clipboard management out of the box, so this potentially be implemented as just `inoremap` and `vnoremap`s in the default config.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298612429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298612597", "body": "The Edit Menu should be using the vim metaphors (yank and paste), but it might not be persisting them on the clipboard. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298612597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298620590", "body": "Fix #298 - Add basic integration tests", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298620590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298635706", "body": "Weird! With that flag set, it should be able to find $MYVIMRC.\r\n\r\nI just updated the binary for Neovim to 0.2.0 in the repo - you might want to try from the latest master. That fixes several Windows issues.\r\n\r\nAre you using a released build, or did you build from source?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298635706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298824650", "body": "Seems like packing a zip would need extra work, because by default macOS zip publishes to squirrel auto-updater.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298824650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298824716", "body": "Seems like the error now is a permission issue with the shellscript - need to make sure git tracks the executable permission: http://stackoverflow.com/questions/33820638/travis-yml-gradlew-permission-denied", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298824716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298964659", "body": "Fix #298 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298964659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298964823", "body": "Disabled Linux tests for now, it seems there are issues with the virtual display driver - and it will be more work to set up an install of Neovim on travisCI. Having validation across OSX and Windows covers a large surface area.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298964823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298966956", "body": "Thanks for the feedback, @keforbes, these are great points. I agree, there isn't really a clear answer here.\r\n\r\nI guess one option would be to set those mappings when we have the default plugin / Oni behavior active (controlled by the `oni.useDefaultConfig` flag). There is the unfortunate conflict with visual block mode and the usage of <Ctrl+c> in visual mode, but perhaps it is reasonable in terms of lowering the bar if it is documented. I'm leaning towards adding these mappings in the default config but disabled when the `oni.useDefaultConfig` flag is false... I'll keep this around a bit though to stew on it and see if there is any other feedback.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298966956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299063956", "body": "Starting to look at this in the context of #442 - a few initial blockers:\r\n\r\n- `PluginManager` and `NeovimInstance` are both associated 1-to-1 with each other. For multiplexing the Neovim instance, this will need to be decoupled. `NeovimInstance` isn't used too extensively in `PluginManager`, so it seems like it can be decoupled fairly easily. \r\n- Some pieces of UI would be global (ie, QuickOpen), whereas other pieces would be local to a particular window (like AutoCompletion) - they would need to start to be split up.\r\n\r\nNeed to think about how to streamline some of this architecture in light of this new model.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299063956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299183395", "body": "Thanks for the issue! Broadening the language server support is on the roadmap for the `0.3` release, so this fits into that. I haven't used `go` yet but would be fun to try it out.\r\n\r\nSounds like you've already tried to give a shot - feel free to create a PR and I can help you troubleshoot a bit as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299183395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299198282", "body": "This one got crazy to merge, so I ported over the work into a new PR: #444. Tracking the ideas around tab lines in #361.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299198282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299659786", "body": "WIP to Fix #443 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299659786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299666729", "body": "Started making some of the fixes for this in PR #445 . #379 tracks syntax highlighting, and #446 tracks specifying go-langserver path via config.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299666729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299669464", "body": "Cool, thanks for the info! It looks like that `gocode` provider supports Vim/Neovim out of the box - but let me know if there are issues with Oni. \r\n\r\nThere's an open issue here as well for sourcegraph's language server: sourcegraph/go-langserver#77 but doesn't look like much action there.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299669464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/300502585", "body": "Looks like it could be related to #399 - seems like we have a whole class of issues around `virtualedit=all`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/300502585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301082925", "body": "Hi @timeyyy ,\r\n\r\nThanks for looking through the roadmap! Sorry that there were not a lot of details about either of these features in the roadmap - I should have more information.\r\n\r\nHere are my thoughts on the areas you called out:\r\n\r\n## Plugin Management\r\n\r\nThe _Plugin Model_ for Oni is actually quite different from Neovim - superficially, JavaScript vs VimL is being used, but there are some larger architectural differences. In particular, my plan for Oni is to have it be an `nvim` multiplexer - essential an IDE with Neovim as its core editor, as opposed to just a front-end UI. This necessitates a fundamentally different plugin architecture because the plugin model has to be able to work with multiple editor / neovim instances. \r\n\r\nFor these reasons, the _Plugin Manager_ scenario for Oni would differ from Neovim in the following ways:\r\n- Because Oni plugins would live across multiple Neovim process , the lifecycle (timing between activation / deactivation, install / uninstall) would be different.\r\n- JavaScript plugins have unique requirements (resolving `npm` dependencies, native dependencies)\r\n\r\nBecause of this, I don't think a plugin manager in Neovim core would actually solve the problem for Oni. Likewise, Oni's solution doesn't really map back very well to Neovim, especially in terms of maintaining Vim compatibility.\r\n\r\nSolving the Plugin Manager problem in a general way for Neovim is actually a much more difficult problem than it is for Oni - because it has to appease an existing Vim community and be seamless in migration across the different plugin managers that already exists. And I don't believe the decisions and tradeoffs I'm making for Oni make sense in general for the established user base for Neovim. But if some of these concepts do make sense to bring back, I'm open to it!\r\n\r\n## Left Pane\r\n\r\nThe _Left Pane_ I have in mind for Oni is similiar to VSCode's left pane:\r\n![image](https://cloud.githubusercontent.com/assets/13532591/26000482/f9b4e4b0-36dd-11e7-94e4-a01c8b8b481c.png)\r\n\r\nIt's a poor name in the roadmap but essentially it's a quick launch panel that Oni plugins can hook into and expose various functionality (and, preserve keyboard accessibility sneak-style via #366). Left pane can mean a lot of things.\r\n\r\nI'd like to bubble up some convenience methods for opening up a file explorer, a search experience, Neovim's terminal, source control integration. Long-term, a debugger would be great. Maybe some custom specific tools like an embedded browser.\r\n\r\nFor this, I'm not sure it's something that makes sense in the context of Neovim. This sort of interface doesn't work well in a terminal UI (although some of the patched fonts do some intricate things for statuslines, etc). \r\n\r\nA good example of a feature that I believe would be useful for Oni and makes sense in neovim core would be something like multiple cursors: #184 \r\n\r\nA core implementation for that is much more valuable and robust than a UI-level implementation.\r\n\r\nI'm definitely open to reuse where it makes sense - I'll keep this issue open so that we can discuss if there are any other opportunities for reuse, or features that Oni has that make sense in the context of neovim . I hope that as I can get some more time I can make some contributions to Neovim directly :smile:\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301082925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301253763", "body": "Yes, this is a great point, it really hurts the polish and feel of Oni.\r\n\r\nI have this issue tracking some ideas around improving the load flow of Oni: #355 \r\n\r\nI'll be investing heavily in polishing and smoothing out the UI as part of the 0.4 milestone.\r\n\r\nI'll close this because I believe it is tracked in #355, but feel free to add any suggestions / ideas. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301253763/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301256053", "body": "> This could be taken into account, or we supply a simple api which can be composed to fulfill any use case.\r\n\r\nThe _any use case_ is pretty broad - I'm not convinced that an API that works well to fill in the gaps for Vim-ecosystem plugin managers will satisfy the use cases required for Oni. But I'm definitely open to discussing it. \r\n\r\nAs I get closer to looking at it for Oni, I'll dive a bit deeper and come up with the set of requirements I'm looking at, and we can look at it together and see how it might map to a Neovim API, so that we have a more concrete basis for that discussion. It'd be helpful to know what the API might look like on the Neovim side - I'm assuming it will be based on some of the most popular plugin managers.\r\n\r\n> Making things general/reusable is generally a bit more work. It is definitely worth it though.\r\n\r\nAgree in general, but it's important to be pragmatic. One pitfall I've seen is that sometimes, a feature will sound _superficially_ the same for a solution A and B - and it ends up being generalized into a _more complex_ solution, because the generalization ends up being the wrong abstraction to solve either problem, and both the generalization along with A+B end up more complicated than required -  which ends up making the solution take significantly more time to develop, carrying more bloat and complexity at the end.\r\n\r\nI've seen some of my friends startups fail with this - instead of focusing on the problem domain, they get caught up in generalizing to the extreme, and it becomes an inimical undertaking as they end up spinning their wheels instead of solving the actual business problem. For Oni, I view it in some sense as an experiment, and for an experiment, being able to iterate quickly and get feedback quickly is paramount. Right now, Oni has the luxury of being in the \"move fast and break things\" phase \ud83d\ude04 \r\n\r\nOf course, it's a spectrum, and on the other end of that spectrum is what you're describing - where a solution is just reinvented every time and that has cost in terms of duplication and maintenance as well. I see this in some other projects I'm involved in and it is very frustrating. Obviously that is not desirable either, so you have to find the right balance. It's usually not black-and-white, especially as software grows. \r\n\r\nIdentifying the commonalities and differences between the solutions can help guide that decision, which sounds like the next step for us.\r\n\r\n>Hit me up before you tackle this feature, we can discuss/pair and see what we can come up with. I also have use cases for a UI plugin manager one day.\r\n\r\nDefinitely! I really appreciate you proactively seeking this out - we'll continue to discuss and figure out the right solution. Pairing and collaborating sounds like a great idea.\r\n\r\nJust an FYI, in terms of timeframe, I likely won't be starting work on the plugin manager until ~September.  At that time, I'll put together a set of requirements from the Oni side and make sure we get together to discuss. Thanks for the time & thoughts around this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301256053/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301777918", "body": "Hi @HiCodin ,\r\n\r\nIs the `editor.fullScreenOnStart` configuration property not working for you? I'm wondering if there has been a regression from the fix in #195 \r\n\r\nAlso, did you build from source? Or download a release binary?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301777918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301778549", "body": "Using a lighter `msgpack` library, like `msgpack-lite` might be able to help here. The `traverse`/`decode` functionality is only needed in corner cases for the returned msgpack values, but the majority of the time we don't need it, and that is pretty expensive.\r\n\r\nAnother optimization, at least on Windows, might be to communicate over sockets vs stdin/stdout.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301778549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/302718136", "body": "Also bump up React version to 15.5 and bring in the `react-addons-perf` module for debugging extraneous re-renders.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/302718136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303367312", "body": "Cheers @mrWinston , thanks for the kind words! \r\n\r\nI've run into this issue every so often too, but forgot to log an issue for it - so thanks for opening it up and including the gif. Definitely a bug", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303367312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303368345", "body": "Fix #460 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303368345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303368591", "body": "Ah thanks for the clarification, @HiCodin \r\n\r\nYes, I agree, having a way to persist some of this state (like window position) on close and then reopen would be very helpful. I'll keep this open to track that. We can start with just the window position & size. I also changed the title as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303368591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303380283", "body": "Resolved by #461 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303380283/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304705474", "body": "Great tips, @keforbes ! Thanks!\r\n\r\nI was thinking about the `config.js` approach when I was looking at showing some notification UI for the language service providers - one challenge is that, with our current format (`js`), it might be difficult to write-back because it is unstructured. \r\n\r\n- Write-back to `config.js` - there'd be some interesting challenging issues here. It might be technically possible by parsing the AST and dropping in new config values, but I think this would be very difficult to get correct in general.\r\n- Use a separate json file (ie, like `persisted.json`) to store these persisted values. We could add an API like `setPersistedValue(\"editor.windowDimensions\")`/`getPersistedValue(\"editor.windowDimensions\")`. \r\n- Use the [localStorage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) . This provides a convenient way to read/write to a key value dictionary, but would only be available in the `BrowserWindow` process. Otherwise, it'd be similiar to the above.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304705474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304709819", "body": "@keforbes , I'm really impressed with how you take on these issues from a Linux machine (both this and the Windows installer issue!). Good find, it does seem like we'd need to leverage `osascript` to bump the privileges. I like the symlink strategy a lot. Thanks for looking into this, it doesn't seem like we're too far away from a solution.\r\n\r\n@jordwalke  - The separate package approach is interesting, thanks for the suggestion! I'd like to invest more heavily in this in general. There are lots of parts of Oni that could be split and modularized (sort of like how Atom is structured). Reasoning about the architecture this way is excellent for extensibility and helps in reducing couple / increasing cohesion. I've also been thinking about something similiar for the javascript-plugin extensibility story - being able to reuse NPM for that makes a lot of sense. \r\n\r\nThere are some things we'll have to think about in terms of leveraging NPM completely (at least on OSX I think you need to use `sudo npm install -g ....` which is super annoying... I didn't know there was a better way until you posted this on twitter: https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md \ud83d\udc4d ). So we might still need to go the `osascript` route to run the NPM command as admin, and do some checks to make sure this is there. And it's not a given that `npm` would be available, so we'd need to handle that case as well.\r\n\r\nAnother possibility would be to generalize this even further - like an npm package `add-to-path` that would have an API like:\r\n```\r\nimport { addToPath, removeFromPath } from \"add-to-path\"\r\n..\r\nconst pathToAdd = \"/Applications/Oni.app/Contents/MacOS/Oni\"\r\naddToPath(\"oni\", pathToAdd)\r\n..\r\n```\r\n\r\nIt'd be a helpful abstraction to hide the platform differences (ie, on Windows, maybe it runs some powershell script as admin, and on OSX, it uses osascript to create the symlinks), and would be useful even outside of Oni. \r\n\r\nI actually just checked and it turns out there is already an `add-to-path`, but it looks like it only updates the PATH locally, and only for Windows - bummer! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304709819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304711808", "body": "Remaining work:\r\n[ ] Validate on OSX (and ensure there are no regressions to C# / go language)\r\n[ ] Update documentation to describe installation steps", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304711808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304717137", "body": "Fix #465 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304717137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304720447", "body": "Fixed by #466 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304720447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305044935", "body": "There actually is a newline issue as well... It looks like the `\\r\\n` returned by the python language server isn't probably understood by `messageReader` from `vscode-jsonrpc`. Need to figure out if this is a bug in `pyls` or `vscode-jsonrpc`. I worked around it temporarily by changing `pyls` in the way it sends down the header info - but not sure if it is the proper fix.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305044935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305072013", "body": "Looks like the `\\r\\n` issue is due to python's newline conversion on Windows. The `\\n` gets expanded to `\\r\\n` on Windows (see: https://stackoverflow.com/questions/2536545/how-to-write-unix-end-of-line-characters-in-windows-using-python), so this ends up with `\\r\\r\\n`, which `vscode-jsonrpc` is not equipped to parse.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305072013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305261571", "body": "Thanks @keforbes! Yes, let's use #385 to track Rust language support, given that the python dependency is now addressed. I'll go ahead and close this out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305261571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305512915", "body": "A couple additional questions:\r\n- Which platform are you using, @beatscode ? (Windows, OS X, Linux)?\r\n- Which directory are you opening `oni` from? You can use `:pwd` to see.\r\n- Do you see any errors in the developer tools? You can open them using `Control+Shift+P` and then typing \"Open DevTools\"", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305512915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305517787", "body": "Nice catch, thanks @keforbes ! Embarrassing mistake by me... That 'off-by-one' case was a major pain point for completion. \r\n\r\nAwesome, looks like this addresses both cases in #376 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305517787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305518769", "body": "Looks like this is resolved by #468 - thanks @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305518769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305521073", "body": "Interesting - it might be specific to the font (using `Fira Code`) or the platform (Windows) since I believe the text rendering is different per-platform. In my case, the width per character gets measured as a fractional value (8.40625px) which might be causing some precision issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305521073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305536816", "body": "Tracking newline issue: https://github.com/palantir/python-language-server/issues/53", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305536816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305536945", "body": "Validated the server works well on OSX... only thing left is documentation \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305536945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305683239", "body": "Fix #453 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305683239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305683275", "body": "Fixed by #469 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305683275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305684184", "body": "Need to double-check Go & C# on OSX", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305684184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305816777", "body": "C# works fine, but looks like there is a regression on Go - potentially related to the `file:///` prefix. Need to investigate that. It would also be helpful to have a bit more logging in the console when things go wrong - looks like the `text/didOpen` call is hanging.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305816777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305982260", "body": "Looks great to me! Thanks for the quick fix on this, @keforbes \ud83d\udc4d \ud83d\udc4d \r\n\r\nIn terms of location of the code, I think we might eventually have to shuffle it a bit once #362 is implemented, because in that case there may be multiple `<EditorHost />` components, so we'd want to put the drag/drop handler on those individually. But until that is implemented this is great, and it will be easy to move eventually.\r\n\r\nI tried it on Windows and it works well!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305982260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305982510", "body": "Good question @keforbes - it's worth calling out and should definitely be documented.\r\n\r\nThis wouldn't preclude using airline and powerline - the default config wouldn't use airline/powerline (or vim's default statusline), so by default they would not be used. However, if the user did override the default (`oni.useDefaultConfig` with `false`) and used their own `init.vim` (`oni.loadInitVim` with `true`), then they would get both statuslines.\r\n\r\nMy plan is to add an extra configuration value, like `oni.statusbar.enabled`, that can be set, to support that scenario. If someone is using airline or powerline, they'd want to set this to false, unless they want two statusbars \ud83d\ude04 \r\n\r\nI'll add this configuration value, and also add information to the documentation. Thanks for calling it out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305982510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305983477", "body": "Thanks for logging the issue! I'm assuming you're on Windows?\r\n\r\nI'm able to reproduce as well on Windows 10. It looks like Oni gets the `disconnect` even from Neovim (which I believe means the neovim process died).\r\n\r\nThis doesn't reproduce in `nvim-qt.exe` - so I'm wondering if it is related to the default / core set of plugins we use for Oni integration. In particular, the buffer update might be causing problems for these large binary files.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305983477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305984627", "body": "@bert88sta Yes, good point, I don't think this has been called out explicitly.\r\n\r\n> I think the first thing we need to decide about is whether or not we're going to send keys on a \"round trip\" or whether oni should intercept bindings it recognizes.\r\n\r\nDefinitely. My plan is to handle the keys directly, for the keys that Oni knows how to handle. This is for a couple of reasons:\r\n- The round-trip through (Neo)Vim incurs a non-negligible delay (10-20ms), so if we can handle it directly, that helps performance.\r\n- There are some features I'd like to implement that would be outside of Neovim. Things like #366.\r\n\r\nBut Neovim has rich input handling, especially for the text-edit experiences, so for editing, I'd prefer to delegate to Neovim.\r\n\r\nI know this is heresy, but I've been looking at the Emacs model for keybindings. Emacs' functional approach combined with key binding is pretty powerful. The JS runtime has the potential to have similiar flexibility. Here's sort of an API I was thinking about:\r\n```\r\n// My plugin.js\r\n\r\nconst activate = (Oni) => {\r\n\r\n    const showRefactorMenu = () => {\r\n        Oni.showPopupMenu([\"Extract Method\", \"Sort Imports\", ...], doRefactor)\r\n    }\r\n\r\n    const doRefactor = (selectedOption) => {\r\n        // do some refactoring stuff..\r\n    }\r\n\r\n    Oni.keys.bind(\"<C-A-r>\", Mode.All, refactor)\r\n}\r\n```\r\n\r\nAs you mentioned, being able to also send keys to Neovim, or execute a function, would be pretty powerful too. Would just need to expose that in the `Oni` plugin object, which would be straightforward. That hybrid behavior - of doing stuff in Oni and having Neovim manipulate, etc is basically how most of the current UI enhancements are implemented anyway - it makes a lot of sense to expose those to keybindings and plugins, as I'm sure people can think of really creative things to do with that extensibility.\r\n\r\nI'd also like to have a way for people more comfortable in the VimScript world to be able to customize the Oni-facing functionality as well - this is sort of along the lines of your #1 suggestion:\r\n\r\n```\r\n// Some plugin exposes a 'command' - a named string mapped to the function\r\n\r\nconst activate = (Oni) => {\r\n\r\n    const showRefactorMenu = () => {\r\n        Oni.showPopupMenu([\"Extract Method\", \"Sort Imports\", ...], doRefactor)\r\n    }\r\n\r\n    const doRefactor = (selectedOption) => {\r\n        // do some refactoring stuff..\r\n    }\r\n\r\n    Oni.commands.register(\"command.refactor\")\r\n}\r\n\r\n// And then later, in `init.vim`\r\n\r\nnnoremap <C-A-r> :call OniCommand(\"command.refactor\", ..someOptionalArgs)\r\n```\r\n\r\nI'm holding off on this PR for now, to think through that model a bit more. Let me know if you have any ideas - thanks for your thoughts!\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305984627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305986469", "body": "Validated Go/C#/Python on Windows & Mac with latest changes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305986469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306051900", "body": "Will close this for now, but keep the branch around - will revisit as that project matures (or I get more time to contribute back to it)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306051900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306234711", "body": "Thanks @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306234711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306461889", "body": "Hi @roflcopter4 , thanks for the detailed issue!\r\n\r\nI did some research - it looks like bitmap fonts aren't well supported in the browser context. There was a similiar question about using a bitmap font in the browser context: https://stackoverflow.com/questions/5354935/how-to-embed-a-custom-bitmap-font-into-website-using-css\r\n\r\nBut I don't think that would solve your issue with anti-aliasing, as the solution there was to convert it to a web font (.woff) and use that.\r\n\r\nThere are a couple of possibilities:\r\n - __Possibility 1__ - Chromium (and then Electron) supports bitmap fonts, which would mean Oni gets the support for free. I don't see any plans for this, though,  currently.  In fact someone asked a similiar question about Atom here: https://discuss.atom.io/t/will-bitmap-fonts-eventually-be-available/10567\r\n\r\n- __Possibility 2__ - Oni supports it independently - this could be done by reviving a canvas-renderer strategy for the editor surface (which was actually the original render strategy). The canvas lends itself well to bitmap font rendering and would make this relatively easy to implement. The canvas renderer had poorer support for things like ligatures, though, and we'd have to document that.\r\n\r\nOption 2 is doable, it just depends on the level of interest. If anyone else would find bitmap support useful, please \"thumbs up\" this issue so we can track.\r\n\r\nAlso, do you have a recommendation for a bitmap font to test with for this issue?\r\n\r\nThanks!\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306461889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306462586", "body": "> I think we're definitely in agreement about the functionality of Oni-side\r\nbindings.\r\n\r\nAwesome!\r\n\r\n> This is one of those situations where I'm again going to tout object lookup\r\nas being superior to if or switch statements, especially if we're checking\r\n hundreds of key chords.\r\n\r\nYep, sounds like we're on the same page. Having dynamic / configurable bindings will necessitate object lookup anyway.\r\n\r\n> I know that vim round trip is slow, but if I wanted to use my leader key,\r\n(space bar) in a keybind, Say <Space>gb for git blame overlay.  How can we\r\navoid sending that to neovim?\r\n\r\nFor this scenario, we might need to have an Oni-side setting for a leader key (and potentially have it sync / integrate with the Vim-side configuration).\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306462586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306465862", "body": "Yes, good point, seems like we need to re-think that flow, and make sure we're re-invoking the external command as the search string is updated. And thanks @saibing for the help with the command line invocation!\r\n\r\nSeems like there are a couple of blockers here:\r\n\r\n## Issue 1: `overriddenCommand` not running from correct directory\r\n\r\n> If you look closely at that stack trace, fzf is created by junegunn and apparently the code is trying to access /Users/jg/. I'm not sure if that's relevant, I just find it odd.\r\n\r\n> Anyway, I can run fzf from the command-line so I'm not sure if Oni is doing something wrong or if fzf is making assumptions which aren't true when run by Oni.\r\n\r\nI think this is due to us not passing in the current working directory to `fzf`. We should be running the `fzf` command as if it is being run from the current directory open in Oni, but that's not being explicitly - I think that would explain this issue. This can be fixed by changing this in `QuickOpen.ts`:\r\n\r\n```\r\n        // Overridden strategy\r\n        if (overrriddenCommand) {\r\n            const files = execSync(overrriddenCommand)\r\n```\r\n\r\nto something like:\r\n\r\n```\r\n        // Overridden strategy\r\n        if (overrriddenCommand) {\r\n            const files = execSync(overrriddenCommand, { cwd: process.cwd() })\r\n```\r\n\r\nCan you try that and see if that resolves that first blocker?\r\n\r\n## Issue 2: The search string isn't passed to the overridden command\r\n\r\nIt seems like right now we just run `execSync` against the `overriddenCommand`.... But we don't inject the searchString. I think the convention in JavaScript is to have templated variables, like ${searchString}. It would be great to add support for this, so that we could specify the config like:\r\n\r\n```\r\neditor.quickOpen.execCommand = \"fzf -f ${searchString}\"\r\n```\r\n\r\nHope that is useful... thanks for your help looking at this, @keforbes ! FYI I also put a small bounty on this, it will be a nice issue to have resolved. \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306465862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306467222", "body": "Cool, it does look like that library is a bit more convenient in terms of syntax for Oni.\r\n\r\n> This reduced some code since every usage of find-parent-dir was joining the directory name and filename.\r\n\r\nExcellent!\r\n\r\n> Now, with that said, I don't know anything about Promises. I tried to emulate the Promise code found elsewhere in Oni but it's very likely I made a rookie mistake. \r\n\r\nYes, Promises are a little tough to understand at first...  These are a couple decent references:\r\nhttps://developers.google.com/web/fundamentals/getting-started/primers/promises\r\nhttps://davidwalsh.name/promises\r\nhttp://www.mattgreer.org/articles/promises-in-wicked-detail/\r\n\r\nThe cool thing is that they can be chained, which avoids having tons of nested callbacks. It seems like handling asychronous actions in JavaScript started with callbacks, then moved towards Promises, and is now moving towards async/await: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306467222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306468973", "body": "Added a couple comments about the Promises - we can actually simplify and remove the `Q.defer` and just return the values directly. Let me know if you have any questions!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306468973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306471164", "body": "Poked it and it passed now \ud83d\udc4d \ud83d\udc4d  Those intermittent download failures are annoying, though! \r\n\r\nI took a look and I'm a bit nervous about this change - just because I believe that there may be points downstream that could fail. For example, places that assume the plugin loading is synchronous. There is an example of that here in `PluginManager.ts`:\r\n\r\n```\r\n    private _createPlugin(pluginRootDirectory: string): Plugin {\r\n        const plugin = new Plugin(pluginRootDirectory, this._channel)\r\n\r\n        if (plugin.commands) {\r\n            plugin.commands.forEach((commandInfo) => {\r\n                this._commandManager.registerCommand(new CallbackCommand(commandInfo.command, commandInfo.name, commandInfo.details, (args?: any) => {\r\n                    this._sendCommand(commandInfo.command, args)\r\n                }))\r\n            })\r\n        }\r\n\r\n        return plugin\r\n    }\r\n```\r\n\r\nBasically, this assumes that the plugin metadata gets parsed synchronously to get the commands from it, and then registers those. So now that the plugin initialization is asynchronous, we'd need to wait to look at the commands until the plugin is fully \"activated\" - I think with your change this might not work as is expected (there's now a race condition). I think there could potentially be other repercussions here too, in terms of timing of events from Vim to having the plugin process it.\r\n\r\nThe timing is a bit sensitive already - I'm looking at cases where plugins get activated but don't get the buffer-enter event (maybe related to #122?). I think this might require a more holistic look across the plugin-loading pipeline, to make sure the new async behavior doesn't have any ripple effects", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306471164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306857771", "body": "[x] Add configuration values for pyls/go-langserver paths.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306857771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306860029", "body": "Looks like a duplicate of #4 - the icons definitely need some love \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306860029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306965561", "body": "Cool, you can actually build the `Oni.app` package from the command line.\r\n\r\nYou'd do the following:\r\n- `npm run install`\r\n- `npm run build`\r\n\r\nand then:\r\n- `npm run pack`\r\n\r\nto build the binary package. Once that's done, you'll have the dmg and zip in the `dist` folder - but you can also just run the app directly by calling `open dist/mac/Oni.app` from the root directory. You could also install Oni using the dmg, or copy to your /Applications folder - any of those should get you the proper icon.\r\n\r\nHope that helps!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306965561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306966975", "body": "Thanks for making all the changes, @keforbes ! I just had one other request to see if we can use the async version of `findUp` in tslint - since the promises are all set there, it should be an easy switch, and helpful for performance.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306966975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306971073", "body": "Thanks @bert88sta ! Ya, I like the way it is looking with the default theme too. I hope that I can get some more time to polish the rest of the UI - I want Oni to be sleek and fast \ud83d\ude04\r\n\r\n> The only thing that's going to suck (and this is something simple enough that i could probably help with it ) is color scheming. As a chore, once this is in, we're going to have to add probably 10-20 of the most popular color schemes and have the status line conform to them.\r\n\r\nAgree with the colorschemes - we still need to address #33, which will help this problem in general. I'm hoping that work can help us automatically leverage some of the colors, but you're right, it might help to make some of the other status elements more configurable.\r\n\r\n> In addition, we might want to throw in some of the typical stuff from powerline/airline, such as percentage scrolled, dirty marker, whether or not it's a new file etc.\r\n\r\nYa, for sure. For the dirty marker / new marker, I'd like to have a 'buffer list' above - a lot like the tabs in Atom. But we could potentially add some of these as optional items and flag them with configuration - and it's pretty easy to add new ones with the current API. Some other things I'd like to add (but might track in a separate issue) are the current git branch, the filetype + language server status, and error / warnings count. Lots of possibilities - I hope it's easy to extend and customize.\r\n\r\nAnd congrats on graduation, that's really exciting! \ud83d\udc68\u200d\ud83c\udf93 \ud83c\udf89 \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306971073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306972941", "body": "Awesome! @keforbes had some useful information in this issue: #346\r\n\r\nWe'd like to make adding to to the command line easier/more automated in the future \ud83d\ude04 \r\n\r\nIt looks like you could potentially symlink `Oni.app/Contents/MacOS/Oni` to `/usr/local/bin/oni` - does that work for you? This is basically the step we'd like to automate with #346 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306972941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307121073", "body": "Ah, I see. I was looking at how Atom handles this, and they have a special `atom.sh` file that they symlink: https://github.com/atom/atom/blob/master/atom.sh\r\n\r\nI think this might be a bit more reliable - we'd add an `oni.sh` that launches oni and exits the terminal process, and then symlink to that. Then, when we automate the symlink in #346, we'd symlink to `oni.sh` instead of the actual binary. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307121073/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307502893", "body": "Close - you can actually chain promises. Your code would work, it's just missing the `return` statement, so if it looks like this:\r\n\r\n```\r\n .then(() => {\r\n    return findUp(\"tsconfig.json\", { cwd: currentWorkingDirectory })\r\n })\r\n.then((project) => {\r\n```\r\n\r\nThis is nice because you can eliminate that nesting (which happens a lot with callbacks). \r\n\r\nThen, there is an even shorter version, because if you use a lambda and omit the `{` and `}`, the `return` is implied. So this form actually means the same as the one above... just a bit more concise:\r\n``` \r\n.then(() => findUp(\"tsconfig.json\", { cwd: currentWorkingDirectory }))\r\n.then((project) => {\r\n```\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307502893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307585220", "body": "Will use #485 to track this instead", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307585220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308099545", "body": "Sure thing! Thanks for taking this on, @keforbes , and addressing all th e feedback. I'll bring this in - it helps move us to leverage Promises (and hopefully, in the longer run, `async` and `await`).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308099545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308110485", "body": "Ya, seems like the `execSync` will always throw if the exit-code is non-zero, according to the docs here: https://nodejs.org/api/child_process.html\r\n\r\nAnd looks like the exit code for fzf is non-zero even in success cases.\r\n\r\nA couple options:\r\n- We could wrap the execSync call in a try/catch, and ignore the error code.\r\n- We could use an alternative to execSync (like `spawn` - sort of like how `tslint` spawns the command and gets a promise of the output). This means we'd have to restructure the code a bit, because the reducers aren't designed to work with an asychronous flow - we might want to move the asynchronous processing to QuickOpen, for example. This would be helpful for performance though, since `execSync` blocks while the shell command is executed, but using the asynchronous versions would be much faster.\r\n\r\nOne other issue I saw is that in the initial case - with `fzf -f` - there is an error of \"query string required\". We might need to make the command something like `fzf -f \"{searchString}\"`.\r\n\r\nThat's great that it is working for non-fzf scenarios, though!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308110485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/309250509", "body": "> I'm tempted to merge in this code since it does what it sets out to do. I think the errors with fzf are specific to fzf and we can always make the code asynchronous later. I think it's a step in the right direction at least. Although, if you can explain how you envision moving this code into QuickOpen I can certainly give it a try.\r\n\r\nSounds good. This is an improvement over the existing implementation since it seems like the setting wasn't working at all previously, so it's great that it's working now for `ls` and `find`.\r\n\r\nAnd apologies for the slow response time on this! Thanks for making the change & the investigation. I'll bring this in now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/309250509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/309791754", "body": "Thanks for reporting this, @saibing !\r\n\r\nI've seen random crashes on Windows 10 as well. It looks like that the Neovim process is actually closing, and then Oni quits in response to that.\r\n\r\nIt might be related to a couple of crashes reported in Neovim:\r\n- neovim/neovim#6248\r\n- neovim/neovim#4796\r\n\r\nThere's also the possibility that some of the work Oni is doing (like incremental buffer updates) is exacerbating an existing crash in Neovim. I need to see if there is more info I can get from the actual crash in Neovim.\r\n\r\nA couple questions though that might help narrow this down:\r\n- What does your `config.js` look like? Have you modified it at all?\r\n- Are you using any vim plugins?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/309791754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/309799658", "body": "No config option for it, but there definitely should be. Thanks for logging this!\r\n\r\nShould be an easy fix - I'll plan to include this in the next release (0.2.6).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/309799658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310106415", "body": "Fixes #492 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310106415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310181336", "body": "Nice! Thanks for that tip, @jordwalke ! I'm seeing an issue where the `Js` namespace isn't picked up (in both VSCode and Oni), so I'm wondering if it is a merlin configuration issue. Will see if that logging can help me get more info.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310181336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310221846", "body": "Thanks for the report, @Congee . Bummer - it looks like there are still cases where somehow the `$MYVIMRC` variable isn't set. It might be more reliable for Oni to directly open the `init.vim` directly instead of relying on that variable.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310221846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310224359", "body": "Yep, building using BuckleScript - I followed the getting started tutorial here:  https://facebook.github.io/reason/gettingStarted.html\r\n\r\nSo I have a project with a `bsconfig.json` and using `bsb -w` to compile. I replaced the `print_endline` with this: `let promise = Js.Promise.resolve(1);`, and it compiles OK, giving me:\r\n```\r\nvar promise = Promise.resolve(\"a\");\r\n\r\nexports.promise = promise;\r\n```\r\n\r\nBut in VSCode, I see this:\r\n![screen shot 2017-06-21 at 3 32 13 pm](https://user-images.githubusercontent.com/13532591/27409550-d6d66648-5696-11e7-8610-b274d7360a0b.png)\r\n\r\nWith the message `Unbound module 'Js'`.\r\n\r\nI'll try out the merlin logging - maybe that will give a clue. I wonder if I need to have a `.merlin` file for it to pick up the BuckleScript modules?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310224359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310225249", "body": "Think I need to a `.merlin` file - maybe https://github.com/BuckleScript/bucklescript/issues/939 is relevant. Adding `\"generate-merlin\": true` to my `bsconfig.json` doesn't seem to be quite enough.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310225249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310226684", "body": "Actually, the `.merlin` file is there now - will try and get the logs. I wonder if I need to call out the JS library. It looks like it is only including the `ocaml` library but not any of the `js` or `es6` ones. Probably something missing in my `bsconfig.json`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310226684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310228028", "body": "Working now - I restarted the language service and it is picked up (in both Oni and VSCode). Looks like the `\"generate-merlin\": true` was the only change that was needed in my `bsconfig.json`. I wonder if it is worth calling out in the \"Getting Started\" section of the Reason documentation?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310228028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310228265", "body": "BTW, @freebroccolo , nice work on the language server! It's great. All the problems so far have been on the Oni side \ud83d\ude09 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310228265/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310684582", "body": "Not nitpicky at all! This is excellent feedback, thanks for creating the issue!\r\n\r\nI was looking at how Atom handles autocompletion, and they have a pretty nice paradigm for this:\r\n![image](https://user-images.githubusercontent.com/13532591/27485702-a1912b6a-57e2-11e7-83dd-89aacd8b2aaa.png)\r\n\r\nAtom keep the details pinned on the bottom, and it definitely feels better - and I think you did a great job summarizing exactly _why_. If the UX is done right, the cognitive load on the user should be reduced, and keeping the mental model easy to understand and update is critical.\r\n\r\nI think the fix here is to clean up this UI a bit and add the details at the bottom, like Atom does. This should be a relatively simple change .I'm also drafting up a style guide to make sure I continue to refer back to these principles.\r\n\r\nThere are still rough edges around the UX (the scrolling scenario needs love - #166, flickering is painful - #463, and the typing latency still needs improvements - #229, #90).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310684582/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310745797", "body": "I'll need to fix some issues with the Mouse handling (the `Mouse.ts` strategy is catching all mouse events right now). In addition, I'll need to find a way to expand the completion details, so that users can open the details fully without needing the mouse.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310745797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310750408", "body": "Also need to look at integrating the scrollbar with the quick-info UI.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310750408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310795249", "body": "> I imagine one day being able to map keyboard shortcuts just to scroll the doc browser (which could apply to other scrollable dialogs too).\r\n\r\nDefinitely! This will be a good case to think about along with #20 and #408.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310795249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310795291", "body": "- [x] Need to fix the mouse interaction and remove the temporary hack", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310795291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310911762", "body": "Looks like the same issue as #414 - but not specific to YCM - basically all Vim-style completion is affected. This would be really nice to fix because this feels really broken for some using Vim autocompletion...\r\n\r\nIt looks like we might need to grab the `popupmenu_hide` event from Vim and close in that case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310911762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310911861", "body": "Looks like this is available in the build of Neovim that's included - `:help ui-ext-tabline`. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310911861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311086363", "body": "Yep, it looks like at the very least we'd want to hook the `popupmenu_hide` event around where we pick up the `popupmenu_show` event. There could definitely be some corner cases since the language-service powered completion gets fired a bit differently from the neovim-powered integration, worth testing around a bit to see if there is any badness. I think the worst case would be the completions would be overwritten by one strategy, if, for example, neovim-completion kicks in after the language service completion.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311086363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311094457", "body": "This will come about naturally as the plugins are modularized, and we really need to start doing that to see the proper way to separate this (so it doesn't make sense for this to be a stand-alone task).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311094457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311686755", "body": "> Alright, at least in my generic testing it should be good to go. \r\n\r\nAwesome! Look forward to picking up this PR.\r\n\r\n> We also need to stop showing a completion that is the same as the word, which I'm not sure how to do\r\n\r\nI can help with this piece. We do this for TypeScript / LSP already - I was thinking that handling `popupmenu_hide` might handle this, but there might need to be some special handling in Oni's completion layer.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311686755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311990457", "body": "Just a couple of follow-up question on my end (and thanks @bert88sta for drilling into the behavior)\r\n- How are you opening up Oni? Is it via the start menu or some other way?\r\n- What does \":pwd\" return? This is the current working directory Neovim knows about.\r\n\r\nRight now the Fuzzy Files / QuickOpen experience uses the current working directory from Neovim, and it defaults to wherever Oni was opened. \r\n\r\nIt sounds like the expectation here is to set the working directory along with opening the file, which makes sense to me. It doesn't really make sense for Oni to have the working directory stick around as the install directory when you explicitly open a file.\r\n\r\nMaybe a behavior we can start with here is that, if the working directory hasn't been changed (is the install folder), we should just change it with the first file that is opened - that would smooth out this experience.\r\n\r\nThis also aligns a bit with the `autochdir` setting in Vim/Neovim.\r\n\r\nA couple of other things I'm thinking about that don't have answers right now:\r\n- For projects like Node or C#, where we can determine a root folder, like a `package.json` or `*.csproj` respectively - would it make sense to be smart and look upwards to grab that folder? This is something a plugin could also handle, or the language client could handle, since it does this traversal anyway.\r\n- For multi-selection - default to the last open file?\r\n- Maybe it makes sense to have an `Open Folder` option that just changes the working directory?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311990457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311992591", "body": "@CrossR , Glad to hear Oni is making your Windows Neovim experience better, that's great \ud83d\udc4d \ud83d\udc4d  Thanks for trying it out and for the feedback! Really appreciate you opening up the issue.\r\n\r\nIt sounds like you dug in and have a PR for opening multiple files. It's definitely a scenario we'd like to support and is really common in workflows. I don't think there are any technical blockers, since as you mentioned there is the `multiSelections` property available on the electron dialogs. \r\n\r\n> If there is no file open should a new tab be made anyway and leave an empty tab, or should we open the first file in the first tab, assuming no changes have been made in that tab?\r\n\r\nGood question. As you mentioned you could make arguments for either behavior.  As an aside, I'm working on adding a visible tab list / buffer list in Oni:\r\n![image](https://user-images.githubusercontent.com/13532591/27693125-5f4a9f42-5c9d-11e7-9b5a-c8510833df31.png)\r\n\r\nI think that the first behavior - opening file in the first tab - is more natural in that context (otherwise you get an empty tab). \r\n\r\n> Wasn't sure if I was missing something that would let me already do this, or there was a reason it didn't work as (I) expected.\r\n\r\nThanks for checking - in general, we've been very incremental about adding features, and need help filling them out completely - so if something isn't working the way you expect, it's probably Oni missing something and not you \ud83d\ude04 . Glad you logged an issue - probably other people had the same question!\r\n\r\nAnd if you have a PR, that's even better - I'm very open to accepting PRs and happy to help you get it in. \r\n\r\nOh and I opened #506 to track the discussion around the Fuzzy Finder / QuickOpen - I figured we can keep this issue for a fix for the multi-selection, and then #506 to track the fuzzy finder problems. Likely they will be different code changes anyway.\r\n\r\nThanks again for trying Oni & logging the issue!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311992591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311994651", "body": "Thanks @adelarsq for logging the issue! Looks like Java wasn't tracked before - this would be great to integrate with. I know @keforbes has a lot of Java experience too.\r\n\r\n> Just to keep a note, since when finding some time I will help with this and #385\r\n\r\nAwesome, that would be great! There are starting to be several examples of LSP integration:\r\n- `vim\\core\\oni-plugin-python`\r\n- `vim\\core\\oni-plugin-golang`\r\n- `vim\\core\\oni-plugin-csharp`\r\n\r\nAnd unless there are bugs in our LSP Client, or there is extra behavior, the plugins tend to be pretty small:\r\n\r\n```\r\nconst activate = (Oni) => {\r\n\r\n    const command = Oni.configuration.getValue(\"python.langServerCommand\", \"pyls\")\r\n\r\n    const serverOptions = {\r\n        command,\r\n    }\r\n\r\n    const getInitializationOptionsAsync = (filePath) => {\r\n        return Promise.resolve({\r\n            clientName: \"python\",\r\n            rootPath: \"file:///\" + filePath\r\n        })\r\n    }\r\n\r\n    const client = Oni.createLanguageClient(serverOptions, getInitializationOptionsAsync)\r\n}\r\n\r\nmodule.exports = {\r\n    activate\r\n}\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311994651/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311995744", "body": "Awesome! That's really great. I've been missing have my git branch in the status bar, I'd be stoked to have this back.\r\n\r\nJust to give you an idea of my long-term vision - I'd like to split up pieces of Oni into subcomponents (kind of like how Atom does it). For example, move `oni-core-statusbar` to an npm package, and same with other plugins. And move some existing functionality into plugins / packages (like quickopen / fuzzy finder).\r\n\r\nFor git integration in general, I was thinking of creating an `oni-core-git` plugin under `vim/core`. To start with, this would be focused mainly on the statusbar. But then later I was planning on extending it a bit, especially to bring in things like diffing and git blame. \r\n\r\nSo if you're up for that - adding a new plugin (which you can start by copying `oni-core-statusbar` to a new folder `oni-core-git`) - that would be awesome. Otherwise, I think `oni-core-statusbar` is reasonable, because we can always split that out later.\r\n\r\nThanks for looking at it, excited to check it out. Keep me posted if you need any help.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311995744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311997198", "body": "Cool ideas! Time seems like a really easy one to enable - we could even include that in our default statusbar in `oni-core-statusbar` and enable it via a setting. It would be useful.\r\n\r\nE-mail and weather would be great ways to exercise Oni's 'plugin' system. I'm not actually sure how the e-mail one works - would we need to support authenticating with GMail/Hotmail/etc? \r\n\r\nWeather one seems straightforward, with a REST API we could populate that statusbar item. And there is at least a `sun` and `cloud` icon on font awesome, but maybe there are better icons to use.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311997198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311999208", "body": "> Sorry these are just basic questions haha. I like code, not architecture\r\n\r\nHaha not at all, the module / import system is pretty confusing in JavaScript as it is. Combine that with different strategies we have in TypeScript+Webpack vs JavaScript, and it is certainly a recipe for confusion.\r\n\r\nIt sounds like you're adding the functionality in `Git.ts` and then using it in the statusbar. You're right, you can't import that, but we can give access to it in other ways. In that case, we might want to extend the `Oni` object we expose to plugins to have those methods available. \r\n\r\nHaving the API available through `Oni.git`:\r\n- `Oni.git.isGitRepository(path)`\r\n- `Oni.git.getTrackedFiles()`\r\n- `Oni.git.getBranch()`\r\n- `Oni.git.onBranchChanged(callback)`\r\n\r\nwould be pretty cool / useful. We could add it on the Oni object in `browser\\src\\Plugins\\Api\\Oni.ts`. Let me know if you want help there.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311999208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312300439", "body": "> I've add the 2 line change to make Split and Tab open multiple files, I just need to swap it now so it will check if the current tab is empty and has no edits in. Any suggestions on how to do that?\r\n\r\nThanks for looking at this change! I'm assuming you're modifying `Menu.js` to handle multiple files coming back, specifically the callbacks from `dialog.showOpenDialog`:\r\n```\r\n                click: (item, focusedWindow) => {\r\n                    dialog.showOpenDialog(mainWindow, ['openFile'], (files) => {\r\n                        executeVimCommandForFiles(\":e\", files)\r\n                    })\r\n                }\r\n```\r\n\r\nThe `Menu.js` file is in the _main process_, which doesn't know about Neovim - all of that action happens in the _renderer process_. So unfortunately we can't make that more robust check to see if the current tab is empty / has no edits - but if you look at those definitions, like `executeVimCommand`, we actually pass a message to the renderer process like:\r\n\r\n```\r\n    const executeVimCommand = (command) => mainWindow.webContents.send(\"menu-item-click\", command)\r\n```\r\n\r\nThis message - `menu-item-click` gets sent to the __renderer process__, over in `NeovimEditor.tsx`, which can talk directly to Neovim to get this more robust check:\r\n```\r\n        ipcRenderer.on(\"menu-item-click\", (_evt: any, message: string) => {\r\n            if (message.startsWith(\":\")) {\r\n                this._neovimInstance.command(\"exec \\\"\" + message + \"\\\"\")\r\n            } else {\r\n                this._neovimInstance.command(\"exec \\\":normal! \" + message + \"\\\"\")\r\n            }\r\n        })\r\n```\r\n\r\nThe `_neovimInstance` over here lets us do a bunch of things - we can ask about the current window, you can evaluate a VimL block, etc. Check out `NeovimInstance.ts` (specifically, the `INeovimInstance` interface to see the capabilities / examples).\r\n\r\nSo in this case, what we might want to do, is create a new message type - like `open-files` that passes an array from `Menu.js` to `NeovimInstance.tsx` (main process -> renderer process). We could hook it up much like the `menu-item-click` event. Then we could use the `_neovimInstance` in the handler for our new `open-files` event to execute our more robust check to see whether we have a buffer open, and branch based on that. \r\n\r\nHope that helps! \ud83d\ude04 It's a lot of moving parts, so please let me know if you need any more details.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312300439/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312302257", "body": "Sounds like a great idea! For simple LSPs (which most are) that definitely seems sufficient. That would help generalize for now and we could implement more specific behavior later. It means we technically can support any LSP, and if there are more interesting pieces that need to be added, it could always be expanded out into a plugin. \r\n\r\n> Let me know if I'm crazy\r\n\r\nHaha, not crazy at all! I'm a big fan of doing the minimum work to enable a feature, getting feedback, and then refining... but sometimes I need a reminder \ud83d\ude09 Thanks for the suggestion! I think this will be the next LSP piece I focus on after the ReasonML integration - #389 .\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312302257/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312306212", "body": "> Am I just supposed to have Git.ts Imported in Oni.ts? I see lots of notifications getting pushed through plugin channels but that's it.\r\n\r\nYa, it used to be that the plugins ran in a separate process - and the plugin channels were an abstraction to communicate between the processes. There are pros and cons to each approach, but we moved to an in-process model. The plugin channel is still used, but you don't really need it - it's an abstraction that's necessary for the cross-process communication, but now that all the plugins run in the same process as Oni, it's just an extra layer. \r\n\r\nSome of the newer additions to the API don't use it - an example of a place where it isn't used is the configuration - so that might be a good model to follow for implementing Git on the Oni object.\r\n\r\nI'd recommend doing the following, and using the `Configuration` piece of the API to build this out, because that's pretty similar:\r\n- Define the interface in `definitions\\Oni.d.ts` - you'd end up with something like:\r\n```\r\nexport interface Git {\r\n    getBranch(): Promise<string>\r\n    // Define any other APIs you'd need to for your plugin here\r\n}\r\n```\r\n- Copy the `browser\\src\\Plugins\\Api\\Configuration.ts` -> `browser\\src\\Plugins\\Api\\Git.ts`\r\n- Import `Git.ts` instead of `Config.ts`, and export a class that implements the `Git` interface from `Oni.d.ts`\r\n- Add `git` to `browser\\src\\Plugins\\Api\\Oni.ts`. You'd need to create a new private variable (`private _git: Oni.Git`), import your Git API (`import { Git } from \"./Git\"`), and expose it from the Oni API - (`public get git(): Oni.Git { return this._git }`). \r\n\r\nHope that helps. It's really just using the `Plugins\\Api\\Configuration.ts` as a base, which is how the configuration API is defined for plugins. It's pretty similiar because that imports `Config.ts` (which is the core configuration logic) - we'd just be importing `Git.ts`.\r\n\r\nOnce these steps are complete, you should now have `Oni.git` available in the plugins to call.\r\n\r\nLet me know if you need more details on any of those steps in particular!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312306212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312441728", "body": "This would also be a good opportunity to add a scrollbar (tackle #166), and leverage something like `react-virtualized` to only render a subset of the list.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312441728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312443764", "body": "This looks like a great start, @bert88sta ! Nice job implementing the API. I just checked out your branch and I can see the `Oni.git` object that is exposed to the plugin now.\r\n\r\nOne convenient thing about the plugin API is you can actually test it in the console. Here's a gif of how I tested your API:\r\n\r\nI figured I'd detail it out just in case it helps you - these are the steps I took:\r\n![debugging new api](https://user-images.githubusercontent.com/13532591/27764043-d947b78c-5e44-11e7-8f52-79ef8330503b.gif)\r\n\r\n1. Opened the developer console (Control+Shift+P -> Open DevTools)\r\n2. The Oni plugin object is available in the console, which is really convenient - so I started by running `Oni.git` just to make sure that object was set up correctly.\r\n3. I then made sure `getBranch()` was actuallyi returning a promise\r\n4. I then ran `Oni.git.getBranch().then((branchName) => console.log(branchName))`, which logs out the result of the promise. As you can see, the branch name isn't quite what I expected (my branch is `pull-507`).\r\n\r\nI don't have a lot of \"debugging guides\" right now but there are lots of tips and tricks that can make life easier, I need to collect them somewhere!\r\n\r\nLooking at the code of getBranch() though, there is one problem with it - we're making a _synchronous_ call, which will block the UI and any keyboard interactions. This kills interactive performance, and it can be nefarious if you have a bunch of these synchronous actions happening sort of intermittently (like we might need to detect if a branch changes).\r\n\r\nI was researching this a bit, and another way we could get the branch name - that might be easier to make async - is to read from the `./git/HEAD` file in the repo (using the `fs.readFile` API - https://nodejs.org/api/fs.html) . This is actually what vim-fugitive does to get the branch (well, read the file at least). The other nice thing about this, is that we can watch the file for changes using `fs.watch`: https://nodejs.org/docs/latest/api/fs.html , and figure out when the branch has changed.\r\n\r\nJust some thoughts. I hope that helps. Great work so far! Can't wait to have my branch show up in the statusbar.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312443764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312447902", "body": "Checked and validated that there wasn't a regression in other language providers.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312447902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312449422", "body": "Fixed by #510 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312449422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312674586", "body": "Fix #513 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312674586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312699121", "body": "Workaround is to manually uninstall Oni on Windows.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312699121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312700466", "body": "VSCode actually does this - but for large files there is a large flash of unstyled content. My plan right now is to leverage the Vim syntax highlighting for fixed items - like keywords, block styling, strings, comments, etc - and use the `documentSymbol` request for more dynamic items, like variable names.\r\n\r\nBut ya, as soon as you go out of process, you always incur some latency - so you get that flash of unstyled content. The variable name highlighting is pretty useful IMO - but there could be a setting to disable it if it is too distracting. There are also ways we can look at optimizing the performance, too, across the pipeline in various ways (for using IPC vs stdio, to only requesting symbols for the active 'window', pre-emptively loading symbols for a doc, etc). It seems doable to minimize this, since it's not really noticeable in VSCode after the initial \"flash\".", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312700466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312700621", "body": "Fixes #379 as well with the latest changes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312700621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312733490", "body": "> AH! Notice I spelled \"abbrev\" with one \"b\". It works now!\r\n\r\nNice find! \ud83d\udc4d \r\n\r\n> My only concern with filesystem watching is if people migrate to a different project we're going to have to use a similar git command anyway to get the root git folder. There is an async version of exec from child_process, but I keep getting errors when I try to use it... Not completely sure about that.\r\n\r\nI think we could also look upward, recursively, to see if there is a `.git` folder - we wouldn't actually need to run a command. All git repos have a `.git` folder - so if we don't eventually find one, we're not in a git repo. In any case - whether use the file system or spawn a process - we'd want to use the async version of the APIs, so that they don't block the UI.\r\n\r\n> I'm also wondering (weloming suggestions) for what colors we should use, and how we should do status. I personally love the agnoster zsh theme for git things, but we can work on this. Hopefully I'll have some work done later today\r\n\r\nYa, this is a tough one - here's a quick mock-up I did:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/27807839-525c27ac-5ff8-11e7-84d9-76ca09ac85b5.png)\r\n(with the git branch slightly darker) - that's using the [fa-code-fork](http://fontawesome.io/icon/code-fork/) icon, a background-color of `rgb(20, 20, 20)`, and a foreground color of `white`. I think as long as it looks reasonable with the default theme it'll be cool.  When #33 comes in we can do some more interesting things \ud83d\ude04 \r\n\r\nHope that helps!\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312733490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312737758", "body": "Fixes #511 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312737758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312739439", "body": "I'm thinking for compile-to-JS languages, it might make sense to have an export like `live` that is available. This could be set as a configuration value per-language. There might be additional configuration needed, like the source/compilation path, for resolving imports.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312739439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312749039", "body": "Oh I see - sure, modelling that after the shell integration seems reasonable. We could start with just the branch and then add some things like files added/modified, files changed, etc. Modelling the coloring after some existing shell integration sounds good.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312749039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313128235", "body": "> It works for all cases except opening multiple splits whilst having no file open, and no modifications made.\r\n\r\nAwesome, sounds like great progress!\r\n\r\n> For splits, I think the changing of the buffer or the async nature of using Promises with _neovimInstance.command( ) causes splits to fail after the first file.\r\n\r\nWhat's the VimL you are using here? If you need to do major chaining / branching, you can potentially create a VimL function that we call directly from the UI layer to do the work. There's a few examples in `oni/vim/core/oni-core-interop/plugin/init.vim`. The `OniApiInfo` and `OniUpdateWindowDisplayMap` are good examples of ones that have sort of extended logic that were easier to implement directly in VimL. I hope to keep this layer relatively thin, though.\r\n\r\nHope that helps. Feel free to open up a PR, I'm happy to help take a look at it further if that still didn't solve the issue.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313128235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313420075", "body": "For sure - just as an FYI, there is wrapper I've been using in `src\\Plugins\\Api\\Oni.ts` for plugins called `execNodeScript` (this is specific to running node modules / javascript files though, but it uses `ChildProcess.exec` as well).\r\n\r\nThe tslint plugin, in `vim\\core\\oni-plugin-tslint\\lib\\index.js`, actually wraps the call in a promise:\r\n```\r\n        return Q.nfcall(Oni.execNodeScript, tslintPath, processArgs, { cwd: workingDirectory })\r\n            .then((stdout, stderr) => {\r\n\r\n                const errorOutput = stdout.join(os.EOL).trim()\r\n\r\n                const lintErrors = JSON.parse(errorOutput)\r\n```\r\n\r\nThe `Q.nfcall` is from the [Q](https://github.com/kriskowal/q) promise library, and converts a function that uses a callback to one that uses a promise. The (stdout, stderr) => { ... } is called when the promise is completed. This is convenient for other parts of the code because the promise gets chained.\r\n\r\nYou could also use a callback directly, like:\r\n```\r\nOni.execNodeScript(tslintPath, processArgs, { cwd: working Directory }, (stdout, stderr) => {\r\n// stuff that happens eventually, once the process completes - stdout would contain the output of the process\r\n})\r\n```\r\n\r\n(Oh, and `Oni.execNodeScript` is just a small wrapper around `exec`).\r\n\r\nHope that helps some. The async stuff can get complicated fast, let me know if you have any more questions.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313420075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313433029", "body": "I'm actually still seeing this on occasion, so re-opening. It's annoying when it does happen, because it looks like we're in insert mode!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313433029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313444027", "body": "Integrating the `LiveUpdate` will significantly help performance: https://github.com/neovim/neovim/pull/5269\r\n\r\nA major drain on performance is the processing of our `msgpack` messages, and in the case of buffer updates, we are sending the entire buffer in most normal-mode cases.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313444027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313478729", "body": "I'll close this out, since it doesn't affect the resulting build.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313478729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313491618", "body": "Tried it out and it works great for tabs! Thanks for putting this together and submitting the PR \ud83d\ude04 \r\n\r\nRegarding `getCurrentBuffer` - here's an example from `NeovimInstance.ts` in the `getSelectionRange` method: \r\n```\r\n...\r\n            .then(() => this.getCurrentBuffer())\r\n            .then((buf) => buffer = buf)\r\n            .then(() => buffer && buffer.getMark(\"<\") as any)\r\n            .then((s) => start = s)\r\n            .then(() => buffer && buffer.getMark(\">\") as any)\r\n            .then((e) => end = e)\r\n            .then(() => this.command(\"normal! gv\"))\r\n            .then(() => ({\r\n                start,\r\n                end,\r\n            })) as any\r\n```\r\n\r\nThis could actually be made a lot nicer with `async/await`, but basically getCurrentBuffer returns a `Promise<Buffer>` - and the `Buffer` interface lives in `Buffer.ts` and models the buffer object from Neovim's extensible API. It's not fully expanded, but it might be worth looking at that - it could be another option as opposed to all the logic living in VimL.\r\n\r\nHope that helps!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313491618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313548888", "body": "Logged this issue to track the Python issue with document symbols: https://github.com/palantir/python-language-server/issues/73\r\n\r\nFor now, I'll just disable `textDocument/documentSymbol` for python.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313548888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313865386", "body": "This should be addressed by #530 - please reopen if that fix does not address this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313865386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313866501", "body": "Need to do something similiar for when `find-all-references` fails.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313866501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313867769", "body": "Fixed by #531 .", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313867769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313881301", "body": "Thanks for sharing, @Galbar ! That looks solid and clean - I really like the approach you took!\r\n\r\n> The issue I found is that gitBranchIndicator.hide() does not hide the item.\r\n\r\nI just noticed this too while implementing #485, sorry about that. I have a fix in progress with PR #524 \r\n\r\n> PS: Note that cd and getBaseDir() are probably not cross-platform.\r\n\r\nWhich platform did you test on? I can check see if it works on others. I'm glad to see you are using the async version of `exec` \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313881301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314469361", "body": "> Glad you liked my approach, @extr0py! I tested it on Linux.\r\n\r\nCool, you're right, I think this may not work in Windows - but there should be an equivalent way. Instead of using `cd <dir> && ` in the exec command, you can actually pass the `cwd` parameter to exec to specify the current working directory - which should accomplish the same thing: https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback\r\n\r\n> Looking at this PR I see that the integration of git inside the Oni object is done in the new file browser/src/Plugins/Api/Git.ts. Looking throughout the project I found the file browser/src/Plugins/Api/Git.ts which also contains git functionality. To avoid duplication I think they should be bundled together for both internal and external Oni usage.\r\n\r\nDefinitely, it would be great to move this in a common place. Long-term, I want to take a more modular approach with Oni - splitting it up into smaller, reusable chunks. Moving Git to a common place that is usable both internally and externally is in line with that.  Thanks for thinking about this!\r\n\r\nOne possibility for this reuse is putting the git functionality on the `Oni` plugin interface, and making the `Oni` instance available internally too - it's basically 90% there anyway. There's a 'global' instance of `Oni` defined in `browser\\src\\Plugins\\AnonymousPlugin.ts` - we could just have a cleaner way of accessing it and reuse it globally. That way, anything defined on that API is reusable both internally and externally for plugins.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314469361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314470193", "body": "> ...if in init.vim you set it to automatically cd to a directory you desire then even though the pwd suggests you are at that directory the fuzzy search still works from the oni directory as if no cd happened. However you are actually at the new directory and if you cd up or down 1 directory then fuzzy search starts to work properly.\r\n\r\nOh, interesting, thanks for the note @kornabert . Oni listens to the `DirChanged` autocmd from Neovim - I wonder if in the `autochdir` case that autocmd isn't being triggered?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314470193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314495793", "body": "Thanks for making the changes. Just tried it out and its working great!\r\n\r\nLet me know if you were planning on making any other changes - otherwise I'll go ahead and bring this in \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314495793/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314828109", "body": "Thanks for the investigation, @keforbes ! That helps a lot - I didn't see that issue. I'll take a shot at it and see what's going on with that error.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314828109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314828240", "body": "Bringing this in - thanks for the contribution, @CrossR !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314828240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314937708", "body": "Will re-merge and start a new PR", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314937708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314938103", "body": "This is one of the largest responsiveness bottlenecks at the moment.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314938103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315129829", "body": "Cool, that's awesome you're using Oni at work!\r\n\r\nAnd yes, we should definitely look at continuing to improve performance. One key thing though is to identify the bottleneck, measure, and test whether your fix addresses that bottleneck. The chrome developer tools (included with Electron, if you use `<Control+Shift+P>`, `Open Dev Tools`, and then `Performance` tab) are really great for profiling!\r\n\r\nHere's an example of a case that prompted me to investigate the `msgpack` layer:\r\n![image](https://user-images.githubusercontent.com/13532591/28176391-092ffd5e-67ac-11e7-81c7-42a83d09c564.png)\r\n\r\nI was profiling a simple scenario (open a markdown file, and use normal mode commands - `j` and `k` repeatedly). The main bottleneck was in the processing the msgpack layer does in response to the message - it could take upwards of 10ms just to process the message for a large change, and a lot of that work wasn't actually necessary.\r\n\r\nSo I think a key thing here is:\r\n- Identify a scenario that is slow, and simplify it as much as possible. Is it that typing in insert mode is slow? Scrolling? etc\r\n- Acquire a trace and measure the bottleneck\r\n- Try a [tracer bullet](https://stackoverflow.com/questions/4047335/tracer-bullets-vs-prototypes) to test if the fix addresses the bottleneck\r\n\r\nJust worth investigating, as there may be other bottlenecks depending on what your scenario is.\r\n\r\n> I'm editing 700+ line scripts at work and I'm feeling the burn with the lag.\r\n\r\nYa, definitely, in many cases we send up the full file from Neovim -> Oni. There's actually work in Neovim core to enable incremental updates: https://github.com/neovim/neovim/pull/5269 - this would be awesome because it would really help that scenario! So it'd be worth leveraging that.\r\n\r\nThere are a couple of other bottlenecks I'm looking at - once the msgpack layer is addressed, it looks like the next layer is the rendering of our react components (we're re-rendering some too aggressively), and then the strategy for drawing the buffer (`DOMRenderer`) - especially in cases where a bunch of text moved, but didn't change (like scrolling or deleting a line). Past that, there's a 'built-in' latency just due to the architecture of Oni - since we have to talk to Neovim over a pipe, there's a built-in latency there. On the input side, some options would be to look at handling some keypresses (like keys in insert mode) optimistically, or even something more intense like compiling Neovim to webassembly. Fortunately (or unfortunately), there are lots of opportunities to improve performance and responsiveness here.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315129829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315140955", "body": "Merged in the `ocaml-language-server` integration, since that was blowing up (and most of it was really not specific to ocaml/reason, but just extending out the language server protocol support - since `ocaml-language-server` is the most complete implementation I've used so far).\r\n\r\nA few remaining items I'd like to look at before closing this:\r\n- Snippet integration (on par with what is supported in VSCode)\r\n- `refmt` integration (or indentation support from `ocaml-language-server`)\r\n- #533 - add support for `DiagnosticSeverity.Warning`\r\n\r\nThere are also some longer-term items I'd like to look at, potentially outside the scope of this item, like:\r\n- Integrated playground (this helped me a lot testing out reason & ocaml + bucklescript)\r\n- Moving some other Oni components to Reason, including some UI components. (For example, modularing out the `QuickOpen` experience and implementing as a reason-based plugin). I'd like for Oni to have a first-class Reason experience, on-par or beyond the TypeScript support.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315140955/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315408220", "body": "Glad you got it working! A few of the dependencies have updated, so you might need to kill all existing Oni instances, clear your `node_modules` folder, and re-run `npm install`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315408220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315546176", "body": "Interesting, I believe this is controlled by the `python.vim` syntax file included in Neovim / Vim (I don't believe we're doing anything beyond here).\r\n\r\nA couple clarifying questions:\r\n- Do you have a file this repros on?\r\n- Does it reproduce in Neovim as well, or only Oni?\r\n- Are you using the `pyls` language server?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315546176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315548139", "body": "Cool, could be - might worth looking at the `python.vim` or seeing if there is a minimal repro.\r\n\r\nIt might also be that the language server is giving us `else` as a token to highlight separately, which would cause some weirdness. Let me know if you need any ideas on where to look.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315548139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315549621", "body": "The overall strategy looks good to me! Long-term, we might be able to replace it with the `LiveUpdate` PR in progress in Neovim. In the short-term, though, only sending over the current line when in insert mode would be a big perf boost, especially for large files. We only send the current line over to the plugins, anyway, so in that insert mode case, there isn't a need to send over the entire file. I think this could help a lot with typing responsiveness in insert mode!\r\n\r\nA couple things we should look at before merging:\r\n- Fix the error causing Neovim to block load\r\n- Remove extra stuff around `last_cursor_line` and `last_change_tick`\r\n\r\nThanks @bert88sta for looking into this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315549621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315550296", "body": "Change looks great to me! Thanks @Galbar!\r\n\r\nThere are a few things we could look at as next steps:\r\n- @bert88sta 's feedback regarding additional status info (ie, files modified/uncomitted/etc) . We might be able to get some of this info from the output of the git \r\n- Detecting when the branch has changed, since currently we only update on entering a buffer (for example, a user changed branch in the terminal). We could potentially add an event on the Git shared object like `branch-changed` that the plugin could subscribe to.\r\n- A configuration option to enable / disable the statusbar (ie, `git.statusBar.enabled`)\r\n\r\nBut IMO we can tackle those points as separate issues and bring in the PR as-is, and continue to build on it. This is something I've missed in my workflow so I'm excited to have it back! Nice work! \ud83d\udc4d \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315550296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315553056", "body": "Fixed with PR #536 - after that change, the rendering (both the editor layer and the react components) are clear bottlenecks. Onto the next round of performance optimizations \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315553056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315618785", "body": "I just tried again - I'm still seeing the completion issues.\r\n\r\nHere's a gif of the __expected__ behavior on `master`:\r\n![inc-completion-current](https://user-images.githubusercontent.com/13532591/28249129-f705741e-6a04-11e7-9a9d-26e2a2a08e25.gif)\r\n\r\nNote that as the value is typed from `w` -> `wi` -> `win`, the set of completions is changed.\r\n\r\nHere's the behavior I'm seeing on this PR:\r\n![inc-completion-539](https://user-images.githubusercontent.com/13532591/28249136-0c2dead8-6a05-11e7-90aa-1e1bb8c6e3f6.gif)\r\n\r\nThis appears to be a regression from this change, so we'll need to fix this. \r\n\r\nI see that a failure in the `getCompletions`  code in the typescript language service, in this block:\r\n```\r\n        while (col >= 0) {\r\n            var currentCharacter = currentLine[col];\r\n            if (!currentCharacter.match(/[_a-z]/i)) {\r\n                break;\r\n            }\r\n            currentPrefix = currentCharacter + currentPrefix;\r\n            col--;\r\n        }\r\n```\r\n\r\nIt seems like the values in the current line are out of sync with the column value (so somehow the current line isn't making it all the way here, or something), and the `col` ends up indexing a value outside of the current line. Likely this is occurring further up, or their is some timing change that is impacting this code path.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315618785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315775711", "body": "> I'm going to take a wild guess and say that lastBuffer is supposed to be the whole thing, but is getting assigned to the single line that gets sent over from neovim. I don't know if this would throw an error or not\r\n\r\nYa, good catch! I think this logic isn't quite right in `BufferUpdate.ts`:\r\n```\r\n        this._neovimInstance.on(\"buffer-update-incremental\", (args: Oni.EventContext, bufferLine: string, lineNumber: number) => {\r\n            this._lastArgs = args\r\n            this._lastBufferLines = [bufferLine]\r\n            this._lastBufferVersion = args.version\r\n\r\n            this._pluginManager.notifyBufferUpdateIncremental(args, lineNumber, bufferLine)\r\n        })\r\n```\r\n\r\nSeems like `this._lastBufferLines` should be updated as:\r\n```\r\nthis._lastBufferLines[lineNumber - 1] = bufferLine\r\n```\r\n\r\nKind of like how it is updated in the `buffer-update` case above.\r\n\r\nI tried this, though, and there were _still_ issues... I did some debugging and tracked it down:\r\n![image](https://user-images.githubusercontent.com/13532591/28273852-3d240e3c-6ac4-11e7-86b9-161808318292.png)\r\n\r\nBasically the `bufferLine` is assumed to be a `string`, but it's actually an array. Then when it gets downstream to the language service provider, they try and treat it as a string but get wrecked.\r\n\r\nIt seems like it's being sent as an array from the VimL side in `init.vim` - maybe we can fix that so it is only sending the line?\r\n\r\nThe good news is it seems better after  I tried out this fix, and typing in large files is certainly much faster (I was testing on the built `oni/lib/browser/bundle.js`, which is ~57k lines).\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315775711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315778924", "body": "Cheers, thanks for tracking it, @Galbar!\r\n\r\n> Regarding the aditional status. I think it is a good idea but I would make it optional with a config (I don't really need that information there and it would take space in the status bar) and/or maybe make it a hover popup thing on the status bar item.\r\n\r\nAgree 100% - some users will prefer the simpler / less busy experience, so making the additional status optional would be ideal.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315778924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315779757", "body": "Thanks for reporting this, @badosu (and the screenshot!)\r\n\r\nI'm able to reproduce. I believe it's due to our DOM renderer strategy not properly cleaning up after the resize. I'm actually in that space now looking at rendering and performance optimizations, so I'll see if I can tackle this as part of those changes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315779757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315783664", "body": "Thanks for logging the issue! Sorry you hit this - that's bizarre (and frustrating)!\r\n\r\nTried this out, and I'm unable to reproduce on Ubuntu. I'll see if I can get an Arch Linux box to test it out there.\r\n\r\nA couple of follow-up questions to narrow it down:\r\n- What does your `config.js` look like? Are you using a custom `init.vim`?\r\n- What keyboard layout are you using? \r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315783664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315874257", "body": "Derp... this sure is a duplicate! Thanks for catching it, @Galbar ! I'll close this one out since #485 has a bit more info.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315874257/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315922113", "body": "Changes look good! Thanks for fixing it up. Once the conflict is resolved, I'll bring it in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315922113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315922978", "body": "Nice catch! I'm able to repro this. And cool background!\r\n\r\nIt looks like most of the autocmds we hook watch for cursor being moved - but in the case where the window scrolls, and the cursor doesn't move, the scrollbar isn't updated.\r\n\r\nA potential fix is to update the scroll state when we get the `scroll` action during `redraw`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315922978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/316060515", "body": "Thanks for making the fixes, @bert88sta ! Looks like it's working for me, and it certainly improves perf in insert mode for large files. Nice work, appreciate the contribution!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/316060515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317020884", "body": "Temporarily reverting this change, because it looks like there is a regression or a change in the completion behavior after `<` in `.tsx` files.\r\n\r\nFor example, if I'm typing in `NeovimSurface.tsx`:\r\n```\r\nexport class NeovimSurface extends React.PureComponent<R|\r\n```\r\n\r\nI'd expect completion to pop open. However, it seems that at least this case and a few others are broken after upgrading to TypeScript 2.4.1, and the completion dialog does not open in this case.\r\n\r\nNeed to check:\r\n- Is this an open / active issue in the typescript github repo?\r\n- Does it only impact `tsx` files, or does it also impact generics in `ts` files?\r\n- Did it start in 2.3.x or 2.4.x?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317020884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317104834", "body": "Yes, great suggestion. I'm hitting this too - sometimes it's difficult to know where the split boundaries are in the current implementation!\r\n\r\nI'd like to provide more control over the actual split window UI - borders, drop shadow, etc. And explicitly controlling the rendering here will allow us to do fancier things and more in-depth performance optimizations in the buffer rendering and responsive. Some of the thinking around this is captured in #362.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317104834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317195648", "body": "Fixes #547 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317195648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317209870", "body": "Some testing in insert mode:\r\n![image](https://user-images.githubusercontent.com/13532591/28494495-6a5e485c-6ee5-11e7-9093-10b363bef3f9.png)\r\n\r\nLooks like there is definitely some opportunity for optimization!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317209870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317284389", "body": "Fixed by #534 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317284389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317738866", "body": "Yep, unfortunately the current strategy is synchronous:\r\n```\r\n                // replace placeholder ${search} with \"\" for initial case\r\n                const files = execSync(overriddenCommand.replace(\"${search}\", \"\"), { cwd: process.cwd() })\r\n                    .toString(\"utf8\")\r\n                    .split(\"\\n\")\r\n                this._showMenuFromFiles(files)\r\n                return\r\n```\r\n\r\nThe fix here would be to switch to executing the search command in an async manner, and streaming the results to the QuickOpen UI. That way the UI doesn't 'freeze up', and results can be accessed as we pick them up from the search command. In addition, it's common to cache locally recent results.\r\n\r\nThanks for opening the issue! This is definitely something that needs to be addressed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317738866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317772917", "body": "PR #555 fixes the open new window issue, but hooking up the menu still requires additional fixes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/317772917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319117300", "body": "Made some improvements leverage `reselect` around the `BufferScrollBar`, `StatusBar`, and `Errors`.\r\n\r\nNext step is to check out:\r\n- `QuickInfo`\r\n- `CursorLineRenderer`\r\n- `AutoCompletion`\r\n- `Menu`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319117300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319354880", "body": "Resolved by #558 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319354880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319358833", "body": "This was added by #524 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319358833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319697704", "body": "That's fair criticism - with the phrase `Lightweight IDE`, I was considering it relative to Visual Studio or Webstorm. But I can see where someone coming from gvim wouldn't see that way.\r\n\r\nAnd I agree with your concerns. I thought I had some of these issues tracked, but I opened up #560 (relating to the installation package size / footprint) & #561 (CPU usage when idle).\r\n\r\nLightweight might be a poor choice of words, considering how small `gvim.exe` and `nvim-qt` are, in comparison. But it is certainly a goal for Oni to be ligher than it is today.\r\n\r\nFor now, I updated the tagline at the top of the project to read  \"An IDE built around Neovim\".", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319697704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319769181", "body": "> Sounds good to me! Great work, by the way.\r\n\r\nCheers, thanks! \ud83d\ude04 \r\n\r\n> I didn't necessarily mean to criticize, just was wondering what the mentality was there.\r\n\r\nFor sure, it's a valid point. Setting the right expectations is important - thanks for logging the issue!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319769181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320010987", "body": "Interesting, thanks for the update!\r\n\r\n> Through a long and specific process, a font can be modified to appear to be an East Asian Truetype font with embedded bitmaps which allows it to be displayed.\r\n\r\nThat's pretty bizarre... I did a skim through the article and it seems like there were some _very_ specific requirements for this to work.\r\n\r\n> To my great astonishment, it actually works.\r\n\r\nGlad it actually worked, and that someone had already converted your font!\r\n\r\nOne thing to note is that in the latest release (0.2.7), I've also switched Oni back to the canvas render strategy by default, for performance reasons. But it's unlikely that would've changed here, since supporting the bitmap font is actually up to Chrome's renderer.\r\n\r\nUnfortunately I don't know too much about Chromium's rendering internals, but perhaps there is some infrastructure in common with WPF in terms of resolving or rendering the fonts. It is interesting though that both Electron & Visual Studio exhibit the same behavior here. Glad you thought to try it in Oni, too!\r\n\r\nIn any case I'm glad you found a workaround, and thanks for taking the time to reply with your investigation and the working font - I'm sure that will be useful for others!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320010987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320019938", "body": "Thanks for logging the issue, @josemarluedke (and for the great screenshot).  Glad this is tracked! It's a very visible bug and certainly hurts the polish and usability of the app.\r\n\r\nIt seems like there are a couple issues here:\r\n\r\n- The `title` element is wrapping - we should add the `white-space`: `nowrap` style to the title to accomodate this. I think this would be enough to solve the issue in the screenshot.\r\n- If there is a description, we should set a `min-width` to some value - like perhaps `300px`?\r\n\r\nBoth of these could be updated in either `/oni/browser/src/UI/components/QuickInfo.tsx` and `/oni/browser/src/UI/components/QuickInfo.less`\r\n\r\nOne other issue I notice is that if the quickinfo is near the edge of the screen, it gets truncated:\r\n![image](https://user-images.githubusercontent.com/13532591/28931550-5a017994-782b-11e7-8f18-f319ef8550a1.png)\r\n\r\nThis is due to the sizing logic we have in the `QuickInfo` component:\r\n```\r\n        const innerCommonStyle = {\r\n            \"position\": \"absolute\",\r\n            \"opacity\": this.props.visible ? 1 : 0,\r\n            \"max-width\": (document.body.offsetWidth - this.props.x - 40) + \"px\",\r\n        }\r\n```\r\n\r\nWhen the cursor is close to the edge, the `max-width` becomes small! That's something we could take a look at separately, though. I think what would be ideal here is to have some fixed width, and use a triangle 'beak' to point at the relevant location... something like this:\r\n![image](https://user-images.githubusercontent.com/13532591/28932010-e9b9e548-782c-11e7-9b2c-fd406ae59f62.png)\r\n\r\nIf you're up for taking this on, or any pieces of it, that would be great! Let me know if there is anything I can do to help, or if you hit any road blocks on the way.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320019938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320038893", "body": "Thanks for making this change @josemarluedke . Looks great to me!\r\n\r\nAnd good call on using `pre` instead of `nowrap` - the experience is much better in that case where there are line breaks in the title string.\r\n\r\nI'll bring this in once the build has completed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320038893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320044546", "body": "Merged - thanks for your contribution, @josemarluedke !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320044546/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320317694", "body": "Thanks for the idea, @cyansprite ! Having `QuickOpen` show files from the install directory is almost never what the user would intend, or expect, so showing bookmarks or projects set in the config file sounds like a great option. I like the idea a lot!\r\n\r\n> is this possible to make a global var/envionrment var when installing?\r\n\r\nWe can actually figure out the install directory based on the value of `process.execPath`. For example, for Oni, installed in Windows, `process.execPath` is `C:\\Program Files (x86)\\Oni\\Oni.exe` on my machine. The nesting is a bit different for OSX and Linux, but in all cases, we can derive the install directory from this variable.\r\n\r\nSo it sounds like there would be 3 parts to this:\r\n1) Figure out the install directory, as described above\r\n2) Add a configuration setting for project paths. Maybe something like `project.paths` or `bookmark.paths`. The place to add this would be `oni/browser/src/Config.ts`.\r\n3) Update the QuickOpen logic to check for the install directory (using the logic in #1), and if that is the case, popup a menu showing the bookmarks / projects specified in the config. Most of that logic is in `oni/browser/src/Services/QuickOpen.ts`, in the `show`  method.\r\n\r\nThanks for offering to hack at it - if you want to give it a shot, that would be great! Let me know if get stuck or need help.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320317694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320319554", "body": "Fixes #361 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320319554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320321884", "body": "Resolved by #557, which adds support for this, along with configuration values documented in the readme.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320321884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320342987", "body": "Oh, interesting! There was a change to the `main` process which gets shared between instances - so you might need to close all instances of Oni for the resize to work correctly. It now uses this thing called a `ResizeObserver` that requires a flag to be specified on the browser, which happens in the main process:\r\n__main.js__\r\n```\r\n...\r\n    const webPreferences = {\r\n        blinkFeatures: \"ResizeObserver\",\r\n    }\r\n...\r\n```\r\n\r\n If there was an instance  of Oni opened, it wouldn't get that flag, and resize wouldn't be hooked up.\r\n\r\nI use `killall Electron` in OSX to clean between builds. Let me know if you still hit it after running that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320342987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320344978", "body": "I split out #566 from this - which is specifically adding an \"Open Folder\" option to the menu. This could be done separately from the items called out above (adding projects / bookmarks), so I thought it made sense to have a separate issue", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320344978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320448334", "body": "Put a bounty on this in case someone is interested in checking it out, as it sounds like it is impacting several people:\r\nhttps://www.bountysource.com/issues/44356173-weird-scrolling-behavior-when-scrolloff-is-set-to-a-non-zero-value\r\n\r\nThere are a few places to look in terms of investigation:\r\n- `browser\\src\\neovim\\NeovimInstance.ts` - check out the `msgpack-rpc` messages we receive from Neovim in this scenario\r\n- `browser\\src\\Screen.ts` - manages the state of the screen, and it can actually be queried at runtime\r\n- `browser\\src\\Renderer\\CanvasRenderer.ts` - if the state of the screen is updating correctly, then it's likely a problem with the render strategy.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320448334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320448547", "body": "Using @josemarluedke 's fix and it's a much nicer experience now! \ud83d\ude04 \r\n\r\nI was going to close this out, but there's still an issue when it gets clipped near the edge of the screen - I'll leave this issue open to continue tracking that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320448547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320448970", "body": "> Perhaps when this happens we could set off an async task to gather up the files (git ignore in mind) and cache these files, \r\n\r\nSounds reasonable! As a side benefit, this would also help significantly with `QuickOpen` performance - if we could cache those results instead of having to ask git or the tool of choice everytime.\r\n\r\n> I'm working on a neovim plugin for searching, replacing and destroying, I can look into how to integrate that with Oni (is there a way to integrate python and typescript? I can try converting it), and the maybe add some kind of caching system after I figure out the open folder thing.\r\n\r\nVSCode actually has something similiar... Their search functionality is powered by a tool called RipGrep, which they package via npm as: https://www.npmjs.com/package/vscode-ripgrep . It's actually built in Rust but you could use this strategy for any language that can compile cross-platform.\r\n\r\nThe problem with Python is it's not always guaranteed there's a python runtime (at least on Windows machines), so I've been avoiding writing core functionality in Python.\r\n\r\nIt might make sense to create a standalone binary (at least if it fits the scenario you're looking at) - that way it can be leveraged between Oni, Neovim, or even other editors like Atom/VSCode. Otherwise of course any web language would work!\r\n\r\nI'll try and send out a PR of the 'Open Folder' option to change the working directory, so that we have an entry point in which we can build out some of this additional functionality.\r\n\r\nA good experience around searching, replacing, and destroying would be great - that's something I always struggled with in vim/neovim!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320448970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320449565", "body": "> @extr0py Can you assign me?\r\nI don't know how assigning works, I've never worked on github with anyone.\r\n\r\nIt's weird - looks like only collaborators (so myself & keforbes) show up in the assignees list. Looks related to this github issue: https://github.com/isaacs/github/issues/100\r\n\r\nBut it's great to have you working with us \ud83d\ude04 \r\n\r\n> for now I'm using this \"chain\"\r\nhttp://fontawesome.io/icon/link/\r\n\r\nPerfect! We'll probably need to experiment a bit and see what an intuitive experience for this is, but I think the chain represents the bookmark/link idea.\r\n\r\n> I have it working but when building the exec path is pointed to electron under the oni github directory, is there a way for me to package it and download it to ensure it works?\r\n\r\nYes, just depends which OS you're on. I'm assuming you've done a build (`npm run build`) prior.\r\n\r\n__Windows__\r\n\r\n- `npm run dist:win`\r\n- `npm run pack:win`\r\n\r\nAfter those two commands, you should now have a setup `exe` in your `oni\\dist` folder\r\n\r\n__OSX & Linux__\r\n- `npm run pack`\r\n\r\nYou'll find the output in the same place - `oni\\dist`.\r\n\r\nI use these a lot when testing the installer scenarios. Let me know if you have issues getting those work.\r\n\r\nI'll take a look at the PR shortly!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320449565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320450435", "body": "Definitely! There are a few open issues in terms of key bindings:\r\n#20 , #366, #404 \r\n\r\nBut the case where the keybindings go through Oni (and don't round-trip through Neovim) is actually the simplest.\r\n\r\nExposing this as a setting would be a good solution in the interim while that's being worked out. Perhaps something like `keybindings.nextMenuItem` and `keybindings.previousMenuItem` would be reasonable for now? I definitely see these hardcoded keybindings as being an annoyance... so having a short-term solution that we can iterate on seems reasonable to me.\r\n\r\n---\r\n\r\nJust to give some ideas of what I'm thinking in terms of input, longer-term, is something a bit more general, like for this case:\r\n`Oni.map(\"<C-n>\", \"menu.nextItem\")`\r\n\r\nBut also be able to map to arbitrary functions:\r\n`Oni.map(\"<C-Left>\", () => Oni.windows.focusLeft())`\r\n\r\nAnd access functions exposed by plugins:\r\n`Oni.map(\"<C-Enter>\", () => Oni.plugins.orgModeForOni.toggleTodo())`\r\n\r\nAnd give some helpers to make doing transformations easier, something like:\r\n(this is a pointless example,\r\n`Oni.map(\"<C-J>\", Oni.helpers.transformLine((line) => line.toLowerCase())`\r\n\r\nA few other considerations I'm thinking about:\r\n- Exposing Oni commands to Neovim (and vice-versa) - the interop between Oni/Neovim is the most interesting piece (#20 touches on this)\r\n- Handling commands for non-Vim/Neovim features (#366)\r\n- Handled chorded commands in Oni\r\n- Handling different modes / filters for commands\r\n- How these are specified in existing `config.js`\r\n\r\nPerformance is critical, and I want to spend some time looking at how Emacs/VSCode/Atom/Sublime handle key bindings.  In my opinion the Vim-way of handling keybindings is confusing... it took me longer than I would like to admit to understand `noremap` vs `nmap` \ud83d\ude04  Another goal is to make it easy to iterate - create very light-weight plugins in my config.js that I can extract out as plugins to share with others. \r\n\r\nSorry for the wall of text, just wanted to share what I was thinking at the moment", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320450435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320453642", "body": "> Okay the run dist:win and pack:win it's not working debugging as to why right now, will make another commit and update PR. Thank you!\r\n\r\nBummer, @cyansprite - let me know if you're getting an error message or something. I can help you troubleshoot a bit!\r\n\r\n> Also we should check if ~ because i doubt the user would ever want that as well.\r\n\r\nGood call.. both #554 and #177 are related to this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320453642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320453836", "body": "Created a PR to add the open folder option (#570) - it just changes the working directory at the moment.\r\n\r\nI think one additional item that might be useful is that, since there is now the buffer/tab bar, it might be more useful for the statusline to show the current working directory, instead of the current file.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320453836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320456381", "body": "Cool, thanks for taking initiative to start this, @cyansprite ! Appreciate it! \ud83d\ude04 \r\n\r\nOne question I had - I think the default cause for this will be that the user _does not_ have any bookmarks set. If we bring up the open-bookmark experience, would it just show an empty list? I'm wondering if we can smooth out that initial experience.\r\n\r\nSome options:\r\n- We could prompt the user to open a folder\r\n- We could show some experience that describes how bookmarks work\r\n\r\nI think this will be a really common scenario when a user downloads Oni and opens it for the first time, without any bookmarks set - I want to make sure that is smooth & intuitive.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320456381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320460210", "body": "Hi @hoschi ,\r\n\r\nThanks for the detailed write-up and descriptions! The screenshots were really helpful in terms of visualizing the idea.\r\n\r\nIMO I really like the experience you describe - I believe I saw something before sort of like it (I think perhaps it was [LightTable](http://lighttable.com/)). This is exactly the sort of concept that I would like to experiment with in Oni, and __exploring new paradigms of editing code__ was really a motivating factor for creating Oni (yet-another-text-editor).\r\n\r\n> My project (called NFBE, still searching for a better name) syncs\r\nthe code of a function editor to the file (editor) in (near) real time, so all other\r\ntools like test runners, compilers, ... can still do their jobs without knowing that\r\nthe user don't edit files, instead just a small part of it.\r\n\r\nVery cool. This sounds like a great architecture, and it is something that Oni could handle as well (it already has affordance for sending incremental updates to the language service), and the plugin infrastructure would be able to handle this as well, in the same way that it handles edits today. There would be some changes required but it is definitely possible.\r\n\r\n> It also allows a new world of intelli sense.\r\nBy allowing to be more \"white space\" by shrinking the editors and not render\r\nthis white space lines (starting with a \"~\" in vim), one can go even further\r\nand open up related function editors automatically\r\n\r\nI really like this idea! One challenge I had with the Reason integration is that, the language service gives some interesting information with the function (typing), but I didn't have a place to put it - having this extra space would allow for interesting scenarios. I could also see show test case status, or as you mentioned, a live React component next to the code you are editing, to see the changes real-time.\r\n\r\nI also like that you allow file editors to be side-by-side with the function editors. This will be important in terms of helping users branch out from their \"comfort zone\" into those worlds. \r\n\r\nI'd be happy and excited to help you experiment with this idea in Oni, and I think that it is doable - the main work right now is to continue to decouple the window rendering / layout from Neovim, and encapsulate it. \r\n\r\nThere are a few workstreams I'm looking at:\r\n\r\n- Part 1 - Markdown preview in Oni (#49) - this is the first step of the window management decoupling, which creates a non-Neovim window in the editor.\r\n- Part 2 - File explorer experience in Oni - this will be a proof-of-concept in terms of hosting multiple neovim processes in Oni, and hosting it in a separate window.\r\n- Part 3 - Splits with multiple neovim processes\r\n\r\nOnce Part 3 is in place, the foundation would be set for implementing this NFBE concept.\r\n\r\nThe two bullet points you call out - not having a fixed-height, and being able to hook custom save logic - are definitely doable, we just need to figure out the right design and how it fits in with the rest of the editor infrastructure.\r\n\r\nThanks again for sharing your idea @hoschi , I really enjoyed reading your post! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320460210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320468060", "body": "@hoschi - Here's the light table video that your proposal reminded me of: [Light Table - a new IDE](https://www.youtube.com/watch?v=H58-n7uldoU)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320468060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320513500", "body": "Cool, looks like good progress!\r\n\r\n> and don't ask why it's another commit on top of it... I'm in a rush >.>\r\n\r\nNo worries, I squash the commits anyway when I merge, so don't feel too much pressure there \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320513500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320513525", "body": "Sorry, didn't mean to close, hit the wrong button! Look forward to seeing it in action.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320513525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320518741", "body": "Brought in a change to have the statusbar show the working directory, as well as to open the 'Open Folder' dialog if clicked on.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320518741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320518853", "body": "> Also I will look into converting to typescript.\r\n\r\nThat would be awesome! The statusbar plugin would be much easier to work with (especially around the JSX elements) with typescript. \r\n\r\nI added a change to show the working directory instead of the full path, and hooked up the click handler to bring up the open folder dialog in #570 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320518853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320519333", "body": "> I found Light Table when it was in an early stage and they said they want to do what I did, but then switched away to that \"we build a new programming language to make this all happen\" and so I started something that works with already used languages like JavaScript.\r\n\r\nYeah, that's a bummer... I was reading up on it yesterday, because I was curious what happened with it. It certainly had some ambitious ideas, and it's interesting that they decided to bail and create a new language.\r\n\r\nI think, though, that these core ideas - REPL-based development, live evaluation of variables, breaking code into chunks besides files - are powerful and useful in existing languages. And all of them are directly applicable to anything in the JS ecosystem (JavaScript, TypeScript, Reason/BuckleScript, PureScript, ClojureScript, etc..). It's great that you're still pushing for it \ud83d\ude04 \r\n\r\n> That said, I'm a professional JS freelancer ... but don't know much about VimL.\r\n\r\nI'm in the same boat - I work primarily in TypeScript and have wasted a TON of time with VimL. I prefer Vim/Neovim's editing paradigm, but I'd like to edit my configuration in JavaScript (or similiar).\r\n\r\nYour next steps sound great! On my end, the API surface for the cursor position & getting buffer content is already there. The setting buffer content is _mostly_ there (via the \"Format Document\" command), but will need to be expanded. \r\n\r\nThe main issue will be setting up the UI to be generalized and more decoupled from the Neovim, especially in exposing the window management in such a way to not need a fixed height, navigating between windows, etc - I'll look at that on my side. This will be a natural progression from the other window management projects (file explorer, etc).\r\n\r\nI'll keep this issue updated with the progress.\r\n\r\n> So, thanks again and I'm really happy that Oni makes this integration possible and that you like the idea in general \ud83d\ude0d\r\n\r\nCheers, thanks for trying out Oni and for taking the time to share your idea!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320519333/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320525262", "body": "Fixes #561 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320525262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320525895", "body": "This should've been a smaller PR - but needed to plumb the `directory-changed` event to the plugin layer, as well as expose the `executeCommand` method.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320525895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320526001", "body": "> I will test it on linux today and also make a .gif to show it off.\r\n\r\nSweet, a .gif sounds great! I just merged in my change to add `chdir` (#570), I hope the merge isn't too bad for you", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320526001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320687232", "body": "Thanks for the screenshots, @hoschi ! I have seen this occasionally, but not able to reproduce it consistently. I think the default color scheme hides it a bit - when I switch to another color scheme, the problem shows up more. So your screenshots were really helpful. Which colorscheme are you using, btw?\r\n\r\nThis is certainly a regression from the switch from DOM Rendering -> Canvas Rendering. It looks to me like there might be a rounding error when we're drawing / clearing some of the rectangles around text.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320687232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320687926", "body": "In regards to the underscore - it looks like the text measurement may not be completely accurate. For the canvas rendering strategy, the character sizing has to be precise - I believe the character measuring logic might not be handling descenders correctly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320687926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320708506", "body": "> Looking into what strategy to use\r\n\r\nCool! I think the most important thing here is to be able to replace the `execSync` in `getTrackedFiles` and `getUntrackedFiles` - that'd be the first step.\r\n\r\nThe other part is, the way the Menu is currently structured, is it sort of expects to have all the items in one-go. I was thinking about changing the API a bit:\r\n- Have an option to show some sort of 'loading' experience, so that the user knows that it is loading. Right now, we do that with an extra menu option, but it'd be nice to have this baked into the UI as something separate.\r\n- Have the ability to add items as we discover them - this will make the experience much quicker and less painless, and is what most other fuzzy-finders do.\r\n\r\nIn addition, another goal would be to add caching, so that we can show items we've seen before right away.\r\n\r\nThanks for looking at this! Hope that helps - keep me posted if you have questions", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320708506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320708626", "body": "Trying this out right now - thanks for the gif! \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320708626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320709252", "body": "@hoschi - interesting idea! I didn't think about this. Yes, it would definitely be doable, we'd just have it overflow to the next row. \r\n\r\nPerhaps we could make it an option - I think I would prefer the look of a single-line of tabs, but I could see where some would prefer this. Thanks for the suggestion!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320709252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320713650", "body": "Tried it out by running the packaged executable on Windows. Cool, looks like the functionality is working great! I was able to add a bookmark and open it.\r\n\r\nA couple of suggestions / ideas:\r\n\r\n### First round experience\r\n- Can we change the text for the  no-bookmarks menu option to read \"Add Bookmark\" and add detail text that reads \"Select this to open configuration and add a bookmark.\"\r\n- Could we add a menu option, in the initial case, to also \"Open Folder\" (to hook in the functionality\")?\r\n\r\n### General\r\nThat's cool that the bookmark defaults to the 'explore' experience. I wonder if that makes sense for 'Open Folder' too, at least until Oni gets a first-class file explorer experience?\r\n\r\nCould you please also update the README.md to highlight the functionality? It'd be great to have documentation on:\r\n- the new setting (`oni.bookmarks`) \r\n- the new entry point (`<C-0>`)\r\n\r\nThanks for putting this together! Look forward to having this in the next release \ud83d\udc4d \r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320713650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320758792", "body": "Yep, that's good feedback! Thanks @keforbes - I think it lines up with what @cyansprite mentioned in terms of next spite in the comments for #554:\r\n\r\n> I'm thinking about how we use quickopen and about files, bookmarks, and was playing around with an idea similiar to fzf.vim where quickopen will become an interface or abstraction and we have a bookmark , file , folder,\r\nBuffer(s) lines, etc quick open. Trying to figure out if that would be a preferred strategy also adding files as they load instead of batch loading.\r\n\r\nIn other words, it sounds like we could not 'special-case' the bookmarks but show them alongside files (as well as buffers). Now that we have 'Open Folder' functionality, we could potentially only show/search files if the user has _explicitly_ opened a folder. There's a precedence for this - as its how VSCode behaves. I think this would help the experience because you'd have to opt-in to the degenerate cases (specifically opening the Oni install directory folder, or the home folder), as opposed to just being surprised that Oni is scanning everything.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320758792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320932976", "body": "@cyansprite - sorry, just saw your comment here!\r\n\r\nWe do not explicitly redraw on `FocusGained` - we might though if there is something in an autocmd that causes Neovim to ask for a redraw (like printing a message, changing line number format, etc).\r\n\r\nResize would likely be a separate issue - this PR had some changes related to resize: https://github.com/extr0py/oni/pull/557\r\n\r\nWhen you say latest build, is it the latest __master__ or the latest downloadable build in the `Releases` tab? If its on __master__, feel free to open up an issue for it! Otherwise, there have been quite a few changes since the last binary release, so it might be fixed in master now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320932976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320933269", "body": "@hoschi , thanks \ud83d\ude04 That one was relatively straightforward and had been on my backlog anyway.... so figured it was time to go in. Appreciate you logging the issue!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320933269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320933776", "body": "Thanks for logging the issue, @badosu !\r\n\r\nThis is related to the popover issue in #526 too (for QuickInfo). The positioning determination should be generalized, and leveraged for both autocompletion and quickinfo.\r\n\r\nIn the case you showed where autocompletion is hitting the bottom, it should open upwards so it isn't clipped.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320933776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320938008", "body": "I've been trying to experiment a bit and look at a simpler logo - something a bit abstract.\r\n\r\nHere's one prototype I came up with:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/29071446-89c880e8-7bf8-11e7-8d91-5b6380d9b767.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320938008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320941919", "body": "Ah, thanks for all the details, that's helpful!\r\n\r\nThe latest master tries to use the `ext_tabline` option which came in Neovim 0.2.0.\r\n\r\nIt's a bug though that Oni isn't more graceful in this case (like, letting you know that it requires it). We had some UI previously for that but it looks like it's not getting triggered in that case - I'll check that out.\r\n\r\nIn the meantime, is it possible to try upgrading to Neovim 0.2.0?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320941919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320943695", "body": "I'm also taking a look to see if we can more gracefully handle older versions of Neovim by doing feature-existence checks (for example, in this case, everything _should_ work except for vim-style tabs..)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320943695/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320964684", "body": "Good catch, makes sense to me!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320964684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320967629", "body": "@cyansprite , thanks for the feedback!\r\n\r\n> it's really pretty but I don't think neovim when I see it,\r\n\r\nI think it's actually okay for the logo to be a bit more \"abstract\". It sets an expectation that, even though Oni is built around Neovim, there may be some differences (for example, plugins authored in JavaScript). I think this is an important consideration - if someone opens Oni and expects `nvim-qt`, they may be disappointed (ideally, if Oni is done right, they'd be _delighted_ by the changes - but that won't be every case). Because the icon is such a small canvas, it can be tough to fit in everything!\r\n\r\n> What does Oni mean to you?\r\n\r\nActually I didn't realize the Japanese word until later when I googled it \ud83d\ude04 Originally in my mind Oni was an acronym (which is why I used to capitalize it as ONI) - and it stood for __O__ pionated __N__ eovim __I__ DE. I like the meanings though, and I think they are cool / fitting\r\n\r\nHere are some of the design considerations I had for the logo (i drew up like 20 or so the other day, this was the only one that made it to be finally baked);\r\n- _Colors_ should be evocative of Neovim. I wanted to preserve the green / blue to be consistent with the Neovim logo. The default colorscheme also uses these green & blue for insert and normal mode in the status bar.\r\n- _Clean_, _simple_, _modern_ - these are design goals for Oni - although we haven't met these yet..\r\n\r\nI used the triangle to represent the vim core - the foundation for the editing experience. \r\n\r\nAnd the orbiting circle to represent electron (since Oni is basically a vim core - powered by Neovim - plus electron functionality outside).\r\n\r\nOther than that I just want something simple, sleek, that looks like it is at-home in the OSX dock.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320967629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320979620", "body": "Here's a draft of a headline / splash image as well:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/29077903-f07ae028-7c0d-11e7-928e-e1fcdd5de1e3.png)\r\n\r\nI used the [Orbitron](https://fonts.google.com/specimen/Orbitron?query=orbi&selection.family=Orbitron) font to convey sort of a futuristic / modern / high-tech feel.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320979620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320982971", "body": "@hoschi - I just tried on my Ubuntu machine, which was running nvim 0.2.0-dev - so I guess it came in 0.2.1. Sorry about that. \r\n\r\nI have PR #583 to query the neovim version and not try to set `ext_tabline` if it isn't supported. This fixes the issue on my machine - hope it works for you too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320982971/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320983921", "body": "For the main scroll scenario - scrolling a Window in Neovim - we actually handle that really outside the browser infrastructure. So the passive event listeners unfortunately won't be helpful there.\r\n\r\nThere are a few proposals in #88. The bottleneck at the moment is rendering - we basically re-render _every line that changes_, which since most lines move in a scroll, is a lot of rendering!\r\n\r\nThere are definitely some ways we can improve that, though. Canvas even supports a way to translate a section of the canvas, which would be worth trying out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320983921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320986583", "body": "@cyansprite - great progress! \ud83d\ude04  Very cool!\r\n\r\nIs it possible to show the files as they are loading? It would be cool to be able to start selecting while the list is populating.\r\n\r\n> Also I may implement to select more than one file\r\n\r\nCool!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320986583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320988081", "body": "Ya, right now, the cursor in Oni is implemented completely outside of Neovim (aside from the positioning information).\r\n\r\n__Long-term__ my goal is to enable _skins_ / _styling_ - like customization beyond just colorschemes. In other words, I'd like enough customization here to enable something like [atom power mode](https://atom.io/packages/activate-power-mode) for Oni.\r\n\r\nI could see customization easily happening via CSS, by exposing a set of canonical styles on the cursor element.\r\n\r\nThere are a few discussions around this:\r\n- CSS Theming: #412 \r\n- Colorscheme synchronization: #33 \r\n\r\nIn the meantime, though, we should be respecting the colors and state Neovim gives us for the cursor. The defaults are unusable on a light colorscheme, unfortunately.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320988081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320993961", "body": "This was added by #570 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320993961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320994114", "body": "Sure, `keybindings.js` sounds like a good place for it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320994114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321001808", "body": "It's actually pretty straightforward in this case to pick more reasonable colors for the cursor, since we stash the current foreground / background color as part of screen rendering.\r\n\r\nUsing those gives me this for `solarized8_light`:\r\n![image](https://user-images.githubusercontent.com/13532591/29081704-179221e4-7c18-11e7-9db2-872b7f5500a0.png)\r\n\r\nPutting together a PR now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321001808/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321034271", "body": "Nice, thanks @keforbes ! \ud83d\ude04 Great to hear.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321034271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321274975", "body": "@cyansprite - I'm planning on bringing this in as part of the next release (0.2.8).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321274975/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321276226", "body": "> We would kill the need for a special case scenario, since the user wouldn't mean to open those folders, and in the case someone does want to search through their home directory we could have options to ignore .files/.dir and ignore binary files, and since I'm converting it to async this should be feasible.\r\n\r\nThat sounds great! The special case scenario doesn't sit well with me, in retrospect, because there is a lot of explaining you have to do to a user to tell them how the feature works and what the expectation around it is. Being able to say \"You need to Open Folder before your files show up in QuickOpen\" is pretty easy to explain.\r\n\r\nYour plan sounds great, I really like the idea of saving the folder and tracking so that it can be easy to get back to it.\r\n\r\nIn terms of the Open Bookmarks - I wonder if, to keep it simple, we could just always show the bookmarks too in QuickOpen? Otherwise, I'm okay with the default key sequence.\r\n\r\nThanks for following up on this, @cyansprite ! Looking forward to all the QuickOpen improvements! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321276226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321292310", "body": "Awesome, thanks @cyansprite ! I hit this a bunch in my workflow", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321292310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321293112", "body": "`lodash` seems pretty huge too - we should only include the subset needed, and remove it from `node_modules` entirely - it's getting double-packed, both in `node_modules` and in the webpack bundle.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321293112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321297853", "body": "Good catch... It's really confusing to have 'Open...', 'Tab Open..', 'Split Open...', AND 'Open Folder...' - especially when we now have the buffer line here.\r\n\r\n> I'm not sure what benefit there is to having both Open and Tab Open given that they seem to do the same thing\r\n\r\nRight, it's confusing... especially in the context of making Oni inviting to 'new' Vim users - a tab means something very different in the vim-world versus in most other editors...\r\n\r\n> I guess my recommendation is to just remove Open and keep the Tab Open functionality. Though if we do that we should probably rename Tab Open to just Open.\r\n\r\nThis sounds good to me. It alleviates the confusion, a new user would understand what's going on... and it also behaves the way a vim-veteran-who-uses-tabs would expect (at least initially). \r\n\r\n> Also, it looks like any files opened using the fuzzy finder follow the Open code path because those files are ignored by gt as well.\r\n\r\nSeems like we should be consistent - it's confusing that two different high-level gestures ('Open File') have a different outcome. To be consistent above, seems like we should use `tabe`.\r\n\r\n> Due to how vim handles buffers and tabs it's hard to figure out what the correct behavior SHOULD be\r\n\r\nRight, Oni adds some extra confusion here. IMO I believe Vim-style tabs are confusing for new users (because they don't map conceptually to what users think of as tabs in other programs / editors - they're really window _layouts_), so I don't necessarily want to optimize for them. I also think that the vim-tab story will potentially get more confusing as multiplexing is implemented in #362. However, if we can get reasonable behavior that works for vim-tabs as well (like in the open cases), there's no reason not to support that (and advanced Vim users that prefer a tab workflow can set the `tabs.showVimTabs` option, and presumably they'd know enough to be able to wade the confusion..)\r\n\r\nSo here's the summary of changes I read from above:\r\n- Implement @keforbes suggestion to consolidate `Open` and `Tab Open` to just `Open`. I'd also like to change it to `Open File` just to be crystal clear.\r\n- Change QuickOpen to open a tab, so we have consistent behavior. It might be good to refactor this into a common command so that we can share the code path (like `oni.openFile`).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321297853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321299918", "body": "Oh ya, thanks for logging this issue!\r\n\r\nI think one quick way to fix this would be, in the `browser/src/Plugins/Api/Configuration.ts`:\r\n```\r\n    public get onConfigurationChangedEvent(): IEvent<void> {\r\n        return this._onConfigurationChangedEvent\r\n    }\r\n\r\n    private _onConfigurationChangedEvent: Event<void> = new Event<void>(\"oni_configuration_changed\")\r\n\r\n    constructor() {\r\n        Config.instance().registerListener(() => {\r\n            this._onConfigurationChangedEvent.dispatch(null)\r\n        })\r\n    }\r\n\r\n    public getValue<T>(configValue: string, defaultValue?: T): T {\r\n        return Config.instance().getValue(<any>configValue) || defaultValue\r\n    }\r\n```\r\n\r\nThis object gets created for _every_ plugin, and it _always_ starts listening to configuration changes... even if there is no listener registered.\r\n\r\nI think it might be good instead to only start listening the first time we get the _onConfigurationChangedEvent (lazy init).\r\n\r\nI don't think this particular object makes sense to be a singleton, because we basically pass it to the plugin via the `Oni` instance in the `activate` method.\r\n\r\nOne thing I'd like to move away from though, is using the Node `EventEmitter` class - and use the typed `Event/IEvent` objects in the code. You get better completion with those, and it's easier to document as opposed to a bunch of strings.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321299918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321302453", "body": "Wow, thanks for the gif and putting it together so quickly \ud83d\ude04 \r\n\r\n> If you like it, I think we should just always show files regardless if the folder is opened...\r\n\r\nI do like it, it shows the user that the 'bookmark' feature is available. The only concern I have is that, we might continue adding items here - it won't be clear to the user what things they need here. I think it also might be a bit confusing how 'Bookmark' differs from 'Open Folder'. But I'm okay trying it out and then refining it!\r\n\r\n> If you like it, I think we should just always show files regardless if the folder is opened...\r\nAsync of course, tracking the folder is kind of weird... on startup we chdir, so we would have to add\r\nthe special case for on start up, and then what if the user opens from command line? Do we respect that as a folder or not?\r\n\r\nI'm thinking these might not need to be mutually exclusive. We could have the behavior of - if a folder is opened, show the files, otherwise, show an 'Open Folder' option. It seems like to me we'd want to handle opening from a folder in the command line the same as if they had selected 'Open Folder'.\r\n\r\nSo I think in that case we'd still need the special case of the install directory - if the working directory is the install directory, treat it like there was no 'open folder' action.\r\n\r\nMy goal is to keep things as simple as possible for the user (reduce the _cognitive load_ of the experience). \r\n\r\nAnother thing I'm thinking about later is having a special start screen for Oni, if there is no file opened - that would show things like opening QuickOpen, adding a bookmark, maybe starting an improved vimtutor (#430), etc.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321302453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321319622", "body": "@benjamin-rood - thanks for letting us know! Yes, the `LiveUpdate` should offer big performance improvements for us... especially in cases when we are sending the whole buffer over (like, any normal mode operation).\r\n\r\nJust a couple of questions:\r\n- Are you seeing input lag for particular gestures? (Typing in insert mode, moving in normal mode, scrolling?)\r\n- What OS are you on?\r\n- How big is the file?\r\n\r\nIn addition, are you seeing any lag on small files?\r\n\r\nWant to make sure I'm capturing everything in my profiling.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321319622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321326903", "body": "At least right now, there is an `Oni` object created for _each plugin_ (and then each of those `Oni` objects creates that `Configuration` object, which listens to `Config.ts`). \r\n\r\nSome of it is over-complicated, because previously, all the plugins were hosted in completely isolated contexts. I moved away from that now and I'd like to move towards  having a common `Oni` object that is shared between the plugins - this would allow a model where plugins could define shared or common functionality (kind of like the Emacs plugin model). Just haven't had a chance to clean it up completely! \r\n\r\nThe side effect though is today, a new `Oni` object is created for each plugin, and passed to the plugin on activation. You can sort of see the lifecycle if you open the dev tools, put a breakpoint in the constructor in `browser/src/Plugin/Api/Configuration.ts`, and reload Oni - if you look up the callstack you'll see the flow of how it is created.\r\n\r\nBut I think the short term fix is to do the lazy initialization - and longer term, we wouldn't create new instances of this object for each plugin, we' d just have a common one (which would also help solve this problem, since we'd only register the listener once).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321326903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321327926", "body": "> What other items? The intent would be show bookmarks if available or show this. I can't think of anything else to add unless we list the directories recursively ( Not files , ) so they can choose to open what they are looking for. \r\n\r\nOh ya, there is nothing else today - I was thinking about the future, if we decided to add more functionality, it might blur the line between what goes in QuickOpen vs the command palette. It's hypothetical now, so we don't need to do anything until it becomes an actual problem. Was just thinking out loud.\r\n\r\n> The only difference between the two are that opening a Bookmark would be opening a folder they saved so they can use the fuzzy finder rather than having to find the directory they want with open folder. So essentially they are the same.\r\n\r\nYep, sounds like a bookmark is really just a shortcut to open a folder. Sounds reasonable.\r\n\r\n> On Linux the install directory, or when I open it from the menu by click on the icon, it opens from the home directory, are we going to treat this as the install directory so if we are in the home folder as well?\r\n\r\nGood point - I guess if this is the case, we really can't get out of special casing both those directories. If the user clicks \"Open Folder\" and picks the home directory or install directory, we should let them do that. But we shouldn't open it by default, like we would for other directories. Does that sound reasonable?\r\n\r\n> Sounds wonderful, also should be an option whether to show start/welcome screen or to open a blank file\r\n\r\nDefinitely! \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321327926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321336302", "body": "> So how do you feel about loading all the folders when no folder is opened? Considering it will be async?\r\n\r\nMy preference would be not loading the folders. I tested the same scenario out in VSCode and Atom and they don't load the folders, either. It also is a safety net from us / the user hitting issues like #177\r\n\r\n> Reasonable yes, just need to move some code around to get it to play nice :).\r\n\r\nHaha, sounds good ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321336302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321406088", "body": "Also, the live eval functionality should not be responsible for managing compilation - it should be using an existing pipeline.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321406088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321421950", "body": "> Yeah same and it overrided my old way of doing it and I think this is my favorite line of feature so glad to be working on it :)\r\n\r\nNice, that's great to hear \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321421950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321422075", "body": "Great to see the progress! Thanks for sharing the gif @cyansprite .\r\n\r\n Ya, that 'violent scrolling' might be a bit jarring... it'd be cool to have some sort of progress indicator somewhere (or even just a counter of how many files we've indexed).  Looks fast though!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321422075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321546639", "body": "Thanks for logging this @bert88sta ! Ya, sounds like we're not handling hidden buffers correctly - they shouldn't be shown in tabs.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321546639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321582325", "body": "I have a partial fix - but it turns out there isn't a great way currently to detect this case. The autocmds we listen to work fine if the cursor moves, but in the case where the screen scrolls but the cursor _does not_ move, it's a bit less reliable.\r\n\r\nIdeally, there'd be a `Scroll` autocmd we could listen to in order to give us this info. There's a tracking issue in neovim/neovim#4322 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321582325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321600185", "body": "@bert88sta - just curious - is there a reason why you are setting the buffer to hidden in this case?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321600185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321630246", "body": "By default, the tabline shows opened buffers. If you want it to show vim-style-tabs, you'll need to set the `tabs.showVimTabs` option to true. There's some discussion around this in #586 too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321630246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321632880", "body": "> Hmm, not sure I like it as a default setting or as a gui-friendly setting\r\n\r\nIMO, showing buffers by default at the top more closely maps to how other _most other editor works_ - and one of the goals of Oni is to lower the barrier to entry. 'Tabs' in the vim world mean something different from all other editors that have this UX concept. If someone prefers the 'vim-tab' based workflow, they can still enable that.\r\n\r\nI'll close this for now, but let me know if you have any other thoughts.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321632880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321860197", "body": "Ah yes, this is a regression from some of the react / redux performance work. I have a fix for this, I'll push it up. Sorry about that!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321860197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321861022", "body": "When debugging locally, you'll want to make sure to use `npm run build:debug` or `npm run start` (live-reload Oni), as `npm run build` will do the uglification / minification, and be impossible to debug. @keforbes @bert88sta @cyansprite - just a heads up \ud83d\ude04  You'll also want to close all Oni windos, and do an `npm install` to pick up the new dependencies.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321861022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321862747", "body": "Fixes #596 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321862747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321866521", "body": "@CrossR , Ah, no - thanks for catching that! I missed leveraging that code path you added for opening multiple files, but it certainly should be using that. I logged #600 so I don't forget about it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321866521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321867692", "body": "Hi @CrossR ! Thanks for logging this issue. These sorts of blockers are really helpful to call out, as I'm sure this is a blocker for others as well.\r\n\r\nOn Windows, the 'Open With' functionality is controlled by a registry key. So we'd need to update our installer to build up those associations. There's a stackoverflow thread here:\r\nhttps://stackoverflow.com/questions/26536030/inno-setup-file-association\r\n\r\nAnd some more information about the tooling used to create our setup program (InnoSetup): http://www.jrsoftware.org/ishelp/\r\n\r\nOn OSX, it's controlled by a plist file - this has some more info:\r\nhttps://stackoverflow.com/questions/28222787/mac-os-x-file-association-works-but-file-icon-not-changed\r\n\r\n> With that, I can drop using Notepad++ on Windows 10 and start using Oni for my poking around files and such.\r\n\r\nThat would be awesome! \ud83d\ude04 \r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321867692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321889231", "body": "Fixed by #599 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321889231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321901235", "body": "> Looks like getting the registry keys added isn't so bad, its just a few lines in the setup.template.iss file.\r\nWhat is awkward is that you need to duplicate those lines for each and every extension you want to support...\r\n\r\nCool, nice find! It looks like most of the entries are duplicates, except for the file extensions.... Since we already use a javascript script to generate our `iss` file, we could probably reduce that duplication and just have like a javascript array of supported extensions.\r\n\r\n> That all said, even after Oni is registered as the editor, it doesn't open any files when I double click a file, even when I've said to open with Oni.\r\n\r\nI just tried this too. I think as you mentioned this is due to some differences in how `process.argv` works in both scenarios.\r\n\r\nWhen starting oni from the command-line, from `npm link`, `require(\"electron\").remote.process.argv` returns `[\"C:\\oni\\node_modules\\electron\\dist\\electron.exe\", \"C:\\oni\\main.js\", \"TODO.md\"]` (__3__ arguments), whereas if it is from the executable, it looks like: `[\"C:\\Program Files (x86)\\Oni\\Oni.exe\", \"TODO.md\"]` (__2__ arguments)\r\n\r\nSo I believe we might not be handling the arguments correctly... we might be assuming there are always _two_ arguments prior to the file, but in this case there is actually only one.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321901235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321922223", "body": "> It seems the only way to close a tab is by clicking the X button... with your mouse. \r\n\r\nYikes, that is atrocious!\r\n\r\nI think this is related to #593 - by default we just show the _buffers_ , unless `editor.showVimTabs` is set to `true`. If you change that setting, I think the behavior will be more what you would expect.\r\n\r\nMy goal with showing _buffers_ by default is it more closely maps to how other editors work, but it sounds like this default is really confusing to both you and @bert88sta who have a tab-based workflow, and expect the tabs in Oni to map to Vim tabs.\r\n\r\nSo a couple questions:\r\n- Does setting `editor.showVimTabs` to true give you the behavior you'd expect?\r\n- Would you prefer to have the default changed? I know @bert88sta would prefer that \ud83d\ude04 \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321922223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321924256", "body": "That's a nice find that you don't need two calls to `git ls-files` - that's great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321924256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321925087", "body": "Cool, I just checked the PR and I like how you consolidated the two calls!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321925087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321927269", "body": "One thing I realized too, if we change that default to `editor.showVimTabs` to `true`, it kind of fixes #591 too...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321927269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322003870", "body": "Fixes #600 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322003870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322003999", "body": "> I use c# heavily with Unity, I will see if I can fix this at some point...\r\n\r\nNice \ud83d\ude04 Do you have any games in the app store or anything?\r\n\r\n> Also might add on to your plugin, great idea to have it as a plugin!\r\n\r\nThat would be great! Hopefully it will be a starting point for some other plugins too.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322003999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004028", "body": "FYI, since I moved the code to a separate repo, I ported this issue over - extr0py/oni-language-csharp#1. So I'll close this one and track it there.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004078", "body": "Cool, thanks for following up and closing it @bert88sta ! Nice to see the issue count go down a bit..", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004547", "body": "Oh wow, the buffer search is a cool idea - neat!\r\n\r\nI'm thinking about some other sorts of searching too (searching _in files_). I like Sublime / VSCode / Atom much better than the vim experience for doing things like find & replace.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004587", "body": "Looks like one of my recent changes caused your AppVeyor build failure - I removed the 'Q' library and it looks like there is a conflict in Git.ts. So you might need to port over the changes had to convert that to use ES6 Promises instead of Q.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004644", "body": "Oh and I'll try out the binary in a bit. I'm interested as to how it compares to something like [ag](https://github.com/ggreer/the_silver_searcher) or [RipGrep](https://github.com/BurntSushi/ripgrep). I've been toying with pulling ripgrep in as the default non-git search strategy for fuzzy finding.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322007807", "body": "> Wellll the binary I'm talking about it specifically for listing files and directories.\r\n> I don't know much about ripgrep but I didn't know ag could list files without searching through them.\r\n\r\nYa, actually `ag` is recommended frequently to go with the `Ctrl-P` plugin - https://stackoverflow.com/questions/28260090/what-is-the-proper-vim-ag-gctrlp-user-command-value-for-windows. And I think `ripgrep` is even faster. There's even an NPM package with a cross-platform binary, too: https://www.npmjs.com/package/vscode-ripgrep , so it'd be straightforward to add as a dependency and package with Oni.\r\n\r\nI tried out your binary on a VM, seems like it works well - it'd be interesting to compare the performance though to `ag`/`ripgrep`. There are some other features they have, like respecting the .gitignore functionality, search-in-files, etc.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322007807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322009038", "body": "> I remember poking around the tickets and seeing this: #33\r\n\r\nDefinitely, this has been an issue for a while! And even moreso now that there are more extensibility points in the UI, that aren't covered by vim colorschemes.\r\n\r\nFor now, exposing customizations in the configuration seems reasonable. \r\n\r\nI'm thinking something like:\r\n```\r\n{\r\n   \"oni.colors\": {\r\n           \"statusbar.background\": \"black\",\r\n           \"statusbar.mode.normal.background\": \"red\",\r\n           \"quickInfo.background\": \"#000000\",\r\n          // ...etc\r\n     } \r\n}\r\n```\r\n(Which is pretty similiar to what you suggested above - thanks @cyansprite !)\r\n\r\nThat seems like a reasonable first step - if someone _really_ doesn't like the default colors, they can at least override them in their configuration!\r\n\r\nIn terms of a next step, I'd like to be able to bundle the following:\r\n- vim themes\r\n- oni-specific styling\r\n- CSS (for animations)\r\n\r\nThe main thing we'd have to do to enable this full-color-scheme scenario is to __augment the package.json format__ with the name of the colorscheme, included, plus dependent vim colorschemes.... something like this:\r\n```\r\n        \"colorSchemes\": [{\r\n            \"type\": \"dark\",\r\n            \"colors\": {\r\n                \"statusbar.background\": \"#FF0000\",\r\n                \"quickinfo.background\": \"#00FF00\"\r\n            },\r\n            \"tokenColors\": \"./colors.vim\",\r\n            \"vimSchemeName\": \"darkblue\",\r\n            \"css\": \"./animations.css\"\r\n        }]\r\n```\r\n\r\nOnce we have that set, we'd want to hook the `ColorScheme` autocmd from neovim. When we see the scheme defined by `vimSchemeName`, we'd apply the colors / css / etc on the Oni side. Any overrides in `config.js` would take precedence here, though.\r\n\r\nFurther on from there, it'd be nice to be able to _fully define_ a color scheme in JS/JSON, so that the `tokenColors` (vim colors file) isn't needed. But that isn't necessary at the start.\r\n\r\nAnother cool thing would be to list all the available colorschemes in the app menu.\r\n\r\nAnyway that's just a brain-dump of what I'm thinking in terms of having custom color schemes... hopefully that was coherent \ud83d\ude04 Sounds pretty in-line with what was discussed above. I like being able to quickly tweak colors in the config.js, and then extract them out into a separate color-theme plugin - so I think we'd be able to accomplish that here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322009038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322009278", "body": "Great question. This is something I've been thinking about.\r\n\r\nOne thing I'd like to do is treat the `Config.js` as a mini-plugin, and have an `activate` method for it - so you can script against the `Oni` object.\r\n\r\nYou can also open the developer tools and make calls against the `Oni` object (which is the same thing the plugins get), but it's not super interesting - it'll be moreso once there are things like keybindings hooked up... \r\n\r\nIs there a particular sort of customization you were thinking about, that wasn't easy to do without rebuilding Oni?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322009278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322011134", "body": "Fixed by #612 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322011134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322013277", "body": "@cyansprite , shoot, well keep me posted if you ever need a beta tester \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322013277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322013384", "body": "And as an aside, I'm thinking about some ways to gamify Oni - like an improved vimtutor experience / game, as well as just the act of editing and becoming proficient at Vim more enjoyable. #430 tracks some of those ideas - I imagine you might have some ideas around there too, given your background in games!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322013384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322054246", "body": "Wow, this is awesome! Thanks for putting this together, @CrossR !\r\n\r\nI was just trying this on Windows and it's really cool to have the shell integration hooked up. I could see it improving my workflow on Windows for sure.\r\n\r\n> I'm not especially a JS dev, so I need some advice on cleaning up the BuildSetupTemplate.js. Its functionally working, but its not the neatest code.\r\n\r\nI don't really see any problems with it. As long as it is still relatively simple and easy to understand what is going on, that should be fine. The only piece that confused me a bit was that we were re-injecting the {{RegistryKey}} placeholder each time we replaced it, and then file add the closing line. We could potentially build up that registry key section in its entirety, and then just replace {{RegistryKey}} placeholder with the whole section. Not a requirement though to change, just thinking out loud - I'm fine with it as it is.\r\n\r\nI really like that you pulled out the file extensions into a separate object - making it easy to configure this later.\r\n\r\n> Oh, and what file types should we support right now?\r\n\r\nJust a few off additional ones off the top of my head:\r\n- `.md`: `Markdown Files`\r\n- `.json`: `JSON Files`\r\n- `.jsx`: `JavaScript Files`\r\n- `.tsx`: `TypeScript Files`\r\n\r\nI'm sure we'll keeping adding more as we go :)\r\n\r\n> Also I need to work out how to get the desktop icon working for this.\r\n\r\nIt looks like the problem here is this setting:\r\n```\r\nRoot: HKCR; Subkey: \"${prodName}${ext}\\\\DefaultIcon\"; ValueType: string; ValueName: \"\"; ValueData: \"{app}\\\\images\\\\oni.ico\"; Tasks: registerAsEditor;\r\n```\r\n\r\nThe image path is a bit more nested in our install directory - it looks like it should be this instead:\r\n```\r\n{app}\\resources\\\\app\\\\images\\\\oni.ico\r\n```\r\n\r\n> Similarly for the way I've changed main, it works but its not the nicest.\r\n\r\nUnfortunately this change wasn't working for me. It might not hit that `app.on('ready')` path in all cases.\r\n\r\nThere's another place we do the slice of the arguments:\r\n```\r\n    const shouldQuit = app.makeSingleInstance((commandLine, workingDirectory) => {\r\n        createWindow(commandLine.slice(2), workingDirectory)\r\n    })\r\n```\r\n\r\nSo I think we should pull your code to a helper method - like `removeExecutableFromArguments`, and that can do the logic that you added - and then we'd use it in both places. The logic looks reasonable to me, the only thing we might want to change is the `process.argv.length === 2` condition - I wonder there are cases where we could get multiple files?\r\n\r\nHope that helps. Nice work - thanks again for putting this together! It really makes Oni feel more like it 'belongs' on Windows and isn't just an afterthought.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322054246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322054471", "body": "> This feature looks like it'll be amazing when it's all done! Way to go! @extr0py, are you sure you don't want to hold off on v0.2.8 until this feature is in? \ud83d\ude06\r\n\r\nDefinitely, it's really cool to see a new 'navigation paradigm'. I like how easy it is to open and put in a split! Nice work @cyansprite \ud83d\udc4d \r\n\r\nI'm planning on doing the 'final' release for 0.2.8 next weekend - I did the pre-release just so I could start testing the binaries, see if the space was resized, and make sure there isn't any regression in the functionality. So if it's in before then I'll definitely pick it up!\r\n\r\n> @extr0py do we have a show error popup?\r\n\r\nSort of... I kept starting one, and not needing it,  what I started is in `browser\\src\\UI\\components\\Message.tsx`. I was intended to be an alert message, though.\r\n\r\n@FrigoEU also created an error log that looks like this:\r\n![image](https://user-images.githubusercontent.com/13532591/29251792-7b932b06-8010-11e7-9846-2431320b750e.png)\r\n\r\nWhich you can get to via 'Show Logs'.\r\n\r\nWhat's the scenario / case you want to show it?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322054471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322054494", "body": "And I realized I missed this earlier:\r\n\r\n> That being said how do you plan on implementing the search window?\r\n> Standard left side popup like vscode, or bottom/top popup like atom/sublime?\r\n> Or something entirely new.\r\n\r\nI haven't 100% figured this out yet, so if you have any thoughts, that would be great! I know that I __don't__ like the implementation in VSCode though - because when you get your search results, they are always clipped by the left pane. For my workflows, I'd prefer the flexibility to either have them on the bottom, or on the side. But not sure exactly how it should look like yet - might be worth creating an issue to start thinking about ideas!\r\n\r\nOne feature I do want - though - and this is common for pretty much all the new pieces of UI (like file explorer, git integration, find files, errors, etc) - is that I can _navigate using the same paradigms and functionality I use in VIM_ - in other words, I should be able to use h/j/k/l and all the other tools I'm comfortable with. This is a part of the reason I wanted to build a new editor - most editors that expose extensive functionality like that, even if they have some vim bindings, don't have it set up in a holistic way. \r\n\r\nSorry, this is sort of derailing from the PR at hand - I created #614 to track more discussion here!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322054494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322055178", "body": "> Also a feauture I would want to add is cursorline changing color in insertmode, its a feature I like.\r\n\r\nExcellent, that definitely seems doable, if we have colors defined for the cursorline / cursorcolumn.\r\n\r\nThis kind of goes with #610 - if we expose an `activate` method in `config.js`, we could set up stuff like that as a personalized configuration.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322055178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322055599", "body": "Not a dumb example at all, this is great, and is exactly what I'd like to support!\r\n\r\nThe way I'm thinking about this would be, in `Config.js`, we'd expose an activate method:\r\n```\r\nconst activate = (Oni) => {\r\n     \r\n     Oni.on(\"mode-changed\", (newMode) => {\r\n          const newColor = newMode === \"insert\" ? \"black\" : \"white\"\r\n           Oni.configuration.setValue(\"oni.colors\", {\r\n                 \"statusbar.background\": newColor\r\n           })\r\n     })\r\n}\r\n\r\nmodule.exports = {\r\n   activate,\r\n\r\n  //add custom config here, such as\r\n  //\"oni.useDefaultConfig\": true,\r\n  \"editor.fontSize\": \"12px\",\r\n  \"editor.fontFamily\": \"Fira Code\",\r\n  \"oni.bookmarks\": [\"C:/Toronto2\"],\r\n  \"oni.loadInitVim\": true,\r\n  \"statusbar.enabled\": true,\r\n  \"editor.scrollBar.visible\": true,\r\n  \"editor.cursorLine\": true,\r\n  \"editor.cursorLineOpacity\": 0.1,\r\n...\r\n```\r\n\r\nSomething like that... It's a bit awkward having the function in the same space as the configuration, but I'd like to use 'activate' and 'deactivate' as reserved capabilities here. \r\n\r\nThe setting of color properties ties into some of the thoughts @cyansprite had in #604 \r\n\r\nIdeally, it should be really lightweight... in that I can save and see changes immediately, as well as be very straightforward - it should have premier autocompletion / quickinfo / etc.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322055599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322055992", "body": "Good call! The tab issue is pretty straightforward, I'll open a PR for that.\r\n\r\nFor the buffers - we'll have to figure out the timing of when we make that request (seems like we'd have to check it for all buffers too). It would be nice to have this metadata for the buffers available in the Redux store, so the UI could treat it appropriately -", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322055992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322058149", "body": "Here's another scriptability example I was thinking of the other day - I'd like to make an easy way to take screenshots of the window (or, later, even record/pause/stop gifs/videos):\r\n\r\n```\r\nOni.input.bind(\"<C-Space>\", () => Oni.workspace.takeScreenshot())\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322058149/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322059414", "body": "> An idea...\r\n> it's not a fix but more of a hack, but if we get the keys pressed to do with scrolling, we can catch those  keys, then send them to vim (like we do with all the other keys) and then after wards, redraw the screen.\r\n\r\nYa, in a similiar vein, we could do something like:\r\n``` nnoremap zt :Call ExecAndNotifyOni('zt')<CR>```\r\n\r\nLike run the command on the Vim side, and then notify Oni that there was an update\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322059414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322065395", "body": "I merged the `package.json` for you - it was a conflict with my change to turn off the asar packing. The `oni.ico` path will still need to be updated in the script.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322065395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322231212", "body": "Bringing this back, as the asar package unfortunately __regressed__ package size. The files / folders specified in `asarUnpack` are actually _still stored_ in the asar package - almost doubling the size!\r\n\r\nWill need to follow up and see if there is a configuration change to avoid this, otherwise, we may need a custom packaging strategy or see if there is a possibility of pushing a fix to `electron-builder`.\r\n\r\nWhen this is addressed, will need to update the app icon in the setup scripts (#613)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322231212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322231588", "body": "> It will probably need changing quite soon, as I assume the folder will move once the asar stuff is added back?\r\n\r\nI think it will actually take some time to bring back the 'asar' packaging - unfortunately the behavior of the out-of-the-box asar packager actually increases the package size! So it will take some investigation and perhaps a custom packing strategy to make things work. I added a note in #350 to remind me to update the icon when we bring that back.\r\n\r\n> Does look very nice just having the icons all sat there!\r\n\r\nYa, that's awesome! \ud83d\udc4d \ud83d\udc4d \r\n\r\n> Just need to work out why I can't seem to open files once you use the Open With loading...\r\nIt gives an error of \"No matching Autocommands\", but works fine if I open Oni normally.\r\n\r\nInteresting - I'll see if I can repro this in a bit.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322231588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322251213", "body": "> I was thinking, when we close a tab if it's modified we don't close it this is because bw is not bw! but that's preferable in some cases because the user might not realize its modified which is hard to do but anyways... When we try to quickopen we do e!/vsp!/sp!, if it's modified and we use e, then that buffers changed will be lost, so I was thinking showing some kind of dialog saying are you sure modified blah blah.\r\n\r\nThis would be excellent to have! I think this will be a major pain point for users - being able to warn when we navigate away from an unsaved buffer would be very helpful. In addition, it would be nice to have this check on quitting too - it's too easy to quit Oni when you have unsaved changes. It might be worth tracking this in another issue / PR\r\n\r\n> Next up is quick open buffers so you can easily cycle through opened buffers with ease :).\r\n\r\nSounds awesome!\r\n\r\n> If you think if any ideas feel free to let me know :)\r\n\r\nOne thing I was thinking about, and this is something similiar to VSCode and other editors, is having symbol prefixes mean special things in QuickOpen. For example, if you type the following prefixes:\r\n- `:` - vim command mode for current window\r\n- `/` - buffer search (integrate with the buffer search you added)\r\n- `!` - oni command mode (same commands shown in Ctrl+Shift+P)\r\n- '`' - show available vim marks\r\n- `&` - show available buffers\r\n\r\nI think Nuclide also had some cool ideas with their enhanced quick open experience. They basically showed a few tabs with these sorts of pivots, underneath the text - that might be a good way to enhance discoverability and let users know the sort of things they can do with QuickOpen.\r\n\r\nMight make sense again to have this a a separate issue / PR - I don't want you to feel like you have to save the world with this PR! Let me know when you're ready to merge it and I'll test it out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322251213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322252031", "body": "Oh, and regarding colorschemes, a good starting point might be to use `state.backgroundColor` and `state.foregroundColor` (and darken the background a bit). I tried it on `onedark` and `vim8solarized_light` and it looked pretty good... much improved from what we had before. On top of that, we could have customized colors like `oni.colors.menu.foreground`/`background`/`accent`, or something.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322252031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322452102", "body": "Related to #619 and #618 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322452102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322461007", "body": "@cyansprite , thanks for putting together this PR and the thought you've put into the keybindings!\r\n\r\nI like the abstraction you put together for the configuration - it's great to separate the loading / watching logic from all the values.\r\n\r\nThe model being proposed for the keybindings seems like it addresses the short-term problem of not being able to map keys - but what I want for the keybindings is to be able to bind to `commands` (specified by `Commands.ts` right now, _as well as functions_. \r\n\r\nAlso, I'd like for our keybinding-story to be able to address all the switching / nesting / hardcoding in the `keydown` handler in `NeovimEditor.tsx`. This change gets rid of the key hardcoding, but we still need all the special cases for different pieces of UI being opened.\r\n\r\nIdeally, this whole block could be replaced by something like:\r\n\r\n```\r\nconst keyboard = new Keyboard()\r\nkeyboard.on(\"keydown\", (key: string) => {\r\n    const wasKeyHandled = inputManager.handleKey(key)\r\n\r\n    // If the key couldn't be handled in the Oni layer, pass it to Neovim\r\n    if (!wasKeyHandled) {\r\n         this._neovimInstance.input(key);\r\n    }\r\n})\r\n```\r\n\r\nSo there's really 4 things I'd like to see from the keymapping work:\r\n- __Configurable__ - ability to specify via some configuration (either config.js or keybindings.js).\r\n- __Multiple mappings per key__ - We should map _key_ -> _action_ (whether it's a command string, or a function). We might have multiple mappings for the same key, that would be dependent on the current mode, for example. This couldn't be expressed in the current model.\r\n- __Handling commands AND functions__ - I want to handle both lambdas as well as existing commands defined in `Commands.ts`. It might mean that we have to port over some of the functionality, like `menu next`, `menu previous`, etc to commands, and have a way for the UI elements to listen for these commands.  I believe that we could reuse the commands registered as opposed to defining new settings.\r\n- __Generalize all the special-casing in `NeovimEditor.tsx`__ - Some commands will have different behavior depending on the edit mode (`normal`, `insert`, `visual`, etc), or based on UI that is available (like, 'is a menu visible'). We should have a way to handle those cases. If we address that, than the key handling in `NeovimEditor` can just defer that to the input manager to resolve. This will guarantee that our key-handling is flexible enough to support new and novel elements.\r\n\r\nThe concern I have is that, if these 4 bullet points aren't meant, and we introduce a short-term paradigm, it will actually incur complexity / debt - because now we have to maintain backwards compatibility and also help our users to figure out two different paradigms. So my preference would be to have a holistic solution, as opposed to a short-term solution. The proposed solution solves the first bullet point, but not the subsequent 3. \r\n\r\nI'd like to see something that addresses all 4 of the points above.\r\n\r\nI'll try and see if I can get time this weekend to put something more concrete together in terms of what I'm thinking, since some of the thoughts above might be too vague to be actionable.  I know the  lack-of-configurability with the input is a huge pain point right now, so I'm definitely on-board with solving it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322461007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322463279", "body": "@cyansprite - nice! I like the icons you added for the bookmarks & open folder \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322463279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322464470", "body": "> It looks like Inno has a way of checking if the process is running at uninstall time, so I could look at adding that?\r\n\r\nAh ya, I just tried again and uninstall worked fine. I think you're right @CrossR  - it must've been I had an active process. \r\n\r\nChecking if the process is running sounds like a good solution!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322464470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322466999", "body": "> Lol am I doing too much?\r\n\r\nHaha, no way, I just want to make sure we can get pieces of this in the 0.2.8 release (if you want!). \r\n\r\n> I think it would be beneficial for you and me both to go ahead and merge this for testing and merge conflicts in the future. The only reason I would hold of is for the listing of files NOT in a git repo but...\r\nA PR can fix that later :P.\r\n\r\nCool, I just took a pass over it. The buffer find is really cool!\r\n\r\nThere are only two issues I see:\r\n- The finding for _non-git_ folders seems to have regressed. On master, if I use QuickOpen on a folder that has a bunch of stuff (like 'Documents' or 'Downloads'), I immediately see a loading spinner:\r\n![image](https://user-images.githubusercontent.com/13532591/29318056-6346688c-8183-11e7-8ee5-6ad95a3b0e5c.png)\r\nBut with these changes, I don't see anything. I don't think we need to implement the full-external-binary solution, but we shouldn't introduce a regression for this experience (in other words, it should at least behave the same as it did before).\r\n- Reading the whole set of lines the way we're doing right now is expensive - there's actually already a `BufferUpdates` object that keeps track of changes, and caches the last set of buffer lines. We should just use that object, instead of querying Neovim for the current buffer. For large files, this will be slow / expensive, especially if we're doing it every time we leave insert mode.\r\n\r\nOnce those issues are addressed, I'll bring it in! \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322466999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322472207", "body": "> If I try and open one file it fails. If I try and open 4 files, the first fails and the three after are fine.\r\n\r\nIt seems like it's working for me now, after trying it (rebuilding the installer and everything):\r\n- If I select _multiple files in explorer_ and Open, it actually opens 3 instances of Oni. It's kind of weird but at least all the files are opened (and it might be just how explorer behaviors)\r\n- If I open _multiple files from the command line_, they all get opened, but they aren't visible in the \"buffer line\" until I start cycling through them (and the title says '1 of N').\r\n\r\nOpening a single file seems to work fine for me - both from explorer and the command prompt.\r\n\r\nSounds like I'm seeing different behavior than you, though! Trying to figure out why..\r\n\r\nA couple questions:\r\n- By fails, do you mean the file doesn't load at all?\r\n- Are you opening from explorer or the command line?\r\n\r\nI'm excited to get this change in, it's so cool to see the icons hanging out in explorer now \ud83d\ude04 \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322472207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322514002", "body": "> There is no way I would want to merge this right now, I just wanted to put a base review so we could discuss it much like you did :).\r\n\r\n> I'm kind of new to github and I'm not sure exactly how we should discuss things... so I open prs and issues... is there a better way of doing it?\r\n\r\nOh yes, this is great! I don't think there is a better way to start a discussion than with some code \ud83d\ude04  It gets us out of talking in the abstract and into the real meat of the issue.\r\n\r\nSorry if it came across as negative / critical - didn't mean it like that at all. I appreciate the time, thought, and energy you put in (after all, you're taking time out of your day to contribute!). So I try and get concerns out early, out of respect for your time! But ya I still feel relatively new to this too, so lots of learning for me - I'm still finding the right balance there.  \ud83d\ude04 Thanks for being open to the considerations!\r\n\r\n> If you could outline the specifics of what we need and build tasks off of a story that way you could define exactly what to complete would be great. I have a general idea and your bullets are a GREAT start.\r\n\r\nSounds good! I know it's vague right now but I wanted to at least set up what the \"north star\" looks like with those bullet points. I'll post up some more concrete ideas soon.\r\n\r\nThanks again for thinking about this, and getting the conversation started. It will be a huge step forward for this project to have this solved \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322514002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322663929", "body": "> So i think adding checking for buf num as well as line and send the event onbufenter might be an easy fix.\r\nI will test it when I get time.\r\n\r\nThanks for catching that issue with BufEnter. Looks great :) This might explain why, in some cases, the language services wouldn't load until the cursor moved... nice. Sorry I wasn't able to give more help, was stuck at work - but looks like you were able to solve it without me anyway. Seems like you have the whole flow down between Neovim <-> Oni, that's great!\r\n\r\n> You mentioned stories in keybindings, do you have a program you use to track it? because this be wonderful to have a layout of tasks, I mean I know what needs to be done... but getting confirmation from you and others would be nice as well as making sure I implement it correctly with functionality already existing.\r\n\r\nI've actually just been keeping a giant 'TODO.md' file right now, nothing formal at all. I've heard good things about 'org-mode' for Emacs, so I'd like to learn more about that, and see if any of the concepts make sense in Oni to bring over. But ya it'd be nice to have something more granular than github issues. I've tried waffle.io for a small project - do you have any suggestions?\r\n\r\n> I think the next PR to do with QuickOpen will be colors, buffers, and caching each until an autocmd happens...\r\n\r\nExcellent, sounds like a lot to look forward to! I like where you're going with colorschemes, and the live preview is a really neat idea.\r\n\r\nJust tried out the PR and it's working great. The regression is fixed in non-git directories, and the buffer behavior is working well. I'm ready to bring it in! \ud83d\udc4d \ud83d\udc4d \r\n\r\nI'll plan on merging it tomorrow morning, unless I hear otherwise \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322663929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322664141", "body": "> The quick feedback is always appreciated, I would love to help Oni get to release 1.0 as quick, but as good/correct as possible. Not only for my own editing but I want to make an text editor/IDE I believe in.\r\n\r\nCheers to that! Really appreciate your help.\r\n\r\n> Less that it's vague more of I want to manage it properly, maybe a check list?\r\n\r\nAh ya, github has a check list feature, I just always forget to use it.. That's a good idea - I'll work on breaking down the thoughts I have into an actionable list.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322664141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322665294", "body": "> Yep, the file doesn't load at all.\r\nI'm opening a file via the explorer, the issue comes if I then open a second file in Oni. Ie Double click file > Oni Opens with File > Menu > Open File > Select File > Doesn't Open. The first file loads fine, the second doesn't load at all.\r\n\r\nGot it, thanks for the clarification, I can hit the same thing now. I'll try and look at it a bit tomorrow morning.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322665294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322825527", "body": "Excellent! I just merged it in. Congrats @cyansprite on getting your first PR in - great work and thank you for the contribution!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322825527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322827409", "body": "> Will try to get some more enhancements done today working on a yankring plugin right now as well because I think vim needs a better tracking system clipboard history and I don't like other plugins\r\n\r\nSounds cool, look forward to it. I was experimenting with some clipboard integration work (because #434 is the main reason I switch out of Oni to other editors, I realized...) - that's in #620 . Might give you some ideas into how we could build a better system on top of the clipboard primitives electron provides.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322827409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322827791", "body": "Ah, I just realized this is due to missing a space after `:tabnew` in the work I did to reconcile Open Files... So not related to the installer / arguments at all.\r\n\r\nThis line:\r\n```\r\nexecuteVimCommandForMultipleFiles(\":tabnew\", files)\r\n```\r\n\r\nNeeds to be:\r\n```\r\nexecuteVimCommandForMultipleFiles(\":tabnew \", files)\r\n```\r\n\r\nSorry about that, not sure how I missed that. I'll send out a PR for the fix. I found I could reproduce this without installing, by opening a file, and then opening multiple files.\r\n\r\nBesides that, I think this is good to go - was there anything else you wanted to look at, @CrossR ? I'm planning on pushing out a new release this weekend and it would be great to have this in there!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322827791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322828606", "body": "Opened #621 to track fixing that `:tabnew ` vs `:tabnew` regression.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322828606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322831777", "body": "> FBE is at the moment a React+Redux app and all logic to make functions of a file editable is handled in reducer functions. As in React+Redux common, the editor dispatches an action and the state gets changed, UI changes \"magically\" on its own. If I saw it right you also use Redux, so this should be familiar\r\n\r\nYes, I really like this functional approach - it feels magical and enforces a clear separation of 'state changes' vs 'UI rendering'. Oni uses React+Redux for most of the enhanced UI (autocompletion, menu, buffer scrollbar, statusbar, tabs, etc).\r\n\r\n> But, Oni/NeoVim won't work this way right? As far what I saw in Oni and nvim, it is more of an event/method API where you can subscribe to events to get notifications e.g.\r\n\r\nThat's correct. Actually, the very first prototype I did with Oni was using React+Redux to do _all of the rendering_. Performance was a major issue - even though React+Redux is very fast, it still ended up being a bottleneck. The rendering speed - and keyboard responsiveness -  are extremely important and are really make-or-break for Oni. So I factored that out in a separate layer, that doesn't use React+Redux.\r\n\r\nThe other issue is that Neovim, right now, is really the text-editing-engine for Oni. That means, it manages things like syntax colors, highlighting, wrapping lines, etc. And the way it renders out to us is per-cell.\r\n\r\nThe way I see it, is that NFBE is really another way to manage windows/buffers (laying them out, what sections are visible, etc). I think that we could reuse the current Neovim rendering strategy, and build out these as custom editor/renderer components, if the window manager knows how to lay them out. I've been playing with a prototype of extracting out the `<EditorHost />` component and making new `IEditor` implementations in #622. \r\n\r\nAnother option would be to plumb some more data into the redux store, but I think it might not be sufficient for this case.\r\n\r\nI'd really like to have an architecture diagram at some point to more clearly demarcate this, but I hope that helps.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322831777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322839754", "body": "Nice catch... I've seen a bit of flakiness around the dirty indicator so perhaps this is related.\r\n\r\nI think right now we are using the 'b:changedtick' variable - perhaps we need to switch to use '&modified'?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322839754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322900370", "body": "> There is two other parts to clean up, but I think they can be moved into a separate issue, as I think this would be useful to get into the next release.\r\n\r\nSounds good to me! These both sound like incremental issues, given that neither scenario would've been enabled prior to this change.\r\n\r\n> Do you want me to merge the :tabnew change into this branch or should I leave them separate?\r\n\r\nNah, that's okay - I merged it in with #621 . I'll go ahead and merge this in now (so we'll have both fixes in master).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322900370/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322900950", "body": "@CrossR - merged! This is a huge improvement for the Oni experience on Windows. I'm really glad we have this functionality now - thanks for your contribution!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322900950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322916040", "body": "> so checking &modified should give us the correct answer each time, I just tested it and it and seems correct\r\n\r\nCool, that does seem what we want! \r\n\r\nTo implement this, right now, the `UI.Actions.bufferUpdate` takes a `version` parameter. Seems like we'd want to replace that with an `isDirty` flag. We'd have to modify it in a couple places (action creator, action, reducer, state).\r\n\r\nIn addition, we don't send up the `&modified` flag. We might want to add that to the context we send up from neovim -> Oni. If we have that, then we can pass that easily to the `bufferUpdate` redux action. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322916040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323083785", "body": "> How about a fuzzy find Quickopen for clipboard history?\r\n\r\nSounds like a cool idea! It'd be interesting to see the set of registers too. I always forgot what are in my registers so I end up using just registers `a` and `b` \ud83d\ude04 \r\n\r\n> As well as an autocompletion for clipboard, my plugin I was playing around with I was using s after pasting.\r\n\r\nI'm thinking about a way to navigate some of the 'enhanced UI' elements without leaving the keyboard. That's kind of tracked in my mind here: #366. I was thinking of potentially using the `s` key too as a default (maybe `<Alt-s>`). But that's sort of a tangent, I'm still trying to figure out entry points for some of these new aspects...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323083785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323356598", "body": "Thanks for jumping in and making the change, @cyansprite ! This is awesome, having the `&modified` flag for dirty tracking is a much better experience.\r\n\r\n> TextDocumentItem worries me because I'm not really sure where it comes from, I didn't get to look into it that much.\r\n\r\nYes, unfortunately I think if we remove the `version` there (or always send 0), it will cause problems, as the language servers use it and they might not update their version of the document. Which would then cause completion issues and stuff. \r\n\r\nCan we send both the `version` and `&modified` for now?\r\n\r\nThe only other item I was thinking about was the `modified` field on the buffer objects in `State.ts` and `Actions.ts` - can we change that to a `boolean`? I believe the value would be only ever 0/1 so that would make the 'intent' of the field more clear. \r\n\r\nThanks again for putting this together! This is a huge improvement for the buffer line.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323356598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323356996", "body": "> Also do you care to test out my yank cycler plugin when its done? I can send a github link on here to the repo when I'm done.\r\n\r\nDefinitely!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323356996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323359699", "body": "> I implemented this way for convenience and rapid prototyping, plus I was sleepy.\r\n\r\nHaha, this is the same way I work too... Get it working in a fast / dirty way, then once it is working, I'll  go back and take the time to clean it up.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323359699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323360185", "body": "This isn't very useful at the moment, since there is not much relevant that can be done with the Config.js object, but I think it makes sense to go in now - so that as we expand the API, there actually _are_ interesting things that can be done with the config..", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323360185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323361721", "body": "Interesting... I actually use `b:changedTick` because I saw that is what other completion providers were using. It seems like the difference is the 'undo' behavior - `b:changedTick` would always increase, whereas this would map to the change in the `undolist`. (I think YouCompleteMe is where I saw this)\r\n\r\nI didn't know about `changenr` actually until just now - looking through the doc you posted, `changenr` would probably work OK too (and maybe even better, if the language service caches older versions). I haven't tested, but the only problem I could see is if there is a naive language service that only does the update if newVersion > oldVersion. But the most important scenario for this is the completion scenario - so as long as the version is incrementing as the user types - it seems like it would be fine.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323361721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323368402", "body": "FYI @cyansprite - I just brought this in. Sounds like you'll want to update your `editor.clipboard.enabled` setting to `false` so it doesn't mess up your customizations.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323368402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323369950", "body": "Thanks for the info / research!\r\n\r\n> We actually don't send buffer updates until on save is this the design we want?\r\nWell for the syntax, completions of course work.\r\n\r\nWe actually send buffer updates on any change (this happens via an `autocmd` that hooks `CursorMoved`/`CursorMovedI` events and calls `OniNotifyBufferUpdates`) - but in insert mode we only send a subset (the current line). It turns out there is no 'perfect' event for listening to buffer changes - Neovim has an issue tracking adding a better event, though.\r\n\r\n> however, I don't think that's for everyone so changed tick would be better left untouched in this case. I think it's more hassle and just better to use changed tick, because then we would have to keep track or undo levels and changed tick, and then we would need to check what mode it's in to tell which we should check against.\r\n\r\nSounds reasonable to me. The latest changes look great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323369950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323396661", "body": "Thanks for logging this! It seems like there are a few issues with multiline text (newlines, formatting).\r\n\r\nFor multine line pasting, it might be better to set the buffer line(s) directly, as opposed to simulating typing in insert mode.\r\n\r\n> I think it might be better to use norm! \"+p?\r\n\r\nUnfortunately this doesn't work for me on Windows - I've tried a few different settings for `set clipboard` in my `init.vim`. Is there anything special you had to set to enable this?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323396661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323525469", "body": "Just looked through the latest changes - looks great to me! I'm really happy the `version + 1` hack is gone, and that we now have a more robust way to know when the buffer is modified (and should be visible). I like the way you implemented this, too - it's a very natural extension of the state we have there today.\r\n\r\nLooks like there are a couple of minor lint issues that the appveyor picked up (you can run `npm run lint` locally to reproduce them):\r\n```\r\n> oni@0.2.8 lint:browser C:\\projects\\oni\r\n> tslint --project browser/tsconfig.json --config tslint.json && tslint vim/core/oni-plugin-typescript/src/**/*.ts\r\nC:/projects/oni/browser/src/Plugins/Api/LanguageClient/LanguageClientHelpers.ts[110, 19]: Missing trailing comma\r\nC:/projects/oni/browser/src/Plugins/Api/LanguageClient/LanguageClientHelpers.ts[126, 46]: Missing trailing comma\r\n```\r\n\r\nOnce those are addressed, I'll merge this in.\r\n\r\nAlso, I put a small bounty on this issue as a thank you: https://www.bountysource.com/issues/48329508-tabline-says-dirty-after-undolevels-0\r\n\r\nSo make sure to claim that once this is in \ud83d\ude04 \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323525469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323525627", "body": "FYI, @CrossR , as a thank you, I put a small bounty on this issue:\r\nhttps://www.bountysource.com/issues/43751451-windows-installer-add-option-to-add-oni-to-path\r\n\r\nSo make sure to go claim that \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323525627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323526589", "body": "This will be a good incremental launching point for some of the input work / prototyping, so I'll go ahead and bring it in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323526589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323527817", "body": "Verified it's working for me with the latest Windows installer - nice! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323527817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323527933", "body": "I guess you can't claim the bounty until the issue is closed - bountysource should give you a \"Claim Bounty\" option now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323527933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323528632", "body": "Created a repo to host it: https://github.com/extr0py/oni-plugin-tslint", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323528632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323535333", "body": "A next step is to actually apply this to the special cases / hardcoded cases in `NeovimEditor.tsx`. I think that will be a good proof of concept whether this is actually flexible enough and usable.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323535333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323592269", "body": "Just tested out the PR - the behavior feels so much better now, and the dirty mark actually behaves as I'd expect \ud83d\ude04 Great work, thank you for the contribution! I'll merge in now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323592269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323593344", "body": "> What's a bounty and it's not big deal I like to help and I love Oni:).\r\n\r\nI set up a bountysource page [here](https://www.bountysource.com/teams/oni) for Oni and there have been some really generous donations, even in the early stage Oni is in! The funds are for Oni development, and as part of that, I think its important to show appreciation to contributors to the project. And I really appreciate the improvements you've made so far!\r\n\r\nSo once this issue is closed, make sure to \"claim\" the bounty here: https://www.bountysource.com/issues/48329508-tabline-says-dirty-after-undolevels-0\r\n\r\nThanks again for your contribution! \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323593344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323593808", "body": "Hmm, thanks for the ideas, I tried `:CheckHealth`, and I do see an issue here:\r\n\r\n```\r\n## Clipboard (optional)\r\n  - SUCCESS: Clipboard tool found: win32yank\r\n```\r\n\r\nBut then I get this when I try `\"+y`:\r\n![image](https://user-images.githubusercontent.com/13532591/29496299-7b8d6fa8-8584-11e7-9cbe-a21b64188416.png)\r\n\r\nI've done this a few times though in the past, and occasionally `### Clipboard` does not report `SUCCESS`. Not sure why :( And there was a time it did work (prior to upgrading Neovim), but it actually was really slow - it would call `win32yank` every `d/y` operation, and somehow that was noticeably slow.\r\n\r\nI think there are some ways we can make the strategy in work:\r\n- call `set paste` prior to pasting (this turns off autoindent and speeds up the insertion)\r\n- prune the `/r/n` newlines on windows, since those are causing duplicate newlines\r\n\r\nAnd I think having a JS code path that touches paste might be valuable. Some things I was thinking about later, in terms of extending this, would be like pasting an image - it'd be cool if we had github-like behavior to upload the image in the background and paste in the link. I don't believe some of those extension points would be easy / possible if we use the external provider.\r\n\r\nGood point on the menu provider... For that,, we should have that invoke the `editor.clipboard.paste` command (which should be the unified entry point for paste behavior - accessible from menus, keybindings, etc), and then expand that binding to handle different modes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323593808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323594381", "body": "Yes, this is a big pain point in OSX still! (@CrossR just fixed this in Windows, by adding Oni to the %PATH% during install in #613).\r\n\r\n@cyansprite - I think the issue is, if you install on OSX via the .dmg (or .zip), the shell doesn't know about `oni` at all (if you install from source, and run `npm link`, you get it from the link step).\r\n\r\nThere was some discussion in #346 about adding a command to the 'command palette' to install Oni to the path (which is what VSCode does - it shells out to create a symlink to `/usr/local/bin`, I believe). I didn't know about the `VSCODE_CWD` strategy until now, though!\r\n\r\nIt seems like if we had something similiar - like an environment variable called `ONI_CWD` - and gave details about updating the bash profile in our installation steps, that could be a good shorter-term resolution.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323594381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323594587", "body": "Looks like this was addressed by #574 , closing.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323594587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323594909", "body": "I'll close this out, since there are Mac issues being tracked in #636  and #346 , and this fixed the windows piece. Makes sense to split these out per-platform.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323594909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323595651", "body": "Wow, really cool stuff in the gif! I like the colorscheme switching a lot \ud83d\ude04 \r\n\r\nAnd cool list - it's neat to see the progress indication on the PR.\r\n\r\n>  Make editing shortcuts for ease\r\n\r\nOne thing I was thinking about this - is I think there are going to be a few places in Oni where we will have a 'lightweight' edit experience (like a small textbox). A few scenarios I had in mind for this:\r\n- QuickOpen (obviously)\r\n- Rename experience in the file explorer (press 'F2' or some bound key to trigger a rename, and a small textbox opens over the folder)\r\n- Snippet editing - tracked by #55 \r\n\r\nBut for all these cases, it'd be nice to have a the full set of neovim key bindings I have configured (<C-w>, <C-e>, etc). I was thinking, potentially, of having these textboxes essentially be tiny neovim windows - so that we could use neovim to process the keybindings. \r\n\r\nThat would be a bigger chunk of work, and depend on some of the initial multiplexing changes, so it might make sense to defer that piece (if that approach makes sense).\r\n\r\n>  Scrollbar... this is going to be fairly complex due to us only using 10 items right now, but... it shouldn't be that bad.\r\n\r\nWe might be able to remove the '10-item' limit and use something like https://github.com/bvaughn/react-virtualized to only render a subset.\r\n\r\nThere were a couple of other things I was thinking top-of-mind too:\r\n- Having the Menu use the current color schemes background / foreground colors - I noticed I had to darken up the background fade a bit, but it looked really nice - and might look even cooler with your colorscheme switcher!\r\n- Have an incremental-loading experience. Like right now, if there is a big folder, we show \"Loading...\" but then don't show any results until everything is available. Most fuzzy-finders start showing files/results as soon as they can - that would be a huge experience improvement.\r\n\r\nLooking awesome!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323595651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323595741", "body": "Just tried out the latest changes - works great! The behavior of the dirty flag is working as I'd expect it now \ud83d\ude04 Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323595741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323595790", "body": "Since this is closed now, @cyansprite , you should be able to submit the solution @ bountysource. https://www.bountysource.com/issues/48329508-tabline-says-dirty-after-undolevels-0", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323595790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323596914", "body": "Thanks for the diagram, @hoschi ! That helps a lot \ud83d\ude04\r\n\r\nYes, it sounds like `YodeFileEditor` and `YodeFuncEditor` would basically implement the `IEditor` API we have in Oni today: https://github.com/extr0py/oni/blob/1ca79c8f1593dd8ccd3d5e21afc1f9c51d2a1fc5/browser/src/Editor/Editor.ts\r\n\r\nIt seems like, based on the notes in the diagram, that we could reuse most of the pieces (the neovim-backing implementation), plus UI layers like autocomplete/signature help, and then have the Yode pieces on top.  The file explorer PR is somewhat relevant: https://github.com/extr0py/oni/pull/622 - except instead of creating a scoped version of `NeovimEditor`, we'd derive or augment it to add some of the behavior for Yode.\r\n\r\nThere are a few gaps though (both for supporting this specifically, and for supporting multiplexing in general):\r\n- The interface will be expanded with an `onKeyDown` handler\r\n- For Yoni, we'd need to override the default save behavior.\r\n\r\n> Yode (NFBE) benefits from another layout instead of the current used \"split buffers into window, size is controlled by splits\", but the user should still be able to edit other files which other file types (e.g. Markdown) in the same tab.\r\n\r\nThe `NeovimEditor` actually provides the tabs right now - so that should be easy to remove (and actually is removed in the FileExplorer in the item I have above).\r\n\r\nYep, I think the layout is one of the most interesting pieces here. I'd like to add a `windowManager` concept, which can be used to create splits on the Oni side. Something like:\r\n\r\n`Oni.window.openSplit(Left | Right | Top | Bottom, editor)`\r\n\r\nWhere `editor` is an instance of `IEditor` above. \r\n\r\nIt sounds like we'll need some more interesting ways to manage layout, for Yode, though, so we'll need to figure out how to expand and generalize this interface. Like I'm wondering, would it be possible to have half the screen in a traditional tab-layout and half in the Yode-style layout?\r\n\r\n> Does Oni implement the logic to position/size windows or does nvim still do its split thing? Probably I didn't get what \"rendering strategy\" means here.\r\n\r\nToday, Oni relies on Neovim to manage window splits and size/position. But I want to move away from that, and have Oni manage splits and windows (with the `Oni.window` API above). So I think the important thing is figuring out how to extend that `WindowManager` API in a way that works for Yode.\r\n\r\nAnd in terms of overwriting the save behavior - if we are using `Neovim` instances to back the YodeFunc/YodeFileEditor, we might not have to do special syncing on save - we'd have to figure out how we synchronize changes in like the `YodeFuncEditor` back to an open buffer. If the user is actually saving to disk, we could get the basically for-free - if we are porting the edits back to other open buffers (which seems like what we'd want), we'd just have to listen for buffer changes and broadcast them out to the inactive editors.\r\n\r\nAnd the division of effort you called out looks right to me - if you implement the `YodeFileEditor`, `YodeFuncEditor` as implementations of `IEditor`, then we'd bring them to life in Oni via the `Oni.window.open(..., new YodeFuncEditor(someContext))`\r\n\r\nWe'd probably add some command in the command-palette or to a bound key to trigger this.  It'd also be cool to hook up the language service, and have an option to open like all usages or all related functions.... just ideas.\r\n\r\nI hope this helps! Thanks again for drawing up the diagram and sharing your idea.\r\n\r\n> I then scratch the in place refactoring and release the current version of Yode (prior known as NFBE) as next step. \r\n\r\nOh, and does this mean that you are going to have a release available? I'd love to try it if so!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323596914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324044634", "body": "> Worked when I cloned again and did it from scratch. How odd.\r\n\r\nStrange.. I've noticed occasionally the electron install fails (sometimes it fails to bring down the platform-specific binary), and manifests the same way.\r\n\r\nBut I'm glad it worked for you the second time! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324044634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324045790", "body": "Thanks for opening the issue, @Syenta !\r\n\r\nYes, sounds like we're not very graceful when trying to close a buffer with unsaved changes - your solution sounds great, @lukeberry99 \ud83d\udc4d \r\n\r\nI'll use this issue to track implementing a confirmation dialog when attemping to close a file with unsaved changes. We should also extend this to quitting the app (verify there are no unsaved changes before closing - it's easy to bail out of Oni with a buffer still active, unfortunately!)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324045790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324046421", "body": "Nice, thanks for doing this, @Granitosaurus ! \r\n\r\nReally appreciate the contribution, there's definitely a ton of room for improvement in the documentation.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324046421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324048087", "body": "Thanks for logging the issue, @lbebber ! Looks like there are a few issues to resolve in terms of keyboard layouts - we also have #396 which is similiar (but for Windows IME).\r\n\r\nThe way we are listening to key events and translating them to vim-keys in `Keyboard.ts` might not be sufficient in this case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324048087/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324049376", "body": "Thanks for isolating and logging the issue, @volny ! I'm able to reproduce this. It's interesting that <C-CR> works - I wonder if we aren't mapping the shift case correctly here in `Keyboard.ts`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324049376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324050134", "body": "Thanks for logging the issue, @neilcode ! (And for the screenshot)\r\n\r\nLooks like this is a duplicate of #484 - if there isn't an active 'Oni Window', the menu options will fail. I'll use #484 to track and add the 'duplicate' tag here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324050134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324050963", "body": "Thanks for logging the issue, @Balagrio , and all the details. I'm guessing it is related to some difference in the german keyboard layout. I think this is an issue with the mapping / conversion logic in `Keyboard.ts` - perhaps it is mistaking the `[` keycode for Escape.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324050963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324203238", "body": "Wow, very cool! Thanks for implementing this @justjoeyuk  ! I'll give it a go shortly \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324203238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324204699", "body": "Looks like this would address both #636 and #346 - quite a first PR \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324204699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324219317", "body": "Thanks for submitting the PR, @justjoeyuk ! \r\n\r\nJust tried this out - unfortunately it looks like there is a regression. The <C-P> detection to open the command palette no longer works (since now we are adding the `S` in). Vim seems to treat `<C-P>`, `<C-S-p>`, and `<C-S-P>` the same as far as I can tell, but Oni sees them as different currently.\r\n\r\nIt seems like there are a couple possibilities to fix this:\r\n- Only append `S-` if the character is longer than 1 (a compound key, like `space`)\r\n- Change the hardcoded key binding in `NeovimEditor.tsx` to be recognize the new key chord (`<C-S-P>` instead of  `<C-P>`. Ideally, our input recognition would treat these equally, but that would be a more in-depth fix.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324219317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324219600", "body": "Good catch, thank you @nfm!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324219600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324221271", "body": "Just tried this out, worked great! OSX is Oni's most downloaded platform, and this addresses one of the first blockers in the experience - excellent contribution!\r\n\r\nI think the only thing that would improve the experience is if we gave some sort of confirmation message when we successfully add (or remove) the path. Unfortunately, there isn't a message / notification UI yet. This can come in a separate PR, though - I added created issue #653 to track that.\r\n\r\nSo the only remaining items I see are:\r\n- Is it possible to derive the application path from `process.execPath` or `process.helperExecPath`? If so, this would work in the zip case too\r\n- Clamp the version of `sudo-prompt`\r\n\r\nOnce those are addressed, I'll go ahead and bring it in. This is really awesome, thanks for working on this @justjoeyuk !\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324221271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324221742", "body": "Ah, sorry if that wasn't clear! Issue #504 is tracking having a generalized language server integratoin.\r\n\r\nOnce this is in, it'd be easy to integrate Oni with one of the PHP language servers listed at http://langserver.org:\r\n\r\n- github.com/felixfbecker/php-language-server\r\n- github.com/HvyIndustries/crane/blob/master/server\r\n\r\nBy using a configuration setting. I'll leave this open to track validating that generalized solution works against one of those PHP servers. Thanks for the question, @azzsh !\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324221742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324222058", "body": "Hi @daenney ,\r\n\r\nThanks for posting the issue! Ya, that does not look very usable \ud83d\ude26 \r\n\r\nJust curious - what platform and neovim version are you using? Oni actually shouldn't require Python to run. I'm wondering what the output of `--version` is.\r\n\r\nBeing able to specify `g:python_host_prog` and `g:python3_host_prog` from the Oni config is a good suggestion - that could at least help mitigate this issue.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324222058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324223256", "body": "Ah just saw you posted there - thank you @badosu ! \r\n\r\nReally appreciate the offer to maintain it - creating a new one sounds reasonable. I'm not sure how it got up there in the first place (but it's cool it was added there).\r\n\r\nI wonder if there is a way we can automate it, such that we can push it up automatically on a release? It'd be great if it didn't need a manual step.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324223256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324345625", "body": "Great! Thanks for your help, @terlar and @badosu!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324345625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324348096", "body": "Yes, working on #633, I'm hoping to get this in by end of week. I know it is a huge pain point right now with Oni!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324348096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324350065", "body": "That makes sense. I was just looking through the `electron-builder` documentation (since that is what is used to generate the Linux packages), and I was wondering if they had any faculty for automatically uploading the artifacts.\r\n\r\nI was also looking at the release deployment docs in TravisCI: https://docs.travis-ci.com/user/deployment/releases/\r\n\r\nAlso, it looks like there was a discussion in https://github.com/tectonic-typesetting/tectonic/issues/54 around setting up deployment from TravisCI, which seems doable. Sounds like the biggest challenge is an SSH key is needed, and we may have set up an encryption for that. But it seems possible. Thanks again for your help here!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324350065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324352048", "body": "Wow, very cool! I'm excited to try test it out - I'll look at it soon. Thank you for making this contribution, @catsAND !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324352048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324354797", "body": "> Agreed, I'm not sure I'm a fan of the 'batteries included' philosophy. The built-in fuzzy finder is significantly slower than fzf with ag.\r\n\r\nYes, for sure - ideally we would want to be on-par with it out-of-the-box. The 'fallback' when we are not in a git repo is especially slow. It's especially painful since, until #633, there isn't a good way to opt out of this default.\r\n\r\nThere are a couple options: \r\n1. PR #633 will allow opting-out of default Oni keybind behavior using `unbind`, from `config.js` - this would be ideal if you don't prefer Oni's UI and would rather use CtrlP in entirety\r\n2. You can use the `editor.quickOpen.execCommand` to run your a CLI fuzzy-find program of your choosing (ag, etc). You just need to construct the command correctly - Oni will replace a `${search}` with the query in the fuzzy finder. This would be preferable if you like the UI, but want something faster or more purpose built.\r\n\r\nI like the idea of using `ripgrep` or something out of the box, it seems to work well for VSCode and there is an npm package to get the binary (which we could include in Oni).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324354797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324355510", "body": "Also, @joereynolds , regarding:\r\n\r\n> Agreed, I'm not sure I'm a fan of the 'batteries included' philosophy\r\n\r\nLet me know if QuickOpen is the main pain point here, or there are other places that cause problems. I want to make sure as we introduce customization (#633, etc) that we can address scenarios. I know like #654 is another place 'batteries included' causes problems.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324355510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324357907", "body": "Yep, by default, we're showing the `buffer list` in the tabline (so you'd need to use `:bprev` and `:bnext`, by default). \r\n\r\nI believe the issue may be related to that - there is a setting to switch to use 'vim tabs' - `tabs.showVimTabs`, which defaults to _false_\r\n\r\nI've gone back and forth on this default - some discussion here: #591, #602 It has the advantage of being similiar in behavior to other editors like Atom, VSCode, but the disadvantage of being confusing to Vim users who have a tab-based workflow.\r\n\r\nSo I guess the first question is - does switching `tabs.showVimTabs` to `true` behave as you'd expect? If not, it could mean there is some other issue impacting the behavior.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324357907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324358690", "body": "Ah interesting, bummer... thank you for catching that! I really need to set up an Arch machine at some point so I can test it there and it isn't a second-class citizen...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324358690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324520839", "body": "> As far as I know neovim itself doesn't know the difference between <c-p> and <c-P>,<c-s-p> doesn't work either, if it has c- it just looks at the letter not the case, m-p and m-P ARE case sensitive though.\r\n\r\nAh interesting, didn't realize that! I just tested and you're right.\r\n\r\nSince that's the case, seems like this fix would be the ideal one:\r\n> Change the hardcoded key binding in NeovimEditor.tsx to be recognize the new key chord (<C-S-P> instead of <C-P>. Ideally, our input recognition would treat these equally, but that would be a more in-depth fix.\r\n\r\nSpecifically, this line would need to be updated in `NeovimEditor.tsx`:\r\n```\r\n            } else if (key === \"<C-P>\" && this._screen.mode === \"normal\") {\r\n                this._tasks.show()\r\n            } else if (key === \"<C-pageup>\") {\r\n```\r\n\r\nTo use `<C-S-P>` instead of `<C-P>`, otherwise the tasks/command palette won't be triggered anymore.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324520839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324523678", "body": "Excellent, thank you for making the updates @justjoeyuk ! Trying it out now. The code looks good to me overall.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324523678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324524041", "body": "The dialog looks great! I am hitting an issue, though.\r\n\r\nI'm getting an error when it hits `_runSudoCommand`:\r\nError: ENOENT: no such file or directory, open '/Users/extr0py/oni/dist/Mac/Oni.app/Contents/Resources/app../../Resources/Oni.icns'\r\n\r\nLooks like perhaps its maybe missing the `/` after `app`?\r\n\r\nDigging into it, I think a robust fix is to use `path.join` to handle some of these corner cases:\r\n```\r\n        const appDirectory = path.join(path.dirname(process.mainModule.filename),\"..\", \"..\");\r\n        const options = { name: \"Oni\", icns: path.join(appDirectory, \"Resources/Oni.icns\") };\r\n        const linkPath = path.join(appDirectory, \"MacOS/Oni\");\r\n```\r\n\r\nCould you please update that logic to use `path.join`? Once I updated that, it started working and I was able to add to path again (with the icon to boot!) ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324524041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324525420", "body": "(I also saw the appveyor build failed, that looks like it was a problem installing electron, not related to the PR - I kicked it off again)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324525420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324527165", "body": "Just tried it out... most excellent! I liked the commands to insert the date/time and filename. This is really cool and definitely fits in with the 'ease learning curve' goal. \r\n\r\nI want to pursue adding the shortcuts/commands in the menu as hint-text, to show the user how they can do this via keyboard, but that can come later.\r\n\r\nThe only one that didn't quite work as I expected was 'indent' and 'unindent' - I wonder if they should be `>>` and `<<` instead? I'll go ahead and bring this in, though - we can tackle that as a next step.\r\n\r\nThanks again for putting this together @catsAND !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324527165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324527809", "body": "@mzummo , did you download the binary or clone from source?\r\n\r\n@cyansprite made a great fix (#626) that improved the dirty-tracking of buffers. Unfortunately that isn't in the 0.2.8 release (it will definitely be in 0.2.9 though!). Sometimes, without that fix, we don't show the 'modified' icon in the buffer - but it actually is modified to vim, and vim won't let you close / move away from it. This can cause some problems like you describe. If you're up for building from srouce, that might be worth a shot to see if #626 fixes it!\r\n\r\nIf it is still an issue, running `:tabs` and `:ls` as @cyansprite  suggested would be helpful, to see what the buffer/tab state is", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324527809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324528954", "body": "Interesting, thanks for the detailed repro, @badosu ! Yes, in most places, when we use the 'Open File' gesture we use `:tabnew` (basically open a file in a new tab), but it seems like in QuickOpen we use `e:`, which opens in the existing tabs. So the buffer is getting opened in one of the existing tabs.\r\n\r\nI think it'd be reasonable to use `:tabnew` for this scenario in QuickOpen, if there is already an opened file - that would help alleviate some of the confusion here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324528954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324529344", "body": "Sorry I'm a bit late to the party here!  Was (finally) reading through the comments \ud83d\ude04 \r\n\r\nI really liked this:\r\n> If we use the single neovim instance strategy we could use a temporary hidden buffer that the user doesn't have to know about (i.e. we don't show hidden buffers and unless they open it with buffers! they won't ever know, if they close it we can just open it again...) and so we can use this temporary buffer, use setline()/getline() and that will be our input field, this way we don't have to wait for a new spin each and every time, we can just edit the buffer as the text field tied to it, and then we can edit just like any other neovim buffer... it's a bit complex but it's a wildy awesome idea and I would enjoy this a lot, but I don't even know how it's hooked up to begin with but, yeah.\r\nOptionally we can have an entire nvim instance to itself... and other things we might want nvim to use but the user never interact directly, that might be an even better plan.\r\nWe could have nvim multiplexing or a neovim singleton, and then a nvim singleton for temporary operations like text inputs.\r\nThis kind of goes inline with #633 \r\n\r\nSounds like we're exactly on the same page here! That's exactly how I was thinking of using it. I forgot to call out one use case I want to pursue also - I'd like to have an _embedded browser_ in Oni (which is basically free, because Electron), and then use Neovim to manipulate text inputs. I think it'd be really helpful, at least for me, to be able to pop open github and use the keyboard to navigate around  (#361) and use all the neovim-power I have to write text in the issues. Lots of cool possibilities!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324529344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324529497", "body": "Thanks @justjoeyuk ! Ya, looks like that is addressed, it's really helpful to have that feedback. I'll go ahead and close this out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324529497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324530970", "body": "Interesting... I just tried Oni on my Mac (Sierra 10.12.5), and ran `:CheckHealth` to make sure I wasn't loading python, and I don't have a python provider registered. It _is_ able to find Python 2.7, though (just not the module).\r\n\r\nAs a temporary measure, to check if this is the issue, could you please try setting `g:python_host_prog` in `/Contents/Resources/app/vim/default/bundle/oni-vim-defaults/plugin/init.vim`? This is the file that has an initial init.vim for Oni.  This will just help validate that this is the root cause (and hopefully allow you to try Oni).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324530970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324642353", "body": "> I wonder if that's possible as it's the behaviour I wanted, to just be a different presentation of the tabs with the same functionality.\r\n\r\n@badosu - Did you try setting the `tabs.showVimTabs` setting to `true`?  (it will use the tab information instead of the buffer-list as the backing data, but same tab UI). I think that should give you the behavior you're expecting.\r\n\r\n> Yes if they have the show vim tabs this is reasonable otherwise have a c-t that will open a new tab much like c-s and c-v open splits, does this sound reasonable?\r\n\r\n@cyansprite , sounds great to me!\r\n\r\n> Also there seems to be so much confusion around this I was thinking of styling the tabs differently for buffers that way people would know if it was a tab versus a buffer.\r\n\r\nYes, I was thinking about this too! Styling the tabs differently is an interesting idea. We don't really mix the buffers/tabs together though - it's either showing \"buffers\" or \"tabs\", so I guess it wouldn't look different until you change the `tabs.showVimTabs` to `true`?\r\n\r\nI think the big problem is _discoverability_ - it's hard to know why Oni's tabs are behaving the way they are, if you expect Vim tabs. In a similiar vein, one thing I was thinking about (it was actually in my original todo list), was to have a 'buffer/tab' mode switcher in the far right of the tab line. If it was done right, it would make it obvious (once you discover that UI affordance) that it's showing buffers instead of vim tabs.\r\n\r\nAlternatively, perhaps we could add an option in the Menu bar to allow switching between these tabs?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324642353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324644379", "body": "This should be addressed by #620 , but there are a few remaining issues tracked in #628. I'll close this and use #628 to track the outstanding issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324644379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324648697", "body": "Thanks @justjoeyuk !\r\n\r\nI just tested this out - the 'Command Palette' (tasks) opens up fine now, but unfortunately I can't enter uppercase numbers into it. I think this is due to the `evt.preventDefault` we do with the shift key - could we remove that `preventDefault` for the time being? We use it for the `alt`/`ctrl` keys to not conflict with global keyboard shortcuts/accelerators, but I don't think we need it for the shift key (and it breaks that 'Command Palette' case).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324648697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324649015", "body": "You can reproduce it pretty easily by:\r\n- Open Oni\r\n- Press `Control+Shift+P` (command palette opens)\r\n- Try typing `N` \r\n\r\nAny uppercase key does not get output, only lowercase", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324649015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324650184", "body": "Awesome, thanks @justjoeyuk ! The path handling looks more robust now, and the 'add to path' gesture works great on my OS X machine. Most excellent.\r\n\r\nI'll go ahead and bring this in! Thanks again for putting this together. \r\n\r\nI believe this has had a bounty on it for a while against #346  - so make sure to claim that!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324650184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324650758", "body": "This was added by @justjoeyuk in #646 . Thanks @justjoeyuk ! Nice find on `sudo-prompt`, that helped... and since we are adding a direct symlink to the binary, it should be fast.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324650758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324930884", "body": "Thanks for making that tweak and confirming, @daenney ! I'll leave this open to track adding the `g:python_host_prog` and `g:python3_host_prog` variables as configuration settings in Oni.\r\n\r\nIt'd be nice to have a general solution for this, like:\r\n\r\n```\r\n\"neovim.global.python_host_prog\": \"~/non-standard-python-path\",\r\n```\r\n\r\n(Basically, have a way to assign any global configuration values directly in the Oni config). This is touched on some in #33 too", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324930884/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324931636", "body": "There were some issues with the last electron build I tried that blocked this scenario - I'm going to revisit once the new Electron build is out (~9/5).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324931636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324931849", "body": "Thanks for logging the issue @daenney ! This looks like a duplicate of #484 - we need to handle the case on OSX where the menu is open but there is no `BrowserWindow` available. I'll close for now as a duplicate, but feel free to reopen if #484 isn't sufficiently tracking this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324931849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324935497", "body": "> Well, it works with vim's native tabs instead of the nice looking ones from Oni.\r\n\r\nInteresting, do you have a screenshot of what you are seeing with `tabs.showVimTabs` set to `true`? If it's working correctly, it should use the exact same UI, just be backed by the tab data instead of by the buffers (which would be different in cases where there are multiple buffers in a tab)\r\n\r\nI also realized it's kind of a misleading name (and that I'm bad at naming configuration variables)... It's not actually changing the UI representation, but the underlying data - if it's set to false, we use the buffers as the data model, if it's set to true, we use the tabs as the data model - but the UI is the same. \r\n\r\nHere's a quick gif I made:\r\n![showvimtabs](https://user-images.githubusercontent.com/13532591/29718075-5f6cfca4-8966-11e7-9c1b-0e97e4e74601.gif)\r\n\r\nI start in the default mode \"buffers-as-tab-UI\", and the current behavior of QuickOpen is `:e` (so open in current tab) - but each file gets its own tab, since we're in the buffer mode.\r\n\r\nOnce I switch over the \"vim-tabs-as-tab-UI\" mode by setting `tabs.showVimTabs` to `true` - they collapse to one tab, because it's actually just one vim tab with four open buffers. With `tabs.showVimTabs` set to `false`, I see 4 tabs in the UI (since there are 4 buffers), but if I set `tabs.showVimTabs` set to `true`, I see 1 tab in the UI (since there is one vim-tab).\r\n\r\nHope that helps clarify a bit-\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324935497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324936699", "body": "Excellent, thanks for the feedback @josemarluedke !\r\n\r\n> One thing that I think is missing and it very important for me personally is be able to paste in the command line.\r\n\r\nAh yes, thanks for sharing the scenario... that makes a lot of sense. I believe this should be pretty straightforward to fix. The special `<C-v>` behavior is gated on being in insert mode, so I think we just need to expand it to happen in command mode as well.\r\n\r\nRe-opened just so it wouldn't fall off the radar\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324936699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324938048", "body": "> Awesome, sorry for the ignorant attempts, this is all a learning experience for me - first time with TypeScript (and neovim, for that matter!)\r\n\r\nOh no problem! Jumping in and pushing up code is the best way to learn (IMO). Thanks for taking time to dig into the codebase \ud83d\ude04 I really appreciate the contributions.\r\n\r\nI think the fix here should be relatively straightforward - we can just remove the `evt.preventDefault` in the shift case, and that should address the remaining issue. After that, should be good to go in!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324938048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324942852", "body": "Thanks for posting the question, @rrichardson ! This would definitely be useful giving the popularity of flow and eslint.\r\n\r\n### ESLint\r\n\r\nESLint looks to be pretty similiar to TSLint (which I created a really simple plugin for here: https://github.com/extr0py/oni-plugin-tslint), in that it's a CLI tool that pushes out errors. \r\n\r\nI think a good starting point here would be to clone the `oni-plugin-tslint` repo, and tweak it pick up the ESLint CLI tool. The interesting bits are hooking up `buffer-saved` and `buffer-enter` events, then it runs tslint, and then it pushes the errors back to Oni uses the  `Oni.diagnostics.setErrors` API.\r\n\r\nThere aren't too many Oni plugins yet, this could potentially be the first external one ;)\r\n\r\nThe only caveat is the Oni API is in flux - but that's on my end to figure out... I'm looking at ways to have a graceful degradation when I plan on changing the API surface area.\r\n\r\n### Flow\r\n\r\nLooks like there is a language server implementation of Flow, which is great! I see one here: https://github.com/flowtype/flow-language-server\r\n\r\nSeems like that would be the easiest way to hook up. I have an example implementation against a C# language server here: https://github.com/extr0py/oni-language-csharp\r\n\r\nThe place to look there is in the `Oni.createLanugageClient` API.\r\n\r\nFor language servers that have simple initialization requirements (ie, they don't care too much about finding a root path), I'd like to simplify the language server by having it just be a configuration value - that work is tracked in #504 .\r\n\r\nThe only other item here is that, Oni is hardcoded to bring in the typescript language service for JS/TS files at the moment (to give out-of-the-box completion for web projects). For cases where the user would prefer to use the Flow language service, we'd want to give them an option to disable the default typescript language service behavior.\r\n\r\nHope that helps - let me know if you have any other questions about those existing plugins or how they could work with Flow / ESLint\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324942852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324951431", "body": "Need to incorporate `cmdline_normal` change here", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324951431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325054370", "body": "Awesome! I think it's pretty common to hit that 'root dir' case on first install / open of Oni. Ideally that 'happy path' scenario should be smooth and at least point the user to the 'Open Folder' and 'Bookmarks' options.\r\n\r\n> Also was it the latest release or did you build from source? Idk if it's in the latest release that's a question for@extr0py\r\n\r\nLooks like the bookmark work did make it into the 0.2.8 release, but perhaps the root-dir case isn't handled? Sounds like from the discussion we'll have to include that in our special cases for now (root dir, install directory, home directory)\r\n\r\n> I wanna tear through the source and issues and try to contribute when I can.\r\n\r\nExcellent \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325054370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325253998", "body": "Thanks for the PR @MasonAsh ! Agreed, this makes sense to be a reasonable default. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325253998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325254025", "body": "Merged in, thanks for the contribution! \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325254025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325254429", "body": "Hi @Kcrong ,\r\n\r\nThanks for trying out Oni! Yes, we're actually just working on finalizing this. There has been a PR in #646 that adds a helper to 'Add to Path' on OSX.  #636 is also tracking the remaining work, basically a shell script we can use to start Oni.\r\n\r\nProbably the simplest way to get Oni in your path is to [build from source](https://github.com/extr0py/oni#build), as the `npm link` command will expose a global `oni` shell command. Hope that helps!\r\n\r\nIt will be really nice to have this streamlined on OSX with the fix for #646 and the fix for #636 in.\r\n\r\nI'll close this as a duplicate of #636, but let me know if you have any further questions. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325254429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325255157", "body": "> BTW This project is absolutely amazing.\r\n\r\nCheers, thanks for trying it out \ud83d\ude04 \r\n\r\nEventually, I'd like to have a custom build of Neovim for oni (which would mean we could do something like `if has('oni')`).\r\n\r\nRight now, the `g:gui_oni` value is set on load, so you can use `if exists(\"g:gui_oni\")` in your vimrc to handle config specific to oni.\r\n\r\nHope that helps! I'll close this for now, but please feel free to reopen if that doesn't work for you.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325255157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325255510", "body": "Yes, good catch, thanks for logging the issue @skosch ! This is a bug, should be in parity with vim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325255510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325256819", "body": "This is a pretty simple fix, the logic was just busted for picking the cursor shape. One thing I've thought might be nice is to have a subtle differentiation for the cursor between visual and normal modes (like a subtle border), but that can come later.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325256819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325256963", "body": "Sure thing! That looks like a duplicate of #662 - we don't do a very good job at the moment of handling the case where you open the fuzzy finder from home or a root dir. \r\n\r\nIf you follow the workaround mentioned there, and select a folder, like `Ctrl+Shift+P` -> `Open Folder`. You can also just use the vim command like `:cd /my/folder`. At that point, once a folder is opened, the fuzzy finder should work better. Hope that helps!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325256963/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325257127", "body": "Wow, that's awesome! Can't wait to have that integrated. It's so cool to see the changes to setting & configuration made real-time", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325257127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325257377", "body": "And thanks for linking the plugin, I'll check it out in a bit! I read through the README and it sounds interesting. I need to test it out / see how to map in my workflow. Yanking into a list and being able to grab from the list in a convenient manner sounds interesting, especially when you are juggling multiple items you want to store.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325257377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325257856", "body": "Interesting - we could try disabling the syntax highlighting (that Oni adds), and see if that helps-\r\n\r\nA few other questions:\r\n- Which platform is this on? Windows?\r\n- What kind of file is it? Is it large?\r\n- Is it a different file everytime? Or does it happen consistently for certain files?\r\n- How often does it occur?\r\n- Is it something you just started seeing recently, or has it been happening since you started using Oni?\r\n\r\nHopefully this can help narrow it down.\r\n\r\nI have seen some freezing issues when I loaded a file that had a giant base64 data string in it. I wonder if it is related to that?\r\n\r\nAnother issue that could be happening, is if the file is large, it might be spending a lot of time sending us the `buffer-update` event, or Oni might be choking on receiving it.\r\n\r\nThere also cases where neovim has been crashing on Windows: #409 - this could also be related.\r\n\r\nI need to have a better way to disable the Oni-side plugins as well as the buffer-updates so that we can better rule these out (or identify them as problematic).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325257856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325259114", "body": "Interesting, thanks for logging the issue, @someguynamedmatt ! I'm able to reproduce this too with the step you provided. Very helpful, it was interesting to note the different experiences between clicking the path vs 'Open Folder'.\r\n\r\nI also noticed that, in the Command Palette (`<C-S-P>`) _clicking_ on the 'Open Folder' option directly works, but pressing enter fails as you describe. I'm suspecting that the 'enter' key is actually picked up by OSX's Open File/Folder dialog, and dismisses it immediately. Going to test that out and see if that's the issue... ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325259114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325259207", "body": "> Would love to help but unfortunately I don't have a Mac and Linux and Windows works perfect for me.\r\n\r\nAh ya, unfortunately this looks a quirk specific to Mac - appreciate the offer though!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325259207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325363093", "body": "Sweet, thanks @Kcrong , glad that worked for now \ud83d\udc4d  Thanks for the kind words!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325363093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325367686", "body": "Wow, congrats @hoschi ! I just played with it briefly today, it looks really cool.\r\n\r\nI like the polish you have in terms of the Open File / Open Function experience. The idea of editing based on AST nodes is very powerful (and fits in well to the Vim philosophy). I think it could be really cool to use in addition to what the language server gives us - for example, we could open all usages of functions in Yode function editors, or open a corresponding test in an editor.\r\n\r\nIt's neat that you used AST Explorer and Recast - I've been meaning to try those out.\r\n\r\nIt's cool to see ideas that can change the way we use screenspace, because as you mentioned in the README, I'm sure we haven't maxed out with the tabs/splits layouts.\r\n\r\nWas cool to see Oni in the roadmap too, thanks! \ud83d\udc4d \ud83c\udf89 Excited to work more with you on this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325367686/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325368050", "body": "Oh wow, this is the first electron segfault I've hit (in this project, at least!). Thanks for reporting @hoschi , and letting me know the electron upgrade fixed it. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325368050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325373080", "body": "It looks like there is still a regression with 1.7.5 on OSX: electron/electron#9965 and electron/electron#9880\r\n\r\nOpening multiple instances causes problems - it seems that `app.makeSingleInstance` callback is delayed before being called, which is a poor experience (makes startup feel _very_ slow)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325373080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325374786", "body": "Thanks for logging the issue, @MasonAsh !\r\n\r\nYes, unfortunately Oni isn't a good citizen when closing via the 'x' - we basically let all the processes die, instead of gracefully shutting down Neovim. (This would be a great place to add a message prompting the user to save, too, if they haven't saved yet!) This definitely needs to be fixed.\r\n\r\nI also have considered using `noswapfile` as a default (for perf), but that's orthogonal to closing Neovim more gracefully.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325374786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325682358", "body": "> @extr0py Sorry for the delay, long weekend! Done.\r\n\r\nHaha no worries, thanks for updating it! I just tried it out and it's working great. I'll bring it in once the build is complete-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325682358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325687879", "body": "Merged! Thanks for the contribution, @justjoeyuk !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325687879/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326307694", "body": "Thanks for the responses!\r\n\r\nOne option might be to disable the typescript integration, just to see if that is the culprit.... A quick and dirty way to do that is to delete the `oni-plugin-typescript` folder in vim\\core, and see if that makes the problem go away (unfortunately, you lose completion and language functionality there)...\r\n\r\nIf it turns out that is the culprit, we could bring it back, but disable some pieces of it.\r\n\r\nMy hunch is that these issues are either due to the way we send buffer updates from neovim -> Oni, or to the syntax highlighting we apply from the language server side.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326307694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326308602", "body": "Very strange! \r\n\r\nJust a couple questions:\r\n1) What does `process.execPath` return in the console?\r\n2) Does `/home/hoschi/repos/oni-master/node_modules/electron/dist/electron` not exist on your file system?\r\n\r\nI would try closing Oni completely (including all electron processes, and reopening). It might be trying to reference the previous electron build", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326308602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326309105", "body": ">  I figure anything beyond enticing users to install Oni can be moved to the wiki.\r\n\r\nAwesome! Yes, the README is way too overwhelming right now - thanks for doing this! Wiki looks great too \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326309105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326311769", "body": "Thanks for catching this and fixing it, @triplepointfive ! \r\n\r\nI just saw that @keforbes updated this in PR #673 - so looks like this isn't needed anymore. Appreciate you making the change though! I'll close this out as it is addressed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326311769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326314663", "body": "Awesome, thanks for the PR, @someguynamedmatt ! Handling the exit code makes sense to me - seems like we can detect several of the cases where we'd stick on \"Loading...\" with that.\r\n\r\n> Moved some logic in show() into its own private function because that code is now being used in two other places\r\n\r\nExcellent!\r\n\r\n> I hope this helps some. I noticed the team has commented on removing some of the areas of code that I touched in favor of async functions. I'd like to work on this too, at some point, but I think this PR gives a decent/quick solution to #662.\r\n\r\nDefinitely, that would be great! I know @cyansprite has been doing some thinking around making this async as well. I'd really like to bring in incremental results, so that for large dirs that take time, we can at least start showing _something_, as well as investigate caching strategies.\r\n\r\nOverall the PR looks good to me, just had one comment! Once that is resolved (not sure if it will require a change), I'll bring this in. Thanks @someguynamedmatt !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326314663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326316441", "body": "Definitely! There was some discussion here around some ways to improve this experience: https://github.com/extr0py/oni/pull/574\r\n\r\nBut I agree, this would help for sure. It kind of goes along with some of the ideas @cyansprite had in that thread (like buffer search, bookmark search), as well as easily switching to 'command palette' mode.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326316441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326577383", "body": "Excellent! \ud83d\udc4d I'll keep this open to track the updating to Electron, which seems to fix some of these crashes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326577383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326578685", "body": "This would unblock the upgrade to Electron 1.7.x, 1.8.x", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326578685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326578962", "body": "Opened #679 to track the upgrade blocker (issues with the `makeSingleInstance` API)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326578962/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326581720", "body": "For sure, that's exciting! One roadblock I hit with Reason is that I couldn't get the full dev experience on my primary machine (Windows), but I see there's been a ton of progress there. I just saw this project which allows access to the tools: https://github.com/fhelwanger/ocaml-on-windows, and it looks like https://github.com/freebroccolo/ocaml-language-server/pull/29 will make that work on Windows.\r\n\r\nAnd according to the [WSL - Interopability](https://msdn.microsoft.com/en-us/commandline/wsl/interop) document, you can pretty much run any Linux command like `bash -c \"ls -la\"`, so with all those pieces in place, it really doesn't seem like there are any blockers...  just maybe minor modifications to Oni's API to use `bash` in our `spawn` call (and some robustness to fail gracefully).\r\n\r\nI guess the only unknown is how Windows pipes the output from the LSP, but I know that the ocaml-language-server supports a variety of connection options (ipc, socket, stdio) - I'm sure at least one of those will work, if not all out of of the box.\r\n\r\n__TL;DR__ It might even be as simple as setting the `ocaml.langServerCommand' option to some variant like `bash -c \"ocaml-language-server\"` (default is just `ocaml-language-server`)... but if not that easy, definitely still possible.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326581720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326583342", "body": "Ah yes, I hit this too, it is annoying!\r\n\r\nI believe the problem is here in `oni/vim/core/oni-plugin-typescript/src/index.ts`:\r\n```\r\n    const getCompletions = (textDocumentPosition: Oni.EventContext) => {\r\n        if (textDocumentPosition.column <= 1) {\r\n            return Promise.resolve({\r\n                completions: [],\r\n            })\r\n        }\r\n\r\n        const currentLine = lastBuffer[textDocumentPosition.line - 1]\r\n        let col = textDocumentPosition.column - 2\r\n        let currentPrefix = \"\"\r\n\r\n        while (col >= 0) {\r\n            const currentCharacter = currentLine[col]\r\n\r\n            if (!currentCharacter.match(/[_a-z]/i)) {\r\n                break\r\n            }\r\n\r\n            currentPrefix = currentCharacter + currentPrefix\r\n            col--\r\n        }\r\n\r\n        const basePos = col\r\n\r\n        if (currentPrefix.length === 0 && currentLine[basePos] !== \".\") {\r\n            return Promise.resolve({\r\n                base: currentPrefix,\r\n                completions: [],\r\n            })\r\n        }\r\n```\r\n\r\nThis logic decides where we 'ask' for completions from, and what the prefix is. Right now, because of the regex - `/[_a-z]/i`), it's only matching letters + underscore, and ideally it would match some additional characters as above.\r\n\r\nExpanding this to handle some of those cases, or be more generalized, would be very helpful!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326583342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326584833", "body": "Excelllent! Just tried it out. Looks great, thanks for making the changes & the contribution, @someguynamedmatt - merging in now!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326584833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326586222", "body": "Blocked by #679 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326586222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326626722", "body": "> Anyway, sorry to be so negative but I think we should have a very explicit separation of duties between <C-p> and <C-S-p>.\r\n\r\nNot negative at all, this is a fair point! Thanks for voicing your concern. I think VSCode actually strikes a nice balance here - they allow you to interface with different \"modes\" of the palette by a command prefix. And if there is nothing to show, they help guide you to type \"?\", which helps you discover the available modes and where you can go next. This seems like a pretty reasonable model to adopt, and could help solve some of these problems, where we want to balance surfacing different modes and functionality without blurring the lines too much between entity/command/actions that are available.\r\n\r\nIt also is a natural extension of the Vim model - you could imagine one day typing \":\" brings up the command palette in 'Ex' mode which exposes all the vim commands, or some hybrid of vim and oni commands :) \r\n\r\nIt seems like there are a couple constraints that are implicitly coming up:\r\n- Opening Ctrl-P from any directory should _always_ have some actionable consequence (ie, not stuck in loading, or no options) and it should be clear to the user. This is especially important in our happy path scenario, like user installs Oni and opens for the first time, presses Ctrl+P - this needs to be a good experience.\r\n- There should be clear differentation between the types of actions & entities available. The concern here is that the line is getting blurry between files/folders/actions/commands.\r\n\r\nThere is some tension between these constraints at the moment, since pressing Ctrl+P in certain folders causes a bad experience, and we want to help guide the user to open a folder or add a bookmark...\r\n\r\nI think the 'modal' paradigm VSCode has for their command menu helps solve these problems. Try out the scenario where you close all folders, open it fresh, and press Ctrl-P - it's hard for me to imagine how to do it much better.\r\n\r\nTo start with, how about we pivot to the following behavior?\r\n- Add 'hint text' to the input dialog that says \"Press '?' to see available options\"\r\n- If the user types \"?\", show two options:\r\n\t- \"... Open File\"\r\n        - \"/ Search in active buffer\"\r\n        - \"> Execute Oni Command (ie, Open Folder)\"\r\n- If the user types \"?>\" or \">\", switch to the command palette\r\n\r\nPlaying with the VSCode model, it's really well thought-out - like if I type \"?\" and then \"?:\" it automatically switches over to \":\". \r\n\r\nSome command prefixes we could add later are:\r\n\t- \": Execute Vim Command\" (and ideally have some merge / consolidation between 'oni command' and 'vim command')\r\n        - \"% Active buffers\"\r\n        - \"` Bookmarks\"\r\n        - \"# Search for symbol\"\r\n        - ???\r\n\r\nIMO this should be the next thing we focus on for the menu - putting this scaffolding in place so that we can build future functionality on top of it, as the current model doesn't really lend itself well to this. Essentially V2 of the quick open and command palette :) \r\n\r\nNuclide's QuickOpen model here: https://nuclide.io/docs/features/quick-open/ is really interesting too. They have a set of tabs underneath the text box that help guide you in terms of what you can search for... it's a modal paradigm too but a different entry point. Something like this could solve the problem too, as long as it's easy to switch between 'modes' via the keyboard.\r\n\r\nRegarding the PR - @cyansprite - do you think it would be possible to split out the colorscheme / performance enhancements as separate items? Seems like they would be orthogonal to the changes I'm describing above. Then we could start to pursue this \"prefix-based modal switcher\" that could tackle these issues holistically.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326626722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326628138", "body": "Hmm, I haven't been able to dig into this too much - but I suspect what's happening here is that we OSX's platform open-folder modal on the _keydown_ event, and that experience actually listens for a _keyup_ event!\r\n\r\nA few options here:\r\n- A quick-and-dirty option to validate this is the issue would be to switch the event we listen to from \"keydown\" to \"keyup\" - this happens in `Keyboard.ts\". This wouldn't be a viable long-term solution, because it would hurt the typing latency when editing, but it could help us at least validate the hypothesis.\r\n- A longer-term fix, if that is the issue, would be to delay showing the open folder until we receive a 'keyup' event - the open folder action is registered in `Commands.ts`, so we could add some logic there to hold off on opening it until we have a `keyup` event.\r\n- An alternative long-term fix,  would be to have some category of commands that we listen to on `keyup`, and have open folder be one of those commands.\r\n\r\nThere might be another possibility, like hook the `keyup` event in `Keyboard.ts`, and always prevent default/stoppropagation for the enter key in that case.\r\n\r\nHope that helps gives some ideas, at least! Thanks for your help with this :smile:", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326628138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326634742", "body": "No longer needed with #633 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326634742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326745463", "body": "@hoschi Unfortunately I don't think that will help so much, since if I understand correctly, it is essentially rendering using the same strategy as before (just adding a way to do that in the terminal). Basically like a floating split \ud83d\ude04 It could be interesting for implementing `yode` directly in the TUI, though! And it does open up interesting possibilities for other TUI enhancements (easier to build custom menus and things).\r\n\r\nThe PR I've been watching that externalizes windows is here neovim/neovim#5686 - and that could potentially get us pretty far without multiplexing!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326745463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326746737", "body": "I tried it out on Windows and it seemed like it worked fine too! I was worried about integrations with native UX (like alert dialogs, system menus) and those were fine.\r\n\r\nThanks for investigating and putting together the fix, @someguynamedmatt ! Merging now \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326746737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326749296", "body": "I think this is because we aren't handling the `AltGr` key correctly - depending on the platform it either comes to our input layer as `C+[` or `C+A+[`, so we need to handle this case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326749296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326749532", "body": "It looks like right now we are not handling 'Dead Keys' correctly, which might be related here. I see similiar issues with other keyboard layouts that have dead keys (like `~` in ENG INTL)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326749532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326759755", "body": "This was addressed by #673 - thanks @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326759755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326759958", "body": "PR #633 is merged now, so you can opt-out of the behavior by adding this to your oni config:\r\n```\r\nconst activate = (oni) => {\r\n    // Remove default behavior of `control+p` key\r\n     oni.input.unbind(\"<c-p>\")\r\n}\r\n\r\nmodule.exports = {\r\n    activate,\r\n   // other config options here...\r\n   //\"oni.useDefaultConfig\": true,\r\n  // ...\r\n}\r\n```\r\nOf course, you'll need to grab the bits from latest master, as the `oni.input` API isn't available in a release yet. I'll close this for now, but let me know if you have any questions!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326759958/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326760119", "body": "Now that #633 is in, this should be enabled by  adding:\r\n\r\n```\r\n// menu bindings...\r\noni.input.bind(\"<c-j>\", \"menu.next\")\r\noni.input.bind(\"<c-k>\", \"menu.previous\")\r\n\r\n// completion too\r\noni.input.bind(\"<c-j>\", \"completion.next\")\r\noni.input.bind(\"<c-k>\", \"completion.previous\")\r\n```\r\n\r\nTo the `activate` method of your config.js. I'll close this for now, but let me know if it doesn't work for you @cyansprite ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326760119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326760173", "body": "#633 is now in, and this is added as a default key binding (both `<tab>` and `<enter>` complete now). For further customization, check out:  https://github.com/extr0py/oni/wiki/Configuration#keyboard-bindings", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326760173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326760290", "body": "With PR #633 , you can now opt-out of the default pageup/pagedown behavior.\r\n\r\nYou'll need to add these to the `activate` method of your config.js:\r\n```\r\n// Opt-out of default bindings for pageup/pagedown\r\noni.input.unbind(\"<c-pageup>\")\r\noni.input.unbind(\"<c-pagedown>\")\r\n```\r\n\r\nMore information on keyboard bindings here: https://github.com/extr0py/oni/wiki/Configuration#keyboard-bindings", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326760290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326760320", "body": "I'll close this for now, but let me know if you have any questions, or feel free to reopen if this doesn't solve the problem.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326760320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326762352", "body": "> Yeah, looks like changing name to normalizePath(name) fixed this for me, so I'll make a PR.\r\n\r\nAwesome! Thanks for fixing it \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326762352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326762395", "body": "Change looks great! I'll merge it in when the build completes. Thanks for the fix @CrossR !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326762395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326762942", "body": "Fixes #628 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326762942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326763051", "body": "Haha ya, as soon as I saw there was the issue, there was already a PR fixing it \ud83d\ude04 Awesome!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326763051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326763499", "body": "Definitely - out of the box, the typescript language server is loaded by default to handle typescript / javascript (errors mostly). and then there is also a tslint plugin:\r\nhttps://github.com/extr0py/oni-plugin-tslint\r\n\r\nBoth of these strategies work by looking for a `tsconfig.json` (typescript) or a `tslint.json` upwards in the directory tree from the open file. So it is basically configurable by these settings.\r\n\r\nThere was some discussion in #659 about eslint / flow, and I'd expect these to work the same way (I know eslint is configured by an `.eslintrc` file).\r\n\r\nThere is also some (undocumented) functionality on per-project configuration loading - where you can provide a `config.js` for a project directory (in `.oni`) and override settings, too. I'd like to integrate this more deeply with `Open Folder` prior to documenting it, but it's on-deck.\r\n\r\nIs there a particular linting tool you are using? Or a case not working the way you'd expect?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326763499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326763549", "body": "This was fixed by PR #681 . Thanks for the help and fix, @someguynamedmatt ! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326763549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326823420", "body": "Excellent, thanks @justinmk ! That sounds like a much cleaner approach.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326823420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326827780", "body": "May need to combine with a fix for #679 , so that the working directory can be passed around.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326827780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326829289", "body": "Splitting this out into separate fixes, and need to address #679 prior to taking this-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326829289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327506157", "body": "Will include this in the fix for #679 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327506157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327510064", "body": "Oh no worries @cyansprite , that sounds rough! \ud83d\ude16 Good luck with that xubuntu machine", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327510064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327822928", "body": "Awesome! Thanks for doing this.\r\n\r\n> Also, since I was already modifying the README, I changed all instances of ONI to Oni and VIM to Vim.\r\n\r\nExcellent, it's great to have this consistent now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327822928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327824916", "body": "Thanks for logging the issue and the screenshots, @DeMuu ! Looks like this is a duplicate of #484 - we need to handle the case where there are no 'oni' windows open and a menu option is accessed.\r\n\r\nWill close this as a duplicate of #484, but feel free to reopen if that isn't adequately tracking the issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327824916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328111931", "body": "Hi Alok, thanks for logging the issue!\r\n\r\nI wasn't able to repro this on Windows, but I'm able to reproduce it on OSX using this command:\r\n` :noremap <a-s> :echo \"test\"<CR>`\r\n\r\nSeems like we're not handling the alt key properly or something here, there must be some difference in our input processing in `Keyboard.ts`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328111931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328120407", "body": "Somewhat related to #644 - <a-s> resolves to the `\u00df` character on OS X, so we may need some handling to differentiate that (it's kind of similar to the AltGr issue, just in the general case) - our current input code gives us `<a-\u00df>`, which isn't going to be what neovim expects.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328120407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328128398", "body": "We need to make it very easy to diagnose and fix errors here too (and improve robustness)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328128398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328297422", "body": "Hey @TalAmuyal ! This is awesome! Thanks for looking into this, would be really cool to have this support.\r\n\r\nI haven't heard of anyone investigating this today - I'm working a bit on #504 (which is another language client for Java).\r\n\r\nThe approach that `oni-plugin-python` takes sounds like the best approach for now, and `oni-plugin-golang` is another sample.\r\n\r\nSome of the language clients need more, like finding a root project (for example, the C# plugin needs to find the root `.csproj` file - https://github.com/extr0py/oni-language-csharp/blob/e59ebe2b53b96e10b177a9c31a3700ba3601acfe/lib/index.js#L15). I looked over the vscode plugin for clangd and doesn't seem like this would be necessary.\r\n\r\nAs far as tips go, here's what I can think of off the top of my head...\r\n- Using the python one is a great starting point - you'll need to change the `supportedFileTypes` in the package.json. \r\n- You can remove the `disableDocumentSymbol` option \r\n- I'd recommend with building with `npm run build-debug` and using the developer console (open the dev tools via `Control+Shift+P` - errors with the language server integration tend to show up here).\r\n\r\nLet me know if you hit any issues or have any questions.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328297422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328350422", "body": "Another cool capability here would be to copy and paste files in the file explorer by using `yy` and `p` gestures.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328350422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328353971", "body": "Fixes #679 \r\nFixes #671 (by bumping Electron version to 1.7.7)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328353971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328354020", "body": "Fixed by #695 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328354020/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328359439", "body": "This removes a performance regression introduced in  #588 (which introduced more logging, which hit the redux store more frequently). Will revisit in #699 along with other enhancements (like handling window navigation and vim keybindings to navigate through errors).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328359439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328362806", "body": "This needs to be revisited since a lot has changed since the original PR.\r\n\r\nSome of the work done in #622 would allow for some interesting ways to address this - including potentially having neovim connected to a remote server live side-by-side with a local neovim instance, for example.\r\n\r\nI'll close this for now as the changes aren't relevant anymore, but will revisit shortly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328362806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328557441", "body": "It might be helpful on the session object to have an abstraction like `startBatch` and `endBatch`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328557441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328858774", "body": "Thanks @brasilikum for logging the issue! Looks like they've resolved the issue now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328858774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328865884", "body": "Emacs would have similiar concerns / issues, as their configuration is also programmatic via elisp - I wonder how they smooth this out?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328865884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329184702", "body": "Sorry @badosu @Gahen  I know these keyboard / input issues are brutal. I added the `daily-editor-blocker` tag, and these blockers for alternate keyboard layouts and input handling (dead keys, compose keys, AltGr, and IMEs) is top of my list to work on. \r\n\r\nMy time is limited for the next couple of weeks, but, I am going to be full-time on Oni for at least a couple of months starting in October, and these are top of my list to tackle once I make that switch... My top priority at that time is to tackle all the bugs stopping people from using Oni as their main editor!\r\n\r\nIn the meantime, let me know if there are any other weird things - knowing the OS, keyboard layout, and key sequence will be helpful - I'll add it to my list of test cases I'm tracking.\r\n\r\n> Just for the laughs: a few hours ago oni was ignoring my caps lock key. It gets the prize to the most weird bug I ever seen\r\n\r\n@Gahen - that is bizarre! Appreciate you reporting it, though. Sounds like the keyboard is latin america/spanish, but which OS is this?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329184702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329188968", "body": "Thanks for sharing the screenshot, @badosu ! I didn't see the `tabs.showVimTabs` option set to `true` in the screenshot you posted, but I'm assuming you tried that and it still didn't work?\r\n\r\nThe fact that you still see the original tab bar suggests to me that the version of Neovim you are running doesn't support the `ext_tablines` option (which is needed for `tabs.showVimTabs` to work correctly, and for the original tab bar to be hidden).\r\n\r\nCould you please share the Neovim version you are running via (`nvim --version`)? Any neovim version v0.2.1 or greater should support this option (`ext_tabline`), so if it is lower than that, you might consider upgrading.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329188968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329470722", "body": "Hi @MikaAK ! Thanks for logging the issue.\r\n\r\nWhich version of Oni are you using? The `input` API is included in `0.2.9`, which I just started building release candidates for. You might want to try the latest rc build.\r\n\r\nI also updated the Wiki with a note that version 0.2.9 is required for this API.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329470722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329471846", "body": "Hi @Alok , thanks for logging the issue!\r\n\r\nYes, seems like we're not passing $PATH correctly to the spawned Neovim process.\r\n\r\nIf anyone is interested in checking this out, this would be a good place to look: https://github.com/extr0py/oni/blob/a9347b81c9749f9b14fa7a44eca255aa2f3bf65c/browser/src/neovim/NeovimProcessSpawner.ts#L43\r\n\r\nIt seems like we should pass-through the environment variables. We should also check and make sure that `process.env` is returning the expected values. \r\n\r\nThere's actually code here to pass in the current PATH variable: https://github.com/extr0py/oni/blob/eed7659f961d228f60dd3163e06a00b75fc0ef3e/browser/src/Plugins/Api/Process.ts#L22\r\n\r\nMight be worth trying just using `spawnProcess` from there, which would bring in the path variable.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329471846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329472229", "body": "Thanks for the update @Alok . Hopefully that will help others running into this. \r\n\r\n>  but that's such a nuisance.\r\n\r\nAgree 100%! These input blockers are top-of-mind for me to tackle next.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329472229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329473866", "body": "@MikaAK - weird! Would you mind sharing your `config.js` as well as a screenshot of Oni?\r\n\r\nIn addition, which version / platform are you running?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329473866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329478273", "body": "Thanks @badosu & @Gahen for the support (& patience \ud83d\ude04 )\r\n\r\n> gonna improve my error reports and follow-ups to help you dig into (what I think) are the most fundamental issues for an editor.\r\n\r\nThat would be excellent! I'm building up a matrix of representative test cases so I can be sure I'm covering all the scenarios. Agree with it being a fundamental issue - stuff like LSP and nice tabs aren't very useful if you can't even input text...\r\n\r\n> I work developing for web so I can easily check the dev tools if there is something that can be tested there.\r\n\r\nThis would be great, @Gahen ! There's some information on how to debug Oni here: https://github.com/extr0py/oni/wiki/Debugging#debug-build\r\n\r\nAnd how to open the dev tools: https://github.com/extr0py/oni/wiki/Debugging#open-devtools\r\n\r\nThe most interesting place to look at for the keyboard stuff is here:\r\nhttps://github.com/extr0py/oni/blob/a9347b81c9749f9b14fa7a44eca255aa2f3bf65c/browser/src/Input/Keyboard.ts#L34\r\n\r\nThe very first fix that I'm looking thinking about is using `evt.key` instead of `evt.keyCode`, which is more modern and better handles some of the intl cases. Beyond that, just hooking a `keydown` handler on an element is really limiting in terms of handling dead-keys and IME, so I'd like to switch the input strategy to use a 'hidden' text field and handle the `composition` events and state.\r\n\r\nFor the caps issue, for example, it would be interesting to trace through that code and see if it is getting a `preventDefault` call somehow. I found the [conditional breakpoint](https://stackoverflow.com/questions/14598561/javascript-how-to-set-a-conditional-break-point-in-chrome-debugger-tools) functionality in the Chrome developer tools really helpful for my debugging so far.\r\n\r\n> The version is different though, I have the OS package version (aur/oni 0.2.8-1) and not the one from git.\r\n\r\nInteresting, there were a few keyboard fixes that came in between 0.2.8 and latest git I believe. There's also the possibility that there is some difference between building locally and the packaged version.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329478273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329497911", "body": "Good point, I added some notes in the wiki here: https://github.com/extr0py/oni/wiki/Configuration#tabs\r\n\r\nI'd also like to handle this more gracefully (like some sort of warning that the setting is incompatible with the current version of Neovim). It would be great to package a consistent version of Neovim across Linux too (like the one embedded for Windows & OSX)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329497911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329802695", "body": "Excellent, thanks for the details @badosu  (and all your help managing Oni in the AUR!)\r\n\r\nI think moving to `neovim-git` makes sense, to provide a good out-of-the-box experience (esp for the new functionality, like tabs). It'd be nice at some point to use a consistent version between windows/OSX/linux. Windows/OSX are using: v0.2.1.4-g9847be58 - I wonder if there is a way to directly reference that in AUR as a dependency?\r\n\r\nI noticed one other item that might need to change for the 0.2.9 release:\r\n```\r\nsource=(\"https://github.com/extr0py/${pkgname}/releases/download/v${pkgver}/${pkgname}-${pkgver}.tar.gz\"\r\n        \"oni.sh\")\r\n```\r\n\r\nIt looks like, after updating `electron-builder`, our package is now: `https://github.com/extr0py/oni/releases/download/v0.2.9/Oni-0.2.9-linux.tar.gz`\r\n\r\nThere might be a way we can tweak some settings on `electron-builder` to go back to the previous package name, if that is necessary.\r\n\r\nThanks again for your help!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329802695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329805335", "body": "Thanks @jordwalke ! I'm able to reproduce this now as well, by just opening Oni, and typing \":new\", and then \":quit\", I'm stuck with an extra '[No Name]' tab as described. Both `:tabs` and `:ls` report a single entry. \r\n\r\nSounds like as you mentioned, we're missing a case. With the default settings, we're showing the set of _buffers_ in the tab line, and it'd be expected we'd hit this code to update the buffer state `:new` and `:quit` case:\r\nhttps://github.com/extr0py/oni/blob/7b36b144cdfe7d8ecb54c999d1424674354fa656/browser/src/Editor/NeovimEditor.tsx#L334\r\n\r\nNext step would be to see if this is getting hit in that case, an if the value of `ids` is correct.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329805335/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/331933648", "body": "Thanks for the issue, @gruhn ! The special character issue seems like it is the same as #644. The fuzzy finder issue hasn't been tracked yet, it looks like there is a problem with encoding the process output. \r\n\r\nA couple of question that will help once I start looking at this:\r\n- Which OS is this?\r\n- Is the `\u00dcberblick.md` file in a git repo? This can impact the behavior of the fuzzy-find.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/331933648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/331939849", "body": "Interesting... I have a High DPI display on Windows that behaves differently, but it might be auto-scaling up the pixels.\r\n\r\nI believe the issue here is by default `px` is being used for font-sizes. It may be better to use `pt` for the core font rendering + `em` for the UI pieces.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/331939849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/331940400", "body": "Thanks for logging the issue @badosu ! This is very ugly. I believe it is the same issue in #713 (using pixels for font sizing), and would have a similiar fix.\r\n\r\nThe hue / colors are a good point too - I experimented a bit with using colors based on the current background / foreground colors of the vim colorscheme. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/331940400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332017835", "body": "Excellent, thanks for your help @badosu getting Oni set up on arch! Really appreciate it.\r\n\r\n> One odd thing I found when I was writing a custom Desktop Action, and setting Oni as a file opener application for certain Mime Types is that oni is not respecting oni %f and opening %f. Is this just not implemented or a bug?\r\n\r\nThere was special work done on both Windows and OSX to handle this: https://github.com/extr0py/oni/blob/3dff7aa524c1f0595fb0609b90a716faf8e64f6b/main/src/main.ts#L159\r\n\r\n```\r\nfunction loadFileFromArguments(platform, args, workingDirectory) {\r\n    const windowsOpenWith = platform === \"win32\" &&\r\n                            args[0].split(\"\\\\\").pop() === \"Oni.exe\"\r\n\r\n    const macOpenWith = platform === \"darwin\" &&\r\n                            args[0].indexOf(\"Oni.app\") >= 0\r\n\r\n    if (windowsOpenWith || macOpenWith) {\r\n        createWindow(args.slice(1), workingDirectory)\r\n    } else {\r\n        createWindow(args.slice(2), workingDirectory)\r\n    }\r\n}\r\n```\r\n\r\nPotentially we need to handle this in Linux too, as the number of arguments expected varies depending on how it is run.\r\n\r\nUnfortunately I still don't have an Arch machine available... But one thing that can help troubleshoot is to run `oni %f`, and then open the developer tools, and run this line of code in the console: \r\n> `require(\"electron\").remote.process.argv`:\r\n\r\nHere's the output on my Windows dev machine (without opening a file):\r\n![image](https://user-images.githubusercontent.com/13532591/30831606-ecb78c7e-a1fc-11e7-863d-e93a00880f20.png)\r\n\r\nThat will let us do two things - validate that the `%f` parameter is actually making it to Oni (ruling out an issue with the `oni.sh` file), as well as guide any changes that need to be made to that `loadFileFromArgument` method above.\r\n\r\nThanks again for all your help, @badosu !\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332017835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332020644", "body": "It looks like the TypeScript language server requires you to 'opt-in' to JavaScript errors - https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files\r\n\r\nSeems like there are two ways to opt-in:\r\n- Set the `checkJs` option to `true` in your `jsconfig.json`\r\n- Add `// @ts-check` to the top of your js file.\r\n\r\nI just tried out the latter - adding `// @ts-check`, and it worked for me (it picked up the javascript errors).  Seems like VSCode behaves the same way. Let me know if that works - might be worth adding to the wiki if so.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332020644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332242586", "body": "Thanks @hoschi for trying it out! I'll keep this open since it's a blocker. There might be a way to set this as a default in the typescript standalone server settings, so I'll use this to track that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332242586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332250148", "body": "This fixes #644 and helps address #711 (capitalization of keys like \u00f6 to \u00d6 work correctly)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332250148/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332678402", "body": "Glad you got it working!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332678402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332679393", "body": "Thanks for opening this issue, @badosu ! Made me realize I missed the thread in #645 \r\n\r\nThe screenshot you posted helps:\r\n![screenshot from 2017-09-25 20-52-11](https://user-images.githubusercontent.com/347552/30836283-8da0464a-a233-11e7-9fa6-329a2c1d5f86.png)\r\n\r\nIn _development_ builds, for this scenario, you usually see __three__ arguments - the electron prebuilt binary, main.js, and the file.\r\n\r\nHowever, for _packaged_ builds, the main.js path is baked, so you only see __two__ arguments as in your screenshot.\r\n\r\nAccounting for this is handled here: https://github.com/bryphe/oni/blob/735985dd8e934ad4de389af82a2047dc269ef7bc/main/src/main.ts#L159\r\n\r\nBut today only OSX and Windows are handled. I think we need to add an additional case for linux, something like:\r\n\r\n```\r\n    const linuxOpenWith = platform === \"linux\" && args[0].indexOf(\"opt/oni\") >= 0\r\n\r\n    if (windowsOpenWith || macOpenWith || linuxOpenWith) {\r\n        createWindow(args.slice(1), workingDirectory)\r\n    } else {\r\n        createWindow(args.slice(2), workingDirectory)\r\n    }\r\n```\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332679393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332679700", "body": "> If you want to setup an Arch-compatible machine I recommend Manjaro as it`s really straightforward to install as opposed to having to follow through the Arch tutorial.\r\n\r\nCool, this helps a lot! I started doing some research and the arch tutorial I looked at basically had you set it up from scratch. Didn't know about Manjaro, I'll check that out.\r\n\r\n> Another possibility is uploading the desktop file to the repository and using it as a source for all the different packaging systems.\r\n\r\n@badosu, that sounds reasonable! Could we just bring it into the repo as-is, perhaps under the `build/linux` folder?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332679700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332683297", "body": "> This will be troublesome for linking oni or installing it in non-opt directories (which should be the case). I think it would be better to check if we are on a development build or not before compiling oni and setting a variable that can be captured there, what do you think?\r\n\r\nYes, this is a good point. I was thinking about this and it might be worth _inverting_ the condition - we could check if this is using the prebuilt electron, by checking for the presence of `node_modules/electron` in the first argument. If `node_modules/electron` is present in the path, we should use the 3 arg strategy, otherwise use the 2 args strategy. \r\n\r\nThis has the advantage that it works the same across all platforms, and would be more resilient in the case of alternative paths. The only downside is if someone happened to install Oni in a path containing `node_modules/electron`, it would break, but I imagine that is unlikely..\r\n\r\nAn alternative strategy would be to set an environment variable when the development build of Oni is launched (by modifying the script in `cli/oni`). This would be deterministic, since it is used by `npm link` in all platforms, but is not used in the packaged builds.\r\n\r\n> I am fixing this at the moment and can't output any logs for debugging since it's a step before spawning the process, I tried Log.info but no dice, any idea?\r\n\r\nAh yes, there's an undocumented way to get the logs from the main process from the debug window in the renderer process. You can run this command: `require(\"electron\").remote.getGlobal(\"getLogs\")()`.\r\n\r\nHere's what it looks like on my machine:\r\n![image](https://user-images.githubusercontent.com/13532591/30942462-3a2b8dbc-a3a0-11e7-8c93-4ac5309620f9.png)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332683297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332688689", "body": "> Would checking if it's terminated in electron be a bad idea?\r\n\r\nActually that seems reasonable. The only corner-case here is that you'd need to check for `electron.exe` on Windows, but that is still straightforward and deterministic. I like this approach!\r\n\r\nIf we decided to use an environment variable to gate this, we could do something like:\r\n\r\n```\r\nprocessOptions.env = Object.assign({}, process.env, {\r\n    \"LOCAL_ONI\": 1,\r\n})\r\n```\r\n(This preserves all the existing environment variables, and tacks on the `LOCAL_ONI` one... not sure if that is the best name for it...)\r\n\r\nTo: \r\nhttps://github.com/bryphe/oni/blob/fe7f2d89a69662574316ef4f1c35f9261422a6ae/cli/oni#L10\r\n\r\nThen, in `main.ts`, we'd update the logic to gate on that environment variable, instead of trying to infer from the path:\r\n```\r\n    const isLocalBuild = process.env[\"LOCAL_ONI\"]\r\n    if (!isLocalBuild) {\r\n        createWindow(args.slice(1), workingDirectory)\r\n    } else {\r\n        createWindow(args.slice(2), workingDirectory)\r\n    }\r\n```\r\n\r\nBut checking if the first argument is terminated in `electron` (or `electron.exe` for Windows), per your suggestion, seems simpler to me!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332688689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332698140", "body": "Thanks for submitting the PR, @badosu !\r\n\r\nI just checked the appveyor build - looks like it failed due to these lint errors:\r\n```\r\nERROR: C:/projects/oni/main/src/main.ts[160, 22]: object access via string literals is disallowed\r\nERROR: C:/projects/oni/main/src/main.ts[163, 5]: misplaced 'else'\r\n```\r\n\r\nFor the first one, you'll need to suppress it by adding `// tslint:disable-line no-string-literal` to the end of the line.\r\n\r\nOther than that, looks great! Once those are addressed, I'll bring this in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332698140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332698507", "body": "Thanks for tracking this, @badosu (and all your help on Arch) ! The approach tectonic is using looks pretty legit. Let me know if you need anything from me, or if you need any of the travis build settings tweaked.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332698507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332699343", "body": "> I don't understand the use case for this rule.\r\n\r\nHere's some info on it: https://stackoverflow.com/questions/36695645/what-is-no-string-literal-rule-in-tslint\r\n\r\nI think _in general_ it's to prevent doing things like `document[\"body\"]` (instead of `document.body`), or `window[\"setTimeout\"]` vs `window.setTimeout`, because the former cases are more fragile since a typo can break them. In this case though it is noisy. It'd be nice if it was smart enough to know to skip this for objects that are essentially dictionaries (like `process.env`...).\r\n\r\nThanks for making the changes, I'll bring this in once the builds are done!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332699343/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332702602", "body": "Thanks for the contribution, @badosu ! \ud83e\udd42", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332702602/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332707123", "body": "> This is one of the prospects that excited me for a long time since neovim was released.\r\n\r\nDefinitely! This is a terrific case to 'break free' of the terminal limitations and build something nice. It's somewhat related to what I was exploring in #622 - which is the ability to have 'custom renderers' on top of a Neovim surface. That then enables us to do all kinds of interesting UI on top of Neovim.... while still allowing keyboard navigation and behavior as you'd expect from Neovim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332707123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332732618", "body": "Gif shot looks like a cool library for this", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332732618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332848351", "body": "Will do! I'll put up an RC build today.\r\n\r\nThanks for helping me validate, since I don't use the IME day-to-day there could still be bugs or corner cases. Let me know if there is anything still not working. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332848351/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332891949", "body": "Not seeing this reproduce anymore (and the rendering strategy has changed a few times since this was opened!). Please feel free to reopen or log a new issue if you are still seeing this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332891949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332892608", "body": "Looking at this again - I'm closing for now, since there isn't a clear benefit to switching at this time. The file size isn't our current \"bottleneck\" for our package size. If someone is up for taking a pass at this, though, it would be awesome to have a more refined set of SVGs eventually.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332892608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332893115", "body": "Q and Bluebird are now removed, we can tackle the remaining Promise functions to `async/await` incrementally.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332893115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332899169", "body": "This is not need anymore, but should be taken  into account with #699 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332899169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332899266", "body": "Not applicable anymore", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332899266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333009135", "body": "@saibing - that's great to hear! thank you for testing it out!  keep me posted on how it goes \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333009135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333324109", "body": "Hi @DemonCloud ,\r\n\r\nDid you set the `oni.loadInitVim` to configuration value to true?  \r\n\r\nCheck out the this question on the FAQ:  [Why isn't my init.vim loaded?](https://github.com/bryphe/oni/wiki/FAQ#why-isnt-my-initvim-loaded) for some more info.\r\n\r\nI'll close this for now, but feel free to re-open if that doesn't answer your question.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333324109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333324874", "body": "Hi @MikaAK ,\r\n\r\nThe language server support is on-deck for '0.3'. You can already hook-in to a language server via the Oni API - you can see an example of that here: https://github.com/bryphe/oni-language-csharp\r\n\r\nHowever, for 0.3, I want to make this even easier... The idea is you could have a configuration like:\r\n\r\n```\r\nlanguages.elixer.languageServer: \"./path/to/elixer/language-server-provider-executable\"\r\n```\r\n\r\nI need to update the roadmap but this is the next item for support, after the 'daily-editor-blockers' are addressed.\r\n\r\nRegarding the completion issue - that seems like a bug - could you help me out with the repro steps for it?  I tried on my environment but don't see it (just repro'd with a vanilla text file). It'd be helpful to know the set of plugins running, your configuration, and the exact key presses you're using.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333324874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333331975", "body": "Last issue in #711 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333331975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333343984", "body": "Fix #416 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333343984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333698614", "body": "Troubleshooting for #490  - need to validate if moving to a different Neovim version addresses the crash", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333698614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333708348", "body": "This is fixed in the latest release (0.2.10) - <a-s> should resolve correctly to \u00df on OS X, without needing to use Ukulele. LMK if you're still seeing it, after upgrading. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333708348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333708699", "body": "This was fixed in PR #717 (which is in the v0.2.10 release), the `AltGr` keys should behave as expected now for German keyboards. I'll close this, but let me know if you're still seeing any issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333708699/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333708862", "body": "Fixed in the [v0.2.10] release, via PR #716, so I'll close this. Let me know if you're still seeing any issues though!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333708862/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333709020", "body": "Fixed in PR #716 and in the latest release [v0.2.10](https://github.com/bryphe/oni/releases/tag/v0.2.10-recovery), so I'll close this. Let me know if you're still seeing any issues, though!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333709020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333709214", "body": "This was fixed by PR #731 and is in the [v0.2.10](https://github.com/bryphe/oni/releases/tag/v0.2.10-recovery) release. Feel free to log a new issue if you're still seeing any render artifacts (this one is a bit overloaded \ud83d\ude04 )", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333709214/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333878294", "body": "Fixes #714 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333878294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333879267", "body": "New look against the default `onedark` colorscheme:\r\n![image](https://user-images.githubusercontent.com/13532591/31133521-9fb27c7c-a814-11e7-9c53-12d339e35604.png)\r\n\r\nAnd in `solarized8_light`:\r\n![image](https://user-images.githubusercontent.com/13532591/31133573-ca3565ea-a814-11e7-8a90-5fde98cbc1a3.png)\r\n\r\nNot perfect, but it is better than before, and an incremental step. Once there is more thorough sync'ing of the colorschemes, we'll be able to do a bit better with the highlight colors.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333879267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333879729", "body": "Sorry about that @badosu , I keep making your life difficult with the AUR repo... I'll switch to using a consistent release tag, and avoid using a `-recovery` tag in the future (I'll just bump the version).\r\n\r\nI'll release a 0.2.11 build shortly with proper naming convention, that we can stick with moving forward.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333879729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333880519", "body": "Right, it actually made it a pain updating the README.md with download links too \ud83d\ude1e ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333880519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333882726", "body": "Would be great to have the defaults consistent with the other vim fuzzy finders. \r\n\r\nThe default key bindings are here:\r\nhttps://github.com/bryphe/oni/blob/37ad0f1479d99d4b46fc745015c3a13d1b2c8569/browser/src/Input/KeyBindings.ts#L33\r\n\r\nThere's actually already one for opening in a horizontal split (`quickOpen.openFileHorizontal`), we just need to update the default binding for that.\r\n\r\nThe open in a new tab we don't currently have a command for, so that may need a bit more plumbing, but it would be similiar paths to the open in horizontal split / vertical split.\r\n\r\n> I can take a look at this issue later on if it's not complicated.\r\n\r\nCool, that would be great! LMK if you need any help or have questions.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333882726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333883525", "body": "Weird, a few questions -\r\n- Did this work correctly prior to the v0.2.10 release?\r\n- Are there any error message in the developer tools? Would it be possible to see the logs?\r\n- What's the current working directory?\r\n\r\nI'll see if I can repro it in a bit.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333883525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333885440", "body": "Ah, so close. Thanks for testing it out, @lbebber ! \r\n\r\nGlad things are working better in insert mode. Seems like there are two issues:\r\n- Dead keys aren't working in normal mode (thanks for calling out the Vim behavior, that's very helpful!)\r\n- Dead keys aren't working in cmdline mode\r\n\r\nI'll check it out in a bit. Today, in non-insert mode, the `KeyboardInput` code falls back to just handling keydowns, but that isn't sufficient for handling dead keys - so might need some extra logic there. I think it should be straightforward to fix though (just the platforms have different ways of signaling dead keys, which is annoying!)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333885440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333885871", "body": "Yes, good point, inverting that conditional would be cleaner, since it is only Mac that uses the meta key for this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333885871/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333892693", "body": "Seems related to #543 (different manifestation) - when only the cursor moves, we're not updating the viewport information for some reason.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333892693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333904197", "body": "Thanks for the screenshot, @josemarluedke , that helps a lot! I'll take a look at this with the language service work I'm starting shortly. It does look like there is some sort of escaping issue with the `file:///` rootPath. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333904197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333937216", "body": "FYI, I just published [v0.2.11](https://github.com/bryphe/oni/releases/tag/v0.2.11) which has a consistent naming schema.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333937216/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333964768", "body": "(Moving remaining fix - updating default font sizes - to a separate fix to improve font rendering).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333964768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333972285", "body": "Fix #746 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333972285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334019116", "body": "Sounds great, thanks @badosu !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334019116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334023389", "body": "This should be addressed with PR #749. I couldn't repo the High-DPI issue though unfortunately, but I believe it's due to a mismatch with font-size pixel vs point. The change uses `em` sizing for Oni's UI, so that it is a derivative of the font size specified in the settings. There were lots of places in CSS we used pixels, which would be problematic.. Feel free to reopen if you're still seeing this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334023389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334028268", "body": "Would be helpful to have an underline to show when there is a definition available (like a hyperlink)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334028268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334028607", "body": "I think a better solution is to show an 'underline' , which is tracked by #521 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334028607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334028845", "body": "Doesn't look like there is any action need here - will use new issues to track changes in the menubar.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334028845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334157400", "body": "Looks like this was addressed as part of #692 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334157400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334165377", "body": "Hi @Alok ,\r\n\r\nI dug a bit more into this. When opening Oni from the .app image, it's expected that it wouldn't get the `$PATH` from your environment (since that is specific to bash).\r\n\r\nUnfortunately, it looks like `nvim` doesn't source the `.bash_profile` when opening the neovim terminal. To get the behavior you want, you need to make sure you source your bash profile. This stack overflow has some ideas here: https://stackoverflow.com/questions/33926383/how-can-i-force-nvim-to-source-my-bash-profile-when-creating-a-terminal-buffer\r\n\r\n(It's pretty much just calling source $HOME/.bash_profile when the terminal loads).\r\n\r\nHope that helps. It might be worth checking in on the neovim repo and see if there is an issue / setting for always loading the `.bash_profile`. I'll close this for now, but feel free to reopen if you think there is a fix on the Oni side.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334165377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334200534", "body": "Closing this out since I don't believe there's any action left for Oni here. Thanks for the detailed notes & investigation!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334200534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334220512", "body": "It's actually correct - I'm splitting up the change and including some refactoring of the language service. This was just a prepatory refactoring (I'll be using the typed `onBufferEnter` and `onBufferLeave` events in the config-driven language service), and I'm focusing on having a config-driven way to pick up language servers with reasonable defaults. \r\n\r\nSorry for the confusion. I am actively working on the LSP issues (and Java support \ud83d\ude04 ) though, thanks for checking!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334220512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334326171", "body": "Hi @someguynamedmatt ,\r\n\r\nRight now, Oni uses Neovim's working directory for the QuickOpen UI (you can check this with `:pwd`).\r\n\r\nYou can get the behavior you want though by adding this setting to your Oni config:\r\n`'vim.setting.autochdir': true,`\r\n\r\n(alternatively, if you want to customize via your `init.vim`, you can add the line `set autochdir`).\r\n\r\nWith this set, whenever you edit a file, Neovim will change the working directory, and then gets pushed up to Oni - and then the `<CTRL>P` command should be relative to the currently active file's folder.\r\n\r\nI hope that helps! I'll close this for now, but feel free to re-open if that doesn't fix the issue. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334326171/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334327469", "body": "Wow, excellent! Thanks for testing out the `clangd` integration, and opening the PR. I was just working on some LSP stuff so it's helpful to know about the flag you needed to add to get it working.\r\n\r\n> For instance, when writing `namesp`, the first completion option is `namespace name`.\r\n\r\nInteresting - would it be possible to see the the value we get for the completion? If you build One with `npm run build-debug` and put a breakpoint here: \r\nhttps://github.com/bryphe/oni/blob/33c0350cab8a6661c6600d09bb8a2f36ba65137e/browser/src/Plugins/Api/LanguageClient/LanguageClient.ts#L278\r\n\r\nIt would be helpful to see the value of `items` in this case.\r\n\r\n> Which brings me the the next issue: IDK TypeScript, so there is a run-time error with this flag.\r\n\r\nHmm, the flag looks ok (and the code using it), but I'm wondering how it gets passed in? It looks like there may be a file missing (the `lib\\index.js` that registers the language client). Could you please add and push that up? I can definitely help you troubleshoot.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334327469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334548287", "body": "This is laying the foundation for some of the interesting UI scenarios, and multiplexing work (but won't actually do anything today unless you do something like call `Oni.windows.split(..)` from the developer tools). The next step here is to get two neovim editors side-by-side - there will be additional challenges and refactoring (there are some 'global' things that are handled by `NeovimEditor`, and focus will have to be handled)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334548287/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334548520", "body": "Looks great - thanks for taking this on, @badosu ! I'll merge it in now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334548520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334548901", "body": "Great, thanks  @badosu ! Just brought it in.\r\n\r\nFYI, these can be overridden in the `config.js` via these instructions: https://github.com/bryphe/oni/wiki/Configuration#keyboard-bindings\r\n\r\n(Basically, you can call `oni.input.bind` or `oni.input.unbind` directly from the config, just like in that file). ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334548901/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334623520", "body": "Just added a comment on passing the `stdErrAsLog` variable through... let me know if it's still not working. Once that's set, I'll bring this in!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334623520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334779136", "body": "Thanks @Metamist and @badosu for the detailed notes!\r\n\r\nIt's brutal that we make the calls in two places, and have separate strategies - `spawn` and `execSync` -\r\n because if one works, probably the other one will have issues. \r\n\r\nI'm working on this PR right now: https://github.com/bryphe/oni/pull/764 which is refactoring to consolidate these two calls, and enable async population of the menu (as results come in from the fuzzy-finder, we'd update the menu, vs waiting for it to complete as we do today). I was planning on consolidate to `exec` but it's interesting to know there is a deal breaker there. I still need to actually do the consolidation but that's on deck to wire the QuickOpen up again.\r\n\r\nOnce my PR is in, we'll only have the single call, so we can settle on one of these strategies:\r\n- `exec` \r\n- `spawn` with `{shell: true}`\r\n\r\nOne other option with `spawn` is to split up the command + arguments, like:\r\n`editor.quickOpen.execCommand: 'fzf'`\r\n`editor.quickOpen.execCommandArgs: ['-f', '${search}']`\r\nwhich means we might not need the `{shell: true}` parameter (that parameter doesn't always work as expected across all platforms, since the shells are different).\r\n\r\nSo there'd be three options:\r\n- `exec`\r\n- `spawn` with `{shell: true}`\r\n- `spawn` with command + args separated.\r\n\r\nLet me know if you have any feedback on the PR or the strategy we should go with for spawning the process. Thanks again for your help and investigation on this!\r\n\r\nOnce that PR is in, I'm going to switch to using `ripgrep` by default via those settings - so that should make those settings less fragile (they are easy to break today, because they are non-default)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334779136/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334779747", "body": "Hi @TalAmuyal , just responded to you on gitter too. Sorry for the issues here - I believe you also need `libxkbfile-dev` as a dependency. \r\n\r\nCan you try running `sudo apt install libxkbfile-dev` and `npm install` + `npm run build` again and see if that fixes the issue?\r\n\r\nI also updated the [Development](https://github.com/bryphe/oni/wiki/Development) section of our wiki with some of these notes", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334779747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334793486", "body": "Testing using `gifshot` resulted in poor quality, unfortunately. For now, I'll constrain this to writing video (.webm) and screenshots (.png).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334793486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334817252", "body": "The stability test can be run via `npm run test:stability`. This will be helpful in verify that #490 is actually fixed...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334817252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334840714", "body": "Yep, I'll add something in Wiki (in the configuration section). I was thinking of adding a \"Tips\" or \"Recipes\" section, and  show how to bind a key to take a screenshot. \r\n\r\nI'm planning on pushing a new release out Monday as well - so I'll call out it there in the release notes too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334840714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334840934", "body": "I'll also add some documentation around these new APIs:\r\n`oni.recorder.startRecording()`\r\n`oni.recorder.stopRecording()`\r\n`oni.recorder.takeScreenshot()`\r\n\r\nAnd new configuration options:\r\n`recorder.outputPath`\r\n`recorder.copyScreenshotToClipboard`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334840934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334841484", "body": "Glad that original error is resolved!\r\n\r\nFor the `bsb.exe` error - I'm actually not sure what causes it. It used to happen on my Ubuntu box but it no longer occurs for me. You can try deleting the `node_modules` folder and running `npm install` again.\r\n\r\nAlternatively, that one is safe to ignore - you can run Oni with that error (that build step is for the `reason` / `ocaml` plugin, so as long as you aren't using that you're okay).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334841484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334856969", "body": "Hmm, would you mind including the full error log? `npm install --loglevel verbose` should save a `npm-debug.log`.\r\n\r\nIn addition, what node version are you using? `node --version` and `npm --version`?\r\n\r\nThere are several issues in the bucklescript repo related to this, like:\r\n- bucklescript/bucklescript#773\r\n- bucklescript/bucklescript#2051\r\n- bucklescript/bucklescript#1446\r\n\r\nIn addition, looks like there is a newer version of `bs-platform` (we're on `1.8.0`, looks like it's up to `1.9.3` now - might be worth trying that out...)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334856969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334892690", "body": "Hi @soratobukuroneko, \r\n\r\nThanks for reporting the issue! I was able to repro on my Win 10 machine with spanish keyboard.\r\n\r\nYou can see the key resolution in the console by running the command `Oni.log.enableVerboseLogging()`:\r\n![image](https://user-images.githubusercontent.com/13532591/31301979-19f490c4-aab3-11e7-9c57-0fcbf83aebdd.png)\r\n\r\nIt looks like, in this case, the `BracketLeft` is getting resolved as `<Control+Alt+[>` instead of `[` as we'd expect. The `BracketRight` shows a correct resolution of `]`.\r\n\r\nWe use the `keyboard-layout` module to help resolve the characters - it provides a keymap that tells us how a character resolves.\r\n\r\nSomehow, it\u00b4s not providing a resolution for `BracketLeft`:\r\n![image](https://user-images.githubusercontent.com/13532591/31302047-8652d294-aab3-11e7-8f90-34acd1402820.png)\r\n\r\nI'll log an issue on the `keyboard-layout` repo to track - in the meantime, we could probably hack this by hardcoding the resolution for the case where we're on windows and using the `es-ES` keyboard language. I just hope there aren't many more of these gaps! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334892690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334893392", "body": "Logged an issue at atom/keyboard-layout#36 to track. In the meantime, I'll fix this locally by special casing this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334893392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334895755", "body": "Interesting... I'm glad that you got it working! It's always a bit disconcerting when it starts working magically, though... \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334895755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334900660", "body": "This also fixes #541 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334900660/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335184240", "body": "Looks great @TalAmuyal ! Thanks for debugging into the completion issue and fixing the root cause \ud83d\udc4d \r\n\r\nTested it against another language provider (the omnisharp/C# one), and it worked great. Bringing this in now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335184240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335184397", "body": "Thanks for the contribution, @TalAmuyal ! I'll create a new release today including this change.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335184397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335187648", "body": "Excellent, this looks great! I prefer the `maximized` vs `fullscreen` state too in some environments (like OSX),... I'll be able to use this in my config there.\r\n\r\n> Maximising then going full-screen is a valid operation, whereas going full-screen and then maximising the window will have no effect. So I've put full-screen second for now, and as such it will override maximising the screen.\r\n\r\nThis sounds reasonable. If both options are set, I would expect the full-screen would take precedent.\r\n\r\n> In reality, you'd probably want some mechanism in the config file to warn you that you have both?\r\n\r\nI like this idea. I added some notes in the context of #704 - which I opened to track some better experiences around troubleshooting configuration errors. This would be a natural place to surface up 'warnings' or conflicts like these.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335187648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335188012", "body": "Per discussion in #771 - there are cases where configuration options may be in conflict, and it would be helpful to surface them in this UI. An example is the `editor.fullScreenOnStart` and `editor.maximizeScreenOnStart` options - the `editor.fullScreenOnStart` takes precedence, so it may be helpful to let the user know that `editor.maximizeScreenOnStart` would take precedence in this case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335188012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335190501", "body": "Just tested; works great! Bringing it in now. Thanks for the contribution, @CrossR !\r\n\r\nI'm planning on doing a release in the afternoon w/ this included.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335190501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335196997", "body": "Hi @CrossR ,\r\n\r\nThanks for catching this! Yes, this is a mistake - unfortunately I missed updating this when I migrated the main process code to typescript. It would be great to have that `launch.json` updated, to make it easy to debug the main process. \r\n\r\nIf you'd be up for submitting a PR, that would be great! Sounds like you've already fixed it locally.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335196997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335222897", "body": "Looks like the build failure was unrelated to this change, I've restarted the OSX build on travis.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335222897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335237492", "body": "Build passed now after the retry. Thanks for fixing this, @CrossR ! Bringing it in now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335237492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335249812", "body": "Thanks for submitting the fix, and for the notes about the build issues! Just merged it in.\r\n\r\nFYI - I updated this wiki page: [Development](https://github.com/bryphe/oni/wiki/Development). For windows, microsoft released an npm module called `windows-build-tools`. It actually installs both `MSBuild` and `python 2.7` for building node-gyp modules. But sounds like you already have a working setup anyway. Feel free to edit though if we can improve/simplify anywhere.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335249812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335323372", "body": "> All I'm doing is using tab to cycle through the options visible. This is the behavior I want to keep however when using completion directly from oni I cannot find a way to replicate this. Rather I have to use next/previous then use the select completion button which does cause extra keypresses and errors when forgetting them \ud83d\ude2d\r\n\r\nAh ya, I'm not sure this is very well supported at the moment. Good to have this open to track. The option at the moment would be to experiment with something like `input.bind(\"tab\", \"completion.next\")` - the downside is you still need `enter` to complete...\r\n\r\n> @bryphe any plans to support debug protocol?\r\n\r\n@adelarsq  Yes! I just updated the [roadmap](https://github.com/bryphe/oni/wiki/Roadmap). It's really ambitious, but there is a lot I want to cram in the next few months...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335323372/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335324373", "body": "Added some API documentation here:\r\nhttps://github.com/bryphe/oni/wiki/API\r\n\r\nAnd an example of binding a key to use the `takeScreenshot` method here:\r\nhttps://github.com/bryphe/oni/wiki/Configuration", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335324373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335324415", "body": "I'll close this out, but the documentation is still pretty rough (and it would be nice to have some examples or tips/tricks)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335324415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335324712", "body": "This should be fixed now (actually with PR #714, since that introduced `em` sizing vs `px` for the statusbar).\r\n\r\nIn addition, there is also a `statusbar.fontSize` setting that can be used if there are still issues.\r\n\r\nI'll close this, but let me know if you're still seeing issues here. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335324712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335325044", "body": "FYI @soratobukuroneko  - The fix for this is in the latest build - [v0.2.12](https://github.com/bryphe/oni/releases). Feel free to open a new issue if there are any other keyboard-layout problems - we may need to generalize the 'hack' here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335325044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335326887", "body": "FYI, the screenshot example works now in 0.2.12. \r\n\r\nI've started documenting the API surface here:\r\nhttps://github.com/bryphe/oni/wiki/API\r\n\r\nAnd some examples of how to use it in the config:\r\nhttps://github.com/bryphe/oni/wiki/Configuration#examples", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335326887/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335327096", "body": "Using #610 to track this now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335327096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335584105", "body": "Yes, definitely in-line with what I'm thinking about! Thanks for opening this, @Bretley \r\n\r\nI think there are a couple of items here:\r\n- __Generalizing the 'menu'__ - I've actually started this here in #764. This creates a `menu` API - so you could even do something like this in your config:\r\n\r\n```\r\noni.input.bind(\"<c-enter>\", () => {\r\n    const myMenu = oni.menu.create()\r\n    myMenu.setItems([{label: \"Option 1\"}, {label: \"Option2\"}])\r\n    myMenu.onItemSelected.subscribe((selectedOption) => alert(selectedOption))\r\n    myMenu.show()\r\n})\r\n```\r\n\r\nThis would show a menu with 'Option 1' and 'Option 2', and then an alert once it is selected... but it could be generalized to do much more interesting things, based on the items collection and the action on selection.\r\n\r\nThe remaining part of that change is factoring over the existing QuickOpen behavior to that model - and supporting asynchronous / streaming results at the same time (this new API surface is better suited for it, since as we get new results from the finder program, we can just tack them onto `setItems`). \r\n\r\n- __Additional modes__ - one thing that was really interesting in the discussion for #635 was the idea of _prefix support_ - `:` for vim command mode, `&` to show available buffers, `#` for symbol search, etc. I think this is a cool idea, and could be backed by the generalization of the `menu` concept above.\r\n\r\nDo you know any good youtube videos or reading material on helm? I haven't used Emacs too much, but am interested in learning more - I think Oni is philosophically closer to Emacs than Vim, in terms of the extensibility / programmability model, so I've been spending a little time learning more about the cool things Emacs has (like magit, org-mode, etc) for inspiration \ud83d\ude04 \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335584105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335586432", "body": "@Bretley I think there are a lot of really great ideas in this PR from @cyansprite  (and great discussion too!), so I've been using it as a reference. There are a few things that are top-of-mind for me in the menu space:\r\n- Asynchronous loading + general menu API (I started doing some work on this in #764)\r\n- Using a binary by default (both the default strategies can be replaced by `ripgrep`, so I have that prototyped in #762)\r\n\r\nThe most important gap we have today, though (in my opinion), is the 'first-run' experience - the first time you open Oni up, and open the quick open experience - it's a bit confusing and unintuitive. I like the experience VSCode has, where you can type `?` and see some of the available options - figuring out a way to ease the user in and show them the capabilities in an intuitive way is important here. Having the command prefixes would certainly help a lot. I think there's still some design / thinking we need to do here.\r\n\r\nLong-term, too, I'd like to see if it is possible to consolidate the Oni commands & Vim `ex` commands together too (I think you mentioned this a bit in #776). It'd be nice if users didn't have to think too hard about whether they need to `:` or `<C+S+P>` to get where they need to go \ud83d\ude04 \r\n\r\nIt might be a challenge to bring this PR in as-is giving that the menu API surface is changing, but if there are any parts that interest you that could be split out, I'm definitely open to that! Some ideas for chunks to split out could be the multi-selection (extending the new menu API to handle that), or create the colorscheme chooser - that was a really cool part of this PR too \ud83d\udc4d \r\n\r\nOtherwise, thinking about how we can smooth out that first-open experience would be awesome.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335586432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335590055", "body": "Fixes #473", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335590055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335592439", "body": "Thanks for logging the issue, @badosu ! \r\n\r\nUnfortunately I can't repro this - I tried on Windows and my Ubuntu machine but am not seeing this. It looks like it could be potentially an `nvim` issue (depends on what it is sending us back). Are you running Oni against the nightly build?\r\n\r\nAlso, are you seeing the scroll happen when you press the `<tab>` key? Does it reproduce consistently?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335592439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335637032", "body": "Nice, thanks for adding this @keforbes ! Looks much better now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335637032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335638295", "body": "@TalAmuyal - Ah yes, definitely - agree #757 addresses this, and we can track any issues in separate work items. \r\n\r\nThanks for your investigation and work on this! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335638295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335638783", "body": "Thanks for logging the issue, @TalAmuyal ! I think this is a general issue with the language integration (not specific to `clangd` ) - I believe I hit this occasionally with TypeScript as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335638783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335640063", "body": "Fixes #713 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335640063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335646249", "body": "I'd like to create a full-fledged website shortly, so I'll close this out", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335646249/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335646708", "body": "Sweet! If there are scripts or code to run, maybe those could live in `build/aur`? Alternatively, there's a `scripts` folder. Would either of those work?\r\n\r\nToday the stuff in the `dist` folder is solely built files (output from the various packaging strategies). I do a lot of `rimraf dist` so it might throw off my workflow if we have checked-in files there \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335646708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335652166", "body": "Brought in #780 - hopefully this is fixed completely now. Feel free to reopen if you're still seeing it, @badosu .", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335652166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335907528", "body": "Fixed by #781 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335907528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335937503", "body": "@teto mentioned in chat that this commit came in: neovim/neovim@db99982, this could be helpful for synchronization too. Hooking the `ColorScheme` autocmd and then querying for the highlight groups would allow Oni to tap into some colors besides just the foreground/background color. \r\n\r\nAn example would be using the corresponding highlight color in auto completion (instead of just that hardcoded green color, we could color function completions with the function highlight group color, etc).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335937503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335938117", "body": "Ah ya, thanks for making sure this is tracked, @TalAmuyal ! Definitely an annoying issue.\r\n\r\nOne option I'm exploring is listing the errors in the same UI that we show the hover / quick-info results... I'll put a screenshot up once I have a working prototype.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335938117/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335939276", "body": "Ah yes, thanks for logging this! It's a similiar issue to what we saw with the status bar - there are a few hardcoded `px` values `Tabs.less`:\r\n\r\nhttps://github.com/bryphe/oni/blob/1ad48df21ea1b62fcb51cd15df8c9a34420fdb4b/browser/src/UI/components/Tabs.less#L44\r\n\r\nI think if we change the `max-height`, `min-height`, and `height` values to use `em` instead of `px`, that should solve the problem. \r\n\r\nIf you want to give it a go @badosu , that would be great! I'll assign it to you for now - but LMK if you have any questions", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335939276/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335942854", "body": "Cool, thanks for submitting this @CrossR ! I definitely think it makes sense to be able to override the `init.vim` path. There are some cases where users would prefer to have a completely separate `init.vim` between Oni/Neovim, so this helps accomplish that.\r\n\r\nThe only concern I have is that the configuration settings we have today are already confusing - `oni.loadInitVim`, `oni.useDefaultConfig`, and `oni.customInitVimPath`. I'd like to see if we could consolidate the `oni.loadInitVim` and `oni.customInitVimPath` configuration settings, if possible (since setting `oni.customInitVimPath` would imply `oni.loadInitVim` is `true`).\r\n\r\nA couple of options I'm thinking about:\r\n- _Change `oni.loadInitVim` to support `string | boolean`_. If it is `true`, we would just load `init.vim` from its usual place. If it is a `string`, we'd load it from the custom path.\r\n- _Only support custom paths_ - We could make `oni.customInitVimPath` be the way to using an `init.vim`, whether it is in the default place or not, and deprecate `oni.loadInitVim`. The downside is it would hose users that use `oni.loadInitVim`, we'd have to make it clear we are deprecating that value and how to upgrade - it would also be a bit more inconvenient for users who pick up their config in the default place, because they might have to look up where that is.\r\n\r\nI'd lean towards the first one, just because it is simplest... but I'm sure there are other ways we could consolidate this and simplify the relationship between `oni.loadInitVim`/`oni.customInitVimPath`. Let me know what you think!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335942854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335987902", "body": "Excellent, looks great! I just tried it and it works well - thanks for making the changes!\r\n\r\n> There is still some oddness with the interactions with oni.useDefaultConfig, but only the same that is in the live version, and this is outlined in the Wiki, so its possibly an issue to raise later.\r\n\r\nDefinitely, I'd like to see how to consolidate this at some point. But as you mentioned at least this change doesn't introduce any new issues, the problems are pre-existing \ud83d\ude04 \r\n\r\nI'll go ahead and bring this in. I made a quick edit to the [wiki](https://github.com/bryphe/oni/wiki/Configuration#oni) to detail that a `string` path can be accepted, but feel free to revise.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335987902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335988289", "body": "The remaining layout issue on the edge of the screen should now be addressed by #766 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335988289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336220146", "body": "Ah, nice catch, thanks @MikaAK ! And appreciate you putting a PR together. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336220146/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336220589", "body": "Looks great, @MikaAK ! Thanks for investigating this and fixing it \ud83d\udc4d I'll bring it in now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336220589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336222550", "body": "Fixed by your PR - #787 \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336222550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336224273", "body": "No worries, there's a lot in flux at the moment \ud83d\ude04 Hope classes are off to a good start!\r\n\r\nI started tagging a few places with `// TODO: #702` - pretty much any place where we fire off multiple requests to Neovim. Here's a couple examples:\r\nhttps://github.com/bryphe/oni/blob/1da1104f6a6b5cd744a658dedffbce2265c56fd9/browser/src/neovim/NeovimInstance.ts#L277\r\nhttps://github.com/bryphe/oni/blob/1da1104f6a6b5cd744a658dedffbce2265c56fd9/browser/src/neovim/NeovimWindowManager.ts#L29\r\n\r\nIt'd be useful to think of how the API could look for this, too - ideally we could abstract the fact that we are batching, or make it simple, like:\r\n```\r\nthis._neovimInstance.startAtomicBatch(...)\r\n...make a bunch of api calls\r\nthis._neovimInstance.endAtomicBatch(...)\r\n```\r\n\r\nIt might make sense to have that be at a lower level though (against the actual `Session` object), have to think about it some more..", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336224273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336318937", "body": "With #764 & #793 , I refactored so that we only use `spawn` with `shell: true`. This works fine for the new ripgrep (`rg`) strategy, and I also tested the `editor.quickOpen.execCommand` with `fzf`, `ag`, and `ls`.\r\n\r\n`ag` and `ls` seem to work fine as finder strategies, but unfortunately I still see issues with `fzf -f '${search}'`. It seems to be a more general problem - even if I run this from the `node` REPL:\r\n`require(\"child_process\").spawnSync(\"fzf -f 'a'\", [], {shell:true}).output[1].toString()`, it's always empty. This is specific to `fzf` since `ag`, `rg`, and `ls` don't have the same behavior. \r\n\r\nThere might be some issues it has with the default shell (`shell:true` uses `bin\\sh` on Linux), but I'm not sure.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336318937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336326046", "body": "Hi @josemarluedke ,\r\n\r\nYes, good point, now that the background color of the quick info box matches the background, it's tough to see. I like your 'After' a lot - I think it does make sense to bring in the border. Definitely easier on the eyes! Thank you for proposing this and including the before/after.\r\n\r\nThe only thing I think we need to consider is how it looks against other colorschemes with the hardcoded color:\r\n![image](https://user-images.githubusercontent.com/13532591/31526391-627d52a0-af7b-11e7-8659-0b72548fefed.png)\r\n\r\nI wonder if we could use some variant of the `foreground` color as the border color? Or use a library like this https://www.npmjs.com/package/color - we could look at the contrast of the background color and pick between a light/dark color, for example? \r\n\r\nLet me know if you have any ideas here - otherwise I might experiment with a few things to see if I can get a border that looks good in both light/dark colorschemes.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336326046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336529362", "body": "Hi @cdelahousse ,\r\n\r\nThanks for the contribution. Seems reasonable - it might be worth looking at bringing your logging in too (if you think it would be useful in the general case). This whole function / paradigm could use some  refactoring to move it to a more functional paradigm (most of the `actions` that are emitted go to the `Screen` class, which updates its state in a mutable way). I'll go ahead and bring this in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336529362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336553717", "body": "A good example of the scenario I'd like to support is something like https://atom.io/packages/activate-power-mode.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336553717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336555093", "body": "This should be much improved with #793 and #764 - #764 brought in a streaming strategy, so that, instead of waiting for the finder process to complete to show results, we show them as they are streamed in via 'stdout' (and there is a loading experience). #793 brings in `ripgrep` which is faster than the default glob strategy for non-git repos. \r\n\r\nI'll close this for now, but another item to look at is #571, and rationalizing how 'Open Folder' works (like, maybe in the case where a folder hasn't been explicitly opened, we don't try and search...) Goes along with some of the improvements called out in #635 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336555093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336596116", "body": "Fixes #436 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336596116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336935462", "body": "Thanks for looking at this, @josemarluedke ! Bringing it in for 0.2.13", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336935462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336935931", "body": "Thanks for the idea & proposal, @josemarluedke ! I adapted for other colorschemes and brought it in with #798 , I'll go ahead and close this. \r\n\r\nBTW, which colorscheme do you use? Seems like it'd be a good test case for me to include.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336935931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337324071", "body": "Hi @CrossR ,\r\n\r\nThanks for submitting the PR! That's really helpful that you narrowed down the `scrolloff` issue as being related to the `winline` call. I just looked at `:help winline` and didn't realize it has side effects... but it definitely does and can impact scrolling. \r\n\r\nThe way this code works is it creates a mapping of `buffer line` -> `window line`. The `cursorString` is the buffer line, and the `winline()` call gave us the window line. This mapping is then used by the `WindowContext` to help map 'buffer space' coordinates to 'screen space' coordinates.\r\n\r\nUnfortunately, changing this to `getpos(\".\")` breaks this - the mapping won't work correctly in some cases. In particular, one case that is broken is rendering the error squiggles if you've scrolled down in a file - these will never be drawn because the coordinates will always be outside of 'screen space' without the `winline()` mapping.\r\n\r\nThis whole pipeline is pretty hacky and convoluted - really what this is building for us is one function - a function that maps _buffer space_ (like a `line` and `column` in a buffer) into _screen space_ - and I suspect there is a way to simplify this without all the back-and-forth events and crazy iteration in `init.vim`.\r\n\r\nI'm trying to explore right now if there is an alternative fix - instead of needing to have this `OniUpdateWindowDisplayMap` in `init.vim`, perhaps we can do a `pull` instead from the Oni side, and based on the info we already have in the event context, and the state of the buffer, maybe we can simplify and build up that `bufferSpaceToScreenSpace` function. If we go this route, we could get rid of the hacky iteration + `winline` code that is causing issues with `scrolloff` (and I suspect it is causing some other problems as well), and have a more robust solution in general.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337324071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337325112", "body": "Hi @jay763190097 ,\r\n\r\nThanks for trying out Oni, sorry you're hitting that issue. Unfortunately I'm not able to repro as described - which option did you choose in the menu bar?\r\n\r\nOni does have a cache located in `C:\\users\\<your user\\AppData\\Roaming\\oni` - you could try deleting that and see if that addresses the issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337325112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337399314", "body": "Hi @hassec ,\r\n\r\nThanks for sharing your thoughts on this! Yes, I worked a bit on this in #299, but as I was thinking about some of the multiplexing scenarios more, I decided it needed a bit more thinking and tabled it. There's some prototyping I did around multiple neovim process hosted in Oni (like #622), and the remote-nvim idea fits in well with that. At the core, we really don't care too much how the neovim process is started - today we always open it via this `startNeovim` function:\r\nhttps://github.com/bryphe/oni/blob/83867d2f4f09aed4277d0649d8b5bde527a6d32e/browser/src/neovim/NeovimProcessSpawner.ts#L16\r\n\r\n...but there really is no constraint there - the important part is getting the channel (right now, `stdin` and `stdout` to communicate with it). \r\n\r\nIt's really great that you called out and expanded on the scenario you're thinking about - like having your code live on a powerful machine and be able to run Oni/neovim from something more lightweight, like a chromebook or something.\r\n\r\n> So allowing a plugin to run either on the client or server would probably be the best.\r\n\r\nIn terms of the remote architecture, we'd have to think about this. Today, Oni hosts the language services separately from Neovim. So even if you had neovim run remotely, if Oni 'connected' to that remote instance, it would still be running the language servers locally. This would be problematic in a few ways - some of the language servers expect that the files for a project are local, too. In other words, connecting to a remote neovim instance would be relatively straightforward to add (it's really just changing the streams from `stdin`/`stdout` to something remote like a tcp socket), but it doesn't enable the rich UI integration.\r\n\r\nSome there are a few considerations:\r\n- Handling latency in communicating between Oni <-> Neovim remotely\r\n- Oni requires some hooks to integrate fully with Neovim (like listening to autocommands) - it's not guaranteed that any random Neovim instance would have that set of hooks. One option would be to run in a 'lightweight' mode without all the UI integrations - but sounds like for your scenario that's not really desirable. Another would be to investigate injecting these hooks.\r\n- For rich UI integration, where do the Oni plugins / language servers run? It seems like in this scenario we'd want them running on the server workstation, and that might necessitate actually running _Oni_ in a remote mode...\r\n\r\nFollowing from the last point, an idea I don't think we've discussed yet would be taking advantage of the fact that we're running on a node/browser stack - Oni itself could provide a _remote_ mode which would be a browser UI that interfaces back with a server it hosts.\r\n\r\nThis is different than the remote _nvim_ idea because the entirety of Oni (language server, processing, etc) would be handled on the workstation, and the client would interface with it via a browser or an app. Latency would still be an issue, but this would allow for running the language server/plugins on the remote server and still get the benefit on the 'client'. This also would open up some interesting concurrency or pairing scenarios - like maybe I want to invite you to work on a file with me, and I could share out a transient link where you could edit with me in the browser.\r\n\r\nSorry for the rambling of my own \ud83d\ude04 Really appreciate your thoughts -  I do think there are definitely some interesting possibilities & potential here!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337399314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337406602", "body": "Here's what the updated UI looks like: \r\n![image](https://user-images.githubusercontent.com/13532591/31694130-5608e950-b357-11e7-9f5e-7b2d33415e6d.png)\r\n\r\nBasically integrated into the QuickInfo pane", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337406602/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337687023", "body": "With #804 , looks like this is set now, so I'll close this out. Thank you for the ideas, discussion, and proposal around this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337687023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337748532", "body": "Fixes #395 and #543 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337748532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338050206", "body": "Fix #521 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338050206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338279065", "body": "Merged into `bryphe/features/lsp-v2` to polish while integrating the new language functionality", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338279065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338306308", "body": "Merged into `bryphe/features/lsp-v2", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338306308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338351148", "body": "Hi @QijianZhang , would it be possible to share the file path that is causing issues? If it's an issue that repros with `nvim.exe` as well, it might be worth logging at the core Neovim tracker as well: https://github.com/neovim/neovim/issues (and it's possible there may already be an issue tracking it).\r\n\r\nIn any case, it would be helpful to have an exact set of reproduction steps to isolate this. Thank you!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338351148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338351260", "body": "Hi @CrossR ,\r\n\r\nInteresting - a couple of questions:\r\n- What file type does this repro for? Is it like javascript, typescript or something else?\r\n- Are you using any completion plugins?\r\n\r\nIt could be a few different things depending on the manifestation (for example, whether we're using an integrated language server or the Neovim popupmenu).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338351260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338352098", "body": "Weird, I'm not able to reproduce it (but I don't have Ultisnips installed at the moment). As you mentioned Oni doesn't bind `<m-e>` by default so it should just pass through to Neovim.\r\n\r\nWhat do you have `oni.loadInitVim` set to? And is `oni.useDefaultConfig` set? I'm wondering if there could be conflict between Ultisnips and one of the default plugins.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338352098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338354097", "body": "Thanks for the tip @Metamist ! It's interesting, that gives me results now when running via the `node` REPL, but still not in Oni (electron renderer process). I guess `process.stdin` behaves differently in the electron renderer process than the `node` REPL.\r\n\r\nI still don't quite understand why it isn't returning anything, while other command line utilities (like `rg`, `ag`, and `find` seem to be working OK).\r\n\r\n@badosu - I wonder if that error message is being produced because `fzf` isn't returning anything?  We can check for a null `selectedOption` here and bail  https://github.com/bryphe/oni/blob/cf71dfcf32d32acc1c52026cc8a89b355a946cd1/browser/src/Services/QuickOpen/QuickOpen.ts#L185\r\n\r\nBut it seems like the root cause is that no results are making it from the `fzf ` process. Setting a breakpoint here is a good spot to check if the `FinderProcess` is actually sending back data:\r\nhttps://github.com/bryphe/oni/blob/cf71dfcf32d32acc1c52026cc8a89b355a946cd1/browser/src/Services/QuickOpen/FinderProcess.ts#L41\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338354097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338393483", "body": "Hi @Bretley ,\r\n\r\nThanks for logging the issue! Ya, there were a bunch of issues here - most of them coming from this PR: #805 \r\n\r\nThe biggest issue was Neovim sends us the windows position as an array of `[row, col]`, but we were treating that was `[x, y]` (which is the opposite), so the measurements were wrong. This broke the buffer scroll bar, the cursor line, and any sort of UI that depends on these measurements (like error squiggles).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338393483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338393837", "body": "Fixes #817 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338393837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338417138", "body": "Merged into `bryphe/features/lsp-v2`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338417138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338859640", "body": "Hi @jordwalke ,\r\n\r\nThanks for opening the issue, really appreciate you calling this out! \r\n\r\nYes, I agree 100% - having an Open Collective for Oni makes a lot of sense. I'd like to make this a sustainable project and fundraising will be crucial to accomplish that.\r\n\r\nI've started to research some fundraising options (and set up some better funnels, like a landing page, clarifying the roadmap, etc).  It seems like projects like Webpack have had tremendous success with Open Collective, and I like the transparency they provide in the platform - it's important for backers and sponsors to know where the money is going!\r\n\r\nI really like BountySource's model too - it's unfortunate that it didn't quite catch on in the same way... being able to fund open source by contributing/voting with $$ for issues you want fixed seems like a cool approach to me. The advantage you call out, being able to transfer bounties without a fee, is important as I would like to contribute back to Neovim core - so  it makes sense to keep it around too.\r\n\r\nI'm working on a website for Oni right now, and I'll expose a few options for funding there:\r\n- Open Collective\r\n- PayPal\r\n- Bitcoin\r\n- BountySource\r\n\r\nI'm starting to look into the registration process for Open Collective. I'll keep this issue updated with progress (and post the website for feedback when it's ready \ud83d\ude04 )", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338859640/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338861484", "body": "Great point @jordwalke ! Thanks for calling this out, and sharing the Sublime shortcuts. \r\nThis is definitely fits in with the 'ease the learning curve' aspect of Oni.\r\n\r\nYou're right, `cmd+p` and `cmd+shift+p` better fit the platform. We have a few Mac-specific key bindings already - so it should be straightforward to plug these in there. I'll take a look at this tomorrow.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338861484/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338862052", "body": "@CrossR - awesome, thanks for putting this PR together! Code looks good to me - I'll test it out in the morning tomorrow \ud83d\udc4d \r\n\r\nThe OSX build failure isn't due to your code - it seems like the `vscode-ripgrep` library gets rate-limited on PRs. I'll take a look at a fix for this, but in the meantime we can safely ignore that failure.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338862052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338996927", "body": "Excellent. Thanks for the confirmation, @Uroc327 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338996927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338999534", "body": "Excellent, I'll close this out too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338999534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339047373", "body": "Awesome! I just built it locally and it is very cool to see it in the context menu:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/31955185-81300d62-b89c-11e7-9dbd-3a4a80742e30.png)\r\n\r\nI like that the icon shows in the context menu!\r\n\r\nThe only item I'm thinking about is the wording in the installer:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/31955209-9663a7f2-b89c-11e7-804f-44b8eeaa0d6b.png)\r\n\r\nIt wasn't obvious to me reading through what it meant to be an `editor` vs available in the right-click menu, but maybe we can reword it a bit to make it clearer:\r\n\r\nHere's one idea I was thinking of:\r\n- [ ] Add Oni to %PATH%.\r\n- [ ] Register Oni as the default editor for text files.\r\n- [ ] Add Oni to the right-click menu for all files.\r\n\r\nBut maybe there's something else we can do here too to help clarify... I wonder what other installers do? I was also thinking maybe we could combine them into a single option, but that may be misleading. \r\n\r\nOtherwise looks / works great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339047373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339052737", "body": "I'll close this out since @TalAmuyal since it started working... but let me know if you hit this again or there is any new info we can use to troubleshoot.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339052737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339058638", "body": "Fix #822 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339058638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339188045", "body": "Ah it's actually a bit confusing (and good for us to clarify). Thanks for calling this out.\r\n\r\nWe actually only every call `ripgrep` once (it's really fast!), so I don't have it set up to utilize the `${searchString}`, which would call it as the text is changed. So the `case sensitive` option we passed to ripgrep is effectively a no-op, since it isn't even using search parameters.\r\n\r\nThe logic that is impacting this is our filtering of results here:\r\nhttps://github.com/bryphe/oni/blob/ba6c932c15204e4cac3302b25b7d205976b062fa/browser/src/Services/Menu/MenuReducer.ts#L114\r\n\r\nAnd there are two phases of filtering there (_after_ we get the results from the finder process, which defaults to `ripgrep`):\r\n- A 'pre-filter' pass where we check that all letters in the search string are present in the items\r\n- A 'fuzzy-find' pass where we use the `fuse` library to find and rank results.\r\n\r\nThe `pre-filter` pass is used for performance reasons, because running fuse can get slow with a large amount of results, so we try and rule some out ahead of time. \r\n\r\nSo there's really three phases: \r\n(1) get results from the running process (Line 158 in `QuickOpen.ts`) -> (2) do the pre-filter pass (Line 114 in `MenuReducer.ts`) -> (3) run the `fuse` ranking and get the highlighted letters (Line 132 in `MenuReducer.ts`)\r\n\r\n (2) and (3) are always run after the finder process returns results, so that we can rank + do the highlighting in the menu.\r\n\r\nI was looking through this and it seems like the pre-filter pass (2) _is case-sensitive_, whereas the (3) `fuse` actually isn't, which is a problem since the behavior is confusing today and hard to explain. (And as mentioned above, the ripgrep process just dumps all the results, so it actually doesn't care about the casing at the moment).\r\n\r\nI'm thinking we could do the following:\r\n- Add an option `editor.quickOpen.caseSensitive` - it can be either `false`, `true`, or `\"smart\"`, to control the case-sensitivity of steps (2) and (3) in the pipeline, and the \"smart\" setting would behave as described above - all lowercase would be case-insensitive, but if there are upper-case letters, it would be case-sensitive.\r\n- Change the pre-filter pass to _always_ be case-insensitive\r\n- Pick the right casing strategy for `fuse` based on the `quickOpen.caseSensitive` setting and the search input.\r\n\r\nIf we had that setting, it would at least help clarify the behavior. The only downside is that, if a custom `editor.quickOpen.execCommand` is specified, it could have its own casing strategy, separate from the `editor.quickOpen.caseSensitive` setting, which applies to the post-result filtering logic in (2) and (3). But I think that is reasonable.\r\n\r\nThanks for logging the issue @CrossR  and the ideas @badosu ! I'll give it a shot tomorrow morning - let me know if you have any feedback on the proposal.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339188045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339189442", "body": "I like it! It's a bit less obtrusive for sure. If we find that people still want to tweak the size, we can add it as a setting at that point.\r\n\r\nThanks for submitting the PR, @badosu ! I'll bring it in now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339189442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339190734", "body": "I just tried this out and it makes tabs pretty small on my Windows machine:\r\n\r\n__Before:__\r\n![image](https://user-images.githubusercontent.com/13532591/31976661-96f6a538-b8ed-11e7-86a8-5d2b93441a14.png)\r\n\r\n__After:__\r\n![image](https://user-images.githubusercontent.com/13532591/31976652-85123aa8-b8ed-11e7-9d45-2c836b61d90e.png)\r\n\r\nI prefer having the extra space here. I definitely think it makes sense to use the `em` sizing - could we set it to have parity with the sizing previously? It might be a platform difference too - or if you prefer the smaller size, we could certainly expose a `tabs.height` setting.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339190734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339191691", "body": "@badosu , sounds good. I was thinking about having some potential configuration options persist, but we have #571 tracking that anyway. And as you mentioned this has a setting so isn't as pressing anymore. I'll go ahead and close it out, thanks for checking in!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339191691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339345511", "body": "Sounds good, let me know if you see it again. Knowing the filetype will help. I'm in the midst of revamping some of the completion / language service functionality right now.\r\n\r\nI think for JavaScript files, the TypeScript language service sometimes caches tokens from opened javascript files - that could be related too if it was JavaScript or TypeScript.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339345511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339396246", "body": "Unfortunately I realized to support some of the scenarios - like being able to navigate away from a file when it has edits, we'd need to use the `set hidden` option. This is important for gestures like go-to definition, applying refactorings across a workspace, etc. Without `set hidden`, we have to use `e!`, which clears pending edits (super annoying with go-to definition - #778).\r\n\r\nSo in order to accomplish those scenarios - we'll need to specify the `set hidden` option by default. However, perhaps we can figure out another way to filter out the relevant buffers from the tabline?\r\n\r\nLet me know if you have any ideas here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339396246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339481408", "body": "Fixes #825 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339481408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339481725", "body": "Thanks for the suggestion @rockneverdies55 ! \r\n\r\nAgree, this will make it more natural for users accustomed to using `CtrlP` or similiar plugins.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339481725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339482804", "body": "Thanks for the repro, @CrossR ! Yes, this seems to be a bug in how we figure out the `completion meet` - the logic we are using thinks the `m` is part of a different word, and appends `Main` after it.\r\n\r\nI'm in the process of revising this in PR (#819) which basically guts and revises the completion logic. I'll test this scenario with the new code (I still need to wire up the Neovim completion events as well)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339482804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339483493", "body": "Cool, thanks for sharing out the screenshot @CrossR ! Yes, seems like there is a precedent for setting up the options that way - your proposal sounds good to me:\r\n\r\n> - Add Oni to %PATH%\r\n> - Register Oni as the default editor for supported file types\r\n> - Add Oni to the right-click menu for all files\r\n\r\n> As for combining them? Personally, I would prefer the choice even though I'll tick them all. It does sometimes annoy me how many programs you end up with on the right click menus that never asked permission to be there. I'd rather spend an extra second during an install and have that extra control.\r\n\r\nAgreed, combining them doesn't seem like a very good option - I like your latest suggestion the best.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339483493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339484203", "body": "One issue I just realized is that the filtering logic is shared between `Quick Open` and the `Command Palette`. I think the behavior is reasonable, but it might influence how we name the configuration option (maybe it makes sense to be more general than just the quickOpen menu)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339484203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339505036", "body": "Sounds good, the text looks solid - thanks @CrossR ! Bringing this in now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339505036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339506084", "body": "I tried it out and it still looks small for my liking - I think it does make sense for it to be configurable because the aesthetic I'm going for may not appeal to everyone \ud83d\ude04 I put together some options in #832 to make this customizable - let me know what you think.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339506084/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339506496", "body": "I decided to change the setting to `menu.caseSensitive`, because this filtering logic is the same across all menus - Quick Open, Command Palette, and (soon) symbol search through language servers.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339506496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339507026", "body": "Unfortunately I'm not an expert on `clangd` - @TalAmuyal might have some ideas here. It does seem like there is some configuration issue - there is a `compile_commands.json` file that you can use to specify some options: https://reviews.llvm.org/D37150 - might be worth checking that out. Given that Oni is showing the error, it seems like the Oni piece of the integration is working.\r\n\r\nMight be worth checking out this mailing list too (or posting the question there): http://lists.llvm.org/mailman/listinfo/cfe-dev\r\n\r\nLet us know if you find anything, it would be great to add it to the wiki: https://github.com/bryphe/oni/wiki/Language-Support", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339507026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339507279", "body": "This was fixed by #805 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339507279/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339508590", "body": "Hi @hassec ,\r\n\r\nSure thing! Sorry for the slow response, been trying to wrap up the language integration pieces and get a website going \ud83d\ude04 \r\n\r\n> Of course like you stated this would mean having something like an oni-client and oni-server. Intuitively this seems like it would be quite a big change, no?\r\n\r\nDefinitely would be a big change - we'd have to think about what responsibilities belong on each side of the client/server boundary. But there's cool possibilities, and I think that the current architecture is at least amenable to this.\r\n\r\n> I would definitely be interested in trying something along these lines but want to be honest upfront that I would most certainly need some guidance. :D\r\n\r\nAwesome! It would great to have help! I'm happy to answer questions if you dig in. It might be worth picking up some smaller issues first to get an understanding of the code.\r\n\r\n> I tried to get a feel of how everything in oni works from an architectural and data flow kind of way but haven't been too successful.\r\nIs there maybe any hidden doc that I missed?\r\n\r\nSorry about this - there are a lot of moving parts and not a lot of documentation at the moment. I'd like to have some better architectural guidance. Some general starting points to look at:\r\n- `browser/src/neovim/NeovimInstance.ts` - this the piece that actually talks to Neovim via the `msgpack-rpc` interface - so it's at the core of everything that happens in Oni.\r\n- `browser/src/Editor/NeovimEditor.tsx` - this is a bridge between `NeovimInstance` and all the UI action in Oni. This renders all the UI (in `NeovimSurface`), and also all the overlays like QuickInfo, autocomplete, etc.\r\n- `browser/src/UI` is where most of the actual UI code is - and uses [React](https://reactjs.org/) and [Redux](https://github.com/reactjs/redux). If you're not familiar with those, checking those out will definitely help.\r\n\r\nThe cool thing about the Redux architecture is it lends itself pretty well to pivoting to a distributed model - the `NeovimEditor` updates the rich UI primarily via `UI.Actions`, and those could just as easily be sent over a socket to a remote machine as run locally. Likewise, the NeovimInstance sends msgpack-rpc actions that could be sent over the wire to a remote machine too. Lots of possibilities...\r\n\r\nHope that helps get you started. Sorry there isn't more of an overview document - definitely something I'd like to have as the project matures!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339508590/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339524877", "body": "I merged in #832 - with the following configuration settings:\r\n- `tabs.height` - set the size of individual tabs\r\n- `tabs.maxWidth` - set the maximum width a tab can expand to\r\n- `tabs.wrap` - set to `true` if you want the tabs to wrap, otherwise there will be a horizontal scrollbar for overflow.\r\n\r\nI'll close for now, but keep me posted if they aren't behaving as expected. Thanks for the PR and brainstorming around this, @badosu !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339524877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339811885", "body": "The good news here is I've been testing out a new nightly build and it seems much more stable on Windows (no crashes). I'll plan on upgrading Oni to use 0.2.1 as soon as it is out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339811885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340120900", "body": "Awesome, thanks for the PR, @jared-skinner ! Fix works great.\r\n\r\nIt looks like there is a tslint issue that is causing the build to fail from the appveyor logs:\r\n```\r\nERROR: C:/projects/oni/browser/src/Input/KeyBindings.ts[60, 25]: missing whitespace\r\n```\r\n\r\n(looks like it wants a space after that first comma). Can you please fix that and push it up? You can run `npm run lint` to check if its fixed locally (and `npm run fix-lint` automatically fixes some of these issues, it might take care of this one).\r\n\r\nOnce the lint check passes, I'll bring it in. Thanks again!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340120900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340132833", "body": "Thanks for the fix, @jared-skinner ! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340132833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340133148", "body": "Just pulled in #833 - nice work @jared-skinner !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340133148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340613455", "body": "Hi @gedw99 ,\r\n\r\nThanks for logging the issue! There's actually some discussion about this in issue #247 . Oni uses [language servers](http://langserver.org/) to power some of the rich completion scenarios - so we'd need to think about where those are run. We're thinking through some of the ideas there - for example, having Oni run on the linux machine, and connect to it via OS X. Another possibility is that, since language servers support opening files based on `URIs`, we could potentially run the language server on OSX.\r\n\r\nIt'd be relatively straightforward to simply connect to a running Neovim instance remotely - we just have to think through how the language server support will work.  \r\n\r\nI'll close this as a duplicate of #247 - feel free to add thoughts there!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340613455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340616010", "body": "Hi @hoschi ,\r\n\r\nI think this might be related to the Neovim version (there was a similiar discussion in #657). Neovim needs to support the `ui-ext-tabline`, it appears that your version may be a bit older.\r\n\r\nA quick way to test is to run `:help ui-ext-tabline` - do you see anything for that?\r\n\r\nIf not, you could try bringing in the latest nightly Neovim release, and see if that works.\r\n\r\n(Eventually I'd like to have a canonical version of Neovim packaged with Oni so that there aren't these version mismatch issues)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340616010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340616495", "body": "Great suggestion, @CrossR ! I agree 100% - I prefer the aesthetic of VSCode/Notepad++ show the column rules and whitespace symbols. Part of Oni's mission is to break free of terminal UI limitations, so this is definitely a place where Oni could provide value.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340616495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340621295", "body": "Nice catch @CrossR on the `px` setting \ud83d\udc4d \r\n\r\nSounds like there are a couple issues here:\r\n- It's easy to mess up the font-size setting. To make it more intuitive, perhaps we could add a default set of units if not specified - perhaps just using `px` if there are no units? I think that would solve the core issue. It also touches on #704, which is about making it easier to troubleshoot and understand our programmatic configuration.\r\n- There isn't an easy way to set zoom level today - I moved this out to to #840 . It definitely sounds like a pain point! Agree with the difficulty too in saving back to the config - I added some thoughts in #840.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340621295/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340621548", "body": "Also FYI @CrossR and @TalAmuyal  - if you want a quick way to adjust the zoom factor while this is pending, you can add these in the `activate` section of your `config.js`:\r\n\r\n```javascript\r\nconst activate = (oni) => {\r\n...\r\n// Set zoom factor to 2 when Control+= is pressed\r\noni.input.bind(\"<C-=>\", () => require(\"electron\").remote.getCurrentWindow().webContents.setZoomFactor(2))\r\n\r\n// Set zoom factor to 1 when Control+- is pressed\r\noni.input.bind(\"<C-->\", () => require(\"electron\").remote.getCurrentWindow().webContents.setZoomFactor(1))\r\n...\r\n}\r\n```\r\n\r\nLuckily Electron has an API for this already - we really just need to plumb it through (and think about the persistence model for our configuration settings).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340621548/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340621993", "body": "Thanks for logging the issue and the screenshots, @hoschi !\r\n\r\nI think this may be more sub-pixel rendering issues in the `CanvasRenderer` - probably a related issue to #162 and #731 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340621993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340626189", "body": "Thanks @kuglee for sharing the steps you used to resolve it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340626189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340626978", "body": "Hi @Akin909 ,\r\n\r\nThanks for the kind words (and your support!). Glad you're on the way to using Oni as your daily editor \ud83d\ude04 And appreciate the detailed issue and screenshots too!\r\n\r\nThe underline markers moving with the scroll is definitely a bug - it seems we're not picking up the scroll events in all the right places (which would trigger updating the error adorners/underlines). This should've been fixed by #805 but it looks like there are still some cases where we're not updating proplery.\r\n\r\nSeems like another issue that it isn't picking up your `tsconfig.json` - would you be able to share the folder structure / hierarchy of your project? We rely mostly on the [TypeScript Standalone Server](https://github.com/Microsoft/TypeScript/wiki/Standalone-Server-(tsserver)) to pick up the `tsconfig.json` - but there might be cases especially with a hierarchy of `tsconfig.json` where it needs help on our end. If it happens to be an OSS project I can clone / reproduce the issue that would be awesome!\r\n\r\n> I use ale.vim for linting in iTerm and I wonder if it's possible to use this instead if its something thats still in flux, at the moment the plugin doesn't seem to work\r\n\r\nShould definitely be possible. You can try these steps [here](https://github.com/bryphe/oni/wiki/Plugins#installing-a-vim-plugin) to use ale.vim from within Oni. As an aside, I'm working on a big refactor of our language services (#819) - that will make it easier to switch to disable the existing language services, or switch to alternate strategies (like use flow for typescript, or an alternate TypeScript language server, etc).  LMK how it goes or if you hit any issues there!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340626978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340770277", "body": "Sorry, it's confusing for sure! I'm glad it is working now \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340770277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340926353", "body": "Thanks for catching this, @Bretley ! It's a regression from some of the completion menu changes. Glad someone is testing the latest master - I think there is going to be a bug tail since there was a lot of churn from the language service refactoring.\r\n\r\nI'm able to repro this (fortunately or unfortunately it's easy to hit...). PR is out (#844)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340926353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340926924", "body": "Fix #843 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340926924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340935323", "body": "This PR https://github.com/neovim/neovim/pull/7466 looks like it could help us here too-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340935323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340936441", "body": "Fix is in master - let me know if you still see issues after picking it up. Thanks again for finding & logging the issue, @Bretley !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340936441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341282185", "body": "Fixes #846 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341282185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341283147", "body": "Sure thing!\r\n\r\nThanks for the additional info. I tested a bit and did find an issue with release builds not getting the full benefit of TypeScript language services - TypeScript relies on several libraries to define the environment, and those weren't included in the distribution builds. I'm working on a PR for that right now + test case.\r\n\r\n> Out of curiousity I have some plugins which work in Oni out of the box (like easy motion) without needing to be in the oni plugins dir, when does a plugin need to go in there or is the practice with oni that all plugins should really go in there?\r\n\r\nIt sounds like you have Oni set up to use your `init.vim`, and you already have a plugin manager set up? If that's the case, you don't really need to worry about adding to the oni plugins directory. Oni also has it's own plugin API - plugins using that would need to go in oni's plugin directory. But in terms of vim plugins, it's up to you - for things like easy motion, you probably want it both if you're using Oni and terminal neovim, so that would be a reason to use Vim's plugin manager for it.\r\n\r\nMy goal though is to make it easy for newcomers to use both Vim and Oni plugins - so someone new to Oni/modal editing doesn't need to know how to set up an `init.vim` and pick out a plugin manager - they can use an out-of-the-box plugin manager (like the experience in Atom or VSCode). Not here yet though \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341283147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341526370", "body": "This should be fixed now by #851 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341526370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341532988", "body": "FYI, just a progress update - have a WIP site here: http://onivim.io/ A bunch of things to tidy up, definitely needs polishing... but it's a starting point.\r\n\r\nI also started the process of onboarding with OpenCollective, but unfortunately hit opencollective/opencollective#555 - once that's set and I have it linked in our website, it'll be ready for launch \ud83d\ude04 \r\n\r\nI mentioned this in the chat too, but I'm planning on moving this repo to the onivim organization: https://github.com/onivim", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341532988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341592475", "body": "Hi @CameronDiver ,\r\n\r\nThanks for trying Oni, and for the detailed issue!\r\n\r\nYour understanding of the tab bar is correct to me - the default & intended behavior, with `tabs.showVimTabs` set to false, should be to show buffers in the tabline. So seems like there is a problem here.\r\n\r\nA couple questions to help clarify:\r\n- Which version of Oni are you using? Did you build from source, or download the latest release (0.2.15)?\r\n- I'm assuming you're on Linux - which distro are you using?\r\n\r\nIn addition, would it be possible to get a screenshot of what you're seeing? I'm curious if Oni is rendering the tab bar at all (or if it is being rendered in vim, as in #835). \r\n\r\nIt'd be great to see the output of `:CheckHealth` as well from within Oni - that might help identify if Oni is picking up the `nvim` binary from the wrong place.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341592475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341785435", "body": "Looks great, thanks @CrossR ! Tried it out and it definitely helps for the import statements.\r\n\r\n> We could also extend the trigger character settings to be more complex.\r\nI think in VSCode, they have . / \\ \", with the last 3 all only working in certain cases.\r\nIe only allow / when on an import line, don't use \" if its the end of an already open string.\r\nThis would also let us add \" which I have excluded for now, as it messes with auto completion when closing import strings.\r\n\r\nYes, I think they have some logic around this here: https://github.com/Microsoft/vscode/blob/d2f1fd4763b2312acf879bbcb3e9a2e386c1708b/extensions/typescript/language-configuration.json#L11\r\n\r\nWe could potentially extend our trigger characters schema to be similiar for that - the only tricky  thing is figuring out _when_ we're in a string/import line, etc. \r\n\r\nI'm exploring using TextMate themes for better syntax highlighting: https://github.com/onivim/oni/pull/848 (because they give more detail about the identifiers and symbols) - it actually would give us enough information to do this filtering, too. They are very specific scopes for start string character, inside a string, string end character, etc.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341785435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341793279", "body": "Ah interesting, thanks for finding that! There is definitely some specialized logic there beyond the textmate scopes.\r\n\r\nIt seems we could bake some similiar logic into our TypeScript extension (or figure out a way to generalize expressing that logic in our language configuration). It'd be nice if it was generalized in our configuration in some way.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341793279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341798071", "body": "CI failure is still a token issue, not related to your change - I'll take a look at fixing that today.\r\n\r\nI'll bring this in, and I opened #864 to track adding some additional logic / smarts to the completion trigger. Thanks for the PR and ideas, @CrossR !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341798071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341801046", "body": "Thanks @CrossR ! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341801046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341856464", "body": "Yes, thanks! This should be addressed by the latest completion changes - we're re-querying and re-rendering a lot less frequently now. I'll close this out, we can track in a new issue if we see any more flickering. I'll close this out - thanks for going through the 0.3 issues!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341856464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341856541", "body": "This should be fixed now, but I still see one minor issue that is jarring - if you type out the word completely, the first enter gets swallowed. Need to see what's happening there..", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341856541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341859183", "body": "Ah ya, the bug in the video was fixed in this PR #845 (the base would be off-by-one so we'd complete in the wrong spot). I need to record a new video that doesn't have that bug \ud83d\ude04\r\n\r\nI believe this scenario should work better now, at least for the Neovim popup completion (because we defer to neovim for the case handling in that scenario).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341859183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341860917", "body": "This was addressed by #819 - we now only query at the meet, and only if the meet has changed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341860917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341862504", "body": "This will be a nice UX fix, as well as improve the demo flow \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341862504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342301388", "body": ">  at the moment though ale which usually shows lint errors with signs in the signcolumn (or gitgutter which shows git changed lines ) aren't working is there a specific config for allowing the sign column?\r\n\r\nThere shouldn't be anything in Oni stopping this - I just ran this VimL as a litmus test (from http://vimdoc.sourceforge.net/htmldoc/sign.html)\r\n```\r\n:highlight SignColumn guibg=darkgrey\r\n:sign define piet text=>> texthl=search\r\n:exe \":sign place 2 line=23 name=piet file=\" . expand(\"%:p\")\r\n```\r\n\r\nAnd I do see the sign show up as expected:\r\n![image](https://user-images.githubusercontent.com/13532591/32465800-99bf4962-c2f9-11e7-96c8-9d98ec060541.png)\r\n\r\nI wonder if there is some other interaction occurring with Oni that is preventing this from working?\r\n\r\nI also tested just `vim-gitgutter`:\r\n![image](https://user-images.githubusercontent.com/13532591/32465906-f4c4524e-c2f9-11e7-9a46-e8ce7e310126.png)\r\n\r\nAnd it seemed to work OK on my machine. \r\n\r\nA few things / questions to dig further:\r\n- Which platform are you using?\r\n- Are other plugins working at all? Which plugins do you use besides `ale.vim` and `vim-gitgutter`? I'm wondering if there is a general issue with `vim-plug` in Oni, or if it is specific to some interaction between these plugins and Oni.\r\n\r\n> sorry feel like I'm a little of the original topic.\r\n\r\nNo worries! Sorry you're hitting these issues. It'll be helpful for others if they search for ale or gitgutter anyway \ud83d\ude04 \r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342301388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342301539", "body": "Thanks @keforbes !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342301539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342302986", "body": "Awesome, thank you @asood123 for this! Looks great.\r\n\r\nTwo questions:\r\n- Unfortunately I'm hitting https://github.com/opencollective/opencollective/issues/606 - I'm unable to admin or set up my collective. It seems my e-mail (bryphe@outlook.com) is associated with `bryphe1`, which isn't a core contributor to the oni collective.\r\n- Is it possible to change the URL for our collective to be https://github.com/onivim/oni? I migrated to an org account after signing up. Might be an admin option that I can change once I have the core contributor permission.\r\n\r\nThanks again! I'm excited to get going on open collective.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342302986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342310265", "body": "> None of my executables were found by Ale which makes me wonder if git can be found by gitgutter although when I run a terminal with my full config it has access to fzf and git for example.\r\n\r\nAh interesting, that's a good find. It's possible those binaries aren't being found - and given gitgutter isn't working, it seems likely that the `git` executable isn't working. Which platform are you running on? \r\n\r\nRunning `!git --version` in Oni - that would be a good litmus test to see if it is finding that binary or not.\r\n\r\nAlso, checking the `PATH`s that Oni knows about would be interesting - this can be done by checking the value of `process.env.PATH` in the debug console (`Control+Shift+P` -> `Open Developer Tools`).\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342310265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342310954", "body": "Hi @meain ,\r\n\r\nThanks for trying out Oni! Sorry you're hitting this, and I really appreciate the troubleshooting you've done so far.\r\n\r\nWould you mind running Neovim in the terminal and running `:CheckHealth`, and sharing the output? There might be some clues there. It does seem that Oni is having an issue finding the python provider - that may give us some clues.\r\n\r\nAlso, if you completely remove your `config.js`, are you still hitting the issue?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342310954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342338060", "body": "Will be holding off on this change until the `0.2.1` release, and then wiring it up. It'll be great to get these checked-in binaries out of the repo (and keep it from showing as language `VimL` in github \ud83d\ude04 ).\r\n\r\nThis will address both #326 and #123 . Later, we might want a forked Neovim so that we can add a GUI flag (or experiment with a web assembly build).\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342338060/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342338302", "body": "Need to incorporate & test Linux support here, too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342338302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342343629", "body": "Thanks @keforbes ! Ya, it'll be nice to have it scripted - it's a pain to create it manually... and good motivation to streamline and improve the UX, in order to see that demo video get better with each release.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342343629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342346363", "body": "> I also published it to NPM so you can test it https://www.npmjs.com/package/yode\r\n\r\nNice! Congrats on publishing it \ud83d\ude04 \r\n\r\nOn the Oni side, I've been working mostly on language stuff (both language server support, and IME). But ya lots of commits, I've been fortunate to be able to work on Oni full-time for the next few months \ud83d\ude04  \r\n\r\nThe editor stuff + keybindings hasn't really changed too much, besides adding a few new API methods and keybindings. \r\n\r\nIt's actually great timing, as I'm going to start working a bit on some new `IEditor` implementations - a file explorer window, and a markdown previewer. So I think those will be good test cases - and maybe we can implement Yode in parallel as an `IEditor`?\r\n\r\n> I think for a first version, living in a PR not merged in the near future, could definitively be done without full fledged window management and such. E.g. opening a function buffer in a new split would be a good first start in my opinion. Would love to hear your thoughts \ud83d\ude09\r\n\r\nThis seems pretty doable! I think I'll loop you in as I start some of these other `IEditor` strategies, and we can see how we can hook up Yode in the process. \r\n\r\n> Also ... should we open a new issue? This one grown very big \ud83d\ude01\r\n\r\nSure, that would be great. Perhaps we could have one tracking Oni + Yode integration? It'll be an excellent test of Oni's extensibility. I'm excited about it because I think the next step for Oni is to  demonstrate ambitious new editing paradigms to make you more productive - and Yode definitely fits in there.\r\n\r\nOne idea I had was to integrate Yode with the `Find-all-references` functionality, such that when execute `Find-all-references`, it pops open Yode splits for each of the functions that contain a reference. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342346363/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342632130", "body": "> If there is no existing project for a Markdown LSP server, I implore you to make it a separate project so:\r\n\r\nYes, seems reasonable! I actually just created a CSS/LESS LSP server (just extracted from VSCode): https://github.com/onivim/css-language-server\r\n\r\nIt'd be straightforward to do the same with the markdown server.\r\n\r\n>  I would like to suggest that this will be implemented in a different language\r\n\r\nThanks for being candid, I appreciate the feedback! Here are my thoughts on each point:\r\n\r\n> Completely subjective but true honesty: I find it hard to use (and thus contribute to) JS/TS projects\r\n\r\nYes, understand this - the JS/TS ecosystem is changing quickly and there are so many paradigms and lots of ramp-up needed to get productive. However, the plus side of this is that there is a _huge_ repository of packages - and this is the major strength for implement a language server. The https://github.com/Microsoft/vscode-languageserver-node does most of the heavy lifting - abstracting the transport layer, whether its socket/IPC/stdio/etc - and there are some great packages for spell and grammar check.\r\n\r\nContrast that with https://github.com/palantir/python-language-server or https://github.com/sourcegraph/go-langserver - they have to re-implement a transport layer and consequently there are lots of issues. Neither server works well on Windows, for example. I think there's an opportunity for both ecosystems to have a package that provides a similiar abstraction to `vscode-languageserver`, but that's out of scope for me \ud83d\ude04 \r\n\r\nI did a lot of C++ in school, and then professionally in C# & JS (TS). I do think it's worth learning, as some of the ecosystem - like [React](https://reactjs.org/) / [Redux](https://redux.js.org/) / [RxJS](http://reactivex.io/rxjs/) - have introduced some cool functional-style programming, and I learned a lot just working with those libraries.\r\n\r\n> Wider target audience (I think that running Python or Go applications is much easier for most users on most platforms)\r\n\r\nI'm not convinced this is the case. I actually researched this a bit prior to working on Oni - looking at things like the [Stack Overflow Developer Survey](https://insights.stackoverflow.com/survey/2017#developer-profile). Specifically, stats like this:\r\n![image](https://user-images.githubusercontent.com/13532591/32518496-9da93482-c3be-11e7-8e4f-0658eb826e6f.png)\r\n\r\nIn addition, Python and Go are convenient in the OSX and Linux ecosystem - but on Windows, it's actually much worse. In fact, Python is a _huge_ pain in Windows, and when you look at a stat like this:\r\n![image](https://user-images.githubusercontent.com/13532591/32518549-c5cf76c4-c3be-11e7-90c5-d426ac635826.png)\r\n\r\nWindows is still a relevant and important platform. Electron essentially provides a node runtime, so it makes sense to leverage that - there doesn't need to be additional install or setup logic to drop a python runtime on Windows. These stats are part of the reason I chose the Electron platform (even for all the hate Electron gets on reddit/HN!), because I believe it has the right set of tradeoffs to address a niche that has a need.\r\n\r\nI like Python as a language a lot, but the impracticality on Windows is a deal breaker for me leveraging it more heavily in Oni. A go or rust executable would be potentially more doable, but it'll be quicker to build leveraging the `vscode-languageserver`.\r\n\r\nWith these projects, I try to balance two factors - _how quickly can I build something_ and _how applicable would it be for others_ - and I think for this case JS + NPM strike the right balance. I have a few months of runway to make Oni sustainable, so I have to make sure I make judicious use of that time.\r\n\r\n> Performance (AFAIK, Go should yield superior performance over JS/TS, see https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=go&lang2=node)\r\n\r\nAgreed, I think that a native executable built with Go/Rust/C++ would be more performant. I'm not sure the extra development time would justify it. The language server built with `vscode-languageserver` with JS + Node should only take a couple days to get going, whereas it would be a multiple of that on any of those platforms (at least for me).\r\n\r\n The nice thing about OSS is others are welcome to build a native implementation, too! And I'd be happy to leverage it and scrap my implementation if its better.\r\n\r\n> Please forgive me if it seems rude, I have only good intentions and am greatly inspired by your work.\r\n\r\nCheers, not rude at all, I appreciate the questions & feedback - I hope my responses don't come across negative\r\n \ud83d\ude04 It's great to think through these points and they are certainly applicable to the roadmap & future of this project.\r\n\r\nAs an aside, one language I am excited about is [Reason](https://reasonml.github.io/) and I'm considering trying to write the language server in that - it's an OCaml variant that compiles to JS. I've been meaning to try a real-world project with it, this might be a good fit... \r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342632130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342632609", "body": "Hi @kristijanhusak ,\r\n\r\nThanks for trying out Oni, and taking the time to report the issue! Appreciate the screenshots.\r\n\r\nYes, looks like we are ignoring the bold / italic font info coming from Neovim - definitely a bug.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342632609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342634076", "body": "Hi @Metamist ,\r\n\r\nThanks for reporting the issue! \r\n\r\nI just tested this out and it seems that the filetype is reported as `javascript` with Oni in the out-of-the-box setup:\r\n![image](https://user-images.githubusercontent.com/13532591/32519599-2cd1fab0-c3c2-11e7-98a4-fc9a420c400d.png)\r\n\r\nA couple questions for clarification:\r\n1) Do you happen to be using any additional plugins or a custom `init.vim`?\r\n2) Is this on `master` or the `0.2.14` release? \r\n\r\nI think there are a few potential ways we could address this - I'm not sure if it is a common pattern to use `<language>.<extension>` in Vim in general, but if it is, we could use just the `<language>` piece for  language server integration. Another option would be to specify a mapping - like `javascript.jsx` should map to `javascript` language server.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342634076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342636911", "body": "> I would like to give this a try.\r\n\r\nAwesome! \ud83d\ude04 Keep me posted and let me know if you need help getting started. I'm excited about this feature because it will be one of the first that really \"breaks free of terminal limitations\".\r\n\r\nYour list looks great. I like the idea of auto-opening the preview pane, this would be very convenient. I agree with having it be read-only + no vimability for now - I think that will be easy to implement once some of the other new features have been implemented (like the file explorer and embedded browser).\r\n\r\nHere's a few other items to help get you started:\r\n- I was messing around with a prototype of this in `bryphe/proto/markdown-preview`. I don't think it is in great shape, but this part of the code might give you ideas: https://github.com/onivim/oni/tree/bryphe/proto/markdown-preview/vim/core/oni-markdown-preview/src\r\n- Also, the events that we get from Oni - like `Oni.editors.allEditors.onBufferEnter` would be helpful for implementing your markdown preview trigger. It's essentially like your `OnFileOpen` block. The `LanguageManager` has an example - it also hooks that event to try and send a `textDocument/didOpen` notification to the language server.\r\n- For key bindings, https://github.com/onivim/oni/blob/master/browser/src/Input/KeyBindings.ts and https://github.com/onivim/oni/blob/master/browser/src/Services/Commands.ts are good places to look.\r\n\r\nI'm also starting to look at implementing the file explorer UI, so that might help us in terms of creating the markdown preview pane. I'll keep you in the loop on that.\r\n\r\nAppreciate your help, thanks @TalAmuyal !\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342636911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342640761", "body": "Ah good catch, thanks for testing that out.\r\n\r\nYes, depending on how it's run, it might not have the same $PATH variable as in your shell (especially if you run it from the dock or finder).\r\n\r\nYou can set the `environment.additionalPaths` configuration value to make sure Oni is always passing those down. Let me know if that works for you.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342640761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342657704", "body": "Oh ya,  another thing I just remembered...\r\n\r\nYou can sort of see a placeholder for creating additional panes / editor experiences by running this in the developer console:\r\n```\r\nOni.windows.split(0, null)\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342657704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342835532", "body": "Thank you for catching this, @i-am-cjc ! I am investigating right now and have removed the impacted Windows builds from the releases section. \r\n\r\nWe leverage the `vscode-ripgrep` binary from this NPM module:  https://github.com/roblourens/vscode-ripgrep\r\n\r\nIt seems that it impacted both the `zip` and `installer` files, and does not appear that `vscode-ripgrep` itself when run via `npm install` has the issue.\r\n\r\nI'm looking to see if this is somehow introduced on our build machine.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342835532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342845076", "body": "Appears that this is being introduced during AppVeyor build  \u2639\ufe0f \r\n\r\nWhen running `npm install vscode-ripgrep` locally, there is no issue. However, when run on AppVeyor, and producing the artifact, I see the malware present - I created this repo to test: https://github.com/bryphe/test-ripgrep-appveyor-build\r\n\r\nI opened an issue on AppVeyor CI:\r\nhttps://github.com/appveyor/ci/issues/1913\r\n\r\nI'll look into some alternative plans to produce Windows builds in the meantime, and will keep this issue updated. Thank you again for reporting this.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342845076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342856438", "body": "Never mind, not appveyor's fault - it looks like there is actually malware in the package in `vscode-ripgrep`... logged a new issue tracking it there: https://github.com/roblourens/vscode-ripgrep/issues/6\r\n\r\nIt only affects the `ia32` and not `x64` dependency which is strange, but we build Oni for `x86` which is why we see the problem there...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342856438/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342860093", "body": "Hi @dimascyriaco ,\r\n\r\nThanks for trying out Oni! Sorry you're hitting this issue. It looks like some sort of rendering problem (unfortunately I haven't tested on Kubuntu).\r\n\r\nCouple things to try:\r\n1) Does pressing `Control+Shift+P` bring up command palette? If so, can you open the dev tools and check if there any errors?\r\n\r\nWe also send an option to electron to force hardware rendering - we set this option here:\r\nhttps://github.com/onivim/oni/blob/d4fb694c41eb8247e16dc2227751cd2f0532eeb0/main/src/main.ts#L64\r\n\r\nI wonder if disabling the `Accelerated2dCanvas` fixes the issue? If you're up for building from source, that might be worth a shot", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342860093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342880575", "body": "Wow, that's pretty crazy looking! Thanks for trying that out.\r\n\r\nI see one interesting thing in the logs:\r\n```\r\n/home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44 Neovim version reported as 0.1.7\r\n```\r\n\r\nIt seems the version is reported as `0.1.7` - it may be worth trying a newer version of Neovim - have you upgraded to `0.2.1`?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342880575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342886453", "body": "Excellent! I'm planning on bundling Neovim with Oni, so that sort of thing won't happen in the future. Otherwise, it'd make sense to invest in a better error message / experience than a black screen... (#875)\r\n\r\nThanks for troubleshooting with me - I'll close this out now", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342886453/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342955865", "body": "This is addressed by #875 , as that downloads the latest release binaries (0.2.1).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342955865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342957142", "body": "Upgraded to neovim 0.2.1 addresses this - #875 (at least, haven't seen any crashes!).\r\n\r\nFeel free to open a new issue if you are still seeing this, though. I'm going to cut a new release shortly with neovim 0.2.1 binaries.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342957142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342995829", "body": "I've switched to use the dependency directly from https://github.com/BurntSushi/ripgrep, bypassing the artifact with the issue at vscode-ripgrep.\r\n\r\nThe artifacts produced by the latest build look good:\r\nhttps://ci.appveyor.com/project/bryphe/oni/build/1.0.443/job/87v16v4e4hatx0ot", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342995829/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343005801", "body": "Finally got to this - added some documentation here: https://github.com/onivim/oni/wiki/Language-Support\r\n\r\nNot sure how clear it is.. feel free to revise / clarify!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343005801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343008578", "body": "@badosu - thanks for the tip about Manjaro! I finally got around to installing it today... it was _much_ simpler than the normal Arch install...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343008578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343230829", "body": "Yes, unfortunately Oni doesn't support sequenced input at the moment (multiple inputs entered in a certain time, like `jk`) - this is something I'd like to support eventually, but using `init.vim` for right now is a good workaround.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343230829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343232568", "body": "Yes, this would be a great test case of the new language configuration model \ud83d\ude04 It seems like a relatively straightforward language server to configure.\r\n\r\nLet me know if you hit any issues or need any clarifications", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343232568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343232967", "body": "Do you have `nvim` installed and available in your path?\r\n\r\nUnfortunately, we are not robust in the case where `nvim` is not found, and we will exit immediately as you describe. We need better error handling in that situation for sure!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343232967/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343238732", "body": "Thanks for following up here, @IvRRimum ! I do agree this is confusing... I would like to add some defaults to Oni to help make this work better out-of-the-box. I'll reopen to track adding those defaults.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343238732/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343254062", "body": "> Understand, but it does not need to support sequenced input, why not just pass the actual command to neovim?\r\n\r\nThanks for thinking about this! This would be a reasonable approach in the short-term, where most of our input round-trips through Neovim, but wouldn't handle some of the future scenarios on the roadmap for Oni. In particular, there will be cases where it wouldn't make sense to round-trip commands through Neovim for some of the planned features we have (like an embedded browser split). We already have small pockets of these (like the quick open and command palette menu - none of that input goes through Neovim).\r\n\r\nBy handling the input in a consistent way, we can support some of these new paradigms without the complexity of having to think about \"Should I use `oni.input.bind` or `oni.input.nvimbind` for this particular case?\" \r\n\r\nIf you want that functionality today, there's nothing stopping it - you could always write a function `nvimbind` using our editor API. This API lets you talk directly to neovim, like:\r\n`Oni.editors.activeEditor.neovim.command(\"nnoremap jk :echo 'Hello'<CR>\")`\r\n\r\nBut by supporting this in the Oni layer, we can set up the foundation to support this in general for our mission to \"break free of terminal limitations\" \ud83d\ude04 \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343254062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343256547", "body": "FYI, the java language server support should be possible now by configuring it: https://github.com/onivim/oni/wiki/Language-Support\r\n\r\nThis one looks like a pain to install... but there are some good tips in this thread:\r\nhttps://www.reddit.com/r/neovim/comments/79vbnz/java_lsp/\r\n\r\nWould be interested if anyone gets it working!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343256547/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343267244", "body": "We can automate the case where `nvim` is not available by setting the an invalid location for the debug nvim path configuration - automation for this should be included in the change.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343267244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343268119", "body": "Sorry I'm late to the party here - thanks for the discussion @keforbes and @badosu \r\n\r\nI'll defer to your judgement since you both know Linux better than I do \ud83d\ude04 The biggest pain point for me are issues like these where `nvim` isn't installed - but we can handle that by letting the user know they need `nvim` running. We had a check for that at one point, but it seems it is not working anymore.\r\n\r\nThe current version actually doesn't download the Linux binary, so I think we're okay there @badosu . The latest `oni-neovim-binaries` is a no-op on Linux, and the logic for starting Neovim on Linux still assumes its in the path: https://github.com/onivim/oni/blob/0f6ee990d6c1b59987de4871eb0e50cb84ce0d1e/browser/src/neovim/NeovimProcessSpawner.ts#L24)\r\n\r\nGiven both your points, here are the two next steps in my mind for Linux:\r\n- Get automation running in Linux. Today we only run our automated integration tests on Windows / OSX, and Linux - #910. This is orthogonal to the discussion but its important that our 'safety net' covers all supported platforms.\r\n- Smoother experience when Neovim is not installed, or the wrong version - #911 This regressed at some point, but would address my main concern / motivation for bundling.\r\n\r\nThanks again for your thoughts!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343268119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343304248", "body": "Strange - what does the project structure look like? Is there any interesting layout with the `tsconfig.json`?\r\n\r\nDoes it happen to be an OSS project I could try out?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343304248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343312098", "body": "Thanks for moving this to another issue, @hoschi !\r\n\r\nYes, Yode looks really cool! The intro video was very well done - I need to do something like that for Oni \ud83d\ude04 \r\n\r\n> I looked into the Code I found but there wasn't much. As I understand it an IEditor renders its contents on its own and doesn't use NeoVim? @bryphe\r\n\r\nI realized this is something that has changed a bit so I wanted to give some ideas here. There's really _two levels_ - the concept of an `IEditor` and an `IWindowSplit`.\r\n\r\nThe `IWindowSplit` is __super simple__ - it's just an element that takes up space in the window layout. Right now, it only has a `render` method that returns a React component. Later, we'll need to add some sort of focus or `enter`/`leave` events, but other stuff like rendering and input handling is up to them at the moment.\r\n\r\nThe idea is you can create a split very easily with the Oni API, like:\r\n```\r\nclass MyWindowSplit {\r\n       public render(): JSX.Element {\r\n            return <div>Hello World</div>\r\n       }\r\n}\r\n\r\nconst myWindowSplit = new MyWindowSplit()\r\n\r\nOni.windows.split(SplitDirection.Right, myWindowSplit)\r\n```\r\n\r\nThat kind of split would be super boring though and not too useful.\r\n\r\nWe can implement a few things with the split though:\r\n- A split for rendering Markdown based on the active buffer\r\n- A split for a file explorer\r\n- A split for a browser window\r\netc\r\n\r\nEven the status bar could be refactored to a fixed height 'split' at the bottom.\r\n\r\nThese ones wouldn't necessarily need to even be integrated with Neovim, although for stuff like the file explorer it would make sense to do this, because we want to have a consistent navigation and input model.\r\n\r\nAnd beyond that, the core of Oni is the `IEditor`, which also has a render method, but handles a bunch of stuff - input, notifying when buffers have changed, notifying when the mode has changed, integration with language servers, etc. `NeovimEditor` is the main one that we have today and has an associated NeovimInstance.\r\n\r\nThe model we have at the moment is somewhat busted in that `NeovimEditor` is essentially an `IWindowSplit` with a bunch of extra things. The main difference between it and a pane is that it is registered with `Oni.editors` and so plugins can interact with it that way. An example of where this abstraction is somewhat broken is that the `INeovimEditor` is responsible for rendering the tab bar.\r\n\r\nWhat I'd like to do is basically have some special splits for working with editors - an `TabbedEditorCollectionSplit` that manages a collection of `IEditors`. You could imagine that the `TabbedEditorCollectionSplit` could have a bunch of `IEditors`, and it could take the responsibility of rendering the tab bar, as well as rendering the active editor for the selected the tab.\r\n\r\nThe nice thing about this abstraction is that the yode model fits in pretty easily - it would still manage a collection of `IEditors`, but instead of having a model of tab + only one editor shown, it could show them in whatever layout made sense.\r\n\r\nThere's still some work left to get there:\r\n- There's a bunch of assumptions in the code right now that there is only ever one `NeovimEditor` (and one `NeovimInstance`), we'll have to break those assumptions.\r\n- Need to factor out the `tab bar` functionality from `NeovimEditor` to something more general like the `TabbedEditorCollectionSplit`\r\n- The window split logic still has a bunch of  `//TODOs` (in `WindowManager.ts` \ud83d\ude04 )\r\n\r\nHere's some ideas for getting started prototyping:\r\n- We could start by creating a `YodeWindowSplit` that implements a render - just a hello world render to make sure it's working OK\r\n- Add a single `NeovimEditor` to that split with a fixed height / width, and see if it works\r\n- Bring in the Yode API and hook it up to the positioning logic for that component\r\n\r\n> Will this be provided as an optional plugin for Oni?\r\n\r\nIt might be jarring when people come into Oni having an expectation of a Neovim or VSCode experience. Having it is a plugin seems reasonable - I can see some really cool cases for bringing it in by default for a few cases, like for `Find all References`, or `Go to Definition`, or `Go to test case`, etc. So it might not be the default strategy when you open Oni, but perhaps we surface it in some of those places?\r\n\r\nSorry for the wall of text, I hope that made sense! On my end, I'm starting to look at the file explorer + integrated browser window, so I hope as I drill into those it might help clarify some of the unknowns (and have more examples in place).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343312098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343333094", "body": "@Akin909 glad to hear it's working better! \ud83d\udc4d \r\n\r\nRegarding the path issue - I believe you're right, it seems like we aren't actually passing the additional paths down to the Neovim process.\r\n\r\nThis is the code we use to spin up the neovim process:\r\nhttps://github.com/onivim/oni/blob/c4b3ce408ca5f9b377f034840625bdea6b0d347f/browser/src/neovim/NeovimProcessSpawner.ts#L54\r\n\r\nBut we're not actually passing down the additional paths variable, it seems. We have a helper method to do that over here:\r\nhttps://github.com/onivim/oni/blob/c4b3ce408ca5f9b377f034840625bdea6b0d347f/browser/src/Plugins/Api/Process.ts#L10\r\n\r\nSo it might just be if we hook that up, Neovim will get the $PATH that it needs. \r\n\r\nThe module you pointed out is interesting too - maybe that could keep us from needing the `environment.additionalPaths` config at all?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343333094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343345136", "body": "Added config value of `ui.animations.enabled` to turn this off. IMO it's nice to have instant feedback (this is one step before the _optimistic updates_ I'd like to add to improve typing feel), but it might be too much for some.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343345136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343355383", "body": "This was added in #811 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343355383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343355559", "body": "This was completed with the latest LSP work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343355559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343355634", "body": "With #915 we added `ESC` to exit terminal mode by default so it is less confusing. Thanks for the suggestion!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343355634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343358793", "body": "Fixes #899 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343358793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343360834", "body": "Going to won't fix this for now - best bet would be to use the sourcegraph server when it supports incremental document sync.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343360834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343360975", "body": "I believe this particular issue should be addressed with the autocompletion updates that came in 0.2.15. I'll close this for now, but let me know if you're still seeing the issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343360975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343361130", "body": "This was fixed by the autocompletion fixes in 0.2.15.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343361130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343361453", "body": "This should be addressed by the fix for #845 and the previous completion work done in 0.2.15.\r\n\r\nI'll close this for now, but let me know fi there is still a case that isn't working!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343361453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343554112", "body": "Hi @saibing,\r\n\r\nThanks for grabbing the logs! Just curious - did you build `clangd` from source, or download it from somewhere? In addition, did this work on previous builds for you?\r\n\r\n> Can oni skip these failed network access?\r\n\r\nYes, you can safely ignore both of those errors.\r\n\r\nIt'd be helpful to enable verbose logging to see if there is anything interesting with the language server spawn - I'd recommend doing the following:\r\n- Restart Oni\r\n- Run `Oni.debug.enableDebugLogging()` in the console\r\n- Open a `c` or `cpp` file\r\n- Share the logs\r\n\r\nI'm curious if the `clangd` process is starting, and there are path issues, or if it is failing to start at all.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343554112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343554778", "body": "Weird! Thanks for the logs. Just curious - what version of `npm` and `node` are you using?\r\n\r\nYou can check via:\r\n```\r\nnpm --version\r\nnode --version\r\n```\r\n\r\nI had to upgrade the travis CI and appveyor machines to Node 8 to get all the dependencies + successfully npm install, perhaps that is the issue?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343554778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343555400", "body": "> I can look into this and have a go at replacing the cp.spawn with the helper function, and try the shell-env module to see if this loads in the full path\r\n\r\nThat would be awesome! Appreciate the help!\r\n\r\nWe have a link on the Wiki for building locally - [Development](https://github.com/onivim/oni/wiki/Development) - let me know if you hit any hurdles", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343555400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343556214", "body": "Hi @IvRRimum ,\r\n\r\nI think this might be the same issue @Akin909 ran into in #839 (towards the bottom) - seems like potentially the `PATH` environment variable that Neovim inherits when it starts up doesn't have the full set of paths.\r\n\r\nJust to confirm it is the same issue:\r\n- How are you starting Oni? From a terminal or from finder?\r\n- How does the output of `echo $PATH` compare in `:term` vs a normal terminal?\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343556214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343595667", "body": "Some progress:\r\n![image](https://user-images.githubusercontent.com/13532591/32679958-642c95e4-c61d-11e7-810c-5b91620889a2.png)\r\n\r\nStill a lot left, though!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343595667/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343597954", "body": "> Really can't tell too much without testing this, but I was wondering whether we could reuse something for the logic and just stylize the output?\r\n\r\nThanks for looking at it, @badosu ! I wanted to test a few things as part of this change - one of them brought up in #622 - the idea of having Oni control the render layer, but using Neovim as the input layer (which I believe would work well for any non-modifiable list-type UI, like the quickfix in #730). This allows us to keep things like smooth-scrolling, while getting the benefit of respecting the user's keybindings and customizations.\r\n\r\nIt'll be a bit more work but I think it'll be worth it in the long run, as it will push us further from terminal limitations and enable us to do some more interesting things in the UX layer. Thinking of features like a version control pane, or a debug pane - it'd be nice to interact with those in a vim-consistent way, while having a UX that is on-par (ideally better) than Atom/VSCode/Sublime. That's my dream for Oni, anyway \ud83d\ude09 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343597954/reactions", "total_count": 7, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343598425", "body": "The TextMate integration in #848 should enable querying of scopes based on a cursor position, so that might help here (in terms of deciding when to enable completion)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343598425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343614128", "body": "@saibing  - Sorry about that, my mistake - it's actually `Oni.log.enableDebugLogging()`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343614128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343619756", "body": "Ah, good catch, that flag should be enabled by default. Thanks for finding that, @saibing ! I'll remove that flag.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343619756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343625821", "body": "Fixes #916 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343625821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343627329", "body": "Hi @CameronDiver ,\r\n\r\nSorry for the late reply! Appreciate you posting the screenshots, and all the details that's helpful.\r\n\r\nThat's pretty bizarre - I would expect in your first screenshot to see a tab with `config.js` at the top, because the buffers should be listed. I just tried on my arch machine and see this:\r\n\r\nThe other two screenshots you posted seem like the expected behavior for that mode.\r\n\r\nI would recommend updating to the latest version (Oni 0.2.16 + neovim 0.2.1) - the tab situation probably won't change, but I noticed you do some typescript work and there were some bug fixes around completion and linting.\r\n\r\nOni does hook up some special `autocmd` for buffers, in order to track them to show them in the tabstrip. I'm not sure if it handles all cases of `hidden` or `listed`, so depending on what your config does, there could be an issue there.\r\n\r\nIf we open the debug tools (<Control+Shift+p> -> Open Dev Tools) and run this command:\r\n```\r\nJSON.stringify(UI.store.getState().buffers)\r\n```\r\n\r\nThat might give us some clues - that's basically the data source for the tab strip UX - I'd be curious if it's empty (no buffers listed), or if there is some flag set that is keeping it from showing up.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343627329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343627523", "body": "Hi @MikaAK ,\r\n\r\nCouple follow ups here:\r\n- You can use the `editor.completions.enabled` configuration set to `false` to disable completions if you'd prefer to use deoplete\r\n- The language server configuration is here, so you could potentially set up the elixir language server support via the instructions here: https://github.com/onivim/oni/wiki/Language-Support", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343627523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343628541", "body": "FYI: I started this over at https://github.com/onivim/markdown-language-server\r\n\r\nIt's really basic but it has `write-good` diagnostics hooked up to it, at least. Next step is to implement `hover` and `go to definition`, and have a meaningful README.md...\r\n\r\nI tried out Reason, but it's time consuming to stub out all the imports unfortunately (whereas the definition files are just there for TypeScript)\r\n\r\nI'll close this out, and we can track issues over there", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343628541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343972731", "body": "Thanks @freebroccolo ! Looking forward to trying the new version of the language server.\r\n\r\nI'm investigating the build issue in parallel, but it is not related to your change, so I'll bring this in now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343972731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343982971", "body": "Awesome, thanks @juancampa and @hkrutzer for the extra info and the workaround! This helps a ton.\r\n\r\nI believe PR #924 by @Akin909 will help this situation. It seems that, when launched outside the terminal (like from finder), we don't get the set of environment variables. This will allow setting the `environment.additionalPaths` variable here https://github.com/onivim/oni/wiki/Configuration#environment so that Oni can know which paths should be included when run outside the terminal environment. By default, we bring in `/usr/local/bin`, which looks like would catch some of these cases.\r\n\r\nLater, it might be worth automating this as @Akin909 mentioned with a module like https://github.com/sindresorhus/shell-env - this would allow Oni to pull the environment variables directly from the terminal, even when opened from the dock or finder.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343982971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343984539", "body": "Excellent, thanks for the confirmation @i-am-cjc , and appreciate you finding this. This issue seemed to also impact VSCode's `vscode-ripgrep` dependency, and more info here: https://github.com/roblourens/vscode-ripgrep/issues/6", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343984539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343986115", "body": "Thanks for fixing this, @CrossR !\r\n\r\n> This should fix that by checking the menu isn't open first, assuming this wasn't by design?\r\n\r\nYes, this looks right, it was a regression on my part when I introduced symbol search. Thanks for catching it and fixing it!\r\n\r\n> I'm putting a very early table of the keybinds in the wiki as well, so please fill out around it to add a bit more context! (I also wasn't 100% on the LSP Expand keybind, so I put in a placeholder for now).\r\n\r\nThat's awesome! This will be a huge help. I'll take pass through it and add some more info.\r\n\r\n> There looks to be a number of keybinds with both a C and M version, such as this PR.\r\n\r\nYes, there are some differences in behavior between OSX + Windows/Linux. For OSX, it's more tradditional to use the `Meta` (Apple) key for operations - for example, open fuzzy finder is `Control+P` on Sublime Text/Atom/VSCode on Windows, but `Meta+P` for Sublime Text/Atom/VSCode on OSX.\r\n\r\nThere's a PR (#824) and an Issue (#822) tracking this with some more context, if you're interested. I like the way you formatted the wiki to reflect the different keybindings for OSX + Windows.\r\n\r\n> I'm having some issues with ripgrep since the move to our own repo, it was very flaky getting it installed so I'd appreciate you testing this PR to check its working as intended. Am I missing something I need to do to get it installed? The neovim download worked perfectly, but ripgrep seemed to not return any results, so I'm assuming it wasn't downloaded properly.\r\n\r\nA couple things to try:\r\n- Remove the `node_modules` directory completely (I like to use `rimraf` on Windows)\r\n- Run `npm install` again\r\n\r\nSometimes, if there are older / out-of-date dependencies there can be problems. This will ensure you're on a clean slate. The next thing to check is if the download succeeded - you can check the `node_modules\\oni-ripgrep\\bin\\rg.exe` folder to see if it is there.\r\n\r\nAnd of course, you'll need to `npm run build` again. LMK if you're still seeing issues after that.\r\n\r\nIn the meantime I'll test out the change and report back.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343986115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343987587", "body": "Thanks for the screenshots, @CrossR ! Yes, it looks like there is an issue with the character width measurements for those characters - I guess they are causing the token to end up truncated.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343987587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343988651", "body": "Just tested this out - seems like it works great! I see the additional paths from `environment.additionalPaths` when launching from OSX, and running ':term' and then 'echo $PATH'. Thanks @Akin909 for diving in and looking into this!\r\n\r\n> I though as an interim measure it would be worth using the config path, I can continue to have a look but I think it's going to prove less straight forward than I anticipated.\r\n\r\nSeems reasonable - I think we should get this PR in, because it would address the majority case where `python3` can't be found via `usr/local/bin`. I'll log a new issue to track `shell-env`, which we can integrate separately.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343988651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343993252", "body": "I would guess this is a conflict with the set of defaults we pass to Vim:\r\n```\r\n\" Default tab settings\r\nset tabstop=4\r\nset shiftwidth=4\r\nset softtabstop=4\r\nset expandtab\r\n```\r\n\r\nhttps://github.com/onivim/oni/blob/216f8e8cb8877afccd549732fb76a63742079402/vim/default/bundle/oni-vim-defaults/plugin/init.vim#L9\r\n\r\nI think you will at least need to do `set noexpandtab` as well. You could also try disabling the default configuration by setting `oni.useDefaultConfig` to `false`: https://github.com/onivim/oni/wiki/Configuration#oni\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343993252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343994260", "body": "Work great for me! Thanks @CrossR . I'll bring this in now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343994260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343998641", "body": "Thanks @badosu for catching this, and @CrossR for the PR! I've brought it in - so the fix is now available on master. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343998641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344002378", "body": "I'm investigating the failed OSX build in #931 , but it's not related to your change.\r\n\r\nFix looks great, I'll bring it in now. Thanks for your investigation & contribution @Akin909 ! \ud83d\udc4d \r\n\r\nI'm planning on pushing out a new release on Wednesday (0.2.17) including this fix.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344002378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344014747", "body": "Ah ok, thanks @adelarsq ! I'll add these as top-level dependencies in #931 in order to improve the build reliability.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344014747/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344015071", "body": "This addresses #918 as well", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344015071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344024415", "body": "Thanks for the report, @a-eid !\r\n\r\nStrange, this should have been addressed by PR #787 (there is actually configuration for it here: https://github.com/onivim/oni/blob/01f439771d8fdc3a324cdbf47a7e725c100be0f0/browser/src/Input/KeyBindings.ts#L22)\r\n\r\nI wonder if there is a certain case where the input bindings aren't getting captured? That could potentially be a more general issue impacting other scenarios..\r\n\r\n@a-eid @dasosjt - does this reproduce consistently for you?\r\n\r\nIn addition, did you use the latest release binary (0.2.16), or build from source?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344024415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344063085", "body": "Should be addressed now on master by #931 , as I've included rimraf and fs-extra explicitly in the package.json for Oni. Thanks for the investigation, @adelarsq !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344063085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344070366", "body": "As per the conversation, the only over-the-wire traffic we make on startup is a request to `api.onivim.io/v1/update` - anything else is a bug and should be investigated.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344070366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344073569", "body": "On Windows, via NetMon, this is the traffic I see:\r\n![image](https://user-images.githubusercontent.com/13532591/32751518-0e9a3a86-c87b-11e7-9e5e-9c93f4b5a649.png)\r\n\r\nThis is expected (its all associated with the `api.onivim.io/v1/update`). Need to check the other platforms and see if there are issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344073569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344086500", "body": "Based on the twitter thread, it looks like there was concern over the auto-update API call.\r\n\r\nI updated the wiki here: https://github.com/onivim/oni/wiki/Configuration#autoUpdate \u2026 (by setting `autoUpdate.enabled` to `false`) so that it was more obvious how to disable this check.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344086500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344091603", "body": "This should be resolved by #924 (since that adds `/usr/local/bin` to the paths Oni recognizes by default). Thanks for the fix, @Akin909 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344091603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344094747", "body": "Fixes #923 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344094747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344095015", "body": "I'm planning on pushing out a new release - 0.2.17 - on Wednesday. The fix will be picked up in that package. There's a couple more fixes I want to get in before getting the release out. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344095015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344095097", "body": "Looks like we missed a comma when setting the runtime paths - here's what mine looked like:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/32754891-91f8f528-c887-11e7-9096-e1aae96fec1b.png)\r\n\r\nLooks like a quick fix - created PR #935 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344095097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344109532", "body": "Thanks for inspiring people to try out Oni (and helping them get set up)! Looks like we had a record number of downloads today.\r\n\r\n> Some people who have tried to get setup with Oni run into issues with their python installation. \r\n\r\nIs this the same issue as #868? It seems like there is a specific issue on OSX, where if the `python` or `python3` executable is in `/usr/local/bin`, there'd be issues loading the python host (in the worst way, Oni would be unusable).\r\n\r\nThat particular issue is fixed with #924 - I'm planning on cutting a release with this fix on Wednesday. (The root cause was that Oni wasn't getting the full set of environment variables, and this caused problems with Neovim initializing the python provider). We're also looking at solving this in a more general way by leveraging [shell-env](https://www.npmjs.com/package/shell-env)\r\n\r\nWhat's interesting is, prior to the fix in #924 , Oni worked fine on OSX if there was _no python binary available_, and also if `python` or `python3` was available in `/usr/bin`... but would have problems if it was somewhere else, like `usr/local/bin`.\r\n\r\nAlternatively - are they hitting this issue because they want to use a plugin that depends on python, like UltiSnips? And having difficulty configuring it?\r\n\r\n> Configuring python is a nightmare for people who don't use python daily. \r\n\r\nThis is so true! I'm trying to stay away from packaging Python, if I can help it... Especially on Windows.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344109532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344109729", "body": "Fixed by #935 (will be in Wednesday's 0.2.17 release).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344109729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344337330", "body": "Awesome, thanks @keforbes and @CrossR for thinking about.\r\n\r\nYes, you're right, it seems like the standard on Windows is to be in `%APPDATA%`.\r\n\r\nI put some thoughts about versioning + backwards compatibility here: #938 \r\n\r\nWe do have in our README that Oni is currently unstable and essentially that things may break, but we are also getting more users and I'd like to start looking at how we can have a better story for upgrade. This is one thing that's holding me from turning on auto-updates - it'd be incredibly annoying if we released updates all the time that just broke everyone \ud83d\ude04 \r\n\r\nI think the config-location move would be a good test case / use case for #938 , so I'd like to use that as our first 'upgrader'. Let me know your thoughts, though.\r\n\r\nThe other change, to make the directory if it doesn't exist, would be great to have - I don't see any blocker for that. It's a major pain for the first-run experience - feels really broken.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344337330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344338746", "body": "Thanks for the PR, @Akin909 , and trouble shooting the issues with `shell-env` \ud83d\ude04 \r\n\r\nJust left one comment regarding the sync version - LMK what you think.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344338746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344342697", "body": "Looks like this is fixed in the latest version of Oni. \r\n\r\nClosing, but feel free to reopen if you're still seeing this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344342697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344365248", "body": "@badosu - actually, most of the Oni functionality will be preserved with `useDefaultConfig` set to `false`. The only thing `useDefaultConfig`: `false` turns off are these defaults:\r\n- https://github.com/onivim/oni/blob/master/vim/default/bundle/oni-vim-defaults/plugin/init.vim\r\n- `targets.vim` plugin\r\n- `vim-commentary` plugin\r\n- `vim-unimpaired` plugin\r\n\r\nThere was a bug previously where auto-completion wouldn't work correctly, but it seems addressed now. LMK if you see any issues, though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344365248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344412222", "body": "Thanks @CrossR for fixing this! Change looks good, smoothing out the configuration saving will be a big win!\r\n\r\nIt looks like there are a couple issues with the build:\r\n- Minor lint error (`npm run fix-lint` might take care of it) \r\n- I think the new automation tests that I added to verify the no-`nvim` case will fail, because they make assumptions about the config path:\r\nhttps://github.com/onivim/oni/blob/744fd5765131be8c93428a64b574fa7c03e3ffdb/test/CiTests.ts#L51\r\n\r\nSo that place might have to be updated too for the tests to pass.\r\n\r\nOnce that is good, I'll bring this in. I'll call it out as a __BREAKING CHANGE__ in the next release's notes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344412222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344417809", "body": "Need to spend some time with these docs: https://webpack.js.org/guides/code-splitting/", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344417809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344423665", "body": "> Have you considered using PairUtils vim plugin for this (it\u2019s quite good)?\r\n\r\nActually I didn't know about that one... I tried a couple of them (https://github.com/jiangmiao/auto-pairs was the one I was primarily considering, as well as https://github.com/Raimondi/delimitMate). \r\n\r\nOne consideration I had while testing is incorporating some of the niceties that VSCode has - in particular, it's smart enough to toggle auto-pairs via language syntax (using the textmate language integration), so I was hoping to bring that in to Oni too. I couldn't find a Vim plugin that did that. It'd be straightforward to add that functionality to Oni once #848 is integrated.\r\n\r\nFor some reason I couldn't find PairUtils to test out - the only link was to a vimrc in VimBox \ud83d\ude04 \r\n https://github.com/jordwalke/VimBox/blob/master/dotVim/keysVimRc\r\n\r\nI checked [vim-awesome](https://vimawesome.com/?q=pairutils) too and didn't see it - do you happen to have a link?\r\n\r\n> It then makes it possible to instantly boot up an interactive Vim editing window (command/ctrl n), while lazily loading all the js code for window/modal creation and async LSP interaction.\r\n\r\nThe auto-pairs code on the Oni side is relatively small, so it should have a negligible impact on perf, but it is good to consider (so as not to run into a death-by-1000 cuts scenario..). My concern with it at the moment is _responsiveness_, as it has to make at least one round trip to Neovim aside from the actual input.\r\n\r\nBut I agree for sure with streamlining the startup - I'm working on adding some more discipline/rigor to the startup path (#942) - by calling out exactly what tasks need to happen and parallelizing. We still unfortunately have a bunch of low-hanging fruit in the form of `.sync` calls for loading config / discovering plugins - but that can and should all be parallelized with starting the `nvim` instance. Startup is very ad-hoc today...\r\n\r\nYou brought up another good point (which #942 won't address) - we have one giant `bundle.js` that has everything - bootstrapping/init code, UI, LSP, etc - we should split that up so that we can lazy load all the non-essentials. Opened #943 to track that - thanks for your thoughts around this!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344423665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344424011", "body": "Awesome, thanks for going through and `async-ifying` all those code paths!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344424011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344451226", "body": "Looks good - the OSX failure is due to the token issue, github downloads are throttled. I'll go ahead and bring this in so we can include it in tomorrow's release - thanks @CrossR !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344451226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344623400", "body": "Thanks for the feedback, @justinmk  & @jordwalke !\r\n\r\n> What are some of the things that can go wrong? How does this work with auto wrap mode?\r\n\r\nThis is interesting because I called out the source networking article / multiplayer games as an example, and this has parallels \ud83d\ude04  Most modern multiplayer games predict client input - so when you press `forward` you move forward instantly, without needing a round-trip from the server. The thing is, maybe when the server reconciles the motion, it realizes there was another player in front of you - so you predicted wrong. This is non-trivial to solve because it can be pretty jarring - you can teleport the user, you can `lerp` their position, etc...\r\n\r\nOur case is much simpler but we still get a few of those error cases:\r\n- __Line wrap__ - our logic is simple and we don't try and predict when the line will wrap\r\n- __Bindings__ - some users have mappings like `jj` that wouldn't actually insert two `j`s, but go back to normal mode - we predict wrong...\r\n\r\nHowever, the simple logic we have actually works well for these cases. We have it much easier than say Overwatch in this case, because both the time-to-correction and the degree of error in the prediction is much lower.\r\n\r\nIn both cases where we predict wrong, there isn't much 'badness' - both cases implement an _overshoot_ animation which conveys energy. The __binding__ case is kind of fun because it feels like the cursor gets pulled back into normal mode, so IMO there isn't any special handling needed here. (I will gate it with a configuration variable though!)\r\n\r\n> How long does a neovim round trip take? Is there a way to bump the neovim process priority to help improve it?\r\n\r\nGrabbed some traces to provide more details here. From my basic research so far, Windows has the highest latency (`nvim` gives us lots of options to connect, so #940 is looking at using named pipes as an alternative to stdio).\r\n\r\nBut here's the current state of behavior on `master`. This trace is a _single keypress_ on `README.md`:\r\n![image](https://user-images.githubusercontent.com/13532591/32842718-a73d9fd2-c9d2-11e7-81b2-47311b19b9e2.png)\r\n\r\n- The interaction starts are _~3890ms_\r\n- The response from `nvim` occurs at _~3910ms_ (__green arrow__)\r\n- The paint happens at the end of the frame _~3940ms_ (__blue arrow__)\r\n\r\nThis means the approximate latency for that keystroke is _~50ms_, which isn't really ideal.\r\n\r\nThe trace for the 'after' case is similiar right now (I haven't hooked up the predicted text to all the elements that use cursor position, which would fill up some of that idle space more effectively), with one major exception:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/32842906-3b1f1ff0-c9d3-11e7-8ba9-fddb94ac8399.png) - the spot where that __black arrow__ is where we render the predicted text - that means we show the typed character in _~10ms_ from the start of the interaction, which is a huge improvement!\r\n\r\nFor debugging, I highlight the 'predicted' characters - here's a gif:\r\n![predicted-typing](https://user-images.githubusercontent.com/13532591/32843246-2450cec6-c9d4-11e7-85a4-b35dc2813b71.gif)\r\n\r\nEach of those cases where you see a red-background character is a case where there would've been a _subtle but perceptible delay_ in the typing interaction. (One note - there's actually more than the gif reflects, because my gif recorder maxed out at 40fps/25ms per frame, so it didn't catch all of them, but I think it gives an idea)\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344623400/reactions", "total_count": 4, "+1": 2, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344623745", "body": "A few pieces left:\r\n- Hook up other elements that rely on cursor position to the predicted position, to amortize render time\r\n- Clear predictions using an array instead of calling the action multiple times, to avoid unnecessary re-renders\r\n- Add a configuration variable to enable/disable this feature\r\n- Add a debug setting to show the predicted characters", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344623745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344625804", "body": "Cool, thanks @jordwalke ! I'll check this one out - tracked this in #947", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344625804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344649237", "body": "This is actually already fixed in master - @CrossR fixed this in #927 , and will be available in the next release (v0.2.17, which will be out today)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344649237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344652486", "body": "0.2.17 is out here: https://github.com/onivim/oni/releases/tag/v0.2.17\r\n\r\nTry it out and see if it fixes your issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344652486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344654440", "body": "Awesome \ud83d\ude04 Thanks @CrossR for catching it and fixing it! I'll close this out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344654440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344668151", "body": "The issue with the app crashing on Linux if Neovim isn't installed has been addressed with PR #937, and is now available in [0.2.17](https://github.com/onivim/oni/releases/tag/v0.2.17). I'll close this out, but feel free to reopen if you're still seeing issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344668151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344668595", "body": "PR #924 is now available in release [0.2.17](https://github.com/onivim/oni/releases/tag/v0.2.17), which should fix this issue if the `python` executable is in `/usr/local/bin`.\r\n\r\nI'll close this out, but let me know if you are still seeing issues. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344668595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344668921", "body": "Hi @jay763190097 ,\r\n\r\nJust wanted to follow up - did you try deleting your cache in the `%APPDATA%` folder?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344668921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344669387", "body": "This is now implemented via our language service test:\r\nhttps://github.com/onivim/oni/blob/master/test/ci/AutoCompletionTest.ts", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344669387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344683487", "body": "\ud83d\udc4d #868 should be fixed now in [0.2.17](https://github.com/onivim/oni/releases). Will be interested to see if there are still configurations that have issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344683487/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344692084", "body": "Tracking the file explorer work now in #886 - great discussion here though!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344692084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344747481", "body": "Sorry about the build issues - was just looking at these.\r\n\r\nOne of them was potentially concerning:\r\n```\r\n\r\n  1) ci tests AutoCompletionTest ci test: AutoCompletionTest:\r\n      AssertionError [ERR_ASSERTION]: false == true\r\n      + expected - actual\r\n      -false\r\n      +true\r\n\r\n```\r\n\r\nIt looked like the AutoCompletionTest potentially failed, which means there might be a regression with the TypeScript language service?\r\n\r\nI'm thinking potentially this spot may need to be updated also:\r\nhttps://github.com/onivim/oni/blob/22f4f4cc9046b1b169e3e5f583d49e109a439a40/vim/core/oni-plugin-typescript/src/TypeScriptServerHost.ts#L42", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344747481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344748357", "body": "Cool, looks like `travis-ci` adds in the `git submodule update --init --recursive` for us:\r\n![image](https://user-images.githubusercontent.com/13532591/32863368-16b1ce6e-ca10-11e7-9d88-2e72b7cee93c.png)\r\n\r\nThe failure on OS X is due to the github throttling the downloads.\r\n\r\nI'm not sure why the appveyor build didn't kick off for this - I believe for that we will need to explicitly add the command to update submodules there: https://github.com/appveyor/ci/issues/899", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344748357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344764055", "body": "Thanks for logging the issue, @carc1n0gen ! \r\n\r\nWhat kind of file / project are you working with? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344764055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344766755", "body": "Hi @badosu ,\r\n\r\nThere's a setting `editor.completions.enabled` that you can use to turn completions off.\r\n\r\nWhich files are you seeing this for? TypeScript / JavaScript files did have a bug fix addressing the language service not being fully initialized (which brought in completion).\r\n\r\n> Is there a keybinding to open Oni's autocomplete?\r\n\r\nNo keybinding to open it, today. That's a great suggestion, though!\r\n\r\nI see two actions coming out of this:\r\n- [ ] __Discoverability__ - Add `editor.completions.enabled` to our default config file (commented out), so that users can see that it is an available setting. It'd be nice to have a way to make the whole set of configurations more discoverable.. maybe it makes sense to just have the entire set of defaults in `config.js`?\r\n\r\n- [ ] __Manual Triggering__ - Add a key binding to open completions when `editor.completions.enabled` is false. I'm thinking either `Control-Enter` or `Alt-Enter` would be reasonable as a default for this? It may make sense to use this same key as an entry point to opening refactorings / code actions in normal and visual mode.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344766755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344768101", "body": "> Thanks @bryphe, that solves it for me.\r\n\r\nExcellent \ud83d\udcaf \r\n\r\n> Do you think we could make it clearer on the documentation on what are the additional configurations pre|appended by oni?\r\n\r\nYes, you're right, I think it would be helpful to have a section dedicated to using a custom `init.vim`, what exactly `oni.useDefaultConfig` does, and how to retain an Oni-like experience if you decide not to use the defaults.\r\n\r\nThanks for calling out the specific options that were needed!\r\n\r\nThere are a few things I'm thinking about here to help guide users:\r\n- It'd be great if there was a way in `config.js` to set the `tabs`/`spaces` functionality - that might help keep people from needing to 'eject' from the default config in the first place\r\n- Oni could also detect if these options are not set, and have some sort of warning notification, like 'Hey, you forgot to set `mouse=a`, things might not work as you expect...`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344768101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344768624", "body": "That sounds great @Shou, a PR would be awesome if you're up for it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344768624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344769506", "body": "Cool, thanks for the details @Akin909 ! That is really helpful see the `buffers` in our `UI.store` side-by-side with the buffer list.\r\n\r\nI think I do see a problem - looking through the code, we never explicitly ask Neovim for all buffers - we only learn about buffers when we visit them. This means that in some cases, if buffers are opened prior to attaching (or editing without `BufEnter` being hit), Oni won't know about them.. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344769506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344769643", "body": "FYI - [0.2.17](https://github.com/onivim/oni/releases/tag/v0.2.17) is out now", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344769643/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344951290", "body": "Fixes #951 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344951290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345048926", "body": "> One other potentially jarring experience I'm curious about:\r\nSuppose you have a syntax highlighting rule that highlights let. If you type le it will remain white text, but then when you hit the final t, today, Vim will instantly highlight the let keyword.\r\n\r\nYes, this is a good one to call out too. The predictive editing would use the default color, and then it would snap once the highlight is picked up. As you're typing `l`, `le`, and `let`, the `l` and `le` would be the default color anyway, there'd be a split second where `let` would be the default color, and then the highlighting would snap-in. As you mentioned it should be much less distracting then the lack of syntax highlighting when opening a file \ud83d\ude04 \r\n\r\n> I've always wished that Vim had built in support for predictive edits.\r\n\r\nThis would be really interesting! It would also help in the case of 'lowering the bar' - we could do a better job of helping new vim users know what sort of key combinations they may wish to try, and what the outcomes would be. \r\n\r\n> I'd be interested to do the experiment with a completely empty vim configuration and no syntax highlighting to try to isolate what is purely NeoVim + communication overhead.\r\n\r\nDefinitely - there is also some bottleneck in our `init.vim` we load for Oni to listen for autocommands.\r\n\r\n> I would highly recommend recording the interaction with a high speed camera because the instrumentation can lie sometimes, and the act of having the instrumentation active/recording can (in my experience) disrupt the measurement itself and provide misleading results.\r\n\r\nThis would be a good next step! There are some additional bottlenecks that can show up here too (keyboard latency, usb latency, display latency, etc). In the interim, I did some quick profiling with [Typometer](https://pavelfatin.com/typometer/) just to get ballpark, and the results so far are very promising:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/32913482-4771dbb8-cac7-11e7-914e-2424155b9812.png)\r\n\r\nI just did the empty file benchmark, on Windows, and Oni's average response time went from __47ms__ to __29ms__. That essentially takes us from the ballpark of Atom & VSCode to Sublime territory! \ud83d\ude04 (well, at least for this particular benchmark - will be interesting to see OSX / Linux performance, files with syntax highlighting, etc...). \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345048926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345063813", "body": "Looks great, @Akin909 ! Appreciate the PR - thank you for adding this command! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345063813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345063994", "body": "The OSX build error is due to github releases throttling, not part of this change - merged.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345063994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345066054", "body": "> Was not aware of ui fontSize, perhaps I should do my homework before putting issues.\r\n\r\nNot your fault @badosu , it's confusing - I agree with @CrossR 's comment here:\r\n\r\n> Oni is more and more in need of either a VS Code style search window through every setting and its default, or code completion style pop ups so you can just find the config options that way.\r\n\r\nDefinitely need a way to make these more discoverable and intuitive! Glad that the `ui.fontSize` setting worked out in this case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345066054/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345073193", "body": "Definitely both bugs - thanks for isolating a repro!\r\n\r\nI'm able to reproduce both those issues", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345073193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345074727", "body": "> Ok, now I can confirm, weirdly enough if I type fast it breaks, if I type slowly it works.\r\n\r\nVery strange! But that information is actually really helpful....\r\n\r\nThe menu change / migration to ripgrep allowed us to _stream_ results instead of waiting for them completely. However, we had this logic (before we streamed) in our filter code:\r\n\r\nhttps://github.com/onivim/oni/blob/26e6c00590ed701b01f65f031404080f42085d0a/browser/src/Services/Menu/MenuReducer.ts#L101\r\n\r\nWhere, if we already had filtered results, we'd use those 'cached results' instead of filtering everything. That worked fine when we got all the results at once, but in this new world where we stream results, it causes us to lose results in the case you type fast (essentially  we're ignoring any new results that come in).\r\n\r\nNice catch!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345074727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345076264", "body": "Fixes #957 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345076264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345076778", "body": "Looks like a duplicate of #895 . I'll close this and track there-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345076778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345076817", "body": "@badosu also hit this issue in #958", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345076817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345077348", "body": "Looks like `<C-n>` menu is opening upwards, because of the cursor movement we get during redraw.\r\n\r\nWhat's happening is, when the popupmenu opens, Neovim moves the cursor down to the command line to render text / info about the matches. We measure the popupmenu from that location, see that it's close to the bottom, and open upward. Then, the cursor moves back, but we don't re-measure the completion menu.\r\n\r\nThe best fix here IMO is to leverage the `ext_cmdline` and `ext_wildmenu` so we get less 'noise' with the cursor movement there. Need to check and see if that prevents the match message from showing, though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345077348/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345097350", "body": "> would this just be adding git submodule update --init --recursive into the install: section of appveyor.yml? \r\n\r\nYes, I believe that should be sufficient. We'll be able to look at the appveyor logs and see if it worked", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345097350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345097921", "body": "Ah yes - I'd like to have that text input for the popup menu be driven by Neovim (it's not today), that way all the insert mode bindings or customizations would work.\r\n\r\nIn the interim, we could have a one-off binding for that in the popup menu, potentially.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345097921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345098613", "body": "Thanks for logging the issue, @bpierce1 !\r\n\r\nI believe there are two problems here:\r\n- `javascript.jsx` not supported - we should be bringing in the out-of-box javascript language service (#882)\r\n- In general, if the filetype is not recognized / no language server shown, we are showing that spinner (even in places like the quickfix list).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345098613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345100981", "body": "Fix #882 and part of #961 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345100981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345103600", "body": "Fixed with #960 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345103600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345107282", "body": "#965 should take care of this, but it was hard for me to repro for sure. Let me know if you're still seeing it (or if you see a regression with performance).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345107282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345107599", "body": "I merged in #966, which extracts out the `javascript` and uses that to key off the language server - with that change, the javascript auto completion will kick in. So it should work correctly on `master` now \ud83d\udc4d \r\n\r\nI'll close this, but feel free to reopen if it's still not working.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345107599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345115682", "body": "Ah ya, just tried this out - great progress!\r\n\r\n That's one confusing aspect of React initially - is how to instantiate the elements (as well as the [JSX](https://reactjs.org/docs/introducing-jsx.html) syntax and the [Lifecycle](https://reactjs.org/docs/state-and-lifecycle.html))\r\n\r\nI made some tweaks to get it working in this branch - some ideas here: https://github.com/onivim/oni/tree/bryphe/markdown-preview-mods \r\n\r\nSpecifically [this commit](https://github.com/onivim/oni/commit/70219c4ad796d3a053a9ff60f5d17d13a2d2946d)\r\n\r\nI made a few tweaks:\r\n- I split out `MarkdownPreview` into two separate classes - `MarkdownPreviewEditor` and `MarkdownPreview` - the first being something we `new` and pass over to the window split, and the latter being the actual react component that does the rendering. The `MarkdownPreviewEditor` is really just a shim that implements `IWindowSplit` - later it might be cool to have it implement `Oni.Editor`, once we integrate some of the Neovim pieces here.\r\n\r\nThe way we actually constructor the `MarkdownPreview` component is interesting: \r\n```\r\n    public render(): JSX.Element {\r\n        return <MarkdownPreview bufferEnter={this._oni.editors.activeEditor.onBufferEnter} />\r\n    }\r\n```\r\n\r\nThat's actually syntactic sugar for instantiating a `MarkdownPreview` object - it actually compiles into this:\r\n```\r\n    render() {\r\n        return React.createElement(MarkdownPreview, { bufferEnter: this._oni.editors.activeEditor.onBufferEnter });\r\n    }\r\n```\r\n\r\nWe then hand over all the state management stuff to it - let it listen to the buffer enter event and render in response to that.\r\n\r\nThat solves the lifecycle stuff. It actually kind of rendered with these changes \ud83d\ude04 :\r\n![oni-screenshot-1510881127569](https://user-images.githubusercontent.com/13532591/32924398-4faf58b2-caf1-11e7-9ffc-d1ce7d965fcb.png)\r\n\r\nSome possible next steps:\r\n- listen to the `onBufferChanged` event to see when changes occur (we might not even have to read from the file system, we could use the contentChanges that gives us instead)\r\n- open / close the split - I think `oni.windows.close(split)` would work, but didn't try it...\r\n\r\nI hope that gives you some ideas! Thanks for all your work on this.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345115682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345132450", "body": "Ah ya, that's a pain! Here's an idea of what we could do:\r\n- Create a private variable to hold a promise, like `this._initPromise`\r\n- Refactor out the async call to a helper method, like `startTypeScriptServer`\r\n- In the constructor, kick that off, and cache the result, like:\r\n```\r\nconstructor() {\r\nthis._initPromise = this._startTypeScriptServer()\r\n}\r\n```\r\n\r\nThen, we make `_makeTssRequest` async, and add at the very top:\r\n```\r\n    public _makeTssRequest<T>(commandName: string, args: any): Promise<T> {\r\n     await this._initPromise\r\n...\r\n```\r\n\r\nSo that it waits until the server is started before it starts processing requests. Hope that helps, thanks for looking at it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345132450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345284744", "body": "FYI - I tested on master against some of the `intl` scenarios (dead keys, IME), and it seems to be working well. There was one case that had a bug, `:inoremap jj <ESC>`, where the predicted characters would stick around, but just pushed up a fix.\r\n\r\nI'll bring this into master behind an `experimental` config variable - these are some config values to play with:\r\n- `experimental.editor.typingPrediction` - set to `true` to enable prediction\r\n- `debug.showTypingPrediction` - set to `true` to enable highlighting for the predicted characters\r\n\r\nI also added another value that was helpful for debugging some cases:\r\n- `debug.fakeLag.neovimInput` - set to number (milliseconds), like `100` - this causes us to add extra latency to the input path to neovim. Helpful for testing cases where there are lots of predicted values, wrapping, etc. It's also interesting to see how it changes the feel of typing if you set this value w/o prediction... Of course, make sure to disable this when you're done, otherwise Oni will feel super slow \ud83d\ude04\r\n\r\nSo it'll be off by default for but can be enabled by setting `experimental.editor.typingPrediction` to `true`. If things look good I'll move it out of the `experimental` bucket and turn it on by default for the next release. \r\n\r\nOh and one other note... if someone is interested in the _best_ absolute typing latency, `ui.animations.enabled` should also be set to `false`. I prefer the feel with the 'spring feedback' though so I keep it on.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345284744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345285184", "body": "Oh, that's really cool - nice way to organize the tasks & work. I need to explore that project functionality some more..", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345285184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345373375", "body": "Thanks for catching this, @CrossR! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345373375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345390947", "body": "Cool, ya, looks like the build is good!  Thanks for setting everything up. \r\n\r\nYes, I'm hoping #971 finally addresses these throttling issues we get when downloading from github \u2639\ufe0f \r\n\r\nI'll bring this in - I updated the wiki here with the new step, feel free to edit: https://github.com/onivim/oni/wiki/Development", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345390947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345409952", "body": "Thanks for the thoughtful feedback, @hkupty !\r\n\r\n@badosu  gave some similar feedback as well in #929 .\r\n\r\n> I strongly advise you to implement such bindings as options toggleable through oni config.\r\n\r\n> It is a beautiful and fast GUI, but there must be a clean separation of concerns.\r\n\r\nThis seems reasonable, I do agree with the sentiment. I would like to minimize our surface-area of VimL configuration as much as possible. Sorry that the shortcut we took with the `tnoremap` setting caused extra config work for you - moving it to an Oni-setting does make sense.\r\n\r\nFYI, I tried to collect notes from both yours and @badosu 's feedback here in #973 . I believe that the configuration story can be improved significantly - would be great to have your thoughts.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345409952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345410208", "body": "Thanks for the feedback, @badosu . \r\n\r\nI agree, it makes sense to minimize our VimL layer as much as possible. There is stuff we have by default (like the `cnoremap` and `inoremap` mappings) that really should not be there.\r\n\r\nI used #973 to track some specifics in terms of how we can refactor our config a bit / cause less conflicts, while still having it work great out-of-the-box. LMK your thoughts!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345410208/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345412137", "body": "Just saw you fixed the repo URL in the wiki, thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345412137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345734339", "body": "Thanks for catching & fixing this, @superquest ! Appreciate it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345734339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345734804", "body": "(AppVeyor failure is unrelated to your change - looks like there is an issue with our auto completeion test on windows)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345734804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345745044", "body": "Thanks @daynin for these fixes!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345745044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345750816", "body": "Yes,  I could be wrong, but it seems t's not very straightforward to get the dirty state for _all buffers in a tab_, so in `vim.showVimTabs` mode, we simply don't show the dirty state.\r\n\r\nIt would be a nice feature to have, though", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345750816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345751549", "body": "Cool, I think this would make sense to add as a setting, like `tab.showIndex` - and it would have parallels for both buffers and tabs (in buffer mode, show the buffer index, and tab mode, show the tab index). I believe this should be pretty straightforward - we should already have both of these values available - just the matter of plumbing it through and gating it via configuration.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345751549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345755749", "body": "The 'No content available' is actually expected (we are pretty aggressive in calling `textDocument/hover`, and there are cases - like here, where the mouse is on `\"`, we'd expect there to be no content). It might be worth downgrading this message to avoid confusion.\r\n\r\nHowever, is other functionality broken too? Like completion? \r\n\r\nA few things that should for sure work here:\r\n- Start typing `window` on a new line, you should get completions\r\n- Hover on `electron_1` - does a hover popup show?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345755749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345758196", "body": "There was actually a bug where we weren't fully disabling the animation, that was fixed in #946 (it's in master, but not in a released build). It might be worth trying that build with `ui.animations.enabled` false.\r\n\r\nWhen animations are on, we set a scale transform on the cursor background, it's possible there are some aliasing issues - the fix in #946 should address that. \r\n\r\nWe also render the 'cursor character' differently - it's in the DOM, versus the canvas, which has a separate font render path - so it is possible that in itself is causing issues. \r\n\r\n@allyraza , if you're up for trying out the latest master with `ui.animations.enabled` set to `false`, and can check and see if you're still seeing issues with blurry characters, that would be great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345758196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345759182", "body": "Good catch @hoschi ! Yes, this is very annoying.. \r\n\r\nThis is the codepath where we apply all of these edits:\r\nhttps://github.com/onivim/oni/blob/af12e7e847b02f6b0f702cfb055f016b2ef9ec9f/browser/src/Services/Workspace.ts#L34\r\n\r\nIdeally, this whole edit operation should be grouped into a single `undo` gesture.\r\n\r\nVim/Neovim support an `undojoin` command, we should be able to leverage that here.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345759182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345762033", "body": "Ah ok, got it, apologies, I was focused on the console logs \ud83d\ude04 \r\n\r\nI'm working on a revised implementation of syntax highlighting here: #848 , with the goal of having parity with VSCode.\r\n\r\nAs part of the LSP refactor, I pulled out the syntax highlighting for a few reasons:\r\n- It was hacky implementation that just tried to infer based on the `textDocument/symbol` LSP - didn't really handle all cases (like nested tokens, or tokens in different scopes)..\r\n- It's not actually part of the language server protocol, so it didn't fit well when I refactored the code\r\n- It was slow for large files\r\n\r\nSorry that was poorly communicated. We can use this to track the 'revised' syntax highlighting, leveraging TextMate themes, coming in #848 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345762033/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345763675", "body": "Just tried out your tweak, @Akin909 - looks great! Thanks for exploring this and opening the issue.\r\n\r\nI thought that the thick scrollbar I was seeing was a problem with my laptop's rendering... but when I applied your changes it looked much better \ud83d\ude04 \r\n\r\nDefinitely think it makes sense to bring this in - are you up for opening a PR? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345763675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345765736", "body": "Yes, it seems even if `tabs.enabled` is set to `false`, we always set `ext_tabline` to `true` (which tells Neovim to let us handle the rendering of tabs, and not to worry about it).\r\n\r\nhttps://github.com/onivim/oni/blob/af12e7e847b02f6b0f702cfb055f016b2ef9ec9f/browser/src/neovim/NeovimInstance.ts#L643\r\n\r\nTo get the original tab line back, we should also add a configuration option to disable this. It seems like there are three scenarios we have:\r\n- Oni's default tabs (buffers, `tabs.showVimTabs` is `false`)\r\n- Oni showing vim tabs (tabs, `tabs.showVimTabs` is `true`).\r\n- Oni not showing tabs at all, and deferring that to neovim\r\n\r\nOne option would be to add a new option for `tabs.showVimTabs` - `'native'` - if this is set, we don't set `ext_tabline`, and also don't render the tab bar (it would imply `tabs.enabled` is `false`). `false` and `true` would still work as before.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345765736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345804435", "body": "That would be great to have help, @superquest !\r\n\r\nHere's a few places to look:\r\n- `NeovimInstance` handles the `redraw` event from Neovim here: https://github.com/onivim/oni/blob/18a7bff99f9cc9e0164e40b6274d3ff134d10b26/browser/src/neovim/NeovimInstance.ts#L515 (there's info on how these events look, like: `:help ui-event-highlight_set`. We might be ignoring the `bold` or `italic` state here.\r\n- The `NeovimScreen` class manages the state of the screen (basically taking the `redraw` events, and updating our in-memory grid of the screen state). The cell interface here is the data we store: https://github.com/onivim/oni/blob/18a7bff99f9cc9e0164e40b6274d3ff134d10b26/browser/src/Screen.ts#L39 We're missing `bold` and `italic` here, so it would need to be added - once we have that, we should be able to call `getCell` and get the `bold` and `italic` state for a cell, along with the stuff we already have.\r\n- Finally, once we've updated our screen state to have the `bold` and `italic` info, we'd need to update our renderer to know to add bold / italic: https://github.com/onivim/oni/blob/18a7bff99f9cc9e0164e40b6274d3ff134d10b26/browser/src/Renderer/CanvasRenderer.ts#L243\r\n\r\nHope that helps, let me know if you have any questions!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345804435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345833383", "body": "Thanks for putting this together so quickly, @CrossR! \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345833383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345842217", "body": "> I don't understand why a fresh installation behaving differently from vim\r\nis a happy path.\r\n\r\nCouple of thoughts:\r\n\r\nA fresh installation of Oni _already behaves differently than vim today_... if you have a custom `init.vim`. You have to _opt-in_ to using your `init.vim` settings.\r\n\r\nA goal I have with Oni is to _lower the bar_ to modal editing. Out of the box, I want the tabline to behave like Atom, VSCode, or Sublime - because for better or worse, those are the standards that a large population of users expect. Like the `oni.loadInitVim` setting, I expect that if a Vim user comes to Oni and cares enough about a tab-based workflow to enable it, they'll have enough knowledge to opt-out of Oni's functionality and bring in their own (as long as we give them the ability + settings to do this).\r\n\r\nI think this touches a bit on your comments in #973 too - my goal for Oni is beyond just a GUI for Vim, as there are some functionalities I'd like to implement that have no parallel in Vim (like an embedded browser). Some features, like those that go beyond what Vim provides, will work best with the 'blessed' or 'happy path' settings (for example, it'd be hard to have a consistent navigation model with these new types of UIs, unless Oni provides that model).\r\n\r\nBalancing all these aspects - having a solid out-of-box experience, lowering the bar to modal editing for new users, and catering to advanced Vim users - is certainly a challenge, and I know we don't have it right today, but we'll continue exploring until we find that balance. \r\n\r\nFor advanced Vim users, I want to make sure they have the right knobs and settings to opt-out of Oni behavior they don't like or want, and bring in their configuration. LMK what you think.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345842217/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345869359", "body": "Cool, looks good @Akin909 !\r\n\r\n> I removed the overflow styling that was coming from the tabs.tsx component as it was overwriting what was set in the less so I've returned the wrap styles or an empty object as I didn't want to pass null or a boolean to the style prop for fear of some unexpected result.\r\n\r\nMakes sense, I tried it out and seems like it works well. I was worried we might still get a scrollbar showing when we wrap, but doesn't seem to be the case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345869359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345869486", "body": "Seems like there is some flakiness with the autocompletion test (the travis CI failure), it does not appear to be related to your change. Need to investigate what's happening there. I'll bring this in, though - thanks for the contribution!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345869486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345870274", "body": "Thanks for logging the issue @daynin - appreciate the animated gif! I'm able to reproduce this.\r\n\r\nYes, it seems like we aren't refreshing our list of buffers correctly in this case. The ones that are `No Name` at the top don't show up in `:ls`, and so shouldn't be persisted via Oni either. I believe the root issue is similar to the one impacting #852 - that Oni's view of the buffers is out of sync with Neovim's.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345870274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345874310", "body": "Just loaded up the branch, looks like great progress!\r\n\r\nTo get `scrollTop` working, the very first step is to make sure a scrollbar is visible - left a couple comments to help with that. We want the scrollbar to be on the root element rendered by that `<MarkdownPreview />` component.\r\n\r\nThe next challenge that I'm not exactly sure how to handle, is how to map from the current buffer position -> preview window position? One option would be to try and align it to the nearest heading, or something... The mapping is not super straightforward because something that takes one line in markdown might take a bunch of space in the preview window (like a big image) - will be interested to see how that works!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345874310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345875168", "body": "I like this idea a lot! I think it would make discovery of the configuration values much easier.\r\n\r\nI'd be fine completely moving the `DefaultConfiguration.ts` to our out-of-box `config.js`. Discoverability of settings is certainly a problem today and this would help immensely.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345875168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345877609", "body": "Fixed by your PR #993 - thanks @Akin909 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345877609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345880986", "body": "Thanks for the detailed investigation, @CrossR!\r\n\r\nThis is confusing because there are 3 entities involved, and each has a different indexing behavior (in other words, uses either _zero-based_ line/columns, or _one-based_ line columns):\r\n- __Language Server Protocol__ - uses _zero-based_ lines/columns\r\n- __TypeScript Standalone Server__ - uses _one-based_ lines/columns\r\n- __Neovim (quickfix)__ - uses _one-based_ lines/columns\r\n\r\nSo in the code above - what's happening is the request comes in via the _language server protocol_, so we have to convert it to a one-based index for the _typescript server_, and then the _typescript server_ sends us back one-based indices, so then we have to re-map it back to the protocol that the language client expects.\r\n\r\nHowever, once we get those zero-based indices, we hand them off to Neovim in the quickfix window, without adjusting back to one-based indices (which Neovim expects). So it looks like the root issue is here:\r\nhttps://github.com/onivim/oni/blob/6501a2b50d690ffe31e66aca71a5972c79e3e4eb/browser/src/Services/Language/FindAllReferences.ts#L49\r\n\r\nWhen we're converting from `types.Location` to the quick-fix item format, we should be converting from zero-based to one-based indices.\r\n\r\nAnd it looks like it is impacting other languages too (like if I 'Find all references' in a .less file): \r\n![image](https://user-images.githubusercontent.com/13532591/33049128-7a48b346-ce13-11e7-98c7-0d83066d66ce.png)\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345880986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345886177", "body": "Fixes #990 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345886177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345886224", "body": "Fixed by #995 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345886224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345902155", "body": "Since we now have OSX binaries bundled as part of `oni-neovim-binaries`, this is no longer necessary. We can still consider doing a manual build if there is a demand for it to include a `has(\"gui_oni\")` variable.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345902155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346140104", "body": "> but because Oni surfaces the vim buffers in individual tabs I think that makes it the same as any other editor.\r\n\r\nYep, this is the goal!\r\n\r\n>  (That should be true I think but when I just tried it in Oni I only got 1 tab till I cycled through, so maybe we aren't loading them correctly yet if they are passed on launch?)\r\n\r\nI think this is related to some active bugs we have in terms of surfacing the available buffers - #986 and #852 (so it adds to the confusion... but it's a fixable issue on the Oni side, and not the desired behavior)\r\n\r\nThanks for putting up with all the iterations here!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346140104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346154348", "body": "> I'm going to try to figure out the rendering given a bold / italic cell.\r\n\r\nCool, splitting it up like that sounds like a good strategy! Thanks for your help.\r\n\r\nI'm seeing some `bold`'s come through here:\r\n![image](https://user-images.githubusercontent.com/13532591/33095568-f91c676c-ceb8-11e7-899d-b89be396a198.png)\r\n(in `Screen.ts` where it handles `Actions.SET_HIGHLIGHT`). \r\n\r\nSeems like we are just ignoring them though, and not ever setting `this._currentHighlight.bold` or `this._currentHighlight.italic` - I think wiring it up there is the first step. \r\n\r\nThen, once we have those values on `this._currentHighlight`, we can pick them up in `Actions.PutAction` block - which also isn't caring about the `bold` or `italic` values.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346154348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346172575", "body": "Changes look great to me, thanks for all the thinking / iterations around this @CrossR and @badosu !\r\n\r\nI'll bring this in when the builds have run, and I'll mention the configuration change in the next release notes", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346172575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346180511", "body": "Nice catch, @Akin909 ! Sorry you've had to keep sync'ing this PR.\r\n\r\nI pulled in your change on `oni-api`, and published a new version with the updates: `0.0.5`.\r\n\r\nSo hopefully if you update that version in our `package.json`, we should be all set", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346180511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346221232", "body": "Hmm, looks like there are failures on the OSX build machine:\r\n\r\n```\r\n  1) ci tests AutoCompletionTest ci test: AutoCompletionTest:\r\n     AssertionError [ERR_ASSERTION]: Validate editor element is present\r\n      at Suite.<anonymous> (lib_test/test/CiTests.js:97:17)\r\n      at Generator.next (<anonymous>)\r\n      at fulfilled (lib_test/test/CiTests.js:4:58)\r\n      at <anonymous>\r\n      at process._tickDomainCallback (internal/process/next_tick.js:228:7)\r\n  2) ci tests BasicEditingTest ci test: BasicEditingTest:\r\n     AssertionError [ERR_ASSERTION]: Validate editor element is present\r\n      at Suite.<anonymous> (lib_test/test/CiTests.js:97:17)\r\n      at Generator.next (<anonymous>)\r\n      at fulfilled (lib_test/test/CiTests.js:4:58)\r\n      at <anonymous>\r\n      at process._tickDomainCallback (internal/process/next_tick.js:228:7)\r\n  3) ci tests QuickOpenTest ci test: QuickOpenTest:\r\n     AssertionError [ERR_ASSERTION]: Validate editor element is present\r\n      at Suite.<anonymous> (lib_test/test/CiTests.js:97:17)\r\n      at Generator.next (<anonymous>)\r\n      at fulfilled (lib_test/test/CiTests.js:4:58)\r\n      at <anonymous>\r\n      at process._tickDomainCallback (internal/process/next_tick.js:228:7)\r\n  4) ci tests NoInstalledNeovim ci test: NoInstalledNeovim:\r\n     AssertionError [ERR_ASSERTION]: Validate editor element is present\r\n      at Suite.<anonymous> (lib_test/test/CiTests.js:97:17)\r\n      at Generator.next (<anonymous>)\r\n      at fulfilled (lib_test/test/CiTests.js:4:58)\r\n      at <anonymous>\r\n      at process._tickDomainCallback (internal/process/next_tick.js:228:7)\r\n```\r\n\r\nI tried re-running the build a couple times and still see them (these are tests run against the published package - you can try it on your machine by running `npm run pack` and `npm run test`). On my Mac they seem to be passing, so I'm going to try deleting the cached modules and see if that helps - maybe an outdated dependency is in the Travis's cache and causing problems.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346221232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346223827", "body": "@topaxi - currently there isn't a way to change this behavior. When we render the cursor, we render the character in isolation (inverted), so it doesn't have context about the ligature. It's solvable (we could potentially be smarter about how we render that), but not currently implemented. Feel free to log an issue if it's something you'd like to see!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346223827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346413606", "body": "Sounds great, thanks @topaxi !\r\n\r\nFYI, you can disable the cursor 'bounce' animation by setting `ui.animations.enabled` to `false` if it is distracting.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346413606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346502588", "body": "Hmm, strange, where does it hang? Are you running on OSX? It should work as long as you've done `npm run build` and then `npm run pack` - it does take some time though. It's not a bad idea to delete the `dist` folder too if it is around. It also helps to close any instances of Oni that are running.\r\n\r\nI tried kicking off the build again (after clearing the cache), but it seems the tests are still failing. I'm not sure why - I wonder if it is related to one of the dependencies brought in? The other branches seem to be passing these tests. My main concern is that usually these tests indicate something is wrong with the package, and when we publish the next release the OSX zip/dmgs would be broken.\r\n\r\nIt would be helpful to have the built OSX package (like the .zip or .dmg) to try running locally - that might give us enough info. Unfortunately TravisCI doesn't host the build artifacts like AppVeyor does.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346502588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346505051", "body": "My hope for the project is that I can diminish the need for VimL-based plugins. Oni actually supports the LSP, but it's a bit behind more mature implementations like ALE (currently).\r\n\r\nI'm not opposed to supporting / integrating with VimL plugins, but it is challenging because there is a huge variety and if someone wants to run VimL plugins, it can become difficult to manage things like conflicting settings or conflicting out-of-box plugins. The less we have in the VimL layer, the less potential for Oni to conflict with a power user's Vim settings (and the simpler our configuration story can be).  With #973 , I'm working towards having less of a VimL surface area than we have today.\r\n\r\nHowever, if this is something that people would like - deeper integration with VimL plugins - I believe it should be doable as a plugin, even if it isn't implemented in the core project. For example, I could imagine an Oni plugin that bundles both ale.vim and some JS code to hook up error highlighting / messages. Oni's extensibility layer should be flexible enough to support this (if not, it should be fixed \ud83d\ude04 ) - there just might need to be some glue code to bring Oni + ALE together. Would be a good exercise to see how that might work!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346505051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346505326", "body": "Thanks for logging the issue, @topaxi !\r\n\r\nSeems likely that it is a bug in our rendering layer here: https://github.com/onivim/oni/blob/master/browser/src/Renderer/CanvasRenderer.ts\r\n\r\nIf we split up the token rendering, that could break the ligature (potentially cursorcolumn could be related to this).\r\n\r\nJust curious - is `cursorcolumn` set via your `init.vim`, or are you using the `editor.cursorColumn` setting in Oni's config.js?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346505326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346505643", "body": "Thanks for logging the issue, @Rafi993 !\r\n\r\nYes, discoverability of the configuration settings is definitely a problem.\r\n\r\nSome related issues:\r\n#976 \r\n#837 \r\n#704 \r\n\r\nIt'd be great to have a cohesive story for this that addresses these concerns holistically, as configuration is so important.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346505643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346505803", "body": "Hi @badosu , did you mean to close this?\r\n\r\nSorry I missed replying to you - but the approach sounds great! I like the way you called this out.\r\n\r\nI think this is definitely in-line with the direction we want to go - it should be easy to turn off Oni's features and opt-in to VimL plugins, if the user desires.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346505803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346507766", "body": "FYI @jordwalke, I've been thinking about this especially in context with #976 - I think `vim-pairtools` works great (thanks for the suggestion!)\r\n\r\nI would like to follow with an Oni-specific implementation though, for the following reasons:\r\n- Less chance of conflicting with user's settings (I'm trying to minimize our VimL surface area via #973)\r\n- Proof of concept for some more advanced insert-mode integration (thinking of snippets - this is basically a simpler proof of concept of the input model).\r\n- Common configuration for other features- like completions, hover, buffer scrollbar, etc - it should be easy to `eject` and use whatever VimL plugin you want. In this case, setting `editor.autoClosingPairs.enabled` to `false`, and then bringing in your own plugin would be sufficient. I don't want users to have dig around our vim plugins to debug why there is a conflicting setting.\r\n- Integration with typing prediction\r\n- Integration with textmate themes (disable auto pairs in certain scopes, etc)\r\n\r\nThe north star that I see for Oni is that it is:\r\n- _fully configurable_ (input and all) via `config.js` - no need to go back to `init.vim` (unless a Vim power user really wants to, in which case they can eject and turn off some of Oni's features)\r\n- _consistent navigation model_ - across all UX - whether it is an editor, file explorer, embedded browser, etc.\r\n\r\nOf course, it should be easy to turn off Oni's auto pairs functionality, and fall back to your preferred plugin of choice.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346507766/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346645176", "body": "Awesome progress! \ud83d\udc4d \r\n\r\n> Unfortunately, the auto-scrolling isn't really usable for since I calculate the ratio of the current cursor's line in proportion to the total lines count.\r\nThis is bad since it is both jarring and otherwise uncomfortable.\r\n\r\nMakes sense... it seems like this wouldn't be a smooth or continuous mapping.\r\n\r\n> I think of implementing a logic that identifies the top-most rendered element that is in the current visible part of the buffer and use that instead.\r\nAnother possible solution could be implanting an anchor in the input to marked and then scroll to it using scrollToView().\r\n\r\nThis sounds good! I was wondering how the mapping would work. Ideally we'd have a function that would be a mapping of `(markdownSourceLine) => markdownPreviewLocationInPixels`, but I'm not sure how that would work. I like the solution of implanting an anchor - that seems pretty straightforward, and would at least let us map a certain set of elements directly via `scrollToView` as you mentioned.\r\n\r\n> In any case, a bufferVisibleSectionChanged event is required.\r\n\r\nMakes sense. There actually is some code to track scroll events (really, any sort of window size/position change) - here: https://github.com/onivim/oni/blob/d94397e5ad058410133c55a98e34ce90eae7d077/browser/src/neovim/NeovimWindowManager.ts#L174\r\n\r\nIt's not actually bubbled up anywhere, though. `NeovimEditor` creates an instance of it, but doesn't expose the event. \r\n\r\nI think we could do the following:\r\n- Refactor `NeovimWindowManager` so that, instead of calling `UI.Actions.setWindow...` directly, it exposes an event (like `onWindowScrolled`). We could then bubble that up via an event on `NeovimEditor`, that is available to plugins, like `onBufferScroll`. With that, we should have the context to kick off the scroll sync code.\r\n\r\nReally great work here @TalAmuyal - thank you!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346645176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346645680", "body": "Ah yes, this is a pretty glaring fit-and-finish bug - definitely should be disabled - thanks for catching it and logging an issue, @jordwalke ! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346645680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346648692", "body": "I just tried it on Windows - it didn't repro for me at first, but I had turned off 'Animate windows while resizing' - once I turned that on I could see the issue:\r\n![resize-windows](https://user-images.githubusercontent.com/13532591/33180144-9e5fb086-d020-11e7-8d97-9d526fcd925a.gif)\r\n\r\nThere are a few background issues with Electron apps - resizing is one (electron/electron#9608) \r\n\r\nOne quick solution from electron/electron#10801 is to use the background color of the app, so at least it matches instead of being glaring white. Checking the Insider's build of VSCode is a good idea - I'm curious if they found a more general way to solve the problem, or if they are using the match-background-color strategy.\r\n\r\nI believe this also relates to the blank white screen being shown on startup for a split second (in some cases) - #355 \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346648692/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346650565", "body": "Great feedback, thanks @jordwalke !\r\n\r\n> (Btw, I love that using the keyboard to move the cursor to a token triggers the dialog).\r\n\r\nThis is good to hear - I wasn't sure if it is too distracting (and it certainly can be intrusive if it is common up too aggressively, like this case).\r\n\r\n> I think an explicit cursor movement to a location (or mousein) should trigger such a dialog.\r\n\r\nAgree 100% - that would handle the tab navigation case implicitly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346650565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346651905", "body": "> Currently it uses \"ui.fontsize\", which also changes the tabs and status bar, but it does seem that it would make more sense to base it on the editor size, at least to me.\r\n\r\n> By this line of reasoning it seems (to me) suitable as an editor setting as it uses the same visual span as the editor itself.\r\n\r\nAgree with you both @badosu @CrossR \r\n\r\nThe things that certainly make sense to use `ui.fontSize` and `ui.fontFamily` are things external to the editor view, like:\r\n- File Explorer\r\n- Status bar\r\n- Notification pop ups\r\n- Tabs\r\n\r\nRight now, we also have this UX that is controlled by `ui.fontSize` and `ui.fontFamily`:\r\n- Rename\r\n- Context menu (completion, and later refactoring options)\r\n- Tool tip (hover)\r\n\r\nIt would make sense to switch these back to using `editor.fontSize` and `editor.fontFamily`. I like the general litmus test of if it's in the same visual span / layer as the editor, it should use that setting.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346651905/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346656522", "body": "This solves the general case (at least, for a single file), but there is a problem if you `undo` and then start a new rename - we get an error that `undojoin can't be called after an undo`. We might need to find a way to clear the latest undo state, in this case?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346656522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346658754", "body": "This introduces artifacts with predictions (seems like there may be an issue in timing with clearing predictions) - need to investigate before bringing in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346658754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346665356", "body": "Unfortunately, Vim syntax highlighting doesn't quite match parity-wise with TextMate's tokenization. Vim syntax highlighting makes some tradeoffs such that it doesn't need to parse the entire file (which makes it faster!) but also more limited. TextMate's tokenization allows carrying a rulestack for each token which gives a semblance of what scopes are available - the VSCode team has a great write-up here: https://code.visualstudio.com/blogs/2017/02/08/syntax-highlighting-optimizations\r\n\r\nIn other words, AFAIK, there unfortunately isn't a lossless conversion of TextMate tokenization -> vim syntax highlighting.\r\n\r\nThere are a couple other things I plan on using this for (besides just coloring):\r\n- Querying to see what scope a particular token is in - this is important for things like auto-pairs - maybe we don't want a particular character enabled in comments, for example. It's not straightforward at the moment to ask what syntax a particular character has. Also, we might not want to show hover in comments, for example.\r\n- Alternative visualizations of the code (like a minimap view)\r\n\r\nThe degenerate case for performance is the bottom of a large file - since you need to evaluate the `ruleStack` for all previous lines, at least the first time you navigate to the bottom. The parsing is relatively quick (`vscode-textmate` is great, and bundles a native parser called `oniguruma`!), but it is synchronous and for large amount of lines it can add up. Batching is possible - but in the worst case you end up with a brief FOUC (well, in this case, it'd be 'flash of partially styled content' - we'd use the vim syntax theme as a base, and only style additional elements on top of that), but better than hurting the responsiveness. This current implementation isn't fully optimized yet. \r\n\r\nSome discussion in Neovim too here: https://github.com/neovim/neovim/issues/6052 (about natively supporting it, and limitations of the current model).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346665356/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346666215", "body": "I'll close this on the Oni side - hopefully it's something doable in neovim core!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346666215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346668145", "body": "> If the general plan is to move towards oni plugins with neovim as the \"engine\" then that's fair enough.\r\n\r\nYes, my hope is that the plugins will be 'orthogonal' and 'modular' - the extensibility layer I have in mind actually has more in common with Emacs than any other editor. Architecturally, I'd like Oni to be a modular pack of 'lego blocks' (each item in `Services` is basically one of these blocks) as opposed to a monolith - easy to rearrange or bring your own lego blocks via plugins to get your editor to behave exactly as you want.\r\n\r\n> I might have a very brief stab at seeing if this can be easily implemented as a plugin, and if you don't mind leave this thread open for a (very short period of time) whilst I attempt it so I can perhaps pick your brain if I run into any issues. I'll use the tslint plugin as a template for this and see how it works out.\r\n\r\nSounds great! The most interesting plugin we have today is #922  that @TalAmuyal is working on - might be worth taking a pass through that.\r\n\r\nWe also have an API for sending diagnostics from a plugin directly:\r\nhttps://github.com/onivim/oni-api/blob/45257828b9652356179c58a92cd309511543390b/src/index.ts#L219\r\n(Which might be useful for hooking up here, specifically for this case). The interesting piece is how we hook up VimL state to Oni - we do that today here: https://github.com/onivim/oni/blob/d94397e5ad058410133c55a98e34ce90eae7d077/vim/core/oni-core-interop/plugin/init.vim#L13 but this is a piece that isn't modularized or generalized today.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346668145/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346668417", "body": "Similar discussion came up recently in #1000 - I'll close this out and we can track there.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346668417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346668530", "body": "More in depth discussion in #247  - I'll close this and use that to track.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346668530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346668943", "body": "This should be fixed now that we use `set hidden` by default. Feel free to reopen if that isn't the case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346668943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346697866", "body": "This should be fixed now with Neovim 0.2.1 (and 0.2.2) - I haven't seen it happen again since the upgrade.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346697866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346907035", "body": "Awesome, thanks for fixing this @Akin909 !\r\n\r\nPR looks good, I'm re-running the OSX build but I don't believe the failure is related to the change.\r\n\r\n> Added keys to WindowSplits - \ud83d\ude1f I couldn't find any id like data to use as keys hopefully the index here will be fine if not ill take them out, was just desperate to make the error go away\r\n\r\nCool, I think is reasonable for now, and it will definitely reduce noise - at the moment we only have one split. We'll need to add a proper ID later (once that is actually leveraged).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346907035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346907519", "body": "Thanks for the investigation, @CrossR ! \r\n\r\nYes, this seems similiar to the tab issue in #992  - I think we'd have a few options here:\r\n- Use `editor.completions.enabled` and add `'native'` as an option (like we have for `tabs.mode` - this would give us `true` | `'native'` | `false` as options.\r\n- Switch to `editor.completions.mode` like we have for tabs\r\n- Hook up `oni.useExternalPopupMenu` again\r\n\r\nIMO, `editor.completions.mode` isn't very clear, especially coming from Vim's world of omni-completion, keyword completion, etc..., so I'm leaning towards the first option: adding `'native'` to `editor.completions.enabled`, as it is similiar to what we did for tabs - @CrossR @badosu does that seem reasonable?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346907519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346907719", "body": "Oh and the jerkiness of our externalized popup menu is related to #895 - we position it based on the current cursor position (and some logic like measuring / deciding to open from top or bottom is based on that). This would work great... except the cursor intermittently moves to the command line to show messages (remnant of the terminal UI \ud83d\ude04 ).  Externalizing it, via #908 , would address that particular issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346907719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346908276", "body": "Ah interesting.... thanks for looking into that. That's really frustrating!\r\n\r\n> I'm not familiar with asar but not sure why or if that'd could be the culprit\r\n\r\nThe asar issue is actually okay to ignore.\r\n\r\nI did see in that thread that one user had success clearing `node_modules` and then using `yarn` to install. It might be worth trying that:\r\n- Install yarn and rimraf (`npm install -g yarn rimraf`)\r\n- Delete node_modules (`rimraf node_modules`)\r\n- Run `yarn` - (`yarn install`)\r\n\r\nI'll look into this a bit next week and see if I can upload the OSX package it's building, so we can download and inspect it (and run it locally) - maybe there'd be some clues there. I'd also like to incorporate some more logging output into the tests (like, being able to see the console) - right now it just feels like we're in the dark when there are failures!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346908276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346908552", "body": "I tested locally and ran it, and it passed - I believe this may be failing due to the typescript version being upgraded (it's using 2.6.1 on the build machine), but the change doesn't have the #1003 fixes in it. I'll bring it and check the master build.\r\n\r\nThanks @Akin909 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346908552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346909081", "body": "Thanks for all the info and troubleshooting, @jordwalke ! Really helpful.\r\n\r\nInteresting - looks like it's picking up the python provider from the wrong place.\r\n\r\nIt'd be interesting to see what the `$PATH` looks like in Oni versus running Neovim from the terminal (we can check via `:term` and then `echo $PATH`.) I suspect that there is a pathing difference that is causing this - I bet it should be picking up python from `/usr/local/bin` instead of `/usr/bin`.\r\n\r\nI think the PR #934 that @Akin909 is working on is the long-term fix here, as that will let us pick up the same `$PATH` used by the terminal.\r\n\r\nWe have this setting by default:\r\n```\r\n    \"environment.additionalPaths\": [\r\n        \"/usr/bin\",\r\n        \"/usr/local/bin\",\r\n    ],\r\n```\r\n\r\n...which is a band-aid until we can get the full set of paths. But it might be worth trying to reverse that to:\r\n\r\n```\r\n    \"environment.additionalPaths\": [\r\n        \"/usr/local/bin\",\r\n        \"/usr/bin\",\r\n    ],\r\n```\r\n\r\nto see if that grabs the 'right' python provider.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346909081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346909978", "body": "My suspicion too is that one of the dependencies is causing a problem with the installed package... so another option would be to step back and see if we could implement this w/o those additional packages.\r\n\r\nIt seems like we could potentially run these commands to get the same info:\r\n```\r\nimport * as childProcess from \"child_process\"\r\n\r\n// Windows\r\nconst paths = childProcess.execSync(\"echo %PATH%\")\r\n\r\n// OSX / Linux\r\nconst paths = childProcess.spawnSync(\"echo $PATH\")\r\n```\r\n\r\nAnd worst case, if they fail, we'd just fall back to using `environment.additionalPaths` (it would be good `Log.warn` though). But I think this would handle the 99% case. \r\n\r\nI just used the `sync` ones as a proof of concept, but ideally we could switch to the async version (`exec`) and `promisify` them - leveraging all the work you did to make those code paths async \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346909978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346912663", "body": "Thanks for the fix, @Akin909 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346912663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346946007", "body": "I'll close this out since there isn't anything new here, but feel free to reopen this @jay763190097 if you're still hitting this after clearing the `%APPDATA%` folder and using the latest version of Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346946007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346946161", "body": "Hi @badosu - since we added the `editor.quickOpen.caseSensitive` setting, is the built-in ripgrep strategy sufficient now? I know #957 was a blocker too.  Any remaining issues besides that, or is it cool to close this?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346946161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346949205", "body": "Thanks for catching this and for the quick fix, @Akin909 ! \ud83d\udc4d Looks good to me.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346949205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346974039", "body": "Wow, nice work @Akin909 ! Really appreciate all the effort you put in this PR.\r\n\r\nThe change looks great - I didn't know there was a `promisify` method available in `util`, that's really helpful \ud83d\udc4d \r\n\r\nThe build looks like it is in much better shape, as the other 3 integration tests are passing. I ran your change locally on OSX and I'm not seeing the failure, either, which makes me suspect it's a test / build machine issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346974039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346975516", "body": "I'll debug the test some more, as it is also blocking my PR - #848 . I don't believe this failure is related to your change now, so I'm good to bring this in (I'll investigate the failure anyway as part of #848 / #1015 , and set up our infrastructure so we're more robust in the future, and get more actionable logs).\r\n \r\nBut I'm good to bring this in if you're all set - don't want you to be blocked on this test issue. \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346975516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346975980", "body": "Makes sense to me, thanks for the suggestion @CrossR !\r\n\r\nIn that case, we should be consistent with `tabs.mode` - how about `editor.completions.mode` - with `'oni'` | `'native'` | `'hidden'` as values? I think that's about as similar as we can get between the settings, and we'll now have an established pattern (like we could reuse for other externalized features, like having an `editor.commandLine.mode`/`commandLine.mode` configuration for #908)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346975980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347015236", "body": "Awesome, thanks @Akin909 ! I tested it out locally and looks like it worked great for me.\r\n\r\n> I am getting a fluctuating set of results with the tests which was probably due to not running build and pack before the integration tests\r\n\r\nI hit this sometimes if I didn't run `npm run build`+ `npm run pack`as you suggested - since the integration test run on the last 'packed' build (in order to test the release packages), it can be confusing. Sometimes I'll run just `npm run build` and then `npm run test` and wonder why those are still failing.\r\n\r\n>  now I'm getting the autocompletion error as before, did a bit of digging couldn't quite find what's causing it to fail\r\n\r\nOne case I hit locally that caused the test to fail was that I hadn't run `git submodule update --init --recursive`. Some of our vim plugins (like `typescript.vim`) are in submodules now, and the autocompletion test uses a `.ts` file - without those plugins, Vim actually thinks it is an XML file and thus we don't load the language server (causing the test to fail). Doesn't seem like the same issue as on the test machines unfortunately..\r\n\r\nAnyway I'll go ahead and bring this in now - thanks for the contribution and all the work you put into this! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347015236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347020885", "body": "I think long-term, the best approach here, is to see if we can decouple from some of the constraints we have in Neovim (#405) tracks this - we could get better performance _and_ smooth-scrolling.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347020885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347021093", "body": "\ud83d\udc4d , yes that's a great suggestion @badosu . It'd be helpful to generalize a 'version-control-system' interface / API, and then have the git integration be a plugin that implements that (as a proof-of-concept for other systems, like subversion, etc)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347021093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347022044", "body": "PR #1011 essentially has the same effect, just addresses it at the other end - we only fire the notification during requestAnimationFrame.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347022044/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347245891", "body": "Awesome, thanks @CrossR!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347245891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347306108", "body": "Seems like there might've been a race condition or timing issue here... to initiate the test, we wait for the `.editor` element to appear, and then we immediately query for its contents, and verify we see something there. There could potentially be a delta depending on the time it takes to load Neovim, so this condition may be too sensitive.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347306108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347311476", "body": "> I'm not 100% on what the functionality should be for hidden, or if I've done it the best way.\r\n\r\nAh ya, this is the most confusing case for sure. I'm thinking for 'hidden', we should not show the language service completion, but still keep the popup menu externalized.\r\n\r\nSo our settings would look like this:\r\n- `oni` - enable both the language-server completion, as well as externalized popup menu\r\n- `native` - disable the language-server completion, and disable externalized popup menu (fall back to native)\r\n- `hidden` - disable the language server completion, but keep the externalized popup menu.\r\n\r\nI think the `'hidden'` setting is reasonable behavior.. because by default Vim-completion is opt-in, unless you've done some more advanced configuration to set up an omnicompletion provider. I mainly want an easy way to turn off the type-as-you-go completion behavior we have by default in Oni for JS/TS/CSS, because I know it is annoying and distracting to some - and I think the `'hidden'` setting accomplishes that.\r\n\r\n> I've implemented it by adding the check when it comes to render, but would it be better to just move that code into the subscription to that event? \r\n\r\nIf we implement it as above, we actually wouldn't need to gate the render. We'd only disable externalization in the `'native'` setting, and in that case, we wouldn't get the popup-menu events at all. \r\n\r\nHowever, we would want to turn off the language-server completion - we could replace the check here:\r\nhttps://github.com/onivim/oni/blob/fbea2e38ad804e797172e0a27df2e1816290c67f/browser/src/Services/Language/Completion/Completion.ts#L165\r\n\r\nWith a check for `configuration.getValue(\"editor.completions.mode\")` against `\"oni\"`.\r\n\r\nThanks for putting together this proposal! Lots of ambiguity around these settings... helps a lot to have an implementation to discuss.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347311476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347328808", "body": "Fixed by #1023 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347328808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347383917", "body": "I created a PR to address the issues with #956 , but I think it's worth adding manual triggering for completion too - so I'll leave this open to address that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347383917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347398868", "body": "FYI, looks like VSCode directly sets the `-webkit-font-smoothing` property with the `workbench.fontAliasing` config: https://github.com/Microsoft/vscode/blob/e27288074e0287a42d6752e20873c668526e8c4d/src/vs/workbench/electron-browser/workbench.ts#L935", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347398868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347595498", "body": "> On OSX, if I open a new file I can edit it just fine, everything works, but after I close it I get the error saying to update neovim\r\n\r\nHmm, I'm not able to reproduce this. Couple questions:\r\n- Are you running the latest master build, or the last released build (0.2.17)?\r\n- How are you opening Oni? From a terminal or from the dock?\r\n- How are you closing Oni? `:q` or another way?\r\n\r\nMight be that I'm closing Oni in a different way and not seeing it.\r\n\r\n> Also might be unrelated but I can't get typescript highlighting in oni\r\n\r\nAh ya, #988 is tracking that. We're switching to a more robust strategy using TextMate themes. It's actually in-progress in master, and can be enabled via the `experimental.textMateHighlighting.enabled` flag (some more info in the wiki: https://github.com/onivim/oni/wiki/Configuration#textmate-highlighting\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347595498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347596996", "body": "Ah yes this is messed up! Thanks for logging the issue, @Akin909 . I'm able to repro it in our `ContextMenuComponent` here:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/33333935-2abe8cbe-d41d-11e7-9610-d372a806520a.png)\r\n\r\nThe `<CursorPositioner />` component is responsible for this sizing (it decides whether to open upward or downward, based on the contents and the position). Seems like there is some feedback loop here unfortunately.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347596996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347655947", "body": "Change looks great @Akin909 , thank you for taking a look at this! That sizing logic is not trivial.\r\n\r\nI left some minor feedback on the PR (we might able to use `Math.abs` to simplify the sign-change for the x-position), but overall looks good to me.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347655947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347711337", "body": "Fixes #1012 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347711337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347711359", "body": "Also added info in the wiki: https://github.com/onivim/oni/wiki/Configuration", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347711359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347712011", "body": "Awesome, change looks good!\r\n\r\nThe `AutoCompletion-CSS` test is a new test that isn't stable - not related to your change. I'm working on a fix in PR #1032 . I'll bring this in now - thanks for the contribution, @Akin909 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347712011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347722435", "body": "Fixes #63 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347722435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347725153", "body": "This will be an on-going effort (improve documentation in general)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347725153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347725643", "body": "Also, add proof-of-concept by migrating the 'box-shadow' styling to a CSS file associated with onedark theme.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347725643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347726242", "body": "This is actually implemented now with #975 - need to add some documentation.\r\n\r\nAn example file using the theme is here:\r\nhttps://github.com/onivim/oni/blob/master/extensions/theme-onedark/colors/onedark.json\r\n\r\nAnd all the colors can now be overridden in the `config.js`, like:\r\n\r\n```\r\n\"colors.highlight.mode.normal.background\": \"yellow\",\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347726242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347726459", "body": "Closing, some further work tracked in #412 (the `css` file portion), and it'd be nice to also have `tokenColors` specified in these themes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347726459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347726777", "body": "PR #1022 by @CrossR may help here, once it's in - by setting the `editor.completions.mode` to `'native'`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347726777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347727389", "body": "Ah ok, thanks for the info! That's helpful to know that it doesn't repro w/o those `autocmd`s.\r\n\r\nI'm hoping once #886 is in there will be less of a need for NERDTree anyway \ud83d\ude09 \r\n\r\nOne other thing I just realized regarding the syntax highlighting - we moved some of the plugins to submodules, so you'll need to run `git submodule update --init --recursive` - otherwise the typescript vim plugin we use won't be around anymore.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347727389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347731910", "body": "PR #975 adds this as `'ui.colorscheme'`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347731910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347733533", "body": "Added a note in the wiki: https://github.com/onivim/oni/wiki/Configuration#ui", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347733533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347733849", "body": "This is too vague to be actionable IMO - I'll close this out in favor of identifying specific bottlenecks we should investigate", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347733849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347938358", "body": "This is now available via `ui.fontSmoothing` configuration in `master` - some details here: https://github.com/onivim/oni/wiki/Configuration#ui\r\n\r\nI'm planning on including this as part of the the 0.2.18 release tomorrow.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347938358/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347985751", "body": "Thanks for catching this, @josemarluedke !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347985751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347987658", "body": "Looks like two things to check out here:\r\n- Include a '.go' grammar\r\n- Test case where no grammar is available, or can't read file - we should be more robust in this case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347987658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348038353", "body": "Thanks for the detailed notes, @jordwalke !\r\n\r\nThere are definitely some bugs here... The 'gray grip' should represent the _window_ - (the currently in-view area), and the 'container' should represent the entire _scrollable area_, where the _scrollable area_ is defined as (__buffer height__ + __window height__ - __1)__.\r\n\r\nWe add in the window height above to account for scrolling to the very end of the buffer (such that the last line is at the top of the window). The code today _doesn't account for this_ - it just uses the __buffer height__ and places the top/bottom lines within that space, which isn't correct. In addition, we don't handle the case where a line wraps (which, when we define the __buffer height__, we'd want it to account for the line wrapping).\r\n\r\nSo there are a few bugs in particular with our implementation:\r\n- We don't take into account the bar being the _scrollable area_ - we use the entire view of the buffer. Which is why the 'gray grip' decreases in the last case - it's actually scrolling past our 'container', which isn't sized properly.\r\n- There are some bugs in the initial population - in the first case, it looks like the scroll bar data might be stale (the 'grip' is much too small). And in the second screenshot, it's hitting the issue that the 'scrollable area' isn't correctly accounted, as above.\r\n\r\n> This might just be a personal but the little white \"tick\" seems to represent the cursor. Is there a way to disable it?\r\n\r\nDefinitely, this would be straightforward to add!\r\n\r\n> Maybe I should file a separate feature request for disabling the cursor \"tick\"?\r\n\r\nThat's ok, there are a few issues I'll track here:\r\n- Fix the positioning logic of the scrollbar (to take into account the correct scrollable area, and wrapped lines)\r\n- Fix any data population issues (where we're not getting the correct values)\r\n- Add a configuration value to disable the white tick\r\n\r\nI also think the 'mini-map' style scrollbars tend to be a bit clearer - it'd be great to implement something like that in Oni. Logged a placeholder issue to track this with #1040\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348038353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348053438", "body": "Awesome, that'd be great to have help here, @Akin909 !\r\n\r\nThe main points today where we update the state of the buffer are in `NeovimEditor` (where it handles the Vim events, as you alluded to):\r\n\r\nThis is where the `BufEnter` event is handled:\r\nhttps://github.com/onivim/oni/blob/488a686e518188e58ed5d3c883ca0716426d830a/browser/src/Editor/NeovimEditor.tsx#L448\r\n\r\nAnd then this is where we try and handle the `BufDelete` case:\r\nhttps://github.com/onivim/oni/blob/488a686e518188e58ed5d3c883ca0716426d830a/browser/src/Editor/NeovimEditor.tsx#L459\r\n\r\nI think what we'll need to do is have more in-depth synchronizing from Neovim (like get the full list of buffers + names) in some of these cases. Right now, we're relying on getting a `BufEnter` event to populate the buffer in the store. The `BufDelete` event tries to be more robust, by getting the set of buffer ids and then clearing them from the store - but it seems like there are still cases that are missing there too.\r\n\r\nHope that was useful - let me know if you have any other questions. Really appreciate the help!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348053438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348069144", "body": "First round of fixes for #1007 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348069144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348350988", "body": "Great feedback! I've cleaned up some of the state management for the hover UX (there were several cases where it could flicker, or bounce in if the request to the LS took a long time), and also added an `editor.quickInfo.show` command, which can be used even if `editor.quickInfo.enabled` is set to `false`.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348350988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348358868", "body": "> @bryphe, excellent work on the new Syntax highlighting (I know its still a [WIP] but looks great so far).\r\n\r\nCheers, thanks @Akin909 \ud83d\ude04 Still some issues to fix but hopefully it's not too far out. Appreciate you testing it out!\r\n\r\nAnd nice work on the investigation and digging! I do think this is the best approach, to normalize the 'filetype' by pulling the portion before the period. The fix looks good to me.\r\n\r\nWe actually had a similiar issue in #882 - there's a very similar line of code here:\r\nhttps://github.com/onivim/oni/blob/d9694d94afcbea1401ccb719e7acccbf99aadb59/browser/src/Services/Language/LanguageManager.ts#L265\r\n\r\nOne thought I have is that, if we see more places that need this 'normalized' language from the Vim filetype, it may be worth pushing it up the stack to remove duplication, like somewhere in here: https://github.com/onivim/oni/blob/master/browser/src/neovim/NeovimInstance.ts\r\n\r\nBut I think this fix is great for now - if we see another instance of needing this 'normalized' language, we can consider doing the refactoring to push this logic into a central place at that time. I'll go ahead and bring this in - thanks for catching this and putting the PR together!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348358868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348361311", "body": "Sweet, thanks for taking a look at this @Bretley ! Would be great to have help.\r\n\r\nYour checklist looks good to me - here are some of my thoughts:\r\n\r\n- Set up switch cases - seems like a great starting point! Pushing out the events in the `_handleNotification` method - similiar to how we handle the `popupmenu_select`/`popupmenu_hide`/`popupmenu_show` notifications - we'd want to start handling the cmdline and wildmenu notifications, and `dispatch` them via the events defined in the PR. That will give us a nice, strongly-typed interface to build on.\r\n\r\nRegarding the state / action / reducer - if you're not familiar with [Redux](https://redux.js.org/) and [React](https://reactjs.org/docs/hello-world.html), it's worth checking out those docs... This write-up - [Thinking in React](https://reactjs.org/docs/thinking-in-react.html) is helpful too!\r\n\r\nI usually start by defining the __state__ - what is the data model we need? Luckily, for a lot of the neovim-externalization features, I think it maps pretty closely to the interfaces they send us via the `msgpack-rpc` protocol.\r\n\r\nOnce we have the __state__ figured out, we can do two things:\r\n- Figure out how to render our UI, based on the __state__. A helpful way to start is just making a hard-coded state, and get it showing in the UI. Once you have that, it's just about connecting the 'live' state! You could put this hardcoded component in `browser\\src\\UI\\RootComponent` for now (near the `<MenuContainer />`, so you could quickly see it live).\r\n- Figure out how the state can change - this is the responsibility of the __actions__ and __reducers__ - these define what changes can be made, and then the result of those actions. We'd likely at least need ones that map to the notifications from Neovim - a show action, a hide action, and a setCursorPosition. I'm not sure exactly how the text updates, but we might need an action for that too.\r\n\r\nI hope that helps at least give some ideas... thanks for your help! Let me know if you have other questions as you get going.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348361311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348369182", "body": "Thanks @badosu & @Metamist for the feedback!\r\n\r\n> e.g. AComponent/index.js, BComponent/index.js if I type ACoinde it actually does not filter BComponent.\r\n\r\nA repo would be great actually. I wonder if there is a folder above with an 'a' present? I created a `/test/AComponent/index.js` and `/test/BComponent/index.js` and couldn't reproduce it, but if I put another folder like `/test/Aroot/AComponent/index.js` and `/test/Aroot/BComponent/index.js` I saw the same behavior - but I'd be curious if there's a case where the root didn't behave that?\r\n\r\n@Metamist - our filter/sort strategy is using a library called [fuse](http://fusejs.io/), and we fuzzy-match the path and filename separately, which give us those strange results.\r\n\r\nI'm considering having the quickopen strategy be configurable - with a `'fuse'` strategy and a `'regex'` strategy. For the `campmod` case, the regex would basically match `c*a*m*p*m*d` - checking those letters in order across the input path.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348369182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348382498", "body": "\r\n> @bryphe Awesome IDE(a) and we cannot wait to have PHP running with it. \r\n\r\nCheers, thanks!\r\n\r\n> How can we help, what can we do to get php language support?\r\n\r\nUnfortunately I don't have a PHP environment set up at the moment to test with. But if you're up for debugging, that would be great!\r\n\r\nThis configuration looks like a good start:\r\n```\r\n`\"language.php.languageServer\": {\r\n        \"command\": \"php\",\r\n        \"arguments\": [\"/path/to/home/.composer/vendor/felixfbecker/language-server/bin/php-language-server.php\"],`\r\n```\r\n\r\nBut I believe there may be a bug where it only accepts the string form right now, so collapsing the configuration options is worth a shot:\r\n```\r\n\"language.php.languageServer.command\": \"php\",     \r\n\"language.php.languageServer.arguments\": [\"/path/to/home/.composer/vendor/felixfbecker/language-server/bin/php-language-server.php\"],\r\n```\r\n\r\nThe next step would be to grab the debug output from our console - I'm interested if there are any errors. You can do that by:\r\n- `Control+Shift+P` (or `Apple+Shift+P` on OSX) to open the command palette\r\n- Select 'Open Dev Tools':\r\n![image](https://user-images.githubusercontent.com/13532591/33465034-6cdc4de6-d5fa-11e7-8b43-e986ea68ae2f.png)\r\n\r\nOnce the dev tools are open, please enable debug logging:\r\n![image](https://user-images.githubusercontent.com/13532591/33465072-91d172ac-d5fa-11e7-8cf0-861bfa11d0e7.png)\r\nby running `Oni.log.enableDebugLogging()` in the console\r\n\r\nThen, if you could navigate to a `php` file and share the output, that would be able to help us see if the server is being initialized, and if there are any errors. \r\n\r\nThanks @felmab & @Sydney-o9  for your help & interest in the project!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348382498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348581178", "body": "> I think I've implemented what was discussed, but due to editing the CompletetionProvider.ts check to be against configuration.getValue(\"editor.completions.mode\") and \"oni\", it completely opts the user out of language server completions.\r\n\r\nCool, I tried out the PR and the logic looks good!\r\n\r\n> Is that what we want from hidden?\r\n\r\nIt seems reasonable to me. We could add a keybind to explicitly expand the completion menu, which would be available in `'hidden'` mode. Sort of like the change in #1044 , where I added an explicit for opening the quickinfo/hover tool tip, even if it is disabled. We can track that separately.\r\n\r\n> Or maybe that is more an argument for splitting the config more to have one that swaps it all to vim only completion in Oni UI vs Non-auto LSP Config.\r\n\r\nYes, we could potentially refactor or adjust the configuration setting later, but at least this handles the cases that are most important to me:\r\n- `'oni'` - default completion - uses LSP completion + externalized UI\r\n- `'hidden`' - turns off LSP completion by default, but still allows Vim completion via externalized UI\r\n- `'native'` - allows the user to completely eject from Oni's completion UX and fall-back to the Vim experience.\r\n\r\nAnd my hope is that the `'oni'` completion will be good enough that it becomes less common to change this \ud83d\ude04 \r\n\r\nThanks for all the work and thinking on this! I'm good to bring this in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348581178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348591561", "body": "Looks like there is a lint issue blocking right now - I'll bring it in and take care of that. \r\n\r\nI'm planning on pushing out a release this afternoon, and this would be a great fix to include (and it will also save you from having to merge with #1049 , since I made some more changes to the completion code..) \r\n\r\nThanks again for your work on this, @CrossR !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348591561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348617314", "body": "Finally starting to make progress on some of these year-old issues! \ud83d\udc4d Thanks for all the thinking around this!\r\n\r\nAn initial json theming implementation was included with #950 (in PR #975), and is customizable both via `json` themes associated with a vim theme... as well as configurable by `colors.` directly in configuration:\r\n\r\n![colors-customization](https://user-images.githubusercontent.com/13532591/33503966-856884b0-d69a-11e7-9314-a08c35ca9560.gif)\r\n\r\nHere's the wiki additions:\r\n- [Theming](https://github.com/onivim/oni/wiki/Theming)\r\n- [Customizing colors via config](https://github.com/onivim/oni/wiki/Configuration#colors)\r\n\r\nThese updates will be included in the next release (0.2.18).\r\n\r\nAnd then there are a few items still being tracked for a complete story:\r\n- #412 - CSS Theming\r\n- #1051 - Colorization based on TextMate scopes", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348617314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348617747", "body": "I'll close this out, and track the remaining work in those other items, but of course any feedback is welcome!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348617747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348650328", "body": "Looks like this is no longer applicable since #633 is in, and we now have colors customization with #950 -  so I'll close it out. Thanks for the thoughts around this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348650328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348652548", "body": "Oh ya, there's weird scoping rules in JavaScript for this - the `case` statements actually aren't their own scope, so it thinks you're trying to redeclare the same variable.\r\n\r\nYou can avoid this by creating a scope like:\r\n```\r\n      case \"cmdline_show\":\r\n     {\r\n                    const [content, pos, firstc, prompt, indent, level] = a[0]\r\n                    const commandLineShowInfo: INeovimCommandLineShowEvent = {\r\n                        content,\r\n                        pos,\r\n                        firstc,\r\n                        prompt,\r\n                        indent,\r\n                        level,\r\n                    }\r\n                    this._onCommandLineShowEvent.dispatch(commandLineShowInfo)\r\n                    break\r\n   }\r\n```\r\n(sorry for the bad formatting, hopefully that gives you an idea!)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348652548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348741778", "body": "Strange - I wonder if there is a change in the `$PATH` behavior due to #934?\r\n\r\nWould it be possible to check the following?\r\n- In Oni, run `:term` and then `echo $PATH`\r\n- In a separate bash shell, outside of Oni, run `which go-langserver`\r\n\r\nMy guess is that Oni is missing some path that is needed to find go-langserver. In the worst case, we can add it to `environment.additionalPaths` as a workaround. Sorry this regressed for you!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348741778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348743085", "body": "Hi @PeteProgrammer ,\r\n\r\nThanks for the issue. Which platform are you on? And just to confirm - are you using this version of Fira code? https://github.com/tonsky/FiraCode\r\n\r\nI'm testing it out on Windows and it seems like the font is switching for me:\r\n![font-fira-code](https://user-images.githubusercontent.com/13532591/33522895-65cf2460-d7ad-11e7-98bb-103234f5cd48.gif)\r\n\r\nBut there may be cases where we need to specify the `font-weight` CSS property for it to be picked up. We could potentially add an `editor.fontWeight` which would allow setting this. I noticed that for me, if I set `editor.fontFamily` to \"Fira Code Bold\", it didn't work - but if I set `editor.fontFamily` to \"Fira Code\" and `font-weight` directly in CSS as bold, it rendered correctly.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348743085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348743327", "body": "Thanks for the issue and the logs, @CrossR ! That's painful - I hit it too sometimes (don't realize I'm in US - International, and have to restart Oni to get it back) - it's pretty annoying!\r\n\r\nIn theory, the [keyboard-layout](https://github.com/atom/keyboard-layout)  package we depend on should be handling this for us. We hook the `onDidChangeCurrentKeyboardLayout` here:\r\nhttps://github.com/onivim/oni/blob/e8bdda46f2d079929fee9154b245a3d8a4743bc8/browser/src/Input/Keyboard/KeyboardLayout.ts#L55\r\n\r\nBut when I tested it, it unfortunately only seemed to work on Linux. It'd be interesting to test out and see if this works correctly in a node process, or a vanilla electron process. Ideally we could get it working at that library's level.\r\n\r\nA brute-force option, if fixing this isn't feasible, is we could add a pass-through key-binding for Win+M that forces us to execute that re-layout code path.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348743327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348743370", "body": "I also thought about not keeping the `_keyMap` and just always requesting `KeyboardLayout.getCurrentKeyMap`, but when I profiled there was some overhead to that call (the native interop isn't free), and since the input handling is a hot path, I cached it. However, we could also have an option to disable that - if we always call `KeyboardLayout.getCurrentKeyMap`, that would address the issue too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348743370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348743588", "body": "> I have an action and a reducer and an actioncreator defined,\r\n\r\nCool, sounds like great progress!\r\n\r\n> But I'm not sure how to get from neovimInstance.ts to actually changing the state. I see a lot of things calling dispatch, but I'm not sure what rabbit hole that goes down if that makes any sense.\r\n\r\nAh ya... the brute force way is to create the action via the action creator, and then pass to the UI store's `dispatch` method.\r\n\r\nHowever, we use a utility called `bindActionCreators` that takes all of the ActionCreators and 'binds' them to the dispatch method for us, and gives us a new method that takes care of that - that's over here:\r\nhttps://github.com/onivim/oni/blob/e8bdda46f2d079929fee9154b245a3d8a4743bc8/browser/src/UI/index.tsx#L39\r\n\r\n(more info on `bindActionCreators` here: https://redux.js.org/docs/api/bindActionCreators.html)\r\n\r\nFrom there, we can call any of them via `UI.Actions`, like here:\r\nhttps://github.com/onivim/oni/blob/e8bdda46f2d079929fee9154b245a3d8a4743bc8/browser/src/Editor/NeovimEditor.tsx#L158\r\n\r\nThe pattern we usually have is subscribing to an event from NeovimInstance, so that the NeovimInstance object itself doesn't have to care about the UI - but NeovimEditor is the one that does all the UI stuff. Hope that helps!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348743588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349020359", "body": "Thanks for catching this and fixing it, @Akin909 ! Sorry I led you down the wrong path in terms of `childProcess.exec` versus `shell-env`. \r\n\r\n> I think this is due to the fact that go depends on things like GOROOT and GOPATH environment variables. I've hopefully resolved this by merging the default process.env from electron with shell-env's environment.\r\n\r\nAwesome! Yes, this makes sense.\r\n\r\nThanks @josemarluedke for confirming the fix, too! I suspect this could impact #868 as well, as the python provider is sensitive to not having the appropriate paths to load the python runtime.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349020359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349024710", "body": "Oh and this is interesting:\r\n\r\n> The term path variable in my case seems to include extra separators as I noticed in #1061 but the nvim echo $PATH output does not \ud83d\ude15\r\n\r\nI wonder if this is specific to Oni, or if it happens in `nvim` too?\r\n\r\nChange looks good to me - the test failures on TravisCI don't seem related to your change (and when I ran locally, they passed). I'll take a look at those failures.  Thanks again for the investigation + fix here, @Akin909 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349024710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349030965", "body": "Strange!  Thanks for reporting the issue. \r\n\r\nI just tried on OSX, but unfortunately I'm not able to reproduce on my box.\r\n\r\nA few questions to try and narrow it down:\r\n- What kind of file are you using for yanking and pasting? I'm curious especially in terms of the newlines. Also, does it reproduce on a blank / new file?\r\n- Are you using `y` and `p` to paste in normal mode, or are you pasting in insert mode? \r\n\r\nWe do have some special key bindings for `<M-c>` and `<M-v>` set by default, which could potentially behave differently than `y` + `p` in normal mode - so knowing which type of paste is occurring would help.\r\n\r\n- Also, is the `g:clipboard` configuration set? On my config, I didn't have that set, so that could be a potential difference.\r\n\r\nAnother thing that would be interesting to see, is, in the Oni developer tools, running this:\r\n`Oni.editors.activeEditor.neovim.onYank.subscribe((yankInfo) => console.dir(yankInfo))`, and then looking at the output after the yank. We should see two lines in `regcontents`.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349030965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349034944", "body": "@Akin909 - in theory the tests should pick it up (which may be why it is failing in the CI machine) - at least the AutoCompletion-TypeScript test should fail if we're unable to start `tss` (it looks like that is the test that is failing). The Demo-Screenshot test is also dependent on it, since it waits for the completion UX to show to generate the screenshot.\r\n\r\n> if not i'd like to revert my build back to this commit and make sure there aren't any issues there.\r\n\r\nIf you wouldn't mind double-checking, that'd be great! I'll double-check on my machine too. I'll hold off on bringing it in until we confirm that `tsserver` is starting correctly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349034944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349044290", "body": "Fixes #1063 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349044290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349044804", "body": "@Akin909 Oh ok, great, thanks for the update! I built locally and it is working for me as well.\r\n\r\nI'll bring this in, and investigate the stability of those tests.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349044804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349046421", "body": "Thanks for logging this, @jordwalke ! I need to dig more into the multi-root workspace functionality (I'm not too familiar with it at the moment).\r\n\r\nI like your suggestion here:\r\n> Maybe in the simplest case, you could say that Oni doesn't support multiple workspaces, and requires opening multiple windows - one window per workspace. \r\n\r\nThat's a great starting point.\r\n\r\nOni _sort of_ supports this today, but not in a great way. We allow specifying a set of root files, like:\r\n```\r\n\"language.reason.languageServer.rootFiles\": [\".merlin, bsconfig.json\"],\r\n```\r\n\r\nAnd in this case, whenever we open a reason file, we look upwards to see if the root path matches the current language server's root path. If not, we _kill the current server and start a new one at the new path_. Not desirable long-term behavior... as it means we're not good citizens of the LSP in this case- supporting multi-root workspaces would be better here.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349046421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349047253", "body": "Thanks for catching this @CrossR ! (That's cool you're working on CUDA as well.) I'm able to reproduce this easily - happens in markdown files too..\r\n\r\nYes, unfortunately a regression in the LSP changes as you mentioned. The only bright side is after the changes I'm able to more easily add unit tests to exercise this behavior... so hopefully things can be more solid moving forward.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349047253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349050779", "body": "Interesting, thanks for catching this!\r\n\r\nI was able to reproduce on Windows. Seems like something weird is happening - I wonder if due to the colorscheme changes, there is some timing change in loading that is causing this.\r\n\r\n> I assume the flashing with no colourscheme is deliberate to make loading faster, since I see it on an all files.\r\n\r\nYes, ideally we wouldn't have this flash, though. It seems like we render first with the default colorscheme, and then render again after the colorscheme has changed. Not ideal - IMO it should wait for  Neovim to start (completely), then set the colorscheme, and then finally render the UI, to minimize that flicker.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349050779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349065558", "body": "Thanks for the heads up here, @badosu !\r\n\r\nSo it looks like our upgrade of `electron-builder` caused a change in our filename for the linux package - including the architecture.\r\n\r\nIt seems, unfortunately, that we never actually had an architecture-independent package - it was always `x64`, just didn't have the architecture in the filename.\r\n\r\nSo we have a couple of options here:\r\n- __Option 1:__  We could make the AUR package x64 only, setting the `arch` setting in our `PKGBUILD` to reflect that, and point to `Oni-0.2.18-linux-x64.tar.gz` I'd imagine this is reasonable, since no-one complained about it not working on x86/ia32...\r\n- __Option 2:__ We could switch fix our configuration such that we output `Oni-0.2.18-linux.tar.gz`, which is the same we had for other builds. Downside is it doesn't seem like it would work in `x86` architectures (which it never did)\r\n- __Option 3:__ We could update our build script to build both `x86` and `x64` architectures, and then pick the right one based on the current architecture.\r\n\r\nI'm not sure what the best option is - __Option 2__ would be the simplest IMO and behave similiarly to how the other releases did. @badosu , what do you think?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349065558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349065877", "body": "Hi @duanjun , thanks for the issue! Can you please clarify what the behavior you expect is? For example, do you not want the filename in the title?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349065877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349066818", "body": "I'll close this out since I'm unable to reproduce. Feel free to re-open or log a new issue if you're still seeing this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349066818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349067477", "body": "Thanks for the workaround, @badosu !\r\n\r\nThinking of #973 - do you think this makes sense to be something we provide as part of our default configuration, on Linux?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349067477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349074161", "body": "__Option 1__ sounds good to me too - it's essentially the same behavior as previous releases. As you mentioned we can always pivot if we get feedback.\r\n\r\nThanks @badosu for your work maintaining our AUR package!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349074161/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349087817", "body": "Fixes #1038 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349087817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349092674", "body": "Based on this thread: https://www.mail-archive.com/search?l=vim_dev@googlegroups.com&q=subject:%22undojoin+after+an+undo%22&o=newest&f=1\r\n\r\nSeems like maybe `silent! undojoin` is a reasonable solution. It would ignore the error case, but still function correctly for the later cases.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349092674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349098074", "body": "Wow, excellent progress @Bretley ! Looking really cool from the gif.\r\n\r\nAnd the code changes look great so far. I like the way you wired everything up - looks like you have a good handle on React + Redux \ud83d\ude09 Left a few minor comments.\r\n\r\nI saw the cases for `wildmenu_show`, `wildmenu_select`, and `wildmenu_hide` - are you planning on including the wildmenu externalization in this change too? I'm okay either way.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349098074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349149716", "body": "Wow, really cool! I like your strategy for figuring out how to map the lines... It looks like we render each line, wrap it in an anchor/tag we can reference, and then as we auto-scroll, we go to that nearest anchor. Looks solid to me, I'm not really sure of a better way.\r\n\r\nI just checked out and tried out the branch, seemed to work pretty well!\r\n\r\n> Aside from that, I think that gg and G doesn't fire up the scrolling event.\r\n@bryphe, do you have an idea?\r\n\r\nAh yes, I do actually... The scroll event that we use doesn't have very high fidelity. It turns out that Neovim doesn't have a `ScrollChanged` autocmd or equivalent, so we use the `scroll` event from the redraw msgpack-API to fire that:\r\nhttps://github.com/onivim/oni/blob/ed10c47f1b8e60a6f1eed6a7b8c773a6ae2c26b4/browser/src/neovim/NeovimInstance.ts#L534\r\n\r\nTurns out, this doesn't handle the case where there is as _complete redraw_ (like you use `G` or `gg`).\r\n\r\nHowever, we do actually have another place where we are watching for this - in the `NeovimWindowManager`, which lives in `NeovimEditor`.\r\n\r\nThis class listens to a bunch of different events:\r\nhttps://github.com/onivim/oni/blob/ed10c47f1b8e60a6f1eed6a7b8c773a6ae2c26b4/browser/src/neovim/NeovimWindowManager.ts#L36\r\n\r\nAnd lets us know when the window dimensions change (really, whenever the mapping of _buffer space_ to _screen space_ changes).\r\n\r\nFor the scroll event that `NeovimEditor` exposes, instead of hooking to the `onScroll` event on `NeovimInstance`, we could potentially use the `NeovimWindowManager` instead. We'd want to perhaps expose an event off `NeovimWindowManager`, like `onWindowDimensionsChanged`, and map that to a scroll event on the `NeovimEditor` side. Let me know if that's unclear. But I think if we wire that up, we should get `gg` and `G` handled.\r\n\r\n> Also, waiting on onivim/oni-api#4.\r\n\r\nThis should be set now - I merged in the PR, and updated it so that it publishes to NPM from Releases.  So the NPM build is up to `0.0.8` now. You may need to upgrade the package.json and/or run `yarn upgrade oni-api@0.0.8`. \r\n\r\nIt's looking really good!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349149716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349151753", "body": "Cool, nice summary @Bretley !\r\n\r\nInitially, I think it makes sense to keep the command line separate (implementation-wise) from the quick open / command palette menu. There's two 'classes' of users I want to appeal to - Vim veterans who expect/know the command line, and new users who want to get start with modal editing - may be more comfortable in the quick open/command palette. Keeping that distinction now can satisfy both 'classes' of users, and then we can look towards ways to reconcile them later, if it makes sense.\r\n\r\nI do like the way you've structured the UI right now - having the command line pop in an overlay is really nice! Good point about the search, though. I wonder if, in that case, we could put it in the corner - sort of like how in Chrome it pops up in the corner?\r\n\r\nRegarding the wildmenu, if we use the UI-overlay like you've structured it, we could make the look and feel similiar to the quick open / command palette menu (even if the implementation is different) - I think it would help both classes of our users (for the vim veteran, getting adjusted to some of the new UX paradigms in Oni, and for the new user, it won't feel that different / scary from quick open or command palette).\r\n\r\nHope that helps and wasn't too vague... Great work so far!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349151753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349184852", "body": "Thanks for the investigation and fix, @Akin909 ! Looks like PR #1066 takes care of this \ud83d\udc4d - I'll close this out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349184852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349343838", "body": "Addresses #980 (at least for a single buffer)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349343838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349376076", "body": "Sorry, bad example on my part - updated to reflect `jk` instead to make it clearer.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349376076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349412950", "body": "Thanks for logging the issue, @saibing !\r\n\r\nYes, unfortunately our configuration doesn't support this currently... But it would make sense to have something like this, ie:\r\n```\r\n\"language.cpp.languageServer.initializationOptions\": {\r\n                 \"cacheDirectory\": \"/tmp/cquery\",\r\n\t\t\"resourceDirectory\": \"yourCQueryDirectory/clang_resource_dir\"\r\n}\r\n```\r\n\r\nWill use this to track setting the `initializationOptions`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349412950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349413231", "body": "A good place to start looking is here:\r\nhttps://github.com/onivim/oni/blob/45f51c59b40dab399f96f2476e9040ee75ee725e/browser/src/Services/Language/LanguageConfiguration.ts#L99\r\n\r\nWhich is the code responsible for taking the configuration settings and handing them off to the language client.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349413231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349416440", "body": "I just checked out the documentation here: https://atom.io/packages/autocomplete-clang\r\n\r\nIt looks like the entries in that file are passed as parameters to `clang`. We don't look for that file per-se, but we do have a way to pass arguments to the language server process, via configuration:\r\n\r\nhttps://github.com/onivim/oni/blob/45f51c59b40dab399f96f2476e9040ee75ee725e/browser/src/Services/Configuration/DefaultConfiguration.ts#L134\r\n\r\nAlthough for `clangd` looks like they'd be more in-depth. The big gap we have with this approach is the 'project-specific' configuration -  unfortunately we don't currently have that today (that is tracked by #68 \r\n\r\nAnother option is to return to having a C/C++ plugin on the Oni side, which gives us more options programmatically than the default configuration, and would make it easier to support scenarios like this. A good place to look at is this code here, which creates the language client based on the configuration:\r\nhttps://github.com/onivim/oni/blob/45f51c59b40dab399f96f2476e9040ee75ee725e/browser/src/Services/Language/LanguageConfiguration.ts#L99", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349416440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349422276", "body": "Hi @muream , thanks for trying Oni! Sorry you hit this on the first launch - appreciate all the details you provided, that's very helpful.\r\n\r\nI just installed the latest package on my arch machine and unfortunately I can't reproduce it. A few questions:\r\n- Which version of Neovim do you have installed? You can check by running `nvim --version` at the command prompt.\r\n- Are you opening `oni` via the terminal? Are any arguments passed?\r\n\r\nIt looks like the crash is occurring either here:\r\nhttps://github.com/onivim/oni/blob/45f51c59b40dab399f96f2476e9040ee75ee725e/browser/src/Services/Completion/Completion.ts#L137\r\n\r\nOr here:\r\nhttps://github.com/onivim/oni/blob/45f51c59b40dab399f96f2476e9040ee75ee725e/browser/src/Services/Completion/Completion.ts#L149\r\n\r\nIt does seem like there is a bug in the latter logic, in that if we get a buffer update from Neovim _before_  we get a cursor move event, we could hit that crash. I'll take a look at a fix for that. In the meantime, it'd be great to know the results above, to see if there any clues in terms of how we get into this state.\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349422276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349423364", "body": "Ah I think that in OSX, where we now show a titlebar with #68 , we don't hide it on fullscreen - so maybe we don't need a new setting, but just need to hide it in the case where we are fullscreen (which I believe is consistent with how other OSX apps behave). ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349423364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349424351", "body": "Strange, it seems that if we remove our `BufEnter` event from firing from Neovim -> Oni, the problem goes away. I wonder if this started with the upgrade to Neovim 0.2.2?\r\n\r\nIn any case, one option I'm thinking about for fixing it, is instead of opening the files directly via arguments to Neovim, we wait for Neovim to load, and _then_ open the files (following a similiar code path to the menu option that you added for opening the files). ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349424351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349427427", "body": "Thanks for the info, @Akin909 !\r\n\r\n> this error occurs in every file including new files. This happens using yy and p. yy should take a whole line with a \\n but does not work correctly for me.\r\n\r\nStrange! For the most part this doesn't reproduce for me - but there was one session I had where I saw the same behavior. Unfortunately, I wasn't able to isolate it.\r\n\r\nI wonder if it could be some issue with our `TextYankPost` autocommand - would you be up for commenting this `autogroup` and see if it still reproduces, after restarting Oni?\r\nhttps://github.com/onivim/oni/blob/906880c0ce6dcef8852adae9efe228f88fd31056/vim/core/oni-core-interop/plugin/init.vim#L59\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349427427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349427876", "body": "Actually, I just realized, if I execute:\r\n\r\n```\r\n:set clipboard=unnamedplus\r\n```\r\n\r\nI do see the same behavior. I wonder why that is set by default for you, but not for me. Would it be possible to run this?\r\n\r\n```\r\n:verbose set clipboard?\r\n```\r\n\r\nMight give us a clue on where that setting is coming from.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349427876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349431411", "body": "> is now happening to me on the current release, or at least something similar.\r\n\r\nI see the issue you're talking about (if I use the vim completion). It looks like some sort of repaint issue, where the `box-shadow` is delaying being applied. If I switch to use `background-color` instead of `box-shadow`, it paints immediately... pretty bizarre!\r\n\r\n> Probably worth separating out into a new ticket.\r\n\r\nThat sounds good, then we can close this out!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349431411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349449308", "body": "Ah ok! Yes, it might be worth adding - we have a brief section here: https://github.com/onivim/oni/wiki/Configuration#clipboard-integration\r\n\r\nI think that the issue might be interaction between the `unnamedplus` setting, as well as our behavior with `editor.clipboard.enabled` set to `true` (which is the default). Whenever there is a yank, we push it the system clipboard:\r\nhttps://github.com/onivim/oni/blob/e50500b7a21836dac25e6e15b05c5f4e060cee14/browser/src/Editor/NeovimEditor.tsx#L152\r\n\r\nAt first I was thinking we could add a trailing newline here - but I realized we would have a hard time differentiating between the `yy` (whole line) case and just the yank of a word or part of a line, since we just get a string array. Documenting that `clipboard+=unnamedplus` isn't necessary seems reasonable.\r\n\r\n> actually not sure considering that default vim behaviour is to not copy to the system clipboard and some users might want that functionality, as I personally have gone back and forth on this and its sometimes useful to only have vim save to the clipboard when set explicitly\r\n\r\nAh ya, it's tough to find the right balance here. We had some discussion in the past in  #434 , and we wanted at least a subset of clipboard functionality out-of-the-box in the name of \"lower the barrier to entry\".", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349449308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349465613", "body": "Awesome, looks great to me @Akin909 ! Thanks for updating the docs!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349465613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349468148", "body": "Fixes initial crash in #1076 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349468148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349469096", "body": "Thanks @muream ! The neovim version looks perfect - so no issue there.\r\n\r\n> Would it help you if I tried to build oni from source?\r\n\r\nThat would be great. I created a PR #1078 that addresses the crash - I'm curious if it will unblock loading. Let me know if you hit any hurdles trying to build.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349469096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349477388", "body": "Awesome, thanks @badosu ! A repro repository would be a big help.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349477388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349488595", "body": "I'll bring this in, since it is a defensive change that won't cause a worse problem - will be interesting to see how it impacts #1076.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349488595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349723551", "body": "Switching to #1085 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349723551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349822141", "body": ">  I'm working on resolving some of the various quirks with the buffer bar (relates to #852), \r\n\r\nAwesome, really appreciate your help with this!\r\n\r\n> As part of that I've been looking to correctly update the buffer bar when `bufDelete` is triggered. I tried using the `getBufferIds` function which communicates with the `msgpack api` but have found that the api returns a list of buffers which *still* includes the deleted buffer.\r\n\r\nI just went back to the issue - I actually meant to reply to that thread, but somehow I lost my comment. Sorry about that! I did some digging around this... I learned that there is the concept of an _unlisted_ buffer. It turns out, that when a buffer is deleted (ie, via `:bdelete`), that it actually isn't deleted completely - it's removed from the buffer list and marked as _unlisted_. (`:help unlisted-buffer` and `:help bdelete` have some info).\r\n\r\nYou can see _unlisted_ buffers via `:ls!` - it seems that the `nvim_list_bufs` (which is what `getBufferIds` is using) actually shows the unlisted buffers (so it behaves more like `:ls!` than `:ls`).\r\n\r\nMy thinking is this what is causing the issue (versus a delay).\r\n\r\n> Anyway a solution I've been using locally for a little while is just filtering out the buffer that triggered the buffer delete autocommand from the list of buffers and dispatching the set current buffers action.\r\n\r\nI wonder how this behaves if I delete multiple buffers in sequence? For example, I have buffers [1, 2, 3], and then I `:bdelete 2`, and then later `:bdelete 3` - it seems like 2 might come back in that case, since `getBufferIds` would return [1,2,3], and then we'd filter out 3. So 2 would be like a zombie buffer... back from being deleted \ud83d\ude04 \r\n\r\nOne way to solve this would be to keep a list of the deleted buffers, and always ignore them in the future - that should work as long as it is not possible to 'undelete' a buffer.\r\n\r\n> Another possible solution is that for the other issues re buffers, i've expanded on your `vim interop` plugin and created a function which gets (which gets whatever metadata is available) for each buffer which I plan to trigger on `bufenter` but can also trigger on `bufdelete` and use the result from that to update the state at least that way the answer to what buffers exist is coming from neovim.\r\n\r\nThis solution seems reasonable to me, especially if there isn't a good way to get the get this information via the `nvim_get_bufs` API right now. This would let us get the correct set of buffers deterministically - creating a function that gets us the list of buffers that we should be showing would be really useful. \r\nIt seems like it could help us fix this buffer delete case (by using that function instead of the `nvim_list_bufs` API), and it may be able to help with some of the other cases where we are out of sync with the available buffers in Vim. (for example, `:sav` has some issues - I believe because it is creating a new buffer w/o a `BufEnter` event, and there may be more cases like that).\r\n\r\nAlso, it may be worth creating an issue in Neovim too - I imagine other UIs hit this pain point. Perhaps they could add an `nvim_get_listed_bufs` method, or an optional argument to only give listed buffers?\r\n\r\nThanks for your help with this, @Akin909 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349822141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349824224", "body": "@Akin909 sounds great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349824224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349825287", "body": "Interesting, I'm able to reproduce this - and it seems that `nvim-qt` might have the same issue . It might be related to the `FocusGained` autocmd, or be specific to external UIs.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349825287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349826089", "body": "Interesting, looks like this might be a subpixel rendering issue.\r\n\r\nWe do some work to align boundaries of rectangles to the nearest pixel here:\r\nhttps://github.com/onivim/oni/blob/23822545b4aaff55c61ac58a5b7e8a4906d1f3e3/browser/src/Renderer/CanvasRenderer.ts#L259\r\n\r\nBut only for the horizontal (`x`) coordinate... potentially we need to do a similiar normalization for the `y` coordinate as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349826089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349849467", "body": "This was fixed with PR #1044 and is available in the latest release (0.2.18)-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349849467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349849954", "body": "I'll close this out as much has changed in the completions framework since the initial issue - the `native` setting for `editor.completions.mode` should address this. But feel free to reopen or log a new issue if there are still challenges here!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349849954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350109451", "body": "> Completed this functionality now and its stable locally or rather I haven't found any edge cases that have revealed any bugs.\r\n\r\nCool, I'll start taking a look through this!\r\n\r\n> I ended up using the `BufEnter` event as the primary method of updating buffer statuses, \r\n\r\nSounds reasonable. There may still be events we're missing, but updating it here will certainly improve some of the cases we have.\r\n\r\n>  I removed the `BufDelete` event because it wasn't serving any purpose given that the updating happens in bufenter\r\n\r\n I wonder though if it's common to delete a buffer that is not the active buffer? We might miss that case without the `BufDelete`. An example I'm thinking of is if I click the 'x' on a buffer that is not currently active - would that be handled correctly?\r\n\r\n> There's definitely places that this could be improved in the long run as for example I discovered python can be used in `vimscript` to execute functions\r\n\r\nUnfortunately this isn't a good option for Oni \ud83d\ude26  #936 briefly touches on this, but not all platforms have python available (in particular, Windows), and it's actually quite difficult to install and setup as part of Oni in the general case - so I'm trying to stay away from having to do that work if possible. Lua might be worth a try, though, so it comes standard in Neovim now.\r\n\r\nI'll leave some more feedback on the changes! Thanks for your help with this! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350109451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350116662", "body": "Ah ya, I just tried out and saw the same thing. Thanks for looking at it!\r\n\r\nWe are using `bw` (`bwipeout`) in the buffer close gesture here:\r\nhttps://github.com/onivim/oni/blob/9a02a9368c2fae903aef84c702e8b617c64907c7/browser/src/Editor/NeovimEditor.tsx#L409\r\n\r\nSeems like it should hit that buffer wipeout event, though.... If it's the case that we're getting the delete event before it's actually removed, then we could still use that 'filtering' logic to filter out the deleted buffer (to hide it immediately), and then subsequent calls to get the buffer list should not return it (so we don't hit that zombie-buffer-coming-back issue)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350116662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350117387", "body": "Thanks @badosu ! I'll close this out - we'll track in #929 (and #973 to improve this story in general). ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350117387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350137224", "body": "Excellent, thanks for catching that @Akin909 ! Makes a big difference in making this feel like a 'real' app as opposed to a web app. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350137224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350156935", "body": "@badosu - I wasn't sure if I could reliably get the file type for tabs, since it's possible to rename tabs AFAIK (and the icons are based off the filenames). If it's something that is desired, we could look at putting the file icon for the last active buffer in that tab, perhaps?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350156935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350156991", "body": "I also considered just putting a vim/neovim logo for tabs", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350156991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350402548", "body": "Awesome, appreciate the fix @CrossR ! Looks good to me.\r\n\r\n> As far as I know, all the LSPs use 0 indexed locations, so there should be no issues, but thought it was worth checking.\r\n\r\nYes, this is right - the LSP uses 0-indexed, and I'd like to move Oni in that direction too. Vim mostly uses one-based indices (except for some of the msgpack APIs, like `nvim_buf_get_lines`), and the TypeScript server uses one-based indices.\r\n\r\n> I may also rename locations to be zeroIndexedLocations, just so its clearer when implementing other code around this.\r\n\r\nHaving the names reflect it definitely helps - thanks for renaming that lambda to `convertToOneIndexedForQuick` to make the intention clearer. \r\n\r\nWe can incrementally work to rename asyou did above in future fixes - I think it definitely helps. I wonder if there are ways we can leverage TypeScript to help us enforce this, too - like create types for `type OneBasedIndex = number` and `type ZeroBasedIndex = number`, and then if you try and pass a `OneBasedIndex` to a method that expects a `ZeroBasedIndex`, it could potentially catch it at compile time... I haven't tried though.\r\n\r\nAnyway I'll go ahead and merge - thanks for the fix!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350402548/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350405047", "body": "Cool, I just tried it out and it seems to be working well!\r\n\r\nRegarding the event type - unfortunately there is no way to validate that the `IEventContext` object matches what we have in VimL. However, it does help downstream code to know what to expect.\r\n\r\nI think it would be helpful to document this new type of return as an `IBufferEventContext`, and be able to use that strong-type for those specific buffer events. I've been slowly moving away from the `EventEmitter` event on NeovimInstance, because it doesn't give us the ability to express the type of the object. In other words, I'd like to refactor out `_onVimEvent` and subscribe to strongly-typed handlers in `NeovimInstance` instead.\r\n\r\nI've been moving to strongly-typed events for that reason, like:\r\nhttps://github.com/onivim/oni/blob/18e651becb200738e8d1061a964a5871a8746ba7/browser/src/neovim/NeovimInstance.ts#L195\r\n\r\nIn the current iteration, it's a bit tough to know what's happening in the `_onVimEvent` because there are multiple places we have to check whether `evt` is _actually_ an `EventContext`, or if it's something else (an array of buffer events, which have a different subset of properties) - I think that might be difficult to maintain long-term.\r\n\r\nHowever, if we create strongly-typed events for these operations, like:\r\n`onBufDelete: IEvent<IBufferEventContext[]>`\r\n`onBufEnter: IEvent<IBufferEventContext[]>`\r\n`onBufWipeout: IEvent<IBufferEventContext[]>`\r\n`onBufRead: IEvent<IBufferEventContext[]>`\r\n\r\non NeovimInstance, and then add event handlers to these (so refactor out from `_onVimEvent` in `NeovimEditor`, such that `NeovimEditor` subscribes to these events), it clearly expresses the type we expect to get, and then the type system can help us out more (and we can side-step creating a union type).\r\n\r\nI ran into something similiar with the buffer update cases - I used to use a similiar `IEventContext` and had some logic to try and disambiguate, but it became complicated, so I factored them into their own types and used a strongly-typed event handler - I think this will help make it easier to maintain long-term.\r\n\r\nHope that makes sense, let me know if you have any questions or if it was unclear! Thanks for your work on this, @Akin909 !\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350405047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350418062", "body": "Cool, didn't know about those either! Inspired me to check out: http://docs.sublimetext.info/en/sublime-text-2/file_management/file_management.html\r\n\r\nThere's also a `foo.md#someSearchString` which does a search. Could definitely see these being useful for my workflow.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350418062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350418174", "body": "Actually, I just realized that most of these are already defined on `NeovimAutoCommands`:\r\nhttps://github.com/onivim/oni/blob/18e651becb200738e8d1061a964a5871a8746ba7/browser/src/neovim/NeovimAutoCommands.ts#L15\r\n\r\nSo it'd be more just switching some of those from `EventContext` to `BufferEventContext`, and then listening to those events vs. handling them on `_onVimEvent`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350418174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350520338", "body": "Ah, nice catch - thanks for the PR, @chenglou !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350520338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350520800", "body": "Sweet, thanks for taking the time to add this! Having the key repeat shell command will be really helpful.\r\n\r\nPlacement is great for now - we do need to re-work / simplify our installation instructions, but that will come later.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350520800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350521173", "body": "Awesome, great to hear! Thanks @Akin909 for all your work on #924 & #1066 to fix these issues.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350521173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350521976", "body": "> @bryphe, before jumping in with another issue just wanted to say that Oni is looking sooo much nicer in such a small space of time, I \ud83d\ude0d \ud83d\ude0d the file type icon functionality and upcoming sidebar.\r\n\r\nThat's awesome to hear, thanks \ud83d\ude04 I'm hoping the days of having to choose between a first-class vim experience and a modern UX are numbered...\r\n\r\n> On to the issue, double tapping with two fingers on MacOS (possibly also on windows, I don't have a windows machine so I'm not sure) causes Oni to zoom in which I think is something that macOS adds like pinch to zoom etc.\r\n\r\nInteresting, nice catch! Unfortunately I don't have a Macbook to test this on - but I believe this is specific browser functionality. Definitely another one of those issues we have that breaks the immersion of Oni being an 'app' and the browser behavior is surfaced...\r\n\r\nI wonder if the info in this stack overflow post is applicable?\r\nhttps://stackoverflow.com/questions/10614481/disable-double-tap-zoom-option-in-browser-on-touch-devices\r\n\r\nSpecifically, setting this `<meta>` tag may address the issue:\r\n```\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"> \r\n```\r\n\r\nIf we add it to the `<head>` in our `index.html` at the root.\r\n\r\nRegarding the `cmd-+` and `cmd- -` bindings, agree with both you & @CrossR  - makes sense to have the key bindings, and suppress the double-tap behavior. We can track this in #840 .\r\n\r\nI'd like to investigate some saving/persisting config options next week, so that we can start taking on some of those features that depend on it (#840, #355 for the background color, etc).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350521976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350522556", "body": "Awesome, this is great @Akin909 ! Thanks for investigating & bringing it back - I really like that you refactored and improved the code while fixing the issue.\r\n\r\n> I wasn't quite clear on what the exact status of this is as I know there was discussion in #486 regarding a general VCS api that could work with different systems, \r\n\r\nThis is perfect for now. The VCS API I imagine being further out (at least a couple months), and it will need some thinking about API design. I don't think the configuration options will be quite enough to support it, likely we will need a concept of a VCS 'provider' that gives us an API - like get modifications, create branch, notify when there is a change, etc. Still have to feel out what the surface area of that will look like, in order to support the primary version control systems (git/svn/hg)... \r\n\r\nBut in any case, it's great to keep the status bar working for now - once we have the version control 'provider' API, I'd imagine we'd expose it on the Oni API surface, such that the statusbar plugin could ask for the branch / listen to a branch change.\r\n\r\nI did notice one issue - if I open Oni in a directory that is not version controlled by git, I still see the 'fork' icon:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/33801647-63afa18c-dd16-11e7-9f1c-c90d4b9a2b0d.png)\r\n\r\nIn that case, it'd be preferable to hide the whole thing IMO - the lone code fork could be a bit confusing.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350522556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350523206", "body": "Nice catch @CrossR ! Having the token regex be configurable per language definitely makes sense. Thanks for removing that hard-coding.\r\n\r\n>  Since we just highlight in neovim, if we had property and property-longer, both would be highlighted despite being different things.\r\n\r\nYa, good point. I wonder if we can improve the 'search string' we use in this case:\r\nhttps://github.com/onivim/oni/blob/36b144fc784511cb7ef5e84fa2c636c9c07ce904/browser/src/Services/Language/FindAllReferences.ts#L58\r\n\r\nPerhaps we can refine that search query somehow to get better results? We could also consider manage the highlighting ourselves, if that's not feasible.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350523206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350786512", "body": "> I think that would end up being pretty awkward, there is the simple case of check for word boundaries either side that would help it some what, but its also pretty common to have brackets or : or => immediately following it, which would cause it to fail.\r\n\r\nMakes sense. Yes, perhaps managing the highlighting directly in Oni would give better results. We can directly add highlights (there's an `updateHighlights` method that the text mate highlighter uses, but we could maybe add a simpler API, like `setKeywordHighlight(...)`.\r\n\r\nThe only other thing search gives us is the ability to quickly navigate between entries with `n` and `N` - we might want an alternative to that at the minimum. I've been thinking about something like that for errors, too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350786512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350786688", "body": "This PR looks great though - I'll bring this in, and we can track the search result refinement separately.\r\n\r\nThanks @CrossR for fixing this bug, and discovering/investigating the highlight issue too!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350786688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350787308", "body": "Cool, thanks for adding this @CrossR ! Will make the configuration more robust and harder to mess up \ud83d\udc4d \r\n\r\nI'm thinking about a way to centralize this long-term, like maybe have a way to run a 'sanitizer' or 'converter' when we load the config for certain properties, in case this ends up being a common pattern. But we can defer that until we see a pattern (like other config properties need similiar behavior). ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350787308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350792290", "body": "Really cool progress update here:\r\nhttps://www.youtube.com/watch?v=SgTfsueT5Ok", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350792290/reactions", "total_count": 4, "+1": 1, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350798895", "body": "Awesome, would be great to have your help here, @Akin909 ! Doesn't look like anyone else is checking this out at the moment.\r\n\r\n> vim solarized by altercation no longer looks to be maintained, meaning its styles haven't been updated with new highlight groups that exist in nvim? would you still like to use that knowing that or perhaps use a maintained fork like lifepillar/vim-solarized\r\n\r\nThe lifepillar fork sounds good to me: https://github.com/lifepillar/vim-solarized8\r\n\r\n> in the theme-onedark.json how did you populate those colors did you get them from the vim theme i.e. find the color used for bg in the vimscript then enter that etc. ?\r\n\r\nAh yes, I opened up the `onedark.vim` and grabbed the color values. Luckily, they are in hex so it was just copy-and-paste over.\r\n\r\nThanks for your help! Let me know if you have any other questions.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350798895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350874719", "body": "This is almost live (well, behind a feature flag) in #1104 - will track remaining work there.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350874719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350876696", "body": "Just tried it out, looks great!\r\n\r\n> I'd want to do this inside of a media query and as It stands I tried creating a less file for the component and passing it a className which doesn't seem to work, I'm not sure how plugins are bundled aka if the less is read.\r\n\r\nAh ya, unfortunately we don't have a way to include CSS files at the moment. I was thinking about having a way to include CSS as part of themes with #412 \r\n\r\nFor this particular case, would there be any harm in adding `text-overflow: ellipsis` in general?\r\n\r\nAlso, for the status bar, I think it will be challenging if each individual status bar item has to factor this in - I believe the way some other editors like VSCode handle this is that they give a fixed width to the status bar items, and then will render them based on priority. This is nice because the individual status bar items don't have to concern themselves with the resize cases.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350876696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350878541", "body": "I'm good to bring this PR in - I opened #1105 to further discuss some strategies around handling overflow/sizing of status bar items.\r\n\r\nThanks for finding this issue and cleaning up this code @Akin909 (and thinking about the overflow scenarios) - really appreciate it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350878541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350883879", "body": "Thanks for looking into it, @Akin909 ! Unfortunately it does seem to be failing consistently on Windows \ud83d\ude26 \r\n\r\nI'll troubleshoot in a bit - would it be possible to minimize the set of changes in `NeovimEditor.tsx` to the changes needed for the new events/handlers? The formatting changes add a lot of noise - minimizing the diff there to the essential pieces will make it much easier for me to debug.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350883879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350885075", "body": "Awesome - thanks @Akin909 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350885075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350930231", "body": "Hmm, I just tried the same with Atom and VSCode - here's how they work:\r\n- `cmd+n` creates a new file, not a new window. We don't have a binding for that today, but would make sense to have it. \r\n- None of the apps I tried supported double-clicking on the dock icon to open a new window, but some supported right-click and then 'New Window'. Oni doesn't have that today, but we could look at adding that as an enhancement. This API would be a good starting point: https://github.com/electron/electron/blob/master/docs/api/app.md#appdocksetmenumenu-macos\r\n\r\nThere's also an issue where if you close Oni, and then try and go to a menu item, you hit #484 .\r\n\r\nWould adding a 'New Window' option to the dock menu + command palette work for you to accomplish this? Seems like that would fit well with how other apps work on OS X", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350930231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350932279", "body": "Fixed by #1071 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350932279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350934724", "body": "FYI - the JS version of autopairs is on by default now in master, activated with #1101 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350934724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350934956", "body": "Sounds like it's working now, based on our discussion in gitter. I'll close this out, but let me know if you still hit issues! I hope we can have a better error experience around this - #38 / #39 track getting messages on load, which  would've helped significantly here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350934956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351117798", "body": "> @bryphe I was trying to cover cases where a git branch changed say in the terminal  and a user returned to Oni, that the branch would be updated, I wasn't sure that the bufenter event would cover this. Didn't realise the impact it would have on performance \r\n\r\nAh ok, thanks for the info! I like your suggestion to put a `FocusGained` or `FocusLost` event hook somewhere to accomplish this. I added #1109 to track adding this to our API.\r\n\r\n> Didn't realise the impact it would have on performance \ud83d\ude1f .\r\n\r\nNo worries! Performance is fickle unfortunately, and I believe on OSX this would not be as apparent because there is less visible overhead (at least when I benchmark on my machine). The events that occur frequently during typing like `BufChanged` are on the critical path so we have to watch out for those, in order to maintain responsiveness. It'll be something we should document at some point, because it'd be easy for plugin authors to hit, too!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351117798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351125985", "body": "Looks like the work this issue was tracking is complete - having both scrollbar + wrapping behavior. I'll cose this, but we can use a new issue to track the tab-shrinking option, if desired.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351125985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351126950", "body": "Glad you got it working, @PeteProgrammer ! Thank you for the follow-up.\r\n\r\nI'll close this out, but feel free to update our wiki if you have ideas on making that option clearer: https://github.com/onivim/oni/wiki/Configuration#editor", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351126950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351188041", "body": "Awesome, thanks for looking at this @Akin909 ! Impressive turnaround time on the PR \ud83d\ude04\r\n\r\nI just tried it out, and it's working great!\r\n\r\nAgree with your list of items for 1-3, and that they could potentially be handled down the road. It's great that we have the 'New Window' option. \r\n\r\n> cmd-Q and I imagine its alternate OS equivalents kills all windows\r\n\r\nI believe this is actually the 'right' behavior on OS X - there was some discussion around this on #483 . And when I tried on other apps (atom, vscode), it did that full-close behavior.\r\n\r\nFor 2, one item I was looking at was this: #67 \r\n\r\nIt's titled \"multi-monitor support\" but really it's just about quickly switching open instances of Oni. I thought it'd be cool if we could extend the window navigation commands (like `<C-w>h`) such that, when they hit a border, they would look to see if there is an Oni window present to the left/right/top/bottom, and navigate to that instance. Another option might be to have a quick-open style menu for open instances that could be navigated. But as you mentioned each platform also has their own ways to navigate windows, so it's a nice to have.\r\n\r\nNice work! I'll bring this in once the builds are complete.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351188041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351231367", "body": "Fix #1064 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351231367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351236685", "body": "> As for window jumping that would be a really cool feature to use vim-esque key maps to move between windows, I saw somewhere in the docs that windows have x,y positions perhaps looking at those i.e comparing the current positions x to all the other windows in the array and if otherWindow.x > currentWindow.x then focus on that instance then map that to the appropriate key, just a thought.\r\n\r\nDefinitely! The browser window has a `getBounds` method which gives us the positions, and the `main.ts` has that list of all the browser windows.... so it'd be a matter of figuring out how to go from one to the other.\r\n\r\nI started on some ideas here a looong time ago - in the main process, I had this code to focus different instances:\r\nhttps://github.com/onivim/oni/blob/e0c84b9b38a0902956d1859fbd9c77ee7e7f7892/main/src/main.ts#L22\r\n\r\nAnd then the entry point, from the browser-side, was really simple here - just sending the `ipc` message:\r\nhttps://github.com/onivim/oni/blob/e0c84b9b38a0902956d1859fbd9c77ee7e7f7892/browser/src/Services/MultiProcess.ts#L10\r\n\r\nSo I think it wouldn't be too crazy to implement the navigation - we'd just have to tell the main process which direction we want to go, and then in the main process, see if there is an Oni window that matches (like, if we move right, check for that `otherWindow.x > currentWindow.x` as you mentioned). Doesn't seem like it'd be too far out!\r\n\r\n> Another thing I noticed was that you can add recent files to the menu icon in mac and windows thought it isn't clear how to populate the recent files from the docs\r\n\r\nAh interesting, I guess this might be a case where having those 'persisted' settings would be helpful - we could persist the last X opened files/folders, and show them there? I wonder if there is something special about them, or if they would be additional menu items we'd add to our dock menu?\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351236685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351236813", "body": "Anyway I'll go ahead and bring this in as it addresses #1111 . Thanks again for your work on this, @Akin909 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351236813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351240564", "body": "Thanks for minimizing the changes, that's very helpful!\r\n\r\nIt's strange - pressing `<CR>` when the cursor is in between seems to fail with this PR:\r\n\r\n`window.setTimeout(|)`\r\n\r\nI'd expect it to split to three lines:\r\n```\r\nwindow.setTimeout(\r\n    |\r\n)\r\n```\r\n\r\nBut it actually ends up as:\r\n```\r\nwindow.setTimeout(\r\n|)\r\n```\r\n\r\nSeems to repro on OSX for me too - it's surprising that the completion pairs test passed at all on the OSX build. \r\n\r\nLooking into why this behavior is different now... really strange!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351240564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351242973", "body": "I noticed it was also reproducing for the backspace character too.\r\n\r\nIt seems that `editorManager.activeEditor.cursor.line` is not being populated anymore. This would likely cause regressions in several other places too - just happened to get caught by the auto closing pairs test.\r\n\r\nI'm guessing this is because we are no longer passing this value up for the current buffer?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351242973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351244185", "body": "Cool, I think I found the issue - I just added some comments in `NeovimEditor`. Seems like there was a spot we relied on being called more frequently (for all kinds of other vim events). Let me know if you have any questions!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351244185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351247305", "body": "Hi @saibing ,\r\n\r\nDid you happen to run this command: `git submodule update --init --recursive` after checking out the repo?\r\n\r\nWe recently moved some of our plugins (including the typescript one) into submodules. I'd recommend running that command, and rebuilding - see if that fixes it for you. Let me know how it goes!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351247305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351249730", "body": "Awesome! \ud83d\udc4d Thanks for letting me know! I'll close this out. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351249730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351257352", "body": "This should be fully addressed now by #1009 - the work left is to optimize specific paths on startup, like #372 .", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351257352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351262955", "body": "Remaining work here is tracked by #372 and #943 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351262955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351264250", "body": "Looks like this is addressed now (via the fix for #543). Still some scrollbar issues being tracked in #1007 , though. I'll close this, but feel free to reopen if this is still manifesting.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351264250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351264965", "body": "The initial set of pruning is done - we should track further items individually. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351264965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351513134", "body": "Hi @samvv ,\r\n\r\nThanks for getting in touch, it's great to hear from you! I just checked out Pencil and you're right - our tools are very similiar across the tech stack, architecture, and goals. Definitely makes sense to join forces and build together! \ud83d\ude04 \r\n\r\n> how can I help out? Are there any issues that I could help with?\r\n\r\nFeel free to jump into any issue that is unassigned, we could use the help across the board. It's awesome that your project used a similiar tech stack (TypeScript/React/Webpack), so hopefully that helps in terms of getting started.\r\n\r\nWe have some bugs tagged as \"help wanted\", so some of those may offer a good introduction to the code:\r\nhttps://github.com/onivim/oni/issues?q=is%3Aopen+is%3Aissue+label%3Abug+label%3A%22help+wanted%22\r\n\r\nIn addition, there are instructions for a first build here: [Development](https://github.com/onivim/oni/wiki/Development)\r\n\r\nThe plugin browser / plugin installer would be an excellent place to contribute. It's been on the backlog for a long time, but would be a tremendous step forward in improving the Vim/Neovim ramp-up (along with providing a consistent interface to adding both 'viml' plugins and the new javascript API plugins).\r\n\r\nThere's even a placeholder for it in the (experimental) sidebar - just no work on implementing it yet:\r\n![image](https://user-images.githubusercontent.com/13532591/33960300-2a5a2970-dfff-11e7-8955-596971ccd5a5.png)\r\n\r\nWe had an issue tracking it here: #186 but it's old so it may need some updating.\r\n\r\nA few places to look in the code:\r\n\r\nOur `PluginManager`:\r\nhttps://github.com/onivim/oni/blob/be9254679cca8bcfd8c7a184bae56f82b265d268/browser/src/Plugins/PluginManager.ts#L22\r\n\r\nAnd `Plugin`:\r\nhttps://github.com/onivim/oni/blob/be9254679cca8bcfd8c7a184bae56f82b265d268/browser/src/Plugins/Plugin.ts#L11\r\n\r\nOur plugin stories look quite similiar, comparing to the plugins in Pencil: https://github.com/AthenaHQ/Pencil/blob/master/src/plugins.ts \ud83d\udc4d I like that you have a story for enabling / disabling plugins - that would be a cool thing to bring over as part of the plugin management story.\r\n\r\nLet me know if you have any questions or need any help getting started - feel free to reach out on twitter (bryphe) or on our gitter: https://gitter.im/onivim/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\r\n\r\nThanks again for getting in touch, @samvv . Would be great to have your help - look forward to collaborating!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351513134/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351573976", "body": "Cool, thanks for updating hte PR with that change, @Akin909 !\r\n\r\nI left a couple comments inline - it looks like the `updateBuffer` is in better shape, but there were a couple other calls that also depended on being called for _every_ event that look like they were moved as well - I think it'd be safer for this change to keep those the way they are today. We could look at continuing the refactoring in another PR.\r\n\r\nIn addition, I'd like to move to using the strongly-typed events on NeovimInstance, like:\r\n`this._neovimInstance.autoCommands.onBufEnter.subscribe((evt) => { })` - would it be possible to move those cases in the switch statement to directly susbcribe to those events, instead? We may need to add a couple.\r\n\r\nLet me know if you have any questions!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351573976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351581719", "body": "Thanks for the details and the notes on the levels, @Akin909 ! The priority you gave seems reasonable to me. The only one I wasn't sure about was priority 3 - do we show that over 2/3rds?\r\n\r\n> As long as there isn't a situation where everything is being set to 1 since 'in a version of the/the future theres components vying for space this works'\r\n\r\nPotentially we could resolve this by having an implicit priority - like the order they were registered (likely built-in status bar items would be registered first, and take precedence).\r\n\r\n> I abandoned the transitioning idea because I had a look at webstorm, atom and vscode and it seems thats not done in any of those on top of which I'd personally feel like the transitions would just be visual noise\r\n\r\nSeems reasonable to me! I agree, I think it would be extra noise.\r\n\r\nThe only downside I see with the approach is it makes some assumptions based on the screen size (which can be tough since people have varying monitor sizes / resolutions / orientations). At the very least, it might be worth using a non-pixel unit, like a viewport unit: https://tutorialzine.com/2015/05/simplify-your-stylesheets-with-the-magical-css-viewport-units (which could more cleanly express full viewport, 2/3 viewport, etc). It looks like you're already using them for the max width in some cases - can we use them in place of the pixel measurements too?\r\n\r\nIMO the 'ideal' algorithm to solving this would be:\r\n- When the status bar size changes, we'd measure the left and right container size\r\n- While we still have space available, we'd add status bar items _by priority_, until we've reached the container size.\r\n\r\nThe nice thing about that algorithm is it's really independent of making any assumptions about screen size / coupling priorities to screen percentages, and it means we can avoid needing things like the `adjustPriority` method - that algorithm would handle those cases and potentially other corner cases by rendering as much as it can. At least conceptually it's simple - measuring the elements / dealing with widths like that is a pain, and it would need to be purely in JS as the media queries wouldn't handle that - so I think it would be more work than the proposed approach, although potentially more robust in the general case. \r\n\r\nBut I'm okay with the approach you've taken though, as it is definitely better than what we have today!\ud83d\udc4d The main thing I'd like to see though is if we can decouple using the `px` sizes and use some sort of viewport unit, so that it generalizes better across screen sizes. Otherwise I'm good to bring this in, and we can always iterate on it as we see fit \ud83d\ude04  Thanks for investigating a fix for this @Akin909 , appreciate it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351581719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351582963", "body": "Awesome, thanks for putting this together, @Akin909 ! I know @hoschi will appreciate it \ud83d\ude09 \r\n\r\nWhen I set my `ui.colorscheme` to it, I see this:\r\n![image](https://user-images.githubusercontent.com/13532591/33971430-374d7a78-e02d-11e7-8ff9-e2a74fc9a494.png)\r\n\r\nI think it is picking up the `light` version instead of the `dark` version.\r\n\r\nFor Solarized, I believe it would make sense to have two themes:\r\n- `Solarized Dark` and `Solarized Light`. \r\n\r\nWe could reference both versions in the package.json, like:\r\n```\r\n\"contributes\": {\r\n    \"themes\": [\r\n{ \"name\": \"solarized8_light\", \"path\": \"colors/solarized8_light.json\"}\r\n{ \"name\": \"solarized8_dark\", \"path\": \"colors/solarized8_dark.json\"}\r\n]\r\n}\r\n```\r\n\r\nSorry for the formatting, hopefully that helps give an idea.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351582963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351583649", "body": "Our plugin model is designed to be flexible enough to allow for it (and if it isn't, we should fix it!). \r\n\r\nUnfortunately I haven't used Jupyter too much, so I may need help implementing it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351583649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351584262", "body": "Tracked this also in #474 , and that has more info - closing this as a dup.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351584262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351590025", "body": "There may be some duplication across bundles - should look at incorporating the CommonChunksPlugin as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351590025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351735908", "body": "Thanks @bkd705 - great write up!\r\n\r\nAgreed, it would be a great way to lower the bar. We also have issues of discoverability with the built-in 'Oni' commands we have today - as @bkd705 mentioned, a common way people learn Atom/VSCode is to look through the command palette to see the key bindings. Unfortunately it's not as easy for Oni today.\r\n\r\nA good first step on the Oni side would be to show our current set of keybindings in that command palette window. There would be a few things needed there (that could then be reused for the Vim commands):\r\n- Adding the ability to show keys in the `Menu` - perhaps we could extend it with a custom React component? That code is in need of some love\r\n- Having the ability to do a reverse query on the InputManager - be able to ask 'what keys do I have bound to this command'?\r\n\r\nThis would open the door to then extend it for Vim commands - which would be next level in terms of helping people learn Vim!\r\n\r\nOne question I had about the Vim commands - would we primarily show the `:` ex commands, or would we want to show things like `Vim: Change in word` with `ciw`? (Or even individual motion / operators) I'm envisioning the latter would likely be the most important in terms of getting users new to vim up-to-speed and productive.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351735908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351809485", "body": "Definitely! Thanks for logging the issue, @samvv !\r\n\r\nWe're missing a lot of coverage today, and that won't scale out as more and more people start contributing to the project.\r\n\r\n> I understand that while the code is still in flux testing does not matter that much, but given that there is already quite a rich and working feature set, it'd be a shame if it became buggy.\r\n\r\n\ud83d\udcaf - this is a very important point. It's tough to win users over mature editors like Atom/VSCode/Vim/Emacsif they don't feel like they can trust our quality. Having tests is our safety net to validate things stay working build-over-build and release-over-release.\r\n\r\nWe don't have a very good documentation, but here's the sort of testing we have today:\r\n\r\n- __Unit Tests__ - these live in `browser/test`. An example of one is:\r\nhttps://github.com/onivim/oni/blob/68671386ec749b4e3f25ce71695c03fdccd697e7/browser/test/Services/Completion/CompletionTests.ts#L72\r\n\r\nYou can run these via `npm run test:unit` - it's a relatively small number today. This would be a great area to focus on!\r\n\r\n- '__Ci Tests'__ - these are integration/end-to-end tests that exercise a running instance of Oni. Most of the interaction occurs via the `oni-api` surface area. These tests live in `test/ci`, and an example of one here is:\r\nhttps://github.com/onivim/oni/blob/68671386ec749b4e3f25ce71695c03fdccd697e7/test/ci/LargeFileTest.ts#L11\r\n\r\nBoth of these currently use `mocha`, but I'm open to change as long as it's low friction.\r\n\r\nIn both cases, it would be excellent to have more coverage. IMO unit tests are always preferred, as they tend to be more reliable/less moving parts - but in some cases, we need the end-to-end coverage, especially when validating against Neovim.\r\n\r\nFor unit testing, I think as we go, there'll be some refactoring work too to make the code testable.\r\n\r\nCode coverage numbers would also be useful, it's not a perfect metric but it can help us quantify how much of our code is under test (how much progress we're making), and where gaps may be.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351809485/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351809720", "body": "Also, perhaps as the project + our test framework mature, we might want to add test coverage as a requirement for PRs.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351809720/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351812146", "body": "Sorry I missed your first round of questions, @Akin909 ! \r\n\r\n> I've attempted to refactor to what I think you had in mind but given my earlier question(s) I'm not entirely certain if this is what you intended apologies for any potential confusion or kerfuffling if I've gone off track\r\n\r\nIt's exactly what I had in mind! Thanks for being open to and making the changes \ud83d\udc4d  Really appreciate all the work put into this.\r\n\r\nI like that the `BufferEventContext` is strongly typed on those events - this will help make it easy to understand from the consumer side what sort of data is available. \r\n\r\nAnd the leftover stuff in `on(\"event\")` we can refactor out later. That's called for every vim event we pass up (so every vim event that we had a notification handler for in `init.vim`). I think a good next step is to pick deterministic events to hook - like maybe cursor moved, buffer enter, etc - and get it out of the general handler. And then we can completely scrap that general handler.\r\n\r\nThis change looks great - I'll bring this in once the build is set.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351812146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351817039", "body": "Thanks for all the help here, @samvv (and all your work too, @Bretley ) ! I just tried out the pull and it looks so cool... I can't wait for this to make it in \ud83d\udc4d \r\n\r\nOne interesting thing here today is that Oni really has two 'command' experiences:\r\n- The _command palette_ - accessible via `Control+Shift+P`/`Meta+Shift+P` - this is more akin to the command menu in Atom/VSCode/Sublime Text/etc - it's different from `:` ex mode in that it's mostly oni-specific commands. This is Oni only, and exposes some options that don't make sense at all in neovim (like `Open DevTools`).\r\n- The _command line / wildmenu integration_ - which is the externalized `:` ex mode.\r\n\r\nLong-term, it might make sense to combine them in some way - it's nice if there is a unified model. Part of the challenge is balancing the idea of bringing new users to vim (who come from Atom/Sublime/VSCode, and aren't familiar with the command line/ex mode), and also giving power-vim-users the same functionality they expect. But from that perspective, maybe it's okay to have a split - let the new users get their feet wet with the command palette, and let the veteran vimmers have the cmdline (with an improved UX!).\r\n\r\nWhen I was thinking about the keybindings in the quote above - I was thinking more in terms of the _command palette_ - I figured that's the first place a new user would go (and hopefully we can prompt them to get there w/ a better start screen experience!):\r\n![image](https://user-images.githubusercontent.com/13532591/34011081-b5b75460-e0c3-11e7-871e-d7cfdf6e560b.png)\r\n\r\nI'm actually not sure how it would work in the externalized `cmdline`/`wildmenu` - one thing we could potentially do is look to see if, as the user is typing, any key is bound to a particular command. For example, if I type `:vsp`, we could check the keymaps via the `nvim_get_keymap` msgpack call - and if there is a mapping associated with that, we could show the keys inline. That might be kind of cool. But I imagine if a user makes it to `:`, they already have at least some familiarity with Vim - so there may be less utility for it, as opposed to the command palette. Let me know what you think!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351817039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351832784", "body": "> I actually quite like the idea of having all commands nicely packed in one place, so that when I forget one I can simply look it up (that's why I wanted this so badly). \r\n\r\nCool, yes, if we can figure out a way to consolidate them in a common place, that would be great! I do think that having separate implementations - the command palette and the command line mode externalized - would be quicker to implement, and it would let us make an incremental step in that direction. But combine them up-front in a way that is intuitive, that's great.\r\n\r\n> I actually thought of parsing the :command output so that one can even fuzzy find on command name (Neovim currently does not provide a means to list all available commands via RPC or eval, unfortunately)\r\n\r\nIf we just bring in the static commands, we could potentially generate that offline (and come up with friendly names for some of the commands). We would need to find a way to get `ex` commands generated at runtime.\r\n\r\n> Edit: forgot to mention: that would imply only one pane (the command palette), as you suggested @bryphe\r\n\r\nWould this mean we'd integrate the output from the `ext_cmdline` into the command palette? Or integrate the full set of commands a different way?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351832784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351855193", "body": "> Problem solved seems to have been due to an unreliable variable,\r\n\r\nSweet, nice find!\r\n\r\n> if there are no explicit keys but I've on occasion had some very strange list behaviour because of their absence so am a bit skittish about it here's a horrorpen showing an example\r\n\r\nLOL I hadn't heard of a 'horrorpen' before but that is a pretty apt name \ud83d\ude04 \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351855193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351862264", "body": "> At last, I succeeded in syncing the colors.\r\n\r\nAwesome!!\r\n\r\n> @bryphe, do you think it should be experimental for now? and should it defaults to false? (BTW, waiting for the API PR)\r\n\r\nThat sounds great - `experimental.markdownPreview.enabled` with a default of `false` sounds good for now. But ya, I once we have the flag I'm ready to bring it in - we can then test it out, and it will be available for others to try. From there, we can decide when we're ready to enable it by default.\r\n\r\nI'm just wrapping up the 0.2.19 release, and I'm planning on the next release being 0.2.20 on 1/4 - hopefully we can enable it by default for that release \ud83d\udc4d \r\n\r\nOh and I just brought in the `oni-api` change and updated the npm package - thank you for making that change!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351862264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351864051", "body": "Hi @benjamin-rood ,\r\n\r\nWould be great to have your help here! We're starting to add the ability to customize colors beyond plain vim colorschemes - there's an example here: https://github.com/onivim/oni/blob/master/extensions/theme-onedark/colors/onedark.json\r\n\r\nAnd then the ability to specify them via config:\r\nhttps://github.com/onivim/oni/blob/master/extensions/theme-onedark/colors/onedark.json\r\n\r\n> It's clear that the functional direction for Oni is to have all the decorative customisation of an \"electron\" text editor but with (Neo) Vim tooling.\r\n\r\nWell put, yes, this is exactly the direction we're heading \ud83d\udc4d \r\n\r\nBeyond specifying colors, there are some next-level customizations we could do, by virtue of being an electron editor:\r\n- CSS customization - this opens the door for things like animations/transitions (ie, power-mode type plugins), but is not applicable for all elements. For this, one approach is to simply specify a css file path in the theme's json file, and then we load it and add it to the DOM in our `ThemeManager`.\r\n- Custom React components - we could add to our extensibility model ways to override React components (for example, specifying a new Cursor component). This would require a bit more thinking but allow arbitrary extension of the UI.\r\n\r\nLet me know if you need any help getting started here - definitely appreciate your help! \r\n\r\nIMO, a good litmus test for this level of extensibility is if we can support a plugin like this:\r\nhttps://atom.io/packages/activate-power-mode\r\n\r\nIf we can support something like that, we can likely support a wide breadth of customizations.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351864051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351871773", "body": "> Good question ... I'd say yes, if we really wanted to get a fluent interaction. Will not be as straightforward as it sounds, though ... \r\n\r\nRight, agree with it not being straightforward - the menu might not be able to support the full set of interactions that the `cmdline` expects - like recursive / nested commands, etc. Another caveat (although I could be mistaken) is that the external cmdline wants control of the cursor position - whereas the menu input right now is basically just an uncontrolled input box. So there will be a few things that will need to be thought through.\r\n\r\nThere are two alternatives to combining: one is to surface everything via the command palette, and the other is to surface everything via the cmdline. The challenge with the first approach - everything via the command palette - is we definitely wouldn't have the full support of the capabilities of the existing command line, and we'd have to rationalize things like passing arguments. The challenge with the second approach - everything via the cmdline - is that we'd have to let Vim know about all the handlers that Oni has, and some discoverability is sacrificed (the fuzzy finders usually are verbose in terms of the command name + text, which I'm not sure how we'd replicate in the vim cmdline).\r\n\r\nSo I guess there's 4 options:\r\n- Combine the external cmdline + existing command palette\r\n- Move everything to the existing command palette\r\n- Move everything to the external cmdline\r\n- Implement them separately for now.\r\n\r\n> Did you have something else in mind?\r\n\r\nJust the above options... I lean towards the 4th - implement separately - just because it seems the simplest today, and can satisfy both the novice user and experienced vim user scenarios. However, I am not an expert on the external cmdline and the full set of capabilities there - so  I'm open to exploring any of the possibilities. Interested to see what you come up with! \ud83d\udc4d  Thanks for your thinking around this, @samvv !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351871773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351872224", "body": "FYI, with #1124, there is a way to specify a regex-based strategy, by setting:\r\n\r\n```\r\n\"editor.quickOpen.filterStrategy\": \"regex\",\r\n```\r\n\r\nThis is just the straight-up wildcard filter as described above. Let me know if you have any feedback. Unfortunately it didn't make it in the 0.2.19 release, but it is in master.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351872224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351889820", "body": "Cool, looks like the builds are green now! I'm ready to bring this in - are you all set with the changes, @Akin909 ?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351889820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351890463", "body": "> I haven't yet seen an example using vh or post using vw or vh in a query.\r\n\r\nBummer, that's too bad \ud83d\ude26 Thanks for your investigation!\r\n\r\n> It does work with em which scale based on font size, which is more fluid than a static px value also, on thinking about it this particularly approach would only really be aimed at dealing with small screen sizes which are equivalent to certain px values essentially.\r\n\r\nThat's true, that makes sense. I guess for the time being we could use the pixel values for the smaller screen sizes, and always render all items for the larger sizes.\r\n\r\n> EDIT: I'm also looking into the more robust solution you mentioned, whereas this is more of a band-aid\r\n\r\nCool, I think this makes sense as a long-term solution - it's more generalized and avoids some of the caveats of the current approach.\r\n\r\n> Re. the solution you describe does sound more robust, I read this yesterday a tweet about a react component which calculates its with as it grows or shrinks and passes it down to its child components.\r\n\r\nAwesome! I think in our case, we wouldn't want the status bar items themselves to decide whether or not to render - it should be up to the container, since the container knows about the sizes and relative priorities of the children, whereas the children ideally shouldn't need to know that information. But we could potentially use a similiar approach.\r\n\r\n> I wonder if you've had a look at any CSS-in-JS solutions, like styled-components, they tend to allow you a lot of flexibility with what information is available in your css, aka any react prop can be used to determine how styles can respond (this would allow for dynamic styles inside of a media query for example), just curiosity on my part.\r\n\r\nI actually haven't used these before - happy to try it out if it can simplify things for us!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351890463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351894508", "body": "Awesome, I just tried this out, and it works great for me (using both `solarized8_dark` and `solarized8_light` as settings for `ui.colorscheme`).\r\n\r\nIs there anything left here, @Akin909 ? Or is it ready to bring in?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351894508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351894729", "body": "@hoschi - I don't think I had the `experimental.editor.textMateHighlighting.enabled` flag set to true in that screenshot. It looks like there is syntax highlighting when I have that set:\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/34023771-8dda130a-e0fb-11e7-9d4c-a474058bf4b8.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351894729/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351896114", "body": "This should be fully addressed now with @Akin909 's fix in #1066 - I'll close it out, but let me know if there are still other issues here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351896114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351897219", "body": "Ah ya, I like it - thanks for the suggestion @keforbes !\r\n\r\nI think it would be a good use case for #98 - having a notification pop up. And as you mentioned it would likely save a lot of trips to the FAQ \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351897219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352059132", "body": "Thanks for the proposal @sammv ! It was funny that @Akin909 just brought this up too in #1114  \ud83d\ude04 \r\n\r\nI actually don't have much experience with styled components (I used [radium](https://github.com/FormidableLabs/radium) briefly) - but this looks really nice.\r\n\r\nI took a pass through the docs (the motivation section) - it does seem like it would be a significant improvement over what we have today! Excited to see how it works.\r\n\r\n> One reason that I'm suggesting this right now is that it will get more and more difficult to come up with unique class names for CSS styles the more plugins are added. styled-components generates IDs automatically that won't collide, so I personally think it is better for scaling.\r\n\r\nMakes sense to me - I've hit issues with this already. The css class names are ad-hoc anyway, with no real standardization, so they are at best confusing and at worst cause problems as above. Styled components seem like a good solution to this.\r\n\r\nThanks for the suggestion, I'm definitely on board!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352059132/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352061469", "body": "> This pull request switches the testing framework to AVA, so that tests will run in parallel where possible and we are not constrained to e.g. instantiating an entire new application for each test. Will come in especially useful when more integration tests are added.\r\n\r\nAwesome! The parallelization of tests is really cool. This will be important as we add more unit tests. The tests seem more streamlined as well (not needing the `describe` blocks) - I like it.\r\n\r\n> I also moved all test files up to the root test folder browser/test, which in retrospect might not have been the best idea. My reasoning was that tests can be added and removed more freely, without being forced to follow src/ directory structure\r\n\r\nI'd prefer the unit tests (for now) to follow the directory structure. I've been experimenting with something like vim-alternates (http://www.vim.org/scripts/script.php?script_id=31), but an oni version, that lets me switch to / from the test file. My hope is we could set up something in an oni config file, like:\r\n```\r\n'workspace.testPaths: [{ source: 'browser/src/**/*.ts', test: `browser/test/**/${fileName}Tests.ts'}]\r\n```\r\nAnd then have a key-binding or command to switch to the 'test' file (or create one if none exists!). I think this would help solve the adding more freely aspect in a general way. I would have loved to have this sort of system in a few teams I've worked on, so I thought Oni would be a good place to test it out \ud83d\ude04 \r\n\r\nOne other aspect I've been thinking about is further modularizing Oni - I'd eventually like to see if we can break out some pieces into extensions:\r\n- Auto-closing pairs\r\n- QuickOpen\r\n- Completion\r\n- LanguageManager\r\nBasically anything in the `Services` folder is up for grabs.  By mirroring the directory structure, it'd be easier to pluck out some of the relevant tests.\r\n\r\nLet me know what you think! Thanks for making this change - the move from mocha -> AVA will be a big step forward.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352061469/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352061643", "body": "Oh, I had one other question too - right now we use `electron-mocha` to debug the unit tests, via `npm run debug:test:unit:browser`. What's the best way to debug the AVA tests?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352061643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352061855", "body": "That would be awesome, @samvv !  Really appreciate it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352061855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352065218", "body": "Excellent, bringing this in now. Thanks for all your work on this, @Akin909 ! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352065218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352065766", "body": ">That's actually really cool! Yes, then it totally makes sense to keep directory structure. Will fix it ASAP.\r\n\r\nSweet! I realized I don't have an issue tracking that 'alternates' work - I'll create one with more details.\r\n\r\n> I'll create and configure a new command in package.json for this. If you have it installed, it will be as simple as ava. Stack traces etc. should come nicely formatted in the terminal, and there's really no difference between a browser test and a regular test anymore thanks to Spectron. If you only want to run certain tests, it'll be something like ava --match bar --match 'foo*'\r\n\r\nSounds great! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352065766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352088806", "body": "> I'm done, but unfortunately the PR fails in CI on npm run dist:win (as well as other dists).\r\nAny idea why or how it can be fixed?\r\n\r\nCool, it's the home stretch now! Can't wait to get this in!\r\n\r\nI'm looking into the failure now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352088806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352089271", "body": "I just saw a couple issues that are unrelated to the failure, but they might cause tests to failure:\r\n- It looks like there is a large `h q` file at the root, should be removed\r\n- It looks like the submodules in `vim/core` and `vim/default` were removed. This will cause the typescript test to fail (because the filetype won't be picked up).\r\n![image](https://user-images.githubusercontent.com/13532591/34056880-a7545f8c-e189-11e7-8200-b275a10b1e10.png)\r\n\r\nThose will need to be restored.\r\n\r\nStill looking at the failure with `npm run dist`/`npm run dist:win`. I see other people have had similiar issues:\r\nhttps://github.com/electron-userland/electron-builder/issues/2236\r\n\r\nBut it looks like it might be an actual issue with a dependency. Trying to see what's happening.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352089271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352090783", "body": "> So there are starting to get a lot of open pull requests, but if possible, I'd like to get this one merged first when ready.\r\n\r\nCool, I'll hold off on any CSS change PRs while you're working on the conversion to minimize merge issues.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352090783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352096909", "body": "I tried setting the `ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES` and the build completed, and I was able to run the app.\r\n\r\nWe could try this on the CI machine:\r\n```\r\n    \"postinstall\": \"npm run install:plugins && cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=1 && electron-rebuild && opencollective postinstall\"\r\n```\r\n\r\nHowever, once I got that, I tried running the app from the install package, and I see an issue:\r\n![image](https://user-images.githubusercontent.com/13532591/34058042-7ff670b0-e18e-11e7-9e79-c839a32c6a7a.png)\r\n\r\nSeems like the problem there is that `react` is a development dependency (which worked fine before, since the `browser` bundle was the only code that used it, and it bundled it with webpack). For this case, we should move it to a `dependency` as opposed to a `devDependency` at the root.\r\n\r\nI'm going to try that out and see if there are any other blockers-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352096909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352099833", "body": "Once I made that change, it worked in the dist build!\r\n![markdown-preview](https://user-images.githubusercontent.com/13532591/34058570-50788c5e-e190-11e7-9802-80900c2be33d.png)\r\n\r\nI pushed up a branch with the full set of fixes I used here: [bryphe/922/fixes](https://github.com/onivim/oni/tree/bryphe/922/fixes)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352099833/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352101347", "body": "Ah ya, interesting! It does look easy and straightforward.\r\n\r\nI'm wondering too if we can just avoid making bundles altogether - just point Electron to the output `index.js`. This would save us a lot of compile time, and might actually be more efficient in terms of loading. The version of Node that Electron has today unfortunately doesn't support the `import` method, but once Electron 2 is out, it might be worth profiling w/o any bundler. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352101347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352103467", "body": "I'll close this out for now, as the project has matured significantly since this initial discussion. Great to have this context though, and feel free to log an issue if there are still aspects of the direction that are unclear!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352103467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352109070", "body": "Thanks for the feedback & investigation here, @CrossR ! \r\n\r\n> Since #875 was merged in, this (and #326) can be closed I think, and we can make a separate more focused ticket on the final part of this which is to add a gui_oni feature.\r\n\r\nSounds good - perhaps it even makes sense to make a ticket on the `oni-neovim-binaries` repo? It sounds like you've figured out where we'd need to add it.\r\n\r\n> So we could get a fork of neovim into the org with the feature added, which is easy enough. Creating the binaries may be a little more tricky, but thats just because I've not had to make the binaries for Windows / Mac before, which I assume someone else has! \r\n\r\nSame here, I haven't actually tried to build on Windows \ud83d\ude04 Much less set up appveyor for it.\r\n\r\nI haven't heard too many people asking for this recently (perhaps the `g:gui_oni` is sufficient), so it might make sense to hold off for now. Especially since you added the capability to load a custom `init.vim` for Oni, which helps here too.\r\n\r\nWe can bring it back as an issue on the `oni-neovim-binaries` repo though if it is something that would be useful. I'll close this one for now as you suggested, and we can open a new issue to track the `gui_oni` feature if necessary.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352109070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352133649", "body": "Thank you for logging the issue, @nyronium ! Really appreciate you bringing this up.\r\n\r\nI just read up on the NX bit and used the `checksec.sh` utility from here: http://www.trapkit.de/tools/checksec.html, and am able to reproduce what you are reporting:\r\n```\r\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE\r\nPartial RELRO   Canary found      NX disabled   No PIE          RPATH      No RUNPATH   Oni-0.2.19-x64-linux/oni\r\n```\r\n\r\nHowever, I see that it is the same for other popular electron-based editors (VSCode/Atom):\r\n```\r\n[bryphe@bryphe-arch Downloads]$ ./checksec.sh --file atom-1.23.1-amd64/atom\r\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE\r\nPartial RELRO   Canary found      NX disabled   No PIE          RPATH      No RUNPATH   atom-1.23.1-amd64/atom\r\n```\r\n\r\n```\r\n[bryphe@bryphe-arch Downloads]$ ./checksec.sh --file VSCode-linux-x64/code\r\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE\r\nNo RELRO        Canary found      NX disabled   No PIE          RPATH      No RUNPATH   VSCode-linux-x64/code\r\n```\r\n\r\nMy understanding is that, as we use Electron - which leverages V8 - the JIT requiring there precludes using the NX bit on the binary (which is why VSCode and Atom also do not have NX enabled). \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352133649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352133865", "body": "Given that we are in parity with the other common electron editors, I'm closing this out as won't fix. @badosu - FYI - let me know if you have any feedback here too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352133865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352134293", "body": "> I'm going to have to call it a day, unfortunately. Will continue working on it tomorrow \ud83d\udd25 Cheers!\r\n\r\nSounds great! Thanks for all your work so far, @samvv  - looks like excellent progress! I really like this approach. \ud83d\udc4d \r\n\r\n@Akin909 - I see what you meant about how nice it is to be able to pass the `props` in - that's really cool.  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352134293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352134607", "body": "I also took a pass through the following repos to see if I could find any related issues:\r\n\r\n- [atom/atom](https://github.com/atom/atom)\r\n- [microsoft/vscode](https://github.com/microsoft/vscode)\r\n- [electron/electron](https://github.com/electron/electron)\r\n- [electron-userland/electron-builder](https://github.com/electron-userland/electron-builder)\r\n\r\nBut did not see any issues related to the `NX` bit.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352134607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352135129", "body": "I'll close this out for now, since it's been open for almost a year. I'm open to a PR to convert from lodash to ramda, but I don't think it's necessary to track in this issue. We've started to using `RxJS` as well, and our `lodash` surface area is much smaller.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352135129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352210592", "body": "Cool, just read a bit about `ThemeProvider` in the docs - it seems much cleaner than what we have today in terms of passing around the colors explicitly in the props. I like the idea of having the root `<ThemeProvider />` and having `props.theme` available... looking forward to that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352210592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352212532", "body": "Ah looks like I messed up... I had set the variable in my shell so I was getting a false positive.\r\n\r\nThere were two problems with my original solution:\r\n- The `cross-env` calls need to be prior to the `build` call in `dist:win` and `pack`, not in the `postinstall` step.\r\n- The `cross-env` calls need to _not_ have a `&&` prior to the call, otherwise it's a no-op\r\n\r\nPosted the fixes here in [bryphe/922/move-cross-env-to-build-calls](https://github.com/onivim/oni/compare/bryphe/922/move-cross-env-to-build-calls), and the relevant commit is this one:\r\nhttps://github.com/onivim/oni/commit/d9ef2323ee77d1f5570d363f38e7e3d6e632d069\r\n\r\nHopefully that's the last issue... fingers crossed...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352212532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352213647", "body": "Just a heads up @benjamin-rood - it looks like we're moving towards using [styled-components](https://www.styled-components.com/) in #1134 , so as opposed to bringing in a CSS file, for the deep extensibility we'll need to pursue the _Custom React component_ approach.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352213647/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352214261", "body": "Cool, thanks for the follow up and additional context, @nyronium ! Do you think it makes sense to log an issue on one of our dependent projects, like Electron or v8?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352214261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216047", "body": "Awesome, I can give some historical context here... Originally (in older versions), we had a UI for errors that slid out from the side, like:\r\n![error](https://cloud.githubusercontent.com/assets/817509/24513729/346933d4-152f-11e7-9f9c-5f6f8e20f6ee.png)\r\n\r\nThe major problem with this approach is it didn't handle multiple errors, or overflowing very well!\r\n\r\nSo we switched to showing it in the 'hover' UI:\r\n![hover error](https://user-images.githubusercontent.com/13532591/31694130-5608e950-b357-11e7-9f5e-7b2d33415e6d.png)\r\n\r\nHowever, that only shows if the _cursor is on the error range_.\r\n\r\nIn the case I see above, it looks like the error marker is off by a position (potentially):\r\n![image](https://user-images.githubusercontent.com/13532591/34074797-e6eb4d08-e26b-11e7-8d7c-747d43b8cabc.png)\r\n\r\nSeems like there are two things to address:\r\n- We should remove the `editor.errors.slideOnFocus` from the wiki, since it isn't supported anymore - sorry about the confusion there! The UI looked kind of cool for single/small errors, but didn't really 'scale' for multiple errors \ud83d\ude26 \r\n- We should check and see if there is a graceful way to handle those off-by-one issues. The LSP protocol calls for error ranges to be zero-based, but unfortunately I think some language servers use one-based coordinates. One quick solution here, for this case, would be to always show the errors if they are past the end of the line.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216678", "body": "> I actually think that's not the case. I think it simply points to the location where the semicolon should be, which is beyond the line of course because it is not there.\r\n\r\nGood point, you're right - that makes sense.\r\n\r\n> Another solution I thought of is being able to use the mouse to hover the ~~~~~~ so that you can view the error even if you cannot get there with the cursor. But both solutions are equally good in my eyes.\r\n\r\n\ud83d\udc4d would be great to have that!\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216794", "body": "Ah well, at least the windows builds passed... making progress... \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216825", "body": "Taking a look at the OSX failure... that's strange. Seeing if I can repro it on my OSX machine.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352217675", "body": "Strange, no issue on my machine. I couldn't find a lot of similiar issues, there were ones like this: https://github.com/electron-userland/electron-builder/issues/1183\r\n\r\nBut not quite the exact same. Still looking.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352217675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352217915", "body": "I'm wondering if it's having an issue with the nested dependencies in `oni-markdown-preview`. I'm going to test out promoting them to the root to see if that changes anything.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352217915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352221283", "body": "Awesome, thanks for getting this working again, @Akin909 ! This will make debugging so much easier \ud83d\udc4d\r\n\r\n> I don't know how much of an issue this maybe for others if it is then it might be worth looking into the standalone app, like react-devtools or simply add the advice re chmod to the dev wiki whilst electron-installer work on the issue hopefully\r\n\r\nI think, since it's one-time step, adding it to the wiki is probably simpler and sufficient. I'm cool with either approach though.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352221283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352221434", "body": "> Cool @bryphe I personally would find it really frustrating to have to switch between a standalone app and electron. \r\n\r\nAh, I skimmed the `react-devtools` repo too fast - I thought it was an embedded UI, just outside the devtools. I agree, having it be standalone would be painful. Good point!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352221434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352221933", "body": "I'll close this out since @Bretley and @samvv both have better versions \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352221933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352222030", "body": "I saw there was also an issue with the build caches - it seems that sometimes our node_modules / yarn caches get out of date \ud83d\ude26 I cleared them out, and I got a passing build with #1141 with the change to move the packages to the root: https://github.com/onivim/oni/pull/1141/commits/7e64896f3efb57b808b0bcbb0349b8ef59a1b2f3\r\n\r\nUnfortunately it seems that `electron-builder` doesn't do too well with the nested node_modules. It's not ideal, but we can put them at the root for now, and eventually move it out to its own `npm` module / repo.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352222030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352464137", "body": "> @bryphe Unfortunately some other projects require all of my attention at the moment. \r\n\r\nNo worries, thanks for the heads up!\r\n\r\n> I'd suggest merging it as it is now. I've only pushed changes of code that has been tested and should work, and that way someone else can finish the job. Perhaps @Akin909?\r\n\r\nSure thing! It looks like there are a few build issues (perhaps lint errors) - I'll take a look and finalize those. I'll merge this in, and then address those/get builds green in a separate PR. \r\n\r\nI'm happy to work on converting some of the remaining `less` files to `styled-components` as it will give me a chance to learn more about it. Let me know @Akin909 if that's something you're interested in too - don't want us to duplicate work \ud83d\ude04 \r\n\r\n> And no worries, I'll be back \ud83d\ude04\r\n\r\nAwesome \ud83d\udc4d Really appreciate your contributions to the project!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352464137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352464735", "body": "Sweet, thanks for taking this on @Akin909 ! Looks great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352464735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352469858", "body": "One suggestion that @bruchmann made on #1123 was leveraging [electron-link](https://www.npmjs.com/package/electron-link) to accomplish this. Would be interesting to see how straightforward this is to plugin to our infra/build.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352469858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352470306", "body": "Thanks for the pointer, @bruchmann ! We're tracking leveraging v8 snapshots in #381 , just added some context there - `electron-link` looks like it would be very helpful for that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352470306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352485227", "body": "Hi @LucianBuzzo ,\r\n\r\nHere's the relevant section: https://github.com/onivim/oni/wiki/Language-Support#auto-closing-pairs\r\n\r\nAnd `autoClosingPairs.enabled` is the relevant setting, which you can set to false in your configuration.\r\n\r\nHope that helps.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352485227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352485768", "body": "Also added a link in the `Configuration` section of the Wiki, hopefully that makes it more discoverable in the future: https://github.com/onivim/oni/wiki/Configuration", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352485768/reactions", "total_count": 4, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 2}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352534094", "body": "There's multiple issues here:\r\n- As the addition of styles occurs, it causes layout to get more expensive, as well as essentially being a memory leak.\r\n- The addition of styles also causes much larger repaint areas than needed.\r\n\r\nWe can't afford to compromise on performance - for __properties that are changing frequently__, it seems like it's best to use inline styles, as not only does that prevent the `head` from blowing up, it keeps allows layout and paint to be scoped to the element (important for things like cursor movemement... for example, #1129 is now much worse - instead of just the row being repainted, the whole `<ActiveWindow />` needs to be repainted!)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352534094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352537470", "body": "@samvv @Akin909 - FYI - given the performance issues I'm seeing here, I think it's fine to use `styled-components` for things where we would use CSS (like static values, or even theming, animations/transitions), but for dynamically changing values, its best for performance to continue to use inline styles.\r\n\r\nLet me know if you have feedback or other ideas on how to handle this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352537470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352542696", "body": "For now I'll revert the dynamic setting of styles in the high-frequency code paths (like `Cursor`, `CursorLine`, etc)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352542696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352548923", "body": "Hmm, seems like it is our implementation - for _static_ styles, `styled-components` is smart enough to hash it and then re-use the style based on the hash.\r\n\r\nUnfortunately though, for styles that _change_, like this code:\r\nhttps://github.com/onivim/oni/blob/9fa83a62ff35f535cef81d5e5f2d8a3f418df01d/browser/src/UI/components/Cursor.tsx#L64\r\n\r\n```\r\nconst CursorContainer = withProps<ICursorRendererProps>(styled.div)`\r\n    visibility: ${props => props.visible ? \"visible\" : \"hidden\"};\r\n    position: absolute;\r\n    left: ${props => props.x}px;\r\n    top: ${props => props.y}px;\r\n    width: ${props => isInsertCursor(props) ? \"0\" : props.width}px;\r\n    height: ${props => props.height || \"0\"}px;\r\n    line-height: ${props => props.height}px;\r\n    color: ${props => props.textColor};\r\n    font-family: ${props => props.fontFamily};\r\n    font-size: ${props => props.fontSize};\r\n    opacity: ${props => props.isLoaded ? 1 : 0};\r\n    transition: opacity 0.35s ease 0.25s;\r\n    /* Cover up 'holes' due to subpixel rendering on canvas */\r\n    padding-left: 1px;\r\n    padding-right: 1px;\r\n    margin-left: -1px;\r\n```\r\n\r\nEvery time one of those props changes, like the `x` or `y` (which change very frequently!), lots of stuff happens, since there is no hash match and `styled-components` has to regenerate the style:\r\n- The style block is re-parsed and then auto-prefixed\r\n- A new class name is created, and the style/class is appended to the head\r\n\r\nThis is a perf killer because it causes a large repaint, and blows up the styles - since every time `x` or `y` changes, a new style is created (and all that parsing has to happen).\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352548923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352549427", "body": "Because of that, IMO, the best bet in order to preserve perf is:\r\n- Use `styled-components` for static things, shared classes, or things that depend on CSS functionality (animations, media queries, etc)\r\n- Use inline styles for properties that change frequently", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352549427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352549789", "body": "As part of the performance test, we should also validate that we are adding elements continuously - this will help us catch issues like #1146 more quickly", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352549789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352557860", "body": "You can repro this via `nnoremap <s-space> :echo 'test'<CR>` in Oni, and pressing `shift` + `space`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352557860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352573564", "body": "Cool, nice find @Akin909 ! \ud83d\udc4d  \r\n\r\nThat looks like exactly what we need. I started going back to inline styles for a few of the components in #1148, but I'll see if I can leverage this for some of the remaining ones, and we can try it out moving forward!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352573564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352580735", "body": "For the `CursorPositioner` and `ErrorMarker` components, I reverted those changes - there were other problems besides just performance (flickering for the CursorPositioner, and for the Errors, the squiggles weren't showing up).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352580735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352596976", "body": "Adding a test to help provide a \"safety net\" here in #1150 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352596976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352618865", "body": "Fixes #1149 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352618865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352620166", "body": "This should be fixed now in the latest release with #1064 - once we're full screen, we hide the titlebar on OSX (like other apps).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352620166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352623246", "body": "> I would have converted all of them however an issue I ran into is with the .loaded class which is set via redux globally, I think to have this work with styled components rather than a class a redux prop would have to be set and then passed to all styled components needing the loaded class. You could have styled components' css helper and then check if truthy render the css chunk.\r\n\r\nI think it's okay for now to leave the `.loaded` out - that was a quick transition-in animation, we can probably find another way to handle it later \ud83d\ude04 It's not critical by any means.\r\n\r\n> Re the discussion in #1134 I'm also happy to take some of it on, and perhaps leave some to you so you can decide how you'd like to integrate the library etc.\r\n\r\nIt would be great to have your help with the remaining conversion for #1134! I think we can try and scope it - perhaps just converting the .less files over, and not trying to convert the inline styles for now, might make it easier w/ less chance of a performance regression. Glad you found that way to set inline styles though via `styled-components` - really appreciate your help!\r\n\r\n> EDIT: Forgot to mention that I also added configuration options for the status items so users can change these. I found whilst working on this that I very much quibbled over what should or shouldn't show which I imagine will be the case for the user. If you're in agreement with this addition it'll need documentation which I can add.\r\n\r\nThe configuration looks good to me - I like that we have a configurable way to set the priority. It seems like it would be extensible for plugins too. I left some comments inline in the PR, the only consideration I had was that potentially we could consolidate the `id` we pass to create the status bar, with the id we reference in the `statusbar.priority` dictionary. In addition, we may not need the `priority` setting to be passed in to `createItem` - if they are always just going to look up the priority in the config (which they should, if they are good statusbar citizens that respect the users config), then we can just look it up for them and not need them to specify in the `createItem` call.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352623246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352830331", "body": "Nice find, @CrossR ! The behavior makes more sense now, after reading through the thread.\r\n\r\n> Would probably be better to add it via on Oni config option, and set it that way, so that it isn't enabled for everyone?\r\n\r\nSeems reasonable. I'm trying to put less and less in `init.vim` so as to minimize conflict with existing configs. It can actually already be set via a configuration in Oni: `'vim.setting.autoread'`: `true`.\r\n\r\nWe could check if this is set, and if so, we can call `:checktime` along with our call to focus gained in our `focus` handler (perhaps via `this._neovimInstance.command`):\r\nhttps://github.com/onivim/oni/blob/57929c06a02fe6e886747bda45ac2c9412ccd2fd/browser/src/Editor/NeovimEditor.tsx#L308\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352830331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352840540", "body": "Wow, impeccable timing, I just hit this too \ud83d\ude26 Super annoying... sorry about that!\r\n\r\nThe tests are _supposed to backup the config_ here:\r\nhttps://github.com/onivim/oni/blob/57929c06a02fe6e886747bda45ac2c9412ccd2fd/test/common/runInProcTest.ts#L44\r\n\r\n(To `_config.js`)\r\n\r\nBut it looks like that isn't working correctly on OSX (works ok on Windows where I was testing originally).\r\n\r\n> I'm not sure whether or not these tests are intended to be run on CI servers exclusively\r\n\r\nNah, it's important to be able to run them locally too! Especially to debug failures. The integration tests are a little awkward but we should definitely fix this pain point.\r\n\r\nI think like you suggested, what we should do to make this more robust is to add a `--config` option, that can specify a config to load from (overriding the default config path). That way we don't have to do any of that copy-config craziness. Using an environment variable is good too - happy with either approach!\r\n\r\n>  this also raises the issue that if the config.js is missing for whatever reason there could/should be a fallback or a warning msg or perhaps immediately/ user is prompted to replace it with the default from oni\r\n\r\nWe actually should handle this case today... I noticed though on my machine, the `NoInstalledNeovim` test failed, and left a config that caused Oni to hang (it pointed to a non-existing Neovim instance). It might be worth closing all instances and re-opening.\r\n\r\nSorry again you lost your config!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352840540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352854988", "body": "Awesome! The article looks great, thanks for sharing it @Akin909 \r\n\r\n> It's subjective whether or not users will want this but personally when I open any app I immediately have to resize it to where I want it to be which is typically split screen somewhere left or right.\r\n\r\nI like this behavior by default. It seems like the best 'heuristic' where the user would want the window is where they had it last. If we find that it is not desirable, we can always add a configuration option to disable it, but I don't think it's necessary at this time. Lots of apps behave this way anyway.\r\n\r\n> It seems you've already added the necessary infrastructure for persisting settings and the article goes through how to add this I wonder if this is something that would be desirable in your opinion if so I'd be happy to implement it possibly as a configurable option (although i'm not sure if the config object can be reached from main.ts\r\n\r\n\ud83d\udcaf this would be great! Yes, we use the [electron-settings](https://github.com/nathanbuchar/electron-settings) library which has a very similiar API to the one in the article. There's an example of using it to read the background color here (from `main.ts`):\r\nhttps://github.com/onivim/oni/blob/57929c06a02fe6e886747bda45ac2c9412ccd2fd/main/src/main.ts#L70\r\n\r\n(I used `_internal.lastBackgroundColor` to differentiate from configuration options, which I am also planning on storing here - like for #571, #840 . Perhaps we could use `_internal.windowState` to check this?) You can also write from the main process as well, nothing tricky there luckily.\r\n\r\nWould be great to have this, if you're up for implementing it!\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352854988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352856526", "body": "While investigating this... saw our OSX tests were 'silently failing'. Looking into this with #1153 - our safety net was really broken!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352856526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352873629", "body": "Awesome, looks great @CrossR - thank you!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352873629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352874114", "body": "This looks like it's all set - thanks @Akin909 for integrating this! I'll bring this in now. We're starting to have a nice portfolio of first-class themes supported - onedark, solarized light/dark, nord. Very cool.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352874114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352938410", "body": "Hi @hoschi !\r\n\r\nSorry I missed your questions, taking a look now. \r\n\r\n> I hope I can finish the last tasks in the GH project linked above and/or start on the Oni integration in my upcoming holidays \ud83d\ude01\r\n\r\nSounds awesome! \ud83d\ude04 \r\n\r\n> I also really think we need to use this in day to day editing in a \"beta phase\" and see how things work, because I think it feel really different in some places.\r\n\r\nDefinitely. We've been pushing on getting features in early, backed by an `experimental` feature flag, so that we can test them out, as well as ensure they stay up-to-date with other changes on master. We could hook up something like an `experimental.yode.enabled` that would let us add this as the default for go-to definition, or for adding other commands, like opening up the react component as you mentioned.\r\n\r\n> With the command palette it is now even easier to recognize these things for new users as both commands show when you type \"Go to def\" \ud83d\ude01\r\n\r\nFor sure. It's easy to have multiple commands exposed in the command palette. Ideally, we'd have better discoverability here too by showing when a command is bound to a key.\r\n\r\n> At the moment there is one IEditor on the screen, NeovimEditor, which renders the \"text editing\" part like buffers and splits. Splits of the editing space are rendered by NeoVim at the moment, not by Oni.\r\n\r\nThis is exactly right! Although we're making progress on decoupling this... If you enable the sidebar via `experimental.sidebar.enabled`, you'll see the sidebar + file explorer:\r\n\r\nThere is still only one `IEditor` - the `NeovimEditor` highlighted in green here.... but the sidebar and file explorer actually have _their own Neovim instance_ - `SharedNeovimInstance` that they use. So it's a step towards the decoupling.\r\n\r\n> At this point even the splits are managed by Oni, not by NeoVim anymore?\r\nSo the implementation of the IEditor interface which enables the user to edit text, what is now NeovimEditor, manages only one \"vim window\" instead of \"tabs + splits + windows (aka splits)\" by that time?\r\n\r\nI would actually like to do more split management in Oni, and have the splits fully managed by Oni. Right now, in the file explorer picture, Oni manages the splits between the sidebar/file explorer/`NeovimEditor`, but inside the neovim editor, vim manages those splits. I would like to split that up and have the ability to have side-by-side or vertically-split `NeovimEditor`, so that we could have separate tab lines.\r\n\r\n> For me IWindowSplit is confusing ... does this stand for Oni splits like tab bar, status line, main content area or does it stand for splits which are managed by the NeoVim instance at the moment? Also in combination with WindowManager which manages at the moment one split, the NeovimEditor instance.\r\n\r\nThe `WindowManager` and `IWindowSplit` are managing _Oni_ splits. The status bar is actually just rendered separately, outside of Window Manager. The tab bar is actually rendered as part of the `NeovimEditor` today, so that isn't a split either.\r\n\r\nThe `IWindowSplit` implementations we have today are:\r\n- Sidebar\r\n- File Explorer\r\n- NeovimEditor\r\n- Markdown preview in #922 \r\n\r\nThe Neovim splits are managed internally by the `NeovimEditor` class - it has an instance of `NeovimWindowManager` which it uses.\r\n\r\nThe `IWindowSplit` is basically just a surface that is available to render React components, so there is a lot of flexibility there. We could probably render Yode directly there without too much drama - we'd just have to think about how we'd handle the Neovim piece of the integration. \r\n\r\nSome ideas:\r\n- We could create a bunch of `NeovimEditors` for each of the yode 'windows' in the split - the downside is each of those spin up a new Neovim process. We would get the language integration and things like that for free, basically. \r\n- We could use the `SharedNeovimInstance`, like how the file explorer `binds` to it to create an instance. However, we don't have language services hooked up there yet.\r\n\r\nJust some thoughts off the top of my head... Let me know if you have any other questions \ud83d\ude04 \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352938410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352940829", "body": "@TalAmuyal - let me know if you'd just prefer me to merge in #1141 . I wasn't sure if your name is associated with the squashed commit / if you get github activity in that case, so I was holding off. But I'm happy either way. Really excited to get this in \ud83d\udc4d !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352940829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352944551", "body": "Awesome, thanks for the fix @CrossR !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352944551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352944762", "body": "Cool, ya, it should be fixed now (at least the latest release had some improvements around the statusbar state). Thanks @CrossR !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352944762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352944823", "body": "Perfect, sounds good!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352944823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353091539", "body": "> If you don't mind, please do merge this PR and let's fix any ramifications independently.\r\n\r\nSounds good - I'm in the midst of investigating some of the failures, so I'll take a look. I'll merge this in now - thanks for all your work on this, @TalAmuyal ! Congratulations on getting it, this is awesome \ud83d\udcaf ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353091539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353094678", "body": "That's strange, Oni does not install plugins into your neovim plugin dir.\r\n\r\nA few questions:\r\n- What platform are you on?\r\n- What does `:set rtp?` return in Neovim?\r\n- What Neovim plugins do you have installed?\r\n\r\nWhen Oni creates a Neovim instance, it adds Oni's plugin folders to the `runtimepath`, but that should only impact the session running in Oni - unless you have a plugin that happens to cache or store the `runtimepath`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353094678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353101346", "body": "Awesome, I just tested it on Windows as well - worked great for me too \ud83d\udc4d Nice work @Akin909 , thanks for this change! Bringing it in now", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353101346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353125385", "body": "Fix #1154 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353125385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353129470", "body": "Thanks for the info, @topaxi ! Sorry that you hit this.\r\n\r\nIt seems like an integration issue with `dein`... It looks like `dein` does this thing where it saves the `runtimepath`:\r\nhttps://github.com/Shougo/dein.vim/blob/09db90d2073c0c921c4e4046fffba343009da898/autoload/dein/util.vim#L267\r\n\r\nI imagine what happened is that Oni ran with `dein`, and then dein saved the `runtimepath` (along with the ones Oni adds).\r\n\r\nIt looks like `dein` exposes a call to clear that cache via `:call dein#clear_state()` to revert that, but I don't know a ton about the side effects. You could also try modifying the cached vim file that `dein` creates directly and remove those.\r\n\r\nI started modifying the Wiki to call out issues like this - adding an 'Incompatible Vim Plugins': https://github.com/onivim/oni/wiki/Plugins#incompatible-vim-plugins", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353129470/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353129655", "body": "Would be great to have a few different 'health checks' here - would be nice to guard against plugin incompatibilities like #1163 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353129655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353142796", "body": "Not needed now that #922 is in \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353142796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353176901", "body": "Test failure was due to `BasicEditingTest`, which is now removed - all other tests passed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353176901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353188150", "body": "The only test that failed was the `BasicEditingTest` which is now removed, so I'll bring this in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353188150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353237654", "body": "> I noticed that your integrating the theming from themeProvider and I wanted to point out that with regards to using the theme if the final component that you want to respond to the theme is a styledComponent then they all automagically aka react context have access to the theme props so if the final component you are styling is say a folderView then you can use\r\n\r\nNice, thanks for the suggestion! I'll give that a shot - seems like it will save me from a bunch of plumbing \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353237654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353246631", "body": "This is partially implemented via TextMate grammars, behind the `experimental.editor.textMateHighlighting.enabled` flag here: https://github.com/onivim/oni/wiki/Configuration#textmate-highlighting", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353246631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353247212", "body": "Hi @Dcryfm ,\r\n\r\nThanks for the issue and screenshots! We're actually working on integrating [TextMate](https://manual.macromates.com/en/language_grammars) grammars.\r\n\r\nThis is what it looks like (master build with `experimental.editor.textMateHighlighting.enabled` on):\r\n![image](https://user-images.githubusercontent.com/13532591/34239038-ba7bbb1c-e5b9-11e7-8825-69736a378e4e.png)\r\n\r\nWhich actually enables even more detailed syntax highlighting - note that the variable/identifiers are highlighted, too!\r\n\r\nIt's available in master via the `experimental.editor.textMateHighlighting.enabled` flag - you can read more about it here: https://github.com/onivim/oni/wiki/Configuration#textmate-highlighting\r\n\r\nAnd we're tracking that in #379\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353247212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353247271", "body": "I'll close this out of a duplicate of #379 , but please feel free to try it out and post your feedback!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353247271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353449441", "body": "Weird! I restarted the OSX build and it passed now. Our master build has stayed [pretty green[(https://travis-ci.org/onivim/oni/builds) - although I was wrestling with test issues most of the week \ud83d\ude26 \r\n\r\n> BTW, I don't know if it's a bug in npm or just a \"feature\" - it seems that if a dependency is local (file:-prefixed) then its dependencies are not installed.\r\n\r\nUnfortunately I'm not sure about this. I've always had issues trying to use the local file dependencies, so I've tried to avoid it except when debugging. We do use `yarn install` as opposed to `npm install` for the root, so that could potentially cause issues.\r\n\r\nBesides the build issues we see here, I've also seen cases where `electron-builder` doesn't pick up separated dependencies, and you get the worst kind of bug where it works locally, but it breaks in the install package because some node_module is missing. So I'd lean towards either keeping the dependencies as-is, even if it isn't ideal.\r\n\r\nWe try and guard against these sort of breaks with the integration tests on the CI machine (that actually run against the built package), but we don't have any tests for markdown preview today, so it'd be easy for that to break that w/ a missing node module. IMO, my preference would be to focus on improving the functionality over wrestling these dependencies - because even if our node_module layout isn't perfect, it doesn't really impact the end user. Keeping them centralized at the top level is the easiest way to keep everything working for now - and then we have the flexibility to split them out to separate packages as we see fit.\r\n\r\nOne other thing is I've created an 'extensions' folder at the root:\r\nhttps://github.com/onivim/oni/tree/master/extensions\r\n\r\nI'm starting to migrate our 'plugins' there (mainly just language grammars and themes at the moment). It's great to have all the extensions 'centralized' so that we have examples, and the markdown-preview is our best example plugin. So in any case it'd be worth moving it over there!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353449441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353450175", "body": "Just a FYI - following from the `oni-api` changes: The `oni-api` [npm module](https://www.npmjs.com/package/oni-api) was published with the API changes at `0.0.10`. So you'll need to update the package.json and run` yarn install` to pick those up.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353450175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353502947", "body": "@Akin909 - cool! I do find myself wanting this functionality from time-to-time. It always feels like too many keypresses to get at a buffer I just had open today \ud83d\ude04  I think there was some work / investigation here in #635 - so it might give you some ideas.\r\n\r\n> I can implement this (I think) but wanted to hear your thoughts before I went ahead in case you have other plans regarding something like this\r\n\r\nSounds good, thanks for sharing your ideas! I think it's fine to implement it stand-alone for now, but I'll give you an idea of what I'm thinking long-term too - eventually what I'd like is to have a 'modal' command-palette experience - similiar to how VSCode works. I like their system, as it's very discoverable to find functionality. If you haven't used it, they support 'prefixes'. Like if I have `>` as my first character, I'm in command mode, and all the results are commands. If I type `?` as my character, I get info about what I can do with the command. \r\n\r\nI'll create a separate issue that goes into more detail here - for this it'd be fine to implement separately for now as we think about how it could be combined.\r\n\r\n> My general thinking re implementation would be to add another function to the MenuManager like listOpenBuffers somehow getting that from the either redux or a vim event, probably redux\r\n\r\nIdeally, we wouldn't need to extend `MenuManager` at all - it's pretty generic and really only cares about showing a menu. This would tightly couple it to the concept of a 'buffer', but it might not need that.\r\n\r\nIf you think of our current API as a set of building blocks, I think you could implement this with the 'building blocks' we have today:\r\n\r\nJust some pseudocode:\r\n```\r\nconst activate = (api: Oni.Plugin.Api) => {\r\n    const menu = api.menu.create()\r\n\r\n    menu.onItemSelected.subscribe((menuItem) => {\r\n        api.editors.activeEditor.openFile(getFileFromMenuItem(menuItem))\r\n    })\r\n\r\n    menu.show()\r\n\r\n    const buffers = getOpenFiles(api.editors)\r\n    const buffersAsMenuitems = convertBuffersToMenuItems(buffers)\r\n    menu.setItems(buffersAsMenuitems)\r\n\r\n}\r\n````\r\n\r\nThe cool thing about the Menu API is it's generic enough to support a lot of scenarios - we could do a colorscheme picker, list buffers, etc - it doesn't need to be coupled to a specific implementation. That way we can use it as a building block to support all kinds of scenarios \ud83d\ude04 It's basically connecting our 'Editor' and 'Menu' APIs to facilitate that scenario of listing the active files...\r\n\r\nIdeally we'd have the above code hooked up to a 'command' and then a default key binding for it, too!\r\n\r\nI realized that we don't have good typings for it right now:\r\nhttps://github.com/onivim/oni-api/blob/8f59b3373cae9c013ab3cf701c850b4e3984aff3/src/index.ts#L243\r\n\r\nHaving that interface documented might make it more discoverable / understandable.\r\n\r\nHope those details are useful- let me know if you have any questions. Thanks for your help!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353502947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353503513", "body": "> @Bretley @samvv not sure if either of you are still working on this or had any plans as to how to get round this?\r\n\r\nYes, I was wondering the same thing about this! It seems like we might have to render the cursor, like we do for the `NeovimEditor`. But I wasn't sure (maybe we could reuse the `Cursor.tsx` component, but `connect` it to a different store).\r\n\r\n> Happy to leave this be if either of you are still working on it was just thinking to get the simplest implementation working since you've both done all the heavy lifting and then that can be iterated on in the future rather than see the work get buried in a sea of merge conflicts?\r\n\r\nThis is a great idea! We could bring it in behind an `experimental` flag - like `experimental.commandLine.mode` (similiar to how we have `tabs.mode` or `completion.mode` for other externalized features) - off by default. This will help us stay afloat over a sea of merge conflicts, and make it easier to get further contributions. \ud83d\udcaf It would be a bummer to not be able to merge this! \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353503513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353503964", "body": "This is done with #1123  - \r\n![image](https://user-images.githubusercontent.com/13532591/34282282-0c41e092-e679-11e7-84af-e6a2e543118f.png)\r\n\r\nThe entry point is 54.1 kb... hopefully we can continue to rev these and require less-and-less on startup. `0.bundle.js` is needed relatively shortly after, but ideally we can trim that and load more in parallel while Neovim is starting.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353503964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353510066", "body": "Ah sorry, there were actually some problems with the `oni-api` build - the `index.d.ts` and `index.js` weren't being overwritten because they weren't checked in, and then they weren't being included in the package because they were `gitignore`'\r\n\r\nOnly took 8 releases or so but seems like it's working now \ud83d\ude09 You'll need to upgrade to `oni-api@0.0.17`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353510066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353513645", "body": "Thanks @Bretley for logging the issue!\r\n\r\n> I'm not entirely sure what's wrong here but doing :tabnew then :tabprev hides the newly created tab... I'm going to try and hunt down some init.vim fixes\r\n\r\nFor this particular issue, as @CrossR mentioned, should work correctly with `'tabs.mode': 'tabs'`. At least it seemed to work OK for me:\r\n\r\n![tabs](https://user-images.githubusercontent.com/13532591/34283701-2a7c81bc-e682-11e7-90f2-48e48dceeba6.gif)\r\n\r\nLet me know if you're doing / seeing something different, @Bretley !\r\n\r\n> I\u2019m not clear what the benefit of being buffer centric is.\r\n\r\nYes, @CrossR described this well - buffers-per-tab is a similiar model to other editors like VSCode/Atom/Sublime. They don't really have a concept that maps to 'vim tabs'. IMO, 'tabs' in Vim are somewhat poorly named... they should be 'window layouts' or something (at least from my perspective)\r\n \ud83d\ude04 \r\n\r\nWe had a few discussions in the past around this, some of these conversations may be relevant:\r\n- #593 \r\n- #586 \r\n- #949 \r\n- Also a bit in the PR here #922 \r\n\r\nThis does keep coming up though as a blocker for vim use cases, and because people have voiced it as a consistent blocker, I've started to backpedal a bit and wonder if we could get the best of both worlds:\r\n- By default, file-per-tab - meaning if I open via 'Open File' or 'Quick Open', it by default opens in a new tab (probably using `:tab drop` so if the file is already open, we go to that tab).\r\n- Files passed in the command line always get opened in a  new tab (Kind of like the `vim -p` command).\r\n- If the tab name looks like a file (has an extension), we'll show an icon for it as we do for buffers\r\n- If _any buffer_ associated with the tab is dirty, we'll show the dirty icon\r\n\r\nTo a novice user coming from Atom, Sublime, VSCode - I _think_ the behavior would be pretty similiar. It's only once they start getting into splitting / rename tabs / etc that it might get more interesting. For an experienced Vim user, they'd have a nice experience for tabs out of the box, and also get the benefit of seeing the list of buffers in our sidebar (eventually):\r\n![image](https://user-images.githubusercontent.com/13532591/34284065-23e7a76c-e684-11e7-8226-d191bf29ff2c.png)\r\n(2 tabs, 3 buffers - `tabs.mode` is `'tabs'` - note that you see the 3 buffers in the 'opened buffers'. And if we implement #1173 , there are lots of options for navigating your workspace!)\r\n\r\nI've heard the feedback that the buffer-by-default approach isn't ideal.... perhaps it's worth pivoting and trying the above out? If we can satisfy both the novice user + experienced user scenarios, that'd be awesome. Let me know what you think.\r\n\r\n> I\u2019m a heavy tabs user, so it\u2019s currently blocking my use case. I\u2019m not clear what the benefit of being buffer centric is.\r\n\r\nOh and @jordwalke I poked around looking for this in our issues - do you have more info on the blocker you're hitting? Is the same `:tabprev`/`:tabnext` issue, or something different? Definitely want to make sure we address it! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353513645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353515258", "body": "I'm good to bring this in - as you mentioned I don't want it to get lost in a sea of merge conflicts. Thanks for bringing it up-to-date @Akin909 , and thanks @samvv and @Bretley for your work on this! I'll bring this in now and merge #1175 with it tomorrow.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353515258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353676192", "body": "> @bryphe \ud83d\udc4d thanks for looking into that, seems to have resolved the typing issues.\r\n\r\nSure thing! I'm just looking at the branch now - the status bar looks really cool. I like that we're using the theme colors now! And the resize logic seems to be working well - much nicer experience than we had before.\r\n\r\n> I'm having trouble with the tests as the \"status.priority\" section I added to the config is being looked for by the status bar items and im not sure how to add it to the new test config.js (thanks for adding that btw) I see the env var, are you setting one locally somehow?\r\n\r\nHmm, looking into this now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353676192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353676702", "body": "I noticed when I close and re-open Oni, I see the statusbar in some weird states - not sure if this you've run into this too:\r\n![image](https://user-images.githubusercontent.com/13532591/34312754-407ca05c-e71b-11e7-93cc-8d12d5d1b1f0.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353676702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353677220", "body": "Also I found the issue with the unit test - the `LanguageClientStatusBar` was using the global configuration object, which makes it hard / awkward to test. For the `LanguageManager` tests, we pass in a configuration object - that should be passed down to the `LanguageClientStatusBar`.\r\n\r\nSo instead of this in `LanguageManager`:\r\n```\r\n    private _statusBar = new LanguageClientStatusBar()\r\n    private _currentTrackedFile: string = null\r\n\r\n    constructor(\r\n        private _configuration: Oni.Configuration,\r\n        private _editorManager: Oni.EditorManager,\r\n    ) {\r\n```\r\n\r\nWe should have this:\r\n```\r\n    private _statusBar: LanguageClientStatusBar\r\n    private _currentTrackedFile: string = null\r\n\r\n    constructor(\r\n        private _configuration: Oni.Configuration,\r\n        private _editorManager: Oni.EditorManager,\r\n    ) {\r\n      this._statusBar = new LanguageClientStatusBar(this._configuration)\r\n```\r\n\r\nHope that helps!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353677220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678457", "body": "Awesome, thanks for your work on this! It's looking great. Sorry you had to deal with the master merge - moved a bunch of files around to factor out that 'global' state. Looks like everything is set now though.\r\n\r\n> Also whilst implementing it, it occurred to me that I'm able to navigate it smoothly as i have the following settings in my vimrc\r\n\r\nIt actually worked OK for me too (I didn't have any settings for this in my `init.vim`). I wonder if some of these are set by default?\r\n\r\n> this basically allows me to scroll the wild menu by hitting tab, not sure what the experience would be for a user new to vim i.e. arrow keys etc. I was thing we could add these settings to the init.vim though they might be controversial and might be better left to the user, but this I imagine wont work properly without some init.vim settings.\r\n\r\nIt'd be great if we could avoid settings in `init.vim` if possible - especially for these externalized features. For this, do you think we could control the selection of the item from the Oni side? For example, add a keybinding like `command.next` - sort of like how we have `menu.next`? Or even reuse the `menu.next` binding? I'm thinking we could style it to look similiar to our other menus - like the quick open / command palette, and in that case, it would make sense for it to have the same input experience as those menus.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678717", "body": "Also, I'm cool to bring this in as-is since it's behind an experimental flag -  we can continue to refine incrementally. Let me know if you're all set or if there is anything else you wanted to do as part of this PR.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353685214", "body": "Just tried on #1181 - looks great!\r\n\r\n![image](https://user-images.githubusercontent.com/13532591/34314114-70c73952-e725-11e7-84cf-d846d4e5ccc6.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353685214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/onivim/oni/comments/20287697", "body": "@kopischke - makes sense, thanks for the feedback! My understanding is features are a compile-time addition to Neovim, so essentially we would need to hook up a custom build of Neovim with the `gui_oni` feature baked in as a compile option. I updated #99 and #123 with some comments for this (and I assume we would need to do something similiar for Linux). In lieu of a custom build with the `gui_oni` feature baked in, is there a better way to add this?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/comments/20287697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/comments/20292922", "body": "Cool, that's helpful - thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/comments/20292922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/comments/25487115", "body": "Ah thanks for catching that! Just updated it", "reactions": {"url": "https://api.github.com/repos/onivim/oni/comments/25487115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/comments/26826693", "body": "FYI @Akin909 , it looks like this change unfortunately breaks the reload for `npm run start` \ud83d\ude26 \r\n\r\nWhen I use `npm run start`, and I modify a file, I see this in the output:\r\n![image](https://user-images.githubusercontent.com/13532591/34900567-e6efc900-f7b5-11e7-8498-66469fbc4252.png)\r\n\r\n(Even if there are no errors - it just shows `TypeScript emitted no output` and stops the reload).\r\n\r\nI rely heavily on `npm run start` for development to iterate quickly, and I'm not sure exactly why this change breaks it. I wonder if it is related to `react-component-octicons` and the issues we had with `tslint`? In any case, I'm going to revert it for now since it regresses the `npm run start` behavior.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/comments/26826693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/91818762", "body": "Can you please add a space after the comma here? I'm surprised tslint didn't complain about it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/91818762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/91818882", "body": "Also if you run `npm run test` locally, do you get any tslint errors? I wonder if there is something wrong with the validation on travisCI. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/91818882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/94955410", "body": "Might need to be merged with a recent change to the package.json to clamp the version numbers (this helps predictability of the build, so that newer versions of libraries don't break us). Can you please merge that and then change the version here to \"1.0.0\" instead of \"^1.0.0\"? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/94955410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/94955601", "body": "Thanks for adding these options, that's awesome! This will give us a solid foundation to add more menu items down the road as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/94955601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/94956205", "body": "I tested this on Windows and it looks a bit unnatural - I think we might want `File` on Windows, and `Oni` on OSX/Linux", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/94956205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/95780772", "body": "Thanks for the suggestion! Will make the change", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/95780772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/96625782", "body": "Could we keep the order as-is? And then set the `prototype.editor.backgroundOpacity` to a value like `0.8`? The concern I have is that this color might not work well with all color schemes (although it looks great with the default one). If we flip the order back, and use opacity, it will still be present but pretty subtle, and will blend with other colorschemes as well", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/96625782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100073265", "body": "Can you please remove this extra commented line?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100073265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100073337", "body": "Does setting this to `false` have any behavioral change than just not calling it at at all? Just curious!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100073337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100073563", "body": "Looks like the changes from the menu change slipped in here too :) You might want to pull the latest master and merge or rebase those changes in. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100073563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100551334", "body": "Cool, thanks for looking into it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100551334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100672839", "body": "FYI - @bert88sta  - just wanted to let you know I had to make this minor change. What happened was that, in some cases, like using `npm run start` if the debugger opened up, and the browser window wasn't the active window, this would crash because `getFocusedWindow` would return null. Minor detail though, just wanted to give you a heads up", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100672839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/101036492", "body": "I think we can get rid of fontFamily and fontSize here, same for CursorLineRenderer. We could actually use the same `Renderer` class for both the CursorColumn/CursorLine, since there isn't actually anything different about them, except the way we figure out the height/width, which happens in the mapStateToProps", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/101036492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/101036564", "body": "We should be able to remove both of these getValue calls", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/101036564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/101036847", "body": "The TODO makes sense. I'm thinking we could have an event like Config.on(\"changed\", (newConfigKey, newConfigValue) => { ... }) where we could add this. This could happen if we reload the config file, or if we synchronize config values from Neovim, etc. No changes needed, just thinking out loud", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/101036847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/102314881", "body": "Not confused, totally valid point. `config.json` was added first, but `config.js` is like configuration v2... There were some things for my config that I wanted to use JavaScript for (for example, have a random background image on boot). We should remove `config.json`. It would be great to track in a separate issue and make sure that the documentation is up-to-date (there might still be references to `config.js`).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/102314881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104177113", "body": "Cool! Thanks for adding this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104177113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104293841", "body": "Cool idea here to add a loading indicator.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104293841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104293888", "body": "I logged #269 to build on this and better support async in general with Ctrl-P - it'd be nice to have a gradual loading experience, where you can search results as they are being populated.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104293888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104293906", "body": "Later, for #269, we could use the `match` event to incrementally populate the list.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104293906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104293917", "body": "Thanks for finding a replacement for `recursive-readdir`. It's a bummer they never wanted to take that PR / fix the issue around handling errors...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104293917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104294025", "body": "If there is an error, files might be empty, and then QuickOpen crashes for me. Perhaps we should validate we actually have an array for `files` somewhere.\r\n\r\nIt looks like on Windows, if I run `Ctrl-P` from C:\\, it errors out with this message:\r\n```\r\nbundle.js:47353 glob error Error: EBUSY: resource busy or locked, scandir 'C:\\hiberfil.sys'(\u2026)\r\n```\r\n\r\nI can follow up on that for Windows, though. Overall this library seems much more maintained / document than `recursive-readdir`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104294025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104294225", "body": "Could you please remove these extra newlines? No linting set up for us in VimL :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104294225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103498151", "body": "Good question, I actually just picked something quick and easy for testing. \r\n\r\nDo you have any ideas for a better default key for this? Another option would be to have it exposed in the app menu.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103498151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104326684", "body": "Still need to finish wiring this up", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104326684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104326687", "body": "...and this", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/104326687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/106146505", "body": "Thanks for the detailed comment here! If we are consistently getting double events, we could look at `debounce`'ing the event: https://lodash.com/docs/4.17.4#debounce", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/106146505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/106147055", "body": "For this, we don't actually need to create our own registration mechanism - we could just hijack the event emitter:\r\n\r\n```\r\nimport { EventEmitter } from \"events\";\r\n...\r\nconst configEvent = new EventEmitter()\r\n\r\nexport function registerListener(callback: Function): void {\r\nconfigEvent.on(\"config-update\", callback);\r\n}\r\n\r\nfunction notifyListeners(): void {\r\nconfigEvent.emit(\"config-update\")\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/106147055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/106147097", "body": "Cool, thanks for hooking this up! Excited to try it out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/106147097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/106147372", "body": "I don't think we need to call renderFunction explicitly (as it is already called by `requestAnimationFrame`, but I don't think this will hurt either).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/106147372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/107392989", "body": "Minor type -here - should be `Palette`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/107392989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/110450653", "body": "Cool, I didn't know about `Partial` - that's really helpful for this scenario. I think it would be useful for some of the React typings, especially how `connect` works with `mapStateToProps` and `mapDispatchToProps`. Nice!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/110450653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/110450911", "body": "I like the way the typing here too was set up, that's really cool", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/110450911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/110791667", "body": "Minor suggestion here - you can use the `classnames` (https://github.com/JedWatson/classnames) module to make this a bit easier, without needing the `join(\" \")`. We already have it in the project, the 'oni\\browser\\src\\UI\\components\\LiveEvalMarker.tsx` uses it", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/110791667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/111465187", "body": "Would you mind fixing my typo while you're here? \ud83d\ude04 I used `NevoimInstance` instead of `NeovimInstance`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/111465187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/111465246", "body": "Thanks for hooking these up to the new logging infrastructure", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/111465246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/111465438", "body": "Looks like there are a few unused lines here", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/111465438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/111465477", "body": "This might be a good candidate to have in `common.less` - same for a few other constants.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/111465477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/111465599", "body": "Nice use of `Partial` here! I need to remember to leverage that..", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/111465599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/114082960", "body": "Should try reverting this change, I don't believe it is necessary and may break Windows", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/114082960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/120338132", "body": "Seems like we could actually make this `async` now (which is the non-blocking code-path). Something like:\r\n```\r\nreturn findUp(\".oni\", {  cwd: filePath })\r\n.then((oniDir) => {\r\n      if (!oniDir) {\r\n          return DefaultConfiguration\r\n      }\r\n      return loadConfigurationFromFolder(oniDir)\r\n})\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/120338132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/125987709", "body": "If we need extensive logic, it might be worth creating a function for this in `vim\\core\\oni-core-interop\\plugin\\init.vim`. Something like:\r\n\r\n```\r\nfunction OniOpenFile(strategy, file)\r\n    if bufname('%') !== ''\r\n        exec a:strategy . a:file\r\n    elseif &modified\r\n        exec a:strategy . a:file\r\n    else\r\n        exec \":e \" . a:file\r\n    endif\r\nendfunction\r\n```\r\n\r\nYou can then call this function by executing:\r\n`this._neovimInstance.callFunction(\"OniOpenFile\", [message, files[0]])`\r\n\r\nA couple of benefits:\r\n- Easier to read than the string concatenation\r\n- You can debug quickly by running `:OniOpenFile` in ex mode\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/125987709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/125988730", "body": "Maybe to simplify, we could just handle the `Tab` case with  this PR? That case seems more compelling to me, as opening a bunch of files in a split would be somewhat unwieldy. And it looks like the `Tab Open` case works well - I think this parallels pretty well with functionality in something like VSCode. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/125988730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/125989860", "body": "As you mentioned, we'd want to chain the promises. I believe Neovim will execute these in-order, but it's still safer to wait for each command to complete. Chaining the promises in a loop gets a little messy, but we could leverage async/await potentially:\r\n```\r\n         const openFiles = async (message: string, files: string[]) => {\r\n\r\n            // Open the first file.\r\n            // If the current buffer is named, then open in a new tab or split.\r\n            // If the current buffer has modifications pending, then open in a new tab or split.\r\n            // If the current buffer had no modification and is a new file, open in the current buffer.\r\n            await this._neovimInstance.command(\"if bufname('%') != ''\\n\" +\r\n                        \"    exec \\\"\" + message + normalizePath(files[0]) + \"\\\"\\n\" +\r\n                        \"elseif &modified\\n\" +\r\n                        \"    exec \\\"\" + message + normalizePath(files[0]) + \"\\\"\\n\" +\r\n                        \"else\\n\" +\r\n                        \"    exec \\\":e \" + normalizePath(files[0]) + \"\\\"\\n\" + \r\n                        \"endif\")\r\n\r\n            // Open any subsequent files in a tab or split.\r\n            for (let i = 1; i < files.length; i++) {\r\n                await this._neovimInstance.command(\"exec \\\"\" + message + \" \" + normalizePath(files[i]) + \"\\\"\")\r\n            }\r\n        }\r\n\r\n        ipcRenderer.on(\"open-files\", (_evt: any, message: string, files: string[]) => {\r\n            openFiles(message, files)\r\n        })\r\n```\r\n\r\nThere's still a hanging promise at the end of the chain, and ideally we'd queue things up in a more disciplined way (nothing stops another area of the code from calling command!). This could even be handling internally by Neovim instance, by queuing or chaining the commands.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/125989860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/126737488", "body": "I like that you refactored this out - thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/126737488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/125330294", "body": "Thanks for looking at this, @jordwalke ! I've been going through the docs and I believe this was actually a misunderstanding on my part. I've been spending time jumping back and forth between OCaml/Reason syntax (learning OCaml primarily, and then playing with Reason) - I think this was a case where I didn't fully context switch between the two. I was caught up in some examples from BuckleScript w/o semicolons and was porting them over to Reason and missed some semicolons. Sorry for the noise, I don't believe there's a real issue here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/125330294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589105", "body": "Cool, thanks for including both this and `Oni.services.git` in our API surface. Great idea!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589191", "body": "Glad we can share this functionality between the core code and plugins.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127588911", "body": "I think here, we'd want to update `_lastBufferLines`, for sure - since that is sent over sometimes to the plugin. Calling `notifyBufferUpdateIncremental` is important because that's how we update the language services with the current line, so they can give us up-to-date completion. We'd also want to update the `_lastBufferVersion` since there will be a new change tick now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127588911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127588960", "body": "If it's blocking load, the means Neovim hit an error while executing it on startup. It might be worth trying to call it once Neovim is loaded to see if you can capture the error. \r\n\r\nRegarding `last_cursor_line` and `last_change_tick` - if we remove those, then in insert mode, we'd just send over the single line? And in normal mode, we'd send over the whole buffer? It might be good to remove those, so I can see what it looks like simplified without those. That does seem like it would give a nice perf boost when typing in insert mode!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127588960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589069", "body": "Minor thing here, looks like indentation is off", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589882", "body": "Can we remove this reference of `b:last_cursor_line` as well?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589891", "body": "Looks much simpler now! Thanks \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127590167", "body": "I believe this needs to be set, similiar to how incremental update is handled above. I noticed the completion doesn't seem to be working correctly when typing in insert mode in TypeScript files - I think this may be the root cause. (For example, typing `window` on a new line behaves differently on this branch vs master).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127590167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127609777", "body": "Sorry you have a merge conflict here - I moved `NeovimInstance.ts` to the `neovim` folder. Most of the code is the same though, so hopefully this can be brought over to that new file without too much pain. Let me know if you want help here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127609777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/131526059", "body": "Oh cool! I just added a `neovimInstance.chdir` method in my PR (#577), but I missed adding the `!` - that's a good call.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/131526059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/131526079", "body": "We might want to make this a helper method, like `isInstallDirectory(process.cwd())` - we might need to differentiate the logic a bit between platform. I believe for Windows this should work, but for OSX and Linux this logic might not be quite correct. Refactoring it to a method will help encapsulate this without the if getting too crazy.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/131526079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/131526102", "body": "Also, we may want to move this check up, as it looks like it is only in the `Git` strategy. This could be problematic because, if the install directory is not controlled by git, we wouldn't hit this bookmark logic.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/131526102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132788036", "body": "I like that you consolidated this strategy, to reuse the existing code path (and just have `git` be another search command). Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132788036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132788385", "body": "Could you please change this to 'Add Bookmark' with a description of 'Opens configuration to add a bookmark.'?\r\n\r\nIt'd be cool if the 'Open Folder' option was here too!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132788385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132793037", "body": "> oh I forgot to add that, I did on my other commit but I abandoned it because I started going in a different direction.\r\n\r\n> And I will add an open folder option as well.\r\n\r\nCool, thanks!\r\n\r\n> Also, do you want to test out my binary? I don't know how to add it to the install or where, I' would assume in bin...\r\n\r\nHmm, do you have a repo for it somewhere? And does it work on Windows? I would be interested in a fast search program. I'd be interested in how it compares to [RipGrep](https://github.com/BurntSushi/ripgrep) - I was thinking about replacing the default strategy with that (and bundling it with Oni) at one point.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132793037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133721347", "body": "Yes, good point, thanks! I just added a check for it around the keys that we are strong-arming into clipboard behavior when this setting is enabled (so disabling it should actually work now). This will be an interesting case for us to untangle with the input binding work, as:\r\n- These should be applied as defaults (prior to loading the keybindings), if the `editor.clipboard.enabled` setting is true.\r\n- There will be conditional applications based on the platform (Windows vs OSX vs Linux) - not too different from how we handle default configuration values today, though.\r\n- They will need to be filtered / enabled based on the mode, and either execute an Oni-side command (`editor.clipboard.paste`), or a new set of keystrokes to Neovim (`y`). ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133721347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133959023", "body": "Unfortunately this may cause problems. This is used in our client implementation of the \"Language Server Protocol\" (https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md).\r\n\r\nThe `TextDocumentItem` is used to notify the language server that the file has changed, and it should update its in-memory representation. This is important for stuff like autocomplete, enhanced syntax highlighting, etc.\r\n\r\nSome implementations rely on the `version` being incremented, otherwise they won't bother re-parsing or doing work to update that in-memory version... this would then come up as issues during completion.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133959023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133959259", "body": "Can we keep `version` here? The `version` seems like the right thing to send to the language servers, but `&modified` is definitely want we want for actually knowing if the buffer is dirty.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133959259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133959433", "body": "We could change the `modified`s here to `boolean`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133959433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133959782", "body": "(It might be more intuitive if it is a `boolean` - it would mean we'd need to convert it from a `number` to a `boolean` somewhere in the pipe - either before the action creator or in the action creator). If `modified` is a `number`, and I'm just glancing at it, it makes me think there  might be multiple modified states or something - so making it a `boolean` would make this more crisp.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133959782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134092588", "body": "Glad we can lose the `version + 1` hack here \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134092588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134645409", "body": "Thanks for going the extra mile here to wire up showing add / remove correctly, that's awesome!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134645409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134645465", "body": "Can you please clamp the dependency at `7.1.1`? (Remove the `^`)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134645465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134657165", "body": "Can we derive this from `process.execPath` or `process.helperExecPath`? This logic will work fine in the install-from-dmg case, but I see a decent amount of .zip downloads too. It'd be great if it worked in that case as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134657165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/136353472", "body": "Is it possible that `files` can be null/undefined here? Or is it always an empty array? I'm wondering if this should be in an `else` block, otherwise seems like we could get an exception on the `forEach` call.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/136353472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134120651", "body": "Me too... it's satisfying to see this chunk of special cases go away!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134120651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134120675", "body": "Since this is basically the API definition, I was thinking that:\r\n`Oni.input.bind(..)`\r\nis more readable than:\r\n`Oni.inputManager.bind(..)`\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134120675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134120752", "body": "Ya, basically if I do something like:\r\n\r\n```\r\nconst isVisualMode = () => Oni.editors.activeEditor.mode === \"visual\"\r\nconst isNormalMode = () => Oni.editors.activeEditor.mode === \"normal\"\r\nOni.input.bind(\"<C-c>\", \"someCommand\",  isVisualMode)\r\nOni.input.bind(\"<C-c>\", \"someOtherCommand\", isNormalMode)\r\n```\r\n\r\nOnly the last binding would work right now, since we clear out old bindings. That's the difference I had between `bind` and `rebind` - `bind` preserves existing bindings, but `rebind` clears them all.\r\n\r\nPerhaps it's better just to have `bind` and `unbind`, and if it ends up being a common pattern to call `unbind` + `bind`, we can bring `rebind` back as a convenience.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134120752/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141407765", "body": "\ud83d\ude05 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141407765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141633710", "body": "Update onConfigChanged to pass in the delta configuration (for convenience for subscribes)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141633710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141676576", "body": "clean up duplication of styles here", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141676576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141676642", "body": "Clean this up, and wire through the correct font for measuring", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141676642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141629219", "body": "This should come from the screen, like the other values", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141629219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141629317", "body": "There are still some boundaries / gaps present here", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141629317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141736394", "body": "This should only be applied to the root editor element", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141736394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141770594", "body": "Remove the kerning (it should really be letter-spacing anyway)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141770594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133966085", "body": "Agreed!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133966085/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133966825", "body": "Sorry, some of these notes are really raw!\r\n\r\nThe 'drilling in' to the file was, when I was testing, I'd navigate a folder structure and open a file. The file would open _in the file explorer pane_ which isn't ideal. I think if we have our 'own' directory plugin, instead of netrw, we can handle this.\r\n\r\nBut basically there'd need to be a pipeline where the file-explorer-neovim handles the <enter> key, pushes it up to Oni (or maybe Oni is just using our Input work to watch the enter key), and then it would communicate to the main neovim instance to open the file. Just need to think about that flow a bit.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133966825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133969240", "body": "Great question! I think this is a really core part of Oni, and touches on the sort of enhancements I want to build next with it.\r\n\r\nI want to keep the `IEditor` interface general enough to not depend on Neovim. This would open the door for non-Neovim editor panes, like a browser window, etc. The tough thing is, as you mention, the key emulation - making the user feel they can interact the same way. #366 touches on a few ideas there.\r\n\r\nThe real power - and differentiator to Oni --  though, is having new __renderers__ or __render layers__ on top of the Neovim Editor. What I'd like for this 'SimpleEditor' is to be able to specify a custom render strategy - sort of like how you might specify an autocmd. You could do some really interesting things with React, for example, if we build components that are basically a function of (bufferState, cursorPosition) => JSX.  And the cool thing is, if Neovim is managing the state, and you have a reasonable mapping of how the cursor position should map, the user will get to use all their bindings the same way... but have some new ways to visualize. \r\n\r\nStuff like this would also be cool for, like, turning vimtutor into a game. Maybe a text document + cursor position is the 'data model' but we render something cool on top of it \ud83d\udc7e , and the user can play through the exercises/levels using the configuration they have in their init.vim, but with a rich experience on top..\r\n\r\nSome use cases for new _renderers_:\r\n- File Explorer\r\n- Markdown Preview mode\r\n- HTML / React preview mode\r\n\r\nA _render layer_ is meant to be sort of an augmentation on top of the renderer - providing additional functionality or UI. I'd like to move some rich functionality we have today to a 'layer', like:\r\n- Autocompletion\r\n- QuickInfo\r\n- Signature Help\r\n- Error squiggles\r\n\r\nThis would help break up the monolithic `PluginManager` and over-complicated protocol there today.\r\n\r\nIn addition, there's some cool possibilities I see for other sorts of layers:\r\n- Color preview for CSS (like, showing a color box next to an item)\r\n- Git status / gutterlines in buffers\r\n- Code lens - showing more dynamic typing\r\n\r\nAnyway that's just a brain dump of some thoughts... but I think the possibility of using _existing Neovim key bindings_ with _brand new UI experiences_ is really cool, and I can't wait to try some of that out. I don't think Oni is really very far away from this, either!\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133969240/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133970223", "body": "> I'm assuming when you say extract keyboard you mean have detached from an editor and whichever editor has focus will receive the events right?\r\n\r\nThat's exactly right!\r\n\r\n> The difference would be instead of an interface have an abstract, and then have a static instance/private instance for _currentEditor, and that way you don't have to change who keyboard is sending to because it can just be _currentEditor.sendKeys() and then _currentEditor can process it based on it's overrided method but can also pull common code from AbstractEditor, thoughts?\r\n\r\nYes, I think that's a really good idea. It actually lines up a lot with what I've been thinking for an API. I'd like for plugins to know who the activeEditor is - something like:\r\n`Oni.editors.activeEditor`\r\n\r\nAs well as knowing when the editor changes - something like:\r\n`Oni.editors.onActiveEditorChanged((newEditor, oldEditor) => { ... })`\r\n\r\nBut I don't want the plugins to need to always be listening for active editor changed - I might just have a plugin that logs to the console when I change mode, like:\r\n```\r\nconst activate = (Oni) => {\r\nOni.editors.activeEditor.onModeChanged((newMode) => console.log(\"New mode: \" + newMode);\r\n}\r\n```\r\n\r\nAnd I'd want to have that work across the currently active editor, regardless of which one it is. Sounds like a similiar case to input - I might want to send input to the active editor, and not care about the implementation.\r\n\r\nSo I think it's a great idea, thanks for sharing! I'd picture refactoring this a bit and have a common core editor class as you mention (with some of the shared functionality)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133970223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133974719", "body": "Oops, I meant the `DummyPluginManager`. It'd be nice to not need to send in this object at all - rethinking the relationship between NeovimInstance <-> PluginManager and revisiting that dependency.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133974719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133998304", "body": "Yes, good points!\r\n\r\n> above with the other editors, we can have on load event with what kind of editor abstraction it is.\r\n\r\nThis is interesting, and something I'm still trying to reason about - there are specific things we can do with a neovim-editor (like send it normal mode commands, execute VimL, etc), but how do plugins reason about this vs a non-neovim-backed editor? I like the idea of having a load event or some way to know the capabilities that the editor has.\r\n\r\n> Thanks for listening to my ideas, Oni just keeps more and more in line with what I was thinking for an editor.\r\n\r\nGreat to hear :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133998304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/143084870", "body": "Regarding the `stdErrAsLog` issue - it looks like it's picked up as part of these options, so you'll need to include it as part of this object:\r\n\r\n```\r\nconst serverOptions = {\r\n   command,\r\n   stdErrAsLog: true,\r\n}\r\n```\r\n\r\nI think that should address the issue you had where it wasn't getting set / defined in the language client code", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/143084870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/144128526", "body": "I like that you factored this out to a separate method, thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/144128526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/144128857", "body": "Good idea \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/144128857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/142835609", "body": "need to revert this", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/142835609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/145231374", "body": "Clean up whitespace here", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/145231374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/145231499", "body": "Bring this back, now that the buffer updates are available", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/145231499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/149801254", "body": "@badosu - wow, nice catch, thank you! I'll update this. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/149801254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150094505", "body": "Thanks for checking and letting me know!\r\n\r\nI looked at this one and I believe `Cantarell` is actually correct: https://en.wikipedia.org/wiki/Cantarell_(typeface)\r\n\r\nLMK though if I'm mistaken here", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150094505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152112023", "body": "Thinking about this some more since the comment on #992 , perhaps we can streamline it to not require a new setting.\r\n\r\nHere's a table of the scenarios we're trying to support:\r\n\r\n| Scenario | Description | `tabs.enabled` | `tabs.showVimTabs` |\r\n| --- | --- | --- | --- |\r\n| Default tab experience | Show buffers in Oni-style UX | `true` (default) | `false` (default) |\r\n| Disabled | No tabs shown at all | `false`  | `false` (default) |\r\n| Vim tabs in Oni | Show the vim tabs, in Oni-style UX | `true` (default) | `true` |\r\n| Vim tabs, native UX | Show the vim tabs, w/o Oni UX | `false` | `true` |\r\n\r\nThe 'happy-path' IMO, is using the default experience, or turning it off - that means the 'happy-path' is completely controllable via `tabs.enabled`. I want to make sure those 'happy-path' options are very simple and streamlined to configure.\r\n\r\nHowever, the more 'advanced path' (using Vim tabs with Oni's UX, or falling back to the native Vim UX entirely), also requires toggling  `tabs.showVimTabs`, with the most advanced configuration requiring changing both `tabs.enabled` to `true` and `tabs.showVimTabs` to `false` (enabling the native vim UX). I think that is pretty reasonable, as long as we document it. \r\n\r\nThat would simplify the configuration setting and still support the ability to 'eject' and use the default VIM tab UX - does that seem reasonable?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152112023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152174485", "body": "> the only problem is that to enable a specific configuration I want I'll have to check a 'truth table'.\r\n\r\nFair criticism \ud83d\ude04 \r\n\r\nPerhaps this is clearer:\r\n`tabs.enabled`: behaves as-is today\r\n`tabs.mode`: `'buffers'|'tabs'|'native'`\r\n\r\nIt's basically your suggestion above - just renaming `tabs.showVimTabs` to `tabs.mode`. I realized the only real issue I had with the specifying the behavior directly was being confused by the case `tabs.showVimTabs`: `'buffers'` - but if we rename the setting, it alleviates my concern. Only downside is changing the setting would be a breaking change.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152174485/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152387588", "body": "I think that there is one case we'd still need it - if the user wants to disable the tab line completely. I want to make sure there is an easy way to 'turn off' the tab line. It looks like our current set of options support buffers, tabs, and 'native' vim rendering - but not a clear way to turn off the tabline.\r\n\r\nTurning off / hiding the tabline is different than setting `tabs.mode` to `'native'`, because in that case, we turn off `ext_tabline`, and hand over the responsibility of rendering the tabline back to Vim - so it doesn't actually 'turn it off', just lets Vim render it. So what we're missing currently is that 'turn off' or 'hide' story.\r\n\r\nI can see two ways to preserve this 'hide' functionality:\r\n-  __Keep `tabs.enabled`__- it'd basically be the same as your changes today, except we'd want the `ext_tabline` option to be controlled only by the `native` setting - if `tabs.enabled` is `false`, we'd want to keep it 'externalized' (so vim doesn't try and render it, and it'd be hidden). \r\n- __Remove `tabs.enabled`, add a `'hidden'` or `false` value to `tabs.mode`__ - when the `hidden` value is set, we'd keep `ext_tabline` set to `true`, but not render the Oni tab UI.\r\n\r\nI'm okay with either approach, whichever one is more intuitive - the second one means we can completely  remove the `tabs.enabled` setting, and address confusion about how `tabs.enabled` and `tabs.mode` set to `native` relate, so it seems like that might be better.\r\n\r\nBasically I want to make sure if someone asks \"How do I turn off the tabline?\" we have a clear story for doing so \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152387588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150909555", "body": "Is it possible to use the `async` version of the API? I'm on a crusade to try and minimize `sync` calls since they can sometimes cause stutters in the UX. \r\n\r\nIn this case, this would be called when opening up a file, and there are a few other bottlenecks we have at that point.\r\n\r\nI'm thinking of a couple alternatives:\r\n- We could switch to using the async version here, but that might be painful, because we'd need to wire up `async` and `Promise` up to the call sites\r\n- We could call the sync version once on startup. I'm looking at how we can streamline our startup (#938), and we could potentially switch to using the async version at that point, and execute in parallel to some of our other startup tasks. But for now, we could just call the sync version on startup to seed the values. It shouldn't change while we're running, AFAIK", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150909555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150910097", "body": "Ah ya, I was looking to see if there was a DefinitelyTyped definition for this (`npm install @types/shell-env`), but unfortunately there isn't - so we'll have to go with this plan! Thanks for figuring this out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150910097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150910304", "body": "Could you please set the version numbers to fixed versions? (IE, `0.3.0` instead of `^0.3.0`).\r\n\r\nSometimes we get burned by dependencies updating and breaking us.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150910304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153296001", "body": "This mainly impacts the integration tests - we'll be able to see the output of the `console.log` while the test was executing.\r\n\r\nFor debugging Oni, you should be able to use `console.log` today and see it visible in the output:\r\n![image](https://user-images.githubusercontent.com/13532591/33284856-48e58eb2-d365-11e7-856d-1ddce22dca7a.png)\r\n\r\nTo confirm I just added a quick input binding with: \r\n```\r\nOni.input.bind(\"<enter>\", () => console.log(\"hi from the console\"))\r\n```\r\nAnd then pressed `<enter>` in the editor and saw the output.\r\n\r\nIf you're not seeing it, one thing to check is the settings up here:\r\n![image](https://user-images.githubusercontent.com/13532591/33284780-0e0414da-d365-11e7-9c2f-e6042face8af.png)\r\n\r\n\r\nSometimes I forget to clear the 'filter' or have it set only on warn/error, in which case you wouldn't see the logs. LMK if you're still not seeing them; would make debugging very painful..\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153296001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153615688", "body": "Looks like this could be simplified with `Math.abs`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153615688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153615733", "body": "Cool, seems like this fixes the issue!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153615733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152165748", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152165748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153958964", "body": "Looks like `yarn` autoformatted all of these after running `yarn upgrade oni-api@0.0.6`, but there is no functional change", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153958964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/154768953", "body": "You may not need to specify the `props` here anymore - since `CommandLine` is a connected component, it'll get these from the store via `mapStateToProps`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/154768953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/154769116", "body": "Cool, thanks for thinking about how to type this. Some of the cases from Neovim are tricky!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/154769116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/154769385", "body": "We might want a configuration for this - something like `editor.commandLine.mode` with `'oni'` or `'native'` as options (kind of like what we have for `tabs.mode`, and `editor.comlpetions.mode`). ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/154769385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155937226", "body": "Cool! I hadn't tried this yet, was actually looking for an example (will be helpful for the file explorer because of all the node-callback APIs)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155937226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155937230", "body": "Nice, thanks for cleaning up and refactoring this to use `async`/`await`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155937230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155655707", "body": "Instead of distinguishing between `currentBuffer` (which is an `IBuffer`) and `existingBuffers`, perhaps it would simplify things to have just a `buffers: IBuffer[]` an an `activeBufferId`?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155655707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155655897", "body": "Following from the above comment in the ActionCreator - if we used a single array, as opposed to differentiating the cases, it seems like the lower `reduce` would handle both the current buffer + active buffer cases.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155655897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155656194", "body": "As mentioned in the comments, unfortunately Python isn't an option for us (because there is no guarantee it's available on Windows). Lua might be an option though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155656194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155656298", "body": "Do we need all these `v:null`s here? I'm thinking that it might be worth having a different 'type' as opposed to trying to fit this to the eventcontext", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155656298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155656423", "body": "Interesting - are there any cases we could hit this?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155656423/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155659554", "body": "Ah ya, well it does work out of the box on OSX (and Linux too I believe) so it's an easy assumption to make! \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155659554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155902536", "body": "Cool, it's nice we don't have to special case the active buffer anymore!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155902536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156537722", "body": "I believe the removal of this line is what is potentially causing the problem. Note that before this line of code was called for _all vim events_ - not just `BufEnter`. It looks like as part of the refactoring we split this out into the BufEnter/BufLeave event handlers, but unfortunately that's not functionally equivalent (because this code also gets called for other events)\r\n\r\nI think for now we'll have to keep the `_onVimEvent` handler for now, but just for the code above:\r\n- the `setWindowCursor` action\r\n- the `syntaxHighlighter.notifyViewportChanged`\r\n- the `bufferManager.updateBufferFromEvent`\r\n\r\nLong-term, ideally, we'll move these out to strongly typed methods, too - but I think it's good to keep it incremental. The refactoring already makes the positive step of factoring the bulk of the conditional code out to strongly-typed handlers, which is great.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156537722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156827863", "body": "It looks like this is another case where these methods - `UI.Actions.setWindowCursor` and `this._syntaxHighlighter.notifyViewportChanged` - aren't going to be called as frequently as before. Prior to this change, they were called for every event. The `UI.Actions.setWindowCursor` is particularly sensitive because there are lots of UI pieces that depend on it being set (ie, all the quick info and context menus).\r\n\r\nI think it's risky to change this behavior as part of this change - could we make `this._updateWindow` called for every event, as before? Similiar to what you did for `this._bufferManager.updateBufferFromEvent`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156827863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156828211", "body": "As opposed to using the switch here, could we hook the `_onBufEnter` event by using the strongly-typed event, like:\r\n\r\n`this._neovimInstance.autoCommands.onBufEnter.subscribe((evt) => this._onBufEnter)`? LIikewise for `BufWipeout` and `BufWritePost` - this will help ensure we can leverage the typed events for these.\r\n\r\nThis way, the only stuff happening in here is the stuff we were doing on every event anyway - the `this._bufferManager.updateBufferFromEvent`, the `UI.Actions.setWindowCursor`, and the syntax highlighter change. And later, in another change, we can refactor those out, and remove this untyped event completely.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156828211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157072503", "body": "Hmm, does this check work? I thought it needed to be `BufEnter`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157072503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157079229", "body": "Ah ok, makes sense!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157079229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150609496", "body": "Oops, I was using this as debugging to see what `marked` returns \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150609496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150610525", "body": "A good next step would be to listen to the buffer update events here - we could do:\r\n\r\n```\r\nOni.editors.activeEditor.onBufferChanged.subscribe((evt) => { console.log(\"Buffer Changed\"; debugger; })\r\n```\r\n\r\nThat way, if you have the debugger open, you can inspect `evt` and see the values for it. We can get the filename + filetype (language) and decide if we should render a preview for it.\r\n\r\nIf we should, we can get the content via the `contentChanges` array, and then render it out to our component using `marked`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150610525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152147604", "body": "There might be a couple classes you want to add here: `className=\"stack enable-mouse\"`. The first one causes it to be sized to fit the editor window (it sets `position: absolute` plus clamps the bounds to the parent), and `enable-mouse` will allow it to pick up mouse events.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152147604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152147704", "body": "Once you have the classnames below, you should be able to set `overflow-y: auto` on this element, which will cause a scrollbar to show up when it expands across the box (as well as `scrollTop` for auto scrolling)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152147704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/158424466", "body": "Cool, seems like this what you were mentioning - I need to try this out in #1159 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/158424466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/158589954", "body": "For this key - could we just use `toolTip.id` without the `i` parameter? Some of the UI in the tool tips is sensitive to repaints (like having both the _rename_ and _quickinfo_ dialog open). There's actually a bug now where if you open Rename, and the QuickInfo pops up, the Rename gets re-rendered and the focus gets messed up... If we just use `toolTip.id`, I believe it will fix that bug.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/158589954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/158589987", "body": "I'm not sure if this is actually the correct fix for this - this seems like it could cause aggressive re-paints for the buffer scroll bar (which has caused performance issues). I think we may want to try putting a key on the scroll bar itself (or even the `ActiveWindow`). Could we track this in a separate issue / PR?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/158589987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156832978", "body": "Is there a reason we specify a max for priority 1, but not for the other cases? It's not clear to me what makes this one different.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156832978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157651093", "body": "Cool, thanks for porting these over!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157651093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157651227", "body": "Cool, I like that you factored out this responsibility to a component", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157651227/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157651600", "body": "If we're making the priority configurable - maybe we don't even need to pass the priority in as part of the API now? If the configuration is the source of truth, maybe we could just use that. In addition, we could leverage the 'id' that we pass in here - like `statusbar.priority': { \"oni.status.workingDirectory\": 1}`. The nice thing about that is it makes it easy for plugins to then also be prioritized in the same system.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157651600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157651668", "body": "I wasn't quite sure why we need to clone the element here? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157651668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157652016", "body": "I like you specified this in the configuration. Looks good! I left a comment below that perhaps with this, we don't need to specify the priority anymore with `createItem`? It seems like right now, there need to be two ids associated with a statusbar item - one in the configuration, and a separate one we pass to `Oni.statusbar.createItem` - I wonder if we could consolidate those?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157652016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157652333", "body": "Awesome!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157652333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157654278", "body": "Got it, I see, so this is used to augment the set of props we send to the child (with the `passWidth` callback and `hide` value). Makes sense - thanks for the explanation!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157654278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/158559744", "body": "Using the global configuration object is actually what is causing the test failure. We pass a `MockConfiguration` to the LanguageManager, but that doesn't get passed to the status bar object here. Instead of using the global configuration object, we should pass in a `Configuration` to the constructor here. That will help insulate this class from global state, and get the test to pass \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/158559744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159577084", "body": "Unfortunately this `width` change is a bit problematic. The issue is that when we render whole tokens, the spacing between the letters isn't taken into account. You can see how the cursor is slightly off, and it gets worse letter-by-letter, until it's completely off by the end of the word:\r\n![width-distortion](https://user-images.githubusercontent.com/13532591/34549686-6aedf504-f0bf-11e7-9a27-df4a850ff01e.gif)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159577084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159577184", "body": "I tried a fix along these lines, and was able to address this particular issue by adding a 'kerning' value to add space between all the letters - using the difference between `Math.ceil(rect.width)` and `rect.width`. However, it actually looked really bad (unfortunately), so although it did address the cracks / subpixel rendering, it looked pretty bad.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159577184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159577219", "body": "The height fix seems reasonable to me, though - we add a pixel padding in between the lines anyway, so some fraction to round it up to a whole number is good. Thanks for looking at this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159577219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159535479", "body": "Just curious - why do we need this timeout here? It feels a bit slow to me when I press the `:` key (like there is some perceptible delay) - I think it may be due to this? \r\n\r\nI tried setting this to `0` and it seemed to work OK, which seemed to suggest it might not be necessary anymore - but it could also be the case that I missed the scenario in which it is needed \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159535479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159544658", "body": "Got it, thanks for the details!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159544658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159556850", "body": "Oops, sorry I missed your other message. Yes, that quick flicker is painful - I didn't realize that it actually pops up through those command-line mappings. It's brutal especially if you use them frequently.\r\n\r\nI think ideally, it would only show up via an explicit trigger, like when the user specifically presses `:`, `\\`, `?`. In the case of mappings, I'm not sure it makes sense to even show it - I didn't expect that behavior. I wonder if it would make sense to log an issue against Neovim for that case?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159556850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160225269", "body": "I really like the strategy overall of making the dependencies explicit - but I wonder for this class in particular if there is any benefit, as it is essentially wrapping the `console` object (which is itself a singleton).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160225269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160226043", "body": "This is a really creative idea! I wonder how it would scale to modules / plugins created outside the repo, though? For example - if `oni-plugin-markdown-preview` lived in a separate repo, we'd still want to test it. This also has a dependency on our settings for plugin paths, which might make it easy to miss a plugin under test. We'd probably want to be able to run `npm run test` on it, at least in that case - so I'm wondering if that would be sufficient for now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160226043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160226128", "body": "Thanks for making the arguments / dependencies explicit!  \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160226128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160227284", "body": "It's really cool you're thinking about this! Per the comments - I wonder if we will actually need to mock this completely, though?\r\n\r\nIn the case of a CiTest, we have a 'real' `Oni` api object available - for validating the end-to-end.\r\n\r\nFor a unit test, I'm thinking it might be preferable to use the specific mocks that the class under test needs - like instead of passing the entire API object, we pass a mock editormanager/windowmanager/colors. This helps make the dependencies explicit and minimizes the surface area. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160227284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160283746", "body": "In this case, where there is not an existing `mainWindow` instance, do we need to create a window? Or is some other codepath hit that we expect the window to be created?\r\n\r\nI tested this out, and in the case where I had closed Oni (but it was still in the dock - so there is a `main` process but no `mainWindow`/renderer process active), and I tried to open a file with Oni, it never opened - makes me think perhaps we need to create a `BrowserWindow` here?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160283746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160288503", "body": "Haha cool, thanks for checking it out \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160288503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161064036", "body": "Thanks for the change, @Akin909 ! \ud83c\udf89 \r\n\r\nI believe we might be setting the theme already here, so this line might not be needed:\r\nhttps://github.com/onivim/oni/blob/d60fa91374b4d3f30730d96d6b635cbf56c3c3ed/browser/src/Services/Themes/index.ts#L12\r\n\r\nThe `ThemeManager` actually has an event `onThemeChanged` - maybe we could listen to that either in `Shell.tsx` or in `browser/src/index.tsx`? The reason I'm thinking about those places as opposed to `NeovimEditor` is that, eventually, we might have more than one way `NeovimEditor` instance - like for #545 . So in that case, this ccode path may get called multiple times - which in turn would mean setting the colors / themes multiple times. There's only ever one 'Shell' though at the moment.\r\n\r\nI was actually trying to remove all the `Shell` references from `NeovimEditor`, but the title one is stuck there at the moment. But I'm hoping to get those out to fully support that 'multiplexing' scenario \ud83d\ude04 \r\n\r\nLet me know what you think!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161064036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160578974", "body": "I'm wondering if this should return a `Promise`? In other words - I'm not sure if we will properly handle all of the commands we send if we are sending them immediately when the window is created. I believe we might need to wait for the window to be fully initialized before we send some of these commands.\r\n\r\nAn example of this would be `menu-item-click` and `open-files` - these are listened for in the `NeovimEditor` class, which might take a bit of time after opening to be initialized and start listening for those commands.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160578974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160841088", "body": "Ah ok, luckily for us, there is a way we can make `createWindow` async - or at least return a `Promise` - to help us out here.\r\n\r\n> I thought maybe of having the ipcMain process send an event when neovim is initialised and then responding to it in an event handler in the main process sort of the reverse of what we've been doing for the most part so outside in, not sure if thats possible\r\n\r\nYes, definitely - this is a good idea!\r\n\r\nWe already hook an event today to figure out when the initialization happens:\r\nhttps://github.com/onivim/oni/blob/c01ae065c853e50471b7e4b17f4cadbb019fe7f7/main/src/main.ts#L141\r\n\r\nWhat we could do is the following:\r\n- From `createWindow`, we return a `Promise`\r\n- In that `did-finish-load` handler (or our handler we add), we resolve the promise we returned\r\n- We gate the command handlers on the `createWindow` promise (using `await`)\r\n\r\nThat should be enough to make things work. If the timing still isn't quite right, we could send an explicit event from the browser process -> to the main process letting it know that we're completely initialized.\r\n\r\nAs you mentioned, though, we might want to explicitly send a message up from the renderer process. We could do that somewhere here: https://github.com/onivim/oni/blob/c01ae065c853e50471b7e4b17f4cadbb019fe7f7/browser/src/index.tsx#L139\r\n\r\nAnd have the main process listen for that event, in order to resolve the promise.\r\n\r\nHope that helps give you some ideas - let me know if you have any questions on the specifics. I think we can get this working though \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160841088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161606877", "body": "This approach looks great to me - thanks @Akin909 !", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161606877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161607395", "body": "Looking at this - I'm wondering, will this be called for _every_ window? In other words, if `createWindow` is called multiple times, will this event get registered multiple times, and send the `delayedEvent` multiple times to `mainWindow`?\r\n\r\nI'm wondering if this should be `ipcMain.once` instead of `ipcMain.on` to protect against this. The existing `rebuild-menu` event might have the same issue, too, but it seems less critical. For this event, it seems like if we call `createWindow` with a delayed event, and then we call it again with no delayedEvent, the listener in the first `createWindow` call would send us that original `delayedEvent` again, to the new window.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161607395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161607725", "body": "What is the purpose of these changes to `oni.sh`? Are they related to the menu changes, or fixing a different bug? Just curious.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161607725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161933889", "body": "Are we sanitizing this `html` anywhere? In the markdown-preview plugin, we're using the `dompurify` library to sanitize the HTML. We want to avoid this type of RCE security issue that Atom hit! https://statuscode.ch/2017/11/from-markdown-to-rce-in-atom/", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161933889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161933943", "body": "Nice, thanks for moving the colors to use the themes available in our `styled-components` \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161933943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162418481", "body": "Ah ok, interesting, thanks for pointing that out. Reading through the docs, it seems that should be sufficient.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162418481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162746962", "body": "Seems like this is only build the browser - would it make sense to run `npm run build && npm run lint` to validate all the projects we build?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162746962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162747175", "body": "Does prettier make these revisions to the `json` file? I notice that there is some tool (I think its `yarn`) that un-does these edits.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162747175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162747526", "body": "Thanks for setting up these defaults! \ud83d\udcaf ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162747526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/163317072", "body": "Yes, exactly! Most of the ci tests rely on having Neovim around - since there wasn't an `nvim` to pick up, those would all fail.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/163317072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/163007486", "body": "Thanks for hooking up the file icons here!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/163007486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/163007680", "body": "We could add a `buffer.delete` command to `NeovimEditorCommands`, which has access to the `neovimInstance` to execute the command directly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/163007680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/163008163", "body": "Thanks for creating this as a plugin! Great exercise for our plugin API.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/163008163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164020697", "body": "This is where I was mentioning you can add an `enabled` filter - like - so you could bake in the filter to the command, instead of having the user needing to know to apply the filter. It definitely is more convenient to do it here, so that we always do the 'right' thing - and the user doesn't need to think hard about it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164020697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164232933", "body": "Could we have this call into the `activeEditor`'s `openFile` method, as opposed to duplicating the logic in `NeovimEditor`'s `openFile` method? I'd like for the `EditorManager` to be agnostic to `Neovim`, if possible - ideally, the `EditorManager` could support all sorts of `IEditor` implementations - even ones that didn't depend on Neovim. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164232933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164233136", "body": "If this will always need to be done along with the `bufferDelete`, perhaps we should just push this inside the `bufferDelete` method?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164233136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164233308", "body": "In addition - can we check if the current buffer's id (`activeEditor.activeBuffer.id`) is equal to the one we're deleting? If I understand correctly, we only need to do the `bn` if the buffer is the same, so if `activeEditor.activeBuffer.id === menu.selectedItem.metadata.id`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164233308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164233587", "body": "Could we add a common 'prefix' for these, like:\r\n````\r\nname: \"Buffer: Delete\",\r\ndetail: \"Delete selected buffer\",\r\n```\r\n\r\nTrying to organize the commands a bit \ud83d\ude04 \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164233587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164242889", "body": "Yeah, no set standard yet, but here's what I'm thinking:\r\n\r\n- command: camel case / lowercase - ie, `workspace.openFolder`\r\n- name: noun + verb, capitalized - `Workspace: Open Folder`\r\n- detail: sentence case - `Set a folder as the current workspace` \r\n(not a great example, but hopefully that helps).\r\n\r\nI think the commands you have look good - I was thinking for the `name`/`detail` fields.\r\n\r\nLike looking at the command palette we have today:\r\n![image](https://user-images.githubusercontent.com/13532591/35464236-c5f81064-02a9-11e8-95bb-0af13ef5eefb.png)\r\n\r\nThe 'Workspace' ones look good to me, but the 'Show Errors' looks like it's just kind of floating. It'd be nice to group it with some other error/diagnostic related commands (maybe like `Errors: Show`, `Errors: Go to next`, `Errors: Go to previous`, etc..)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164242889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162415411", "body": "Is there a case where we could not the summary, but we could get the branch? If not, it might make sense to simplify and consolidate these try/catches", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162415411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164027198", "body": "Need to remove this", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164027198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164027220", "body": "Need to sync up the formatting changes, there are a lot here that are unrelated to my change", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164027220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164928630", "body": "Would it make sense for us to check this on buffer enter? I'm thinking of the case where I open Oni, with no workspace open, and then open a file - do you think we should try and `auto-detect` the workspace at that time?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164928630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164928651", "body": "Awesome, looks like a great set of defaults!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164928651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164928076", "body": "I'm wondering why we need separate `width` and `height` here - is there a way we can simplify/consolidate these? Ideally, `NeovimEditor` should only need to be concerned with its own width and height. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164928076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164928486", "body": "(So in other words - it seems like we should only care about the width and height of the editor)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164928486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165541196", "body": "Nice, thanks for cleaning this up! Doesn't make sense anymore, now that the editor is more self-contained.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165541196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165541209", "body": "Glad this is simplified now!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165541209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164305848", "body": "Great set of test cases! Thanks for going the extra mile and implementing these \ud83d\udcaf Excellent foundation for us as we fix additional bugs or add more functionality here. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164305848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164305864", "body": "I'm glad we have this core functionality under test now - in addition to the tests exercising the new functionality below \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164305864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164305874", "body": "Thanks for cleaning these up!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164305874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164305882", "body": "Awesome \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164305882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164306339", "body": "Do we need an `await` here, since the `checkOpenCharacter` is `async`/returns a Promise?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164306339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164306390", "body": "For the tests, it looks like `MockBuffer` doesn't have a `cursor` property yet - we may need to add it to get the tests working here / exercise this completely.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164306390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165825333", "body": "Looking at the logs from the automation, I do see one bug here - we should either be `return`ing this or `await`'ing it, so that we're actually blocking.\r\n\r\nWhat's happening here is that we're not really blocking the input - so we're allowing the editor to accept further input, which might cause unpredictable races.\r\n\r\nIn the log I saw from automation, with the resulting string of `window.setTimeout()()`, this could actually explain why we're seeing it. When the first `(` is pressed, we start the logic for `checkOpenCharacter`, but we don't wait for it to complete. In the meantime, a second `(` comes in, and if in the first `checkOpenCharacter`, we haven't placed the cursor, we're going to get unpredictable results. So it seems like there is an actual race condition here that may be impacting the CiTests.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165825333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165538335", "body": "Interesting - did you need to do anything special to get `describe` available here? I think this depends on `mocha` and I'm not sure if we have it in the context of these tests, which are really running inside oni", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165538335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165538764", "body": "Is this the API you were asking about? If so, I'm totally on board. \r\n\r\nThis is something I've wanted for a while - the long-term vision for the plugins is to have a way for them to export functions that can be used by other plugins, or in a user's configuration, etc. Having a `plugins.getPlugin(\"<plugin-id>\")` seems like a reasonable way to accomplish this. I'd even like to move some of Oni's core functionality to plugins like this - for example, it'd be cool to move our configuration story over to a module/plugin, and have `Oni.configuration` just be a convenience method for `Oni.plugins.getPlugin(\"oni-configuration\")`. Not something I'd expect to be implemented as part of this - just wanted to share some related thoughts \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165538764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166814842", "body": "Minor nitpick - should this be `unrenderedContent`?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166814842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166814959", "body": "Cool, I like this a lot! Some interesting possibilities this opens up... like library plugins that provide common functionality, or plugins that supply functions that you can use with `input.bind`, etc. Great way to get access to the plugin to test, too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166814959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166815224", "body": "There's actually a similiar utility in `test/ci/Common.ts` called `navigateToFile` - we might want to see if we can reconcile that with this?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166815224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167378640", "body": "@Akin909 - let me know if you have feedback on this line, maybe it will help just letting people know that we're open to design discussions prior to implementation (hopefully will save some time/decrease friction)\r\n\r\n(And I figured while I was adding this, I'd just braindump all the other notes I had too - FYI the other bullet points aren't related to #1443, just things I had in mind for a while - figured I'd add it all in one go.)\r\n\r\nOf course, let me know if you have any feedback or suggestions on any of the other points too!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167378640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167379466", "body": "Oops, thanks for catching that! Fixed", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167379466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167382051", "body": "Awesome, thanks @Akin909 ! Derp, just fixed the typo, glad you caught that \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167382051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167331933", "body": "Does this line need a `-` for a yaml array?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167331933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167332043", "body": "It looks like this `on` block got removed from the previous provider - we'll need to duplicate it between both providers", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167332043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167332871", "body": "I guess it does make sense to use the `onivim@onivim.io` e-mail address here. Is there any other authentication we need? Maybe an ssh key? \r\n\r\nIt looks like we can create one, and then encrypt it with Travis CI, so that it is secure but TravisCI still gets it (details here:https://oncletom.io/2016/travis-ssh-deploy/)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167332871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167364056", "body": "Sure, if you'd be up for being a `co-maintainer` and setting up the encrypted private/public ssh key, that'd be a huge help!\r\n\r\nAlso, I did create an account - `onivim` with `oni@onivim.io`, but haven't set up any keys yet. @badosu - could you please add us both as co-maintainers?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167364056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167364382", "body": "We'll still need this condition here:\r\n`condition: $TRAVIS_OS_NAME = linux`\r\n\r\nOtherwise OSX builds for tagged commits will fail, since they will try and run the AUR deploy script too. If we add that condition line, that will gate the provider so the script will only run on Linux", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167364382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167404842", "body": "Oh ya, good point!\r\n\r\nI was thinking that shallow merging may be acceptable for this, _if_ we go by order of precedence. \r\n\r\nFor example, if the theme defines:\r\n```\r\ntokenColors: [{ scope: \"variable.other\", settings: { bold: true, foreground: \"rebeccapurple\" }]\r\n```\r\n\r\nAnd the user defines:\r\n```\r\n'editor.tokenColors': [{ scope: \"variable.other\", settings: { italic: true, foreground: \"red\" }]\r\n```\r\n\r\nWe'd end up with:\r\n```\r\n [{ scope: \"variable.other\", settings: { italic: true, foreground: \"red\" }, { scope: \"variable.other\", settings: { bold: true, foreground: \"rebeccapurple\" }]\r\n```\r\n\r\nAnd when we go to apply themes, we'd iterate through the array, find the first match, and apply those settings. So if we're applying highlight for `variable.other`, we'd find the first match, and use those settings (which would be the first index in the array). The downside with this approach is we wouldn't _inherit_ previous settings by doing the merge (ie, the `bold: true` wouldn't get set), but I think that's a reasonable constraint.\r\n\r\nLet me know what you think though!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167404842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167408446", "body": "> , I wouldnt expect that half filling out a config setting or at least I wouldn't realise it was half filled out to suddenly apply my one change but to suddenly lose everything else aka the defaults or to have it not take my settings plus I think the overhead of someone using the tokens to have to wonder/work with duplicates is probably going to cause issues somewhere at some point\r\n\r\nMakes sense! I think it's reasonable to add this functionality. It'd be a great candidate for a standalone PR scoped to implement that - ideally we could have an individual PR  that implemented  a unit test in `TokenColorsTest` documenting this behavior (specifying a token in both config and theme, and validating we get the correct result), and the implementation changes to make that work! It'd make sense to have a function on `TokenColors` like `getTokenSettings(scopeName: string): TokenColorSettings` that would implement this.\r\n\r\nAlso, as an aside, one potentially way to implement this would be to `reverse` the scopes and then `reduce`, merging in matching scope selectors settings, like:\r\n\r\n```\r\nconst collectedSettings = tokenColorsInReverseOrder.reduce((currentSettings, newValue) => {\r\n   if (!matchesScopeSelector(newValue)) { return currentSettings }\r\n   return { ...currentSettings, ...newValue.settings }\r\n}, DefaultTokenSettings)\r\n```\r\n\r\nBut that's just an implementation detail - we could do a deep merge as you suggest too.\r\n\r\nI'll keep it simple in this PR to unblock the remaining work, but I agree that it would be more convenient to have the override behavior.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167408446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167724515", "body": "Sorry I missed this - that is my understanding though, that the order is preserved. We at least rely on that in a few other places too \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167724515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166498519", "body": "Could we move this logic to `NeovimInstance` as `getHighlights`? This way, we don't need a public `getVimHighlights` method, as I'm hoping to keep the `Editor` interface as agnostic of Vim as possible.\r\n\r\nOnce we have that, we could change below to:\r\n```\r\nconst vimHighlights = await this._neovimInstance.getHighlights()\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166498519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166498663", "body": "I wonder why we need to look up `editor.tokenColors` here? Could we use a fixed array of `[\"Function\", \"Identifier\", \"String\", \"Character\", etc], and then convert them to scopes?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166498663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166498748", "body": "I might've had the reverse in mind - we get all the Vim highlights, convert them to scopes + colors, and then use those for setting syntax highlights.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166498748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166498900", "body": "It seems like we're actually setting the token colors here, so we might want to rename this to `setTokenColors` instead.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166498900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166499482", "body": "Ideally, we could make the ThemeManager agnostic of Vim. The `highlight group` is really an implementation detail - it'd be great if we could make this care about color/bold/italic/background-color, and then leave it up to the `setHighlights` in `Buffer` to rationalize highlight groups from that. It sounded like there might be challenges here though - let me know what sort of hurdles you ran into.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166499482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166499643", "body": "The changes for the rendering look great to me! Thanks for all your work here. I wonder if we could split this up into two changes? It seems like the synchronizing highlight groups has some challenges, but we could at least bring in the rendering with the `editor.tokenColors` we have today", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166499643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166499784", "body": "Ah ya, this is where I was hoping we could specify color/background color/bold/italic etc (and in the user's config / theme as well) instead of the vim highlight group. The vim highlight group was really just a crutch to implement.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166499784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166499836", "body": "Nice! \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166499836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166499978", "body": "Interesting, I wonder if this is related to an issue in my PR #1298... perhaps I'm hitting this too!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166499978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166500136", "body": "Thanks for all your work here to get this set up! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166500136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166500250", "body": "Cool, this might be helpful for other config settings as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166500250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166817643", "body": "Thanks for moving this!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166817643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166818884", "body": "The fact that the system end-to-end still needs to know about the Vim highlight group means we haven't fully decoupled it yet. It'd be great if we could break our dependency on this, because it adds complexity along the entire stack. If we can just speak in `tokenColors` without having to worry about resolving a fallback, that would make life easier everywhere we use this.\r\n\r\nOne idea we could try is to _invert_ that responsibility. Right now, we create a bunch of `tokenColors` and specify a `fallback`. What if, instead, we create a set of default `editor.tokenColors` from this method?\r\n\r\nFor example, in `QuickInfoContainer`, we have this list of scopes:\r\n```\r\n...\r\n       \"variable.language\": {\r\n            scope: [],\r\n            settings: {\r\n                fallback: \"Identifier\",\r\n            },\r\n        },\r\n        \"variable.parameter\": {\r\n            scope: [],\r\n            settings: {\r\n                fallback: \"Identifier\",\r\n            },\r\n        },\r\n```\r\n\r\nCould we instead, here, specify a mapping like:\r\n```\r\nconst VimHighlightGroupsToScope = {\r\n\"Identifier\": [\"variable.language\", \"variable.parameter\"]\r\n}\r\n\r\nAnd then, from this method, return essentially that full set?\r\n```\r\n\r\nWe're basically inverting the dependency, and letting `NeovimInstance` do the job of converting completely to the `ITokenColor` world. Then, if this is the default set, they can naturally be overridden by the theme and user configuration. \r\n\r\nThis gives us a few benefits:\r\n- Consumers don't need to worry about resolving `fallback` or what `fallback` means\r\n- We don't have to reimplement the logic in `QuickInfoContainer` in different places\r\n\r\nI would prefer to not have the vim highlight group as part of the `ITokenColor` model (even as `fallback`), because of the coupling it creates for the consumer - the consumer has to know about vim highlight groups to work. It seems like we can push that logic into `getVimHighlights` by inverting how we create our token colors - letting that function give us a full set, instead of the consumer needing to reverse map.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166818884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166819531", "body": "One thing that is a little bit confusing here is that the `ThemeManager` is operating at a different level of abstraction for `tokenColors` vs `colors`.\r\n\r\nFor `colors`, the `ThemeManager` is mainly responsible for loading the colors and getting the defaults. The `Colors` calls in `Services/Colors` brings together the theme colors with the user's configuration, and handles the merging (it's basically a layer on top, that coalesces it with the configuration). It's main responsibility is listening for both the `ThemeManager.onThemeChanged` and `configuration.onConfigurationChanged` to pick up color changes in either place.\r\n\r\nFor `tokenColors`, the `ThemeManager` is doing the merging of the user configuration, which is more responsibility than it has with `colors`. I could see us later wanting to have some similiar logic as for `colors` - where we listen to configuration changes and update them. It might be worth decoupling that / abstracting that like we have for `colors`, at some point.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166819531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167103898", "body": "With the latest change, is this still needed?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167103898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167105800", "body": "Hmm, I don't understand how the `meta.object` relates to the scope here.  The previous scheme seemed simpler to me - and consistent with how the `tokenColors` in a theme is defined.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167105800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/169779388", "body": "Thanks for starting some unit tests here! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/169779388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/169783377", "body": "Following from the discussion - I wonder if it makes sense to push this 'upward' to here:\r\nhttps://github.com/onivim/oni/blob/44e162d359c6b2a669e5d6dbcef4589c4de90b56/browser/src/Editor/NeovimEditor/NeovimEditor.tsx#L456\r\n\r\nHere, we can check if `response[0][index]` is a valid array, and if not, use an empty array. That way, everything 'downstream' using the `State.ITabState` typing can rely on the type system - that `tab.buffersInTab` is an actual array of numbers. Otherwise, we might end up having to duplicate this check in other places we use `tab.buffersInTab`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/169783377/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/169847816", "body": "Thanks for the tests here! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/169847816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/169847993", "body": "Cool idea to separate the logic of getting the token colors from the logic of rendering", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/169847993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166493979", "body": "Fix typo here", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166493979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170400215", "body": "Thanks for the fixes here \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170400215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170747264", "body": "In terms of implementation - how about we add an `expirationTime` property to the `INotification`, and add an `Epic` to handle the timeout behavior? I'd like for a consumer of our `Notifications` API to be able to set an expiration time.\r\n\r\nIdeally, the UI wouldn't need to know or care about this - it could be handled in our store layer.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170747264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170748850", "body": "More specifically:\r\n\r\n1) We could add a `setExpiration` method on the `Notification` API object here: https://github.com/onivim/oni/blob/9d685a98ccd9485678144be4eff2562bd3cf4352/browser/src/Services/Notifications/Notification.ts#L16\r\n\r\n2) We could add an `expirationTime` property in the store here: \r\nhttps://github.com/onivim/oni/blob/9d685a98ccd9485678144be4eff2562bd3cf4352/browser/src/Services/Notifications/NotificationStore.ts#L24\r\n\r\n3) Then we could add an `Epic` on the store that looks something like this:\r\n\r\n```\r\nconst hideNotificationAfterExpirationEpic: Epic<NotificationAction, INotificationState> => (action$, store) =>\r\n    action$.ofType(\"SHOW_NOTIFICATION\")\r\n    .filter((action) => action.expirationTime !== -1)\r\n    .delay((action) => action.expirationTime)\r\n    .map((action) => ({ type: \"HIDE_NOTIFICATION\", id: action.id }))\r\n```\r\n\r\nAt least something like that. The cool thing is, the UI doesn't need to worry about adding timers / handling lifecycle events, and we get the benefit of being able to specify this in our API surface as opposed to having it baked into our UI code.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170748850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170750697", "body": "> Thanks for the snippets that's really helpful as I'm not as familiar with Epics as I'd like and I've seen them around I'll have a tinker locally and push that when I get it working\r\n\r\nAwesome, thanks @Akin909 ! Let me know if you need any help.\r\n\r\nThe `ExplorerStore` uses just a couple of epics, hopefully those are good examples:\r\nhttps://github.com/onivim/oni/blob/30c186aec1496ac9a8f6aa2af93a2b9fc98e0646/browser/src/Services/Explorer/ExplorerStore.ts#L191\r\n\r\n(There's also some initialization required to 'wire up' the epics - example here: https://github.com/onivim/oni/blob/30c186aec1496ac9a8f6aa2af93a2b9fc98e0646/browser/src/Services/Explorer/ExplorerStore.ts#L228)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170750697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170771510", "body": "Ah interesting, I thought `delay` might have an overload like:\r\n```\r\n .delay((action) => action.expirationTime)\r\n```\r\n\r\nBut I guess that's not the case? If not, I'm okay with how you have it set up right now. It is a side effect but at least it's contained\r\n\r\nLooks like great progress though, thanks for making the changes \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170771510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171020403", "body": "I'd prefer the `Epic` implementation for this PR, but let me know if there are any blockers.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171020403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171048548", "body": "Nice! \ud83d\udcaf ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171048548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171708091", "body": "Could we make this a configuration setting? Maybe `editor.imageLayerExtensions`? That way, users can always override it or add new extensions.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171708091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171708450", "body": "I'd be OK ditching that extension for now and supplying this via a `config` setting, too. The only purpose that extension is set to the filetype, though, so if we go that route, we'd want to remove that extension also.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171708450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171996385", "body": "Sweet! Thanks for adding these \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171996385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171424484", "body": "Cool use of decorators! We havne't leveraged these much..", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171424484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171424711", "body": "I like that this is decoupled from the UI and primarily dependent on the state/selectors - means we could have some other ways to implement this behavior. It'd be cool to hook up a `yank` + `paste` workflow later on!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171424711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171424850", "body": "Is `mv` sync? Just wondering if there can be a race for the move call and the refresh action we dispatch.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171424850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171425022", "body": "Is this different from `path.dirname`?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171425022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171425177", "body": "This seems very intuitive! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171425177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171425606", "body": "\ud83d\udc4d Makes sense to me!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171425606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171427024", "body": "Haha, i know the feel \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171427024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/172253592", "body": "I wonder if, as you suggested, it makes sense to move this to a shared layer?\r\n\r\nWe could move this logic to `Session.ts` where we handle getting the `response` from Neovim:\r\nhttps://github.com/onivim/oni/blob/0307da1691a1c1cede5219c63bf0f10a93231783/browser/src/neovim/Session.ts#L56\r\n\r\nAnd check if we have an array that is:\r\n- 2 items\r\n- First item is a number\r\n- Second item is a string\r\nAnd in that case, we dispatch an error.\r\n\r\nOtherwise, we'll have all these handlers having to implement their own logic for handling errors", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/172253592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/172636507", "body": "It doesn't really make sense to need to check this here. The `Session` layer should be agnostic of the specific methods available on nvim (you could think of it is a _general_ msgpack Session, not just for Neovim).\r\n\r\nI was hoping that, at either this layer or `NeovimInstance`, in the `request` method, we could find a _general_ way to detect errors and reject promises, and handle that w/o needing to special case each method.  If that's not the case, it'd be better to have the error handling local in the `getLines` method as we did before.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/172636507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173240669", "body": "I didn't change any text here - looks like `prettier` just picked it up and tweaked whitespace", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173240669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173600951", "body": "Excellent! Thanks @jordwalke - testing it out now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173600951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173627359", "body": "Ideally, the `Tab` component shouldn't need to worry about whether we are using `tabs` or `buffers` - it just gets a bunch of `Tab` objects with `id`, `name`, etc, and hands that back up later.\r\n\r\nIt looks like the latest fix _only_ impacts `tabs` - what if we move the fix here?\r\nhttps://github.com/onivim/oni/blob/766fc30133aea41551295c74d458cdec29da6790/browser/src/UI/components/Tabs.tsx#L306\r\n\r\nWe create the data model for `<Tab />` with either `getTabsFromVimTabs` or `getTabsFromBufferTabs`, depending on the `tabs.mode`.\r\n\r\nA minimal fix would be to change `getTabsFromVimTabs` so that it uses `id: t.id + 1` - that way, we wouldn't need a new prop or to change any logic in `<Tab />` (and the buffer strategy stays the same as it is today)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173627359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/168252125", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/168252125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/168252321", "body": "Do we need to check the buffer types here? Or is it gated somewhere else? Just wondering how its kept from running on files that might not be applicable", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/168252321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/168252449", "body": "Awesome, this looks nice!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/168252449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/174483335", "body": "Solid! Thanks for fixing this \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/174483335/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/174651733", "body": "Very cool! Great set of unit tests covering this functionality.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/174651733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/174651754", "body": "Thanks for setting this up! \ud83d\udcaf ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/174651754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/174652353", "body": "Just saw your comment - there is one problem with the location here. In the 'multiplexing' scenario (when `editor.split.mode` is `'oni'`), we will potentially have _multiple_ `OniEditor` instances - so that means this would get fired multiple times.\r\n\r\nOne option would be to plop this code in `browser/src/index.tsx`, after we've created the `WindowManager`. Or add an `activate` method in `MultiProcess`, like we have for some of the other services, pass in the `windowManager` as a dependency, and wire up the event there.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/174652353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "GabrielDuarteM": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1772", "title": "Plugins doesn't seems to be working on windows", "body": "I've installed Oni and followed [this tutorial](https://github.com/onivim/oni/wiki/Plugins#installing-an-oni-plugin) to install `oni-plugin-tslint`, so that tslint errors get highlighted on the editor, but it doesn't seems to be working right now. What i did was:\r\n\r\n* `cd %userprofile%`\r\n* `mkdir .oni`\r\n* `cd .oni`\r\n* `mkdir plugins`\r\n* `cd plugins`\r\n* `git clone https://github.com/extr0py/oni-plugin-tslint`\r\n* `cd oni-plugin-tslint`\r\n* `npm install`\r\n* Open oni\r\n\r\nAfter that, tslint error still didn't get caught, as you can see below when comparing to vscode:\r\n\r\n`vscode`\r\n![image](https://user-images.githubusercontent.com/7675500/37250550-a879599c-24de-11e8-9f82-7699501faaa6.png)\r\n\r\n`oni`\r\n![image](https://user-images.githubusercontent.com/7675500/37250570-e85f2320-24de-11e8-8e95-216cb0fef8c5.png)\r\n\r\nI tried making a plugins folder on `C:\\Users\\gabri\\AppData\\Roaming\\Oni` as well, and installing `oni-plugin-tslint` there, but it didn't work too.\r\n\r\nAm I doing something wrong?\r\n\r\nI'm using:\r\n* Windows 10\r\n* Oni 0.3.0\r\n* node 9.7.1\r\n* npm 5.6.0\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Akin909": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1765", "title": "Keep autocomplete menu open to prevent flickering", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nThe autocomplete menu continually flicker in and out whilst typing whilst an arguably minor bug and not knowing what actions causes it to appear or disappear, I think keeping it open until:\r\n\r\na. a selection is made\r\nb. it is closed using a key like escape\r\nc. a user leaves insert mode\r\n\r\nwould improve the UX. I dimly recall an issue regarding this or something closely related so think the flickering might be recurring aka a regression.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1765/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1730", "title": "Telemetry on user settings", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\n@bryphe having heard you bemoan the lack of feedback re what settings users are using etc. thought I'd raise an issues to discuss possible solutions to that.\r\n\r\nOne thought off the top of my head re how to possibly do this would be to initially show a notification (once every only) to ask if the user would be happy to share anonymised info re their configurations.\r\n\r\nIf they agree then when the user's config is initially loaded Oni could post the options to an endpoint somewhere as a very simple initial point the selections could be saved into a table, I'm thinking like a `heroku` mongo db with a layer inbetween to process and save the data correctly and maybe a very, very simple site to render the info accessibly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1730/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1696", "title": "Reloading Oni via quick command with multiple windows causes oni split mode", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\nWhen using oni with multiple windows reloading one causes the newly reloaded oni session to blend with the first.\r\n\r\nSteps to reproduce hopefully:\r\n1. Open an Oni window,\r\n2. Open a second oni window\r\n3. Select reload Oni in one window via `Command palette`\r\n\r\nOutcome:\r\n<img width=\"842\" alt=\"screen shot 2018-03-01 at 23 51 07\" src=\"https://user-images.githubusercontent.com/22454918/36899979-63a87d3c-1e19-11e8-88e4-bcd96c839ac0.png\">\r\n\r\nOni attempts to reload the second window inside the first which opens as an oni split (the [WIP] oni split mode) but with duplicated sidebars.\r\n\r\n#### Possible Cause:\r\n\r\nThe reload oni command in the `CommandPalette` has a reference to the first oni instance always so requesting a reload acts the same as trying to open a second oni instance which somehow triggers the code for the Oni split mode.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1694", "title": "Sourcing vimrc clears highlighting", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nAs per the description one case where oni's syntax highlighting is lost and doesn't return is post-sourcing your vimrc.\r\n\r\nI imagine this has to do with vim re-applying its plugin highlights overriding oni's. Not sure when the highlighting is currently being applied but a thought which occurs to me is that in order to apply adhoc highlighting in vim and ensure it shows up regardless of vim colorschemes is using the `Autocommand Colorscheme` I think if not already doing this which we might very well already be doing Oni could hook into this event and trigger its syntax highlighting after it.\r\n\r\nEDIT: just had a peek in the codebase and seems we are hooking into the `Colorscheme` event though its not clear whether or not syntax highlighting is tied into this event.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1673", "title": "Image layers break split opening vim plugin functionality", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nI still rely heavily on vim plugins like `CtrlSF` and `undotree` both of these work by opening splits. Since the integration of the image layers these plugins all now open with a buffer layer on top of them attempting to open an image file, my thinking is that before opening atm, the image layer likely doesn't check that the file being opened in the buffer is an image file before rendering the buffer layer", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1642", "title": "Question: Match editor token to vscode style for interoperability or convert in Oni", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\n@bryphe since you mentioned re down the line possibly being able to use `vscode` themes in oni as well as `vim` and `oni` ones I've looked into adding `editorTokenColors` from the vscode onedark theme.\r\n\r\nAttempting this raised a question which is the format of vscode editor tokens is as follows.\r\n```ts\r\ninterface VscodeToken {\r\n\tscope: string | *string[]*\r\n\tsettings: {\r\n\tforeground: string\r\n\tbackground: string\r\n\tfontStyle: \"italic\" | \"bold\"\r\n\t...loads of other values which I currently dont know what they represent\r\n}\r\n```\r\n\r\nAtm `Oni` expects scope to be a string and foregroundColor and backgroundColor as well as `italic: boolean` and `bold: boolean`. I've been working on converting tokens specified in the theme as per vscode into something oni can use i.e. `foreground` to `foregroundColor`. \r\n\r\nMy question, finally, is do we want to be doing conversion there or changing our style to more closely match that so things just work \u2122\ufe0f. On that note as far as I can see with scopes as an array that will always need some form of processing, at the moment locally I just split each scope specified into its own token based on the settings of the token it was grouped with.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1642/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1629", "title": "Ligatures broken in TS files", "body": "With the new highlight tokens whilst I havent confirmed this I think that the `>` character is now being highlighted differently to the `=` character so that rather than creating a `=>` ligature you get a purple `>` sign instead\r\n\r\n<img width=\"96\" alt=\"screen shot 2018-02-25 at 11 11 17\" src=\"https://user-images.githubusercontent.com/22454918/36640747-aad8d3e2-1a1c-11e8-96ad-30db8956a818.png\">\r\n\r\nI think a fix of for this would be finding the token for the `>` and not applying a token for that or applying a similar one for the `=` unless they dont match in which case remove the token", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1629/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1559", "title": "Bug/ files deleted outside Oni do not close", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nThis relates to #1506 the difference or more specific issue here which I wanted to raise is that if you delete a file outside of Oni or rename a file outside Oni and return to the non-existent file especially if you have vim setup up to save buffers on leave then leaving the deleted or moved buffer which you come back to only to find it has remained open and if moved (with all its contents) re-saves the file (note: the saving is not quite the issue as this is a user specific setting) what the issue is that `oni/vim` maintains a reference to a (possibly populated) buffer so it becomes unclear what files do or do not exist.\r\n\r\nAs this relates to ther aforementioned issue whilst looking into this I can look to subscribe something somewhere to file changes, but things become tangled because it seems vim itself does not properly handle file changes outside the editor since it saves buffer contents somewhere?? else until they are saved I believe but a naive solution would be to remove files from oni's records aka the bufferlist in memory on dispatching a `filewatcher` delete event (this relates to how the `filewatcher` could be implemented)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1530", "title": "Bug: changing buffer text causes false errors", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nChanging branch or pasting large blocks of text in oni causes the `tss` lsp to think things have been duplicated, so it shows spurious errors, like `redeclare variable` or `multiple export defaults`\r\n\r\n<img width=\"684\" alt=\"screen shot 2018-02-12 at 12 05 03\" src=\"https://user-images.githubusercontent.com/22454918/36096212-4307e4d0-0fed-11e8-9515-1321c9c1baba.png\">\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1524", "title": "Development/ Integration tests timeout on (this) MacOS", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nAs per gitter integration test are hanging on *my* mac not sure if this is truly a platform issue possibly local environment. Here's a log of the output of the `yarn test:integration`  command\r\n[out.log](https://github.com/onivim/oni/files/1714771/out.log)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1506", "title": "Enhancement/handle directory changes outside oni", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nIf the directory is changed outside oni, whilst outside oni and theres an attempt to navigate within it in the file explorer an error is thrown that the directory does not exist. Not sure what the correct response should be but I think a potentially valid one would be to move upwards till the first valid directory is found. \r\n\r\nSay I create a project then change my mind or rename it Oni should hook into the focus gained command to check whether the active dir is still present in the file system if not it should *maybe* just navigate upwards the reason I suggest this is because its hopefully less back tracking than say just navigating to the home dir which would be easier but I think a bit annoying as you now have to go searching all the way down for where you were I'd think as a user you probably just want it to back out till the next reasonable location.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1490", "title": "Enhancement/ Add per-window highlight support to oni", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nNeovim in 0.2.2 added per window buffer highlights which means that certains buffers can be highlighted differently than others.\r\n\r\n<img width=\"837\" alt=\"screen shot 2018-02-09 at 15 54 34\" src=\"https://user-images.githubusercontent.com/22454918/36036378-a1260c42-0db1-11e8-82bb-5541b0d26ac2.png\">\r\n\r\nnot sure how this information is coming through via the `neovim API` aka on bufEnter are the buffer highlights for background and foreground reported with the new colors or is this separate. I believe that on a much older version of oni (several months ago now) this was working but an update a few months ago seems to have removed it. \r\n\r\nPotentially this neovim feature could be used to by oni to color terminal buffers differently (this is what I use it for) and a user could configure that through oni as the neovim setting for it is a little complex", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1461", "title": "Marks Side Bar item causes Neovim Message Pop up", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n@bryphe I noted an issue whilst working on #1443 having attempted to use `nvim_command_output` to get highlight colors. I discovered that a major side effect of this command is that it causes neovim to briefly show the output of the given command in the echo msg area. This means that with `sidebar.marks.enabled` on there is a flicker of messages on navigating pages which is when I believe the function is called.\r\n\r\nA solution would be to generate a `viml function` (I know you're not a fan \ud83d\ude1f, I can have alook later I'm interested in trying to use `lua` in vimscript) that passes the output of the command back into oni which can be called silently to work around this and maybe this warrants an issue on neovim's repo as this seems like an unintended side effect", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1413", "title": "Welcome Menu - Input and loading", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nI've again bundled two bugs together as they both pertain to to the welcome menu.\r\nThe first of which is that the welcome screen now swallows input aimed for vim relates to #1398 which means that on opening vim one of my first actions which is to open the `commandline` and open a file or a session is now blocked.\r\n\r\nSecondly the welcome screen ~~only appears if I have oni open at full screen if oni starts at half screen for some inscrutable reason the welcome menu does not appear instead I get an empty buffer titled welcome~~ only appears with my `init.vim` disabled going to try commenting out sections to find the cause, although I think if a user's init.vim might somehow break the welcome menu due to maybe a competing `BufEnter` command etc there might need to be logic to give the menu priority\r\n\r\nEDIT: Apologies, I appreciate this issue is ambiguous, what I'm trying to convey is that with the welcome menu enabled my keyboard input seems to disappear in a confusing manner hitting certain keys does nothing \ud83d\ude15, and regarding its appearance it's likely an interaction with another plugin but potential plugin interaction is the concern as has happened in my case\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1412", "title": "Resize Oni splits and Sidebar", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\nFollowing on from #1406 this issue relates to creating functionality which handles resizing Oni splits and sidebars.\r\n\r\nFrom @bryphe \r\n> Yes, I think we'd want to split this up into two tasks:\r\n\r\n>API - Add an API on the WindowManager for resizing splits. I'm thinking that the split method could \r\n\r\n> remove some sort of WindowHandle that lets you specify a size, like:\r\n> const splitHandle = windowManager.split(\"horizontal\", newEditor)\r\n> splitHandle.setSize(250)\r\n> (It would also be a natural place to show and hide, which would be great for toggling sidebars / terminals / etc).\r\n\r\n> Drag-to-resize UI gesture - once we have the API set, we could hook up a drag handle somewhere. #1405 adds a <div className=\"split-spacer\"> next to each window, so that would be a natural place to add it - we could turn that into something like a ResizeHandle. It's close to the WindowManager so it seems like we could plumb through the API call from above in a fairly straightforward way.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1367", "title": "Feature: autocomplete aliases", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nWhilst completing file paths, `oni`'s file completion which I imagine is provided by the `lsp` does not provide path completion if a `webpack` or similar alias is used for the file, to clarify it provides general completion but not for subfolders within the *aliased directory*. I'm not sure if this is a configuration option or is specifically implemented by other editors but what I have observed is that in the case of `typescript` vscode (which uses the same lsp) and other editors like webstorm are able to complete paths including aliases e.g. `@redux` is set as a webpack alias (and tsconfig) alias to `app/src/redux` this path is resolved by vscode in this example so completion results include contents of `app/src/redux`.\r\n\r\nAt present it seems the `lsp` can recognise if an alias is accurate for example `@redux/src/someFileTypo` will show an error marker until the typo is fixed as expected, but in completing this autocomplete options do not include any files or subfolders. \r\n\r\nFrom the documentation of the typescript lsp it seems a little unclear whether it provides this functionality out of box but mentions\r\n>  textDocument/completion (incl. completion/resolve)\r\n\r\nbut its unclear if this refers to aliases. Tbh without the support of the lsp this would be very complex to implement so this issue is more for exploring that Oni is using all the available completion options rather than to suggest this be implemented from scratch \ud83d\ude1f ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1344", "title": "Document symbol search Input blocks", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nWhilst trying to use the `language.symbol` search functionality I've noticed that after inputting a few characters further input is blocked for example to search for action I type `ac` then further input is then blocked until some results come back.\r\n\r\nEDITED: New GIF with keycastr\r\n![symbol](https://user-images.githubusercontent.com/22454918/35285699-ff1ba15e-0055-11e8-9f11-d6ed6d61d6b7.gif)\r\n\r\n\r\nUnfortunately my screen capture tool doesn't record keystrokes but during the lag I'm hitting several keys which don't register\r\n\r\nUpdate: thanks to @Contextualist\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1308", "title": "Add git changes indicator to git plugin", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n## Problem/Desired Feature\r\n\r\n@bryphe I've noted in apps like `vscode` or `hyperterm`, or even vim statusline plugins like `airline` with `fugitive` the git plugins include information regarding changes to branch such as deletions and additions, which is quite helpful at a glance to know where you stand\r\n\r\n\r\n### Example (hyper term)\r\n<img width=\"268\" alt=\"screen shot 2018-01-16 at 17 40 22\" src=\"https://user-images.githubusercontent.com/22454918/35003334-74482a6e-fae4-11e7-8721-96d16f2c7f56.png\">\r\n\r\nI was thinking something simple like a plus for additions, minus for deletions and maybe a similar symbol to the above for changes. \r\n\r\nI realise this will require some extra methods on the git service which theres some future plans to refactor or re-implement but would adding those methods and showing that in the git service/plugin as it stands be ok?.\r\n\r\n### Implementation Ideas\r\n\r\nI was thinking this could be approached using an `npm` package (which is one of the many values of having Oni as a frontend aka access to node libraries)\r\n\r\nThe package which comes to mind is [`simpleGit`](https://github.com/steveukx/git-js) which is a lightweight wrapper around git and a very good jumping off point for loads of git functionality like `cloning repos`, `renaming branches`, `merges` etc.\r\n\r\n### Potential Issues\r\nThe way that vim handles changes in buffers is an area of concern as I've looked at the implementation of plugins like `fugitive` and `gitgutter` and one particular area of concern is that whilst editing a buffer if unsaved edits are actually not saved to the same location on disk so these plugins use a series of work arounds for that. \r\n\r\nFor the scope of what I intend a naive approach would be only reflect changes on save, however the limitation there would be that by going down this route rather than using something like `vim-fugitive` is that this is a later issue which might be faced although potentially a similar workaround can be implemented at the time if it comes to it\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1277", "title": "Markdown Preview Dim Persists", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\n@TalAmuyal Fantastic work on the markdown preview \ud83c\udf89 \r\n\r\nI've been using it a fair bit vs less elegant terminal vim plugins.\r\nWhilst using it I noticed that after it opens it sets a `not-focused` class on the editor element which isnt removed by closing the plugin (by which I mean toggling it, not sure if that kills the process). I've found that by removing that class from the editor component the dimming goes away.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1221", "title": "Question: Combine LSP and vim autocomplete menus", "body": "@bryphe at present if a user wanted to use both the autocompletion from a vim plugin *as well* as that of Oni's LSP two conflicting menus are opened. I'm not sure what you're take on this is but I think that it would be preferable if the output of all autocompletion was merged into one menu so a user has the option of using whatever source they would like rather than disabling one in the favour of the other. Potentially with a configuration option to set priority of the output to either be in vim's plugins favour or the lsp.\r\n\r\nI'm not sure currently how each is implemented or how feasible this is as likely they are triggered by separate events so two different instances of the menu are created but I'm wondering whether or not the menu could be setup to reuse instances and just add pagination and maybe some ui clue as to the different sources being used.\r\n\r\nThis is something I could look at in the future if you're not opposed to it but I'd like to get your take on this as there is likely plenty I haven't accounted for.\r\n  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1221/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1096", "title": "Disable MacOS double tap zoom/enable cmd-plus font resizing", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n@bryphe, before jumping in with another issue just wanted to say that Oni is looking sooo much nicer in such a small space of time, I \ud83d\ude0d \ud83d\ude0d the file type icon functionality and upcoming sidebar.\r\n\r\nOn to the issue, double tapping with two fingers on MacOS (possibly also on windows, I don't have a windows machine so I'm not sure) causes Oni to zoom in which I think is something that `macOS` adds like pinch to zoom etc. \r\n\r\nIn keeping with trying to give `Oni` a more native app feel the effect is visually not ideal as the text looks blown up and is something that other editors such as atom and vscode seem to have circumvented.\r\n\r\nI've tried remedying this using the solutions posted [here](https://github.com/electron/electron/issues/8793) (an issue posted on the electron repo)\r\n however this doesn't seem to be able stop this behaviour. Arguably a minor problem in the grand scheme of things but as a mac user who occasionally double taps by mistake its very disconcerting/annoying.\r\n\r\nI've noticed that `cmd-+` and `cmd- -` do not cause the font to scale which I think is native functionality on mac os which might have been removed in oni so I wonder if you might have some insight into how to stop this. Also if not intentionally removed, I think the command plus and minus are actually quite useful when showing code, and think it might be preferable to keep that functionality whilst disabling the double tapping, I'm happy to continue looking at this but wonder if you've previously  dealt with something similar in oni", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/839", "title": "Lint errors moving on scroll", "body": "Firstly thanks for the amazing project!! :thumbsup:\r\n\r\nI'm really looking forward switching to oni as my daily editor.\r\n\r\nAt the moment though I having some trouble with the linter plugin, which may be a known bug, but I couldn't find reference to it anywhere.\r\n\r\nWhat the screen shot attempts to illustrate is that when the linter runs on save errors show up but on scrolling the underline markers move on scroll so they end up in the wrong place. Also it does not seem to be reading my local tsconfig from the project root or my the tsconfig I have in my home directory.\r\n\r\nI've tried with and without the separate linter plugin.\r\nI've also tried deactivating my init.vim config and using only the default config but this error still occurs \r\n\r\n<img width=\"741\" alt=\"screen shot 2017-10-30 at 14 07 36\" src=\"https://user-images.githubusercontent.com/22454918/32175110-c9a44e4e-bd7b-11e7-902a-bd210014a5df.png\">\r\n\r\nDev tools screenshot\r\n===\r\n<img width=\"521\" alt=\"screen shot 2017-10-30 at 14 09 51\" src=\"https://user-images.githubusercontent.com/22454918/32175193-15d2c8a4-bd7c-11e7-8ea3-09b117f64aa2.png\">\r\n\r\n\r\nI use ale.vim for linting in iTerm and I wonder if it's possible to use this instead if its something thats still in flux, at the moment the plugin doesn't seem to work\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/6982387b07dff463e204bed5d53b478a91a3dd2c", "message": "add truncation to working dir path (#1775)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e47434d625dcfb88acabfb04c059c2c187eee531", "message": "Feature/drag and drop files in explorer (#1581)\n\n* add initial draggeable component\r\n\r\n* add drag and drop components\r\n\r\n* fix drop target type to match drag source\r\n\r\n* seperate out drag and drop functionality\r\nadd border when dragging over to indicate target\r\n\r\n* separate out interfaces in drag and drop\r\n\r\n* Abstract (?Premature) React DNDs API\r\n\r\n* separate drag and drop components add findParentDir to explorer split\r\n\r\n* add move folder command and make folder dragAndDrop\r\n\r\n* update movefile to movefileorfolder\r\n\r\n* fix can drop and check if is same node\r\n\r\n* fix error placing file in incorrect dir\r\n\r\n* fix type error in markdown preview\r\n\r\n* remove comment in neovim editor and make document handlers consistent\r\n\r\n* remove comment tidy up comments in general\r\n\r\n* remove unused dependecy\r\n\r\n* use path.dirname add expand dir action if dest is folder\r\n\r\n* Add did drop to props provided to each component\r\n\r\n* add success level to notifications which shows green tick\r\nsend success notification when file moves\r\n\r\n* add did drop property and transitions\r\n\r\n* continue attempt to animate dragged file\r\n\r\n* remove transitions for this PR\r\n\r\n* remove unused vars"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e3c5fa6f39a78726ae37fed96679a6cf850d78b2", "message": "Bugfix/ incorrect use of dom purify which was breaking <Components /> (#1701)\n\n* fix incorrect use of dom purify which was breaking <Components />\r\n\r\n* add unit tests to check that safe jsx/html is left alone\r\n\r\n* minor tweak to rerun tests\r\n\r\n* rename vars to trigger test re-run"}, {"url": "https://api.github.com/repos/onivim/oni/commits/70b2b2bf7ee1937e3e8da0cc46ef837d06dbb3f0", "message": "bugfix/ add a filter for image layers (#1676)\n\n* add a filter for image layers\r\n\r\n* add image list sans svg to imageBufferLayerFilter\r\n\r\n* add extensions for image layer as a user config option"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bb154942004c753ef504f311d9d46ee375e5255e", "message": "feature/ add a check to open in a tab if in tabs mode otherwise open buffer (#1677)\n\n* add a check to open in a tab if in tabs mode otherwise open buffer\r\n\r\n* revert to tab drop command"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5add3ff2d4a8e6379755bb98ff0d276040fce795", "message": "Feature/add timeout to info notifications (#1637)\n\n* type error event add max-height\r\n\r\n* add autosizer and set overflow to overlay also change bg color\r\n\r\n* tweak error messages to be hopefully less distracting\r\n\r\n* add width to contents container - woops\r\n\r\n* add border with color and swap icons error level\r\n\r\n* swap colors for warn with error\r\n\r\n* add comment re blue color\r\n\r\n* add lifetime to notifications\r\n\r\n* add optional param to sneakable add sneakable buttons to notifications\r\n\r\n* add max-width of 25rem\r\n\r\n* [WIP] add timeout epic for notifications\r\n\r\n* add/refactor hide notification epic\r\n\r\n* finalise hide notification epic remove side effect from component\r\n\r\n* fix failing unit test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6f328ccdbb42743dbf24c0d2f584c3e8c40d2652", "message": "Feature/use absolute path in quickopen (#1645)\n\n* use workspace as base dir for finder process\r\n\r\n* add a check to see if active workspace is truthy if so use it to generate a fullpath"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cd9b5519a0b491abe2cfeaf466f32040a06031e6", "message": "feature/ change vim directory if oni workspace changes (#1643)\n\n* change vim directory if oni workspace changes,\r\nExcept if vim is already in the correct directory\r\n\r\n* fix comment typos"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c36c2a9af047375fce4777e167c99d761c9dbdea", "message": "add optional param to sneakable add sneakable buttons to notifications (#1636)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3d53ac2a83b2855b74a8ba367c78b47fe2995788", "message": "Bugfix/Neovim instance can be undefined on startup (#1630)\n\n* create Oni Process class and save env\r\n\r\n* re-arrange for linter\r\n\r\n* move private function to bottom\r\n\r\n* use nodejs process env typing\r\n\r\n* type shell env module"}, {"url": "https://api.github.com/repos/onivim/oni/commits/444749eeed5ed36080d74fe6eb3300be37aeb0a9", "message": "Feature/improve error ux (#1618)\n\n* type error event add max-height\r\n\r\n* add autosizer and set overflow to overlay also change bg color\r\n\r\n* tweak error messages to be hopefully less distracting\r\n\r\n* add width to contents container - woops\r\n\r\n* add border with color and swap icons error level\r\n\r\n* swap colors for warn with error\r\n\r\n* add comment re blue color"}, {"url": "https://api.github.com/repos/onivim/oni/commits/46e7edcf082b4483e20d0df9411d5015f1279c6d", "message": "feature/ upgrade ocaml lsp with upstream fixes (#1631)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6c877a6983e4e085d690c2f2dc0882e88000df68", "message": "Feature: Add folder/file naming if filename is duplicated (#1566)\n\n* add folder/file naming if filename is duplicated\r\n\r\n* export functions and add associated unit tests\r\n\r\n* rename test file and make test every so slightly more robust\r\n\r\n* change separators to be system agnostic"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b3b5b8025cdea09ec8b73b02193d63acc9b0f89c", "message": "Feature/syntax highlight hover (#1443)\n\n* create syntax hl fn WIP\r\n\r\n* reduce size of QF containers\r\n\r\n* [WIP] initial progress rendering highlights\r\n\r\n* get highlights from vim pass these to theme object\r\n\r\n* actually add token generator\r\n\r\n* re-add main files ........\r\n\r\n* fix weird deletion of files\r\n\r\n* remove errant console.log\r\n\r\n* remove highlighting from docs\r\nswitch to string replacement method\r\n\r\n* add functionality to specify token in config and themes\r\n\r\n* deepmerge config files rather than shallow\r\n\r\n* add mergeWith to ensure user theme populated\r\nuse token names to generate classes\r\n\r\n* re-add code block renderer\r\n\r\n* add tslint console disable whilst debugging\r\n\r\n* fix lint errors\r\n\r\n* add more scopes and associated classes\r\n\r\n* fix rendering of hover text YAY!!\r\nsplit out quickInfo container and pass it its own version of the theme\r\n\r\n* add new components file\r\n\r\n* refactor IToken structure as per discussions with @bryphe\r\n\r\n* remove dead code now new update fn implemented\r\n\r\n* convert scopes back to arrays and implement scope population\r\n\r\n* fix syntax highlighting reconciliation\r\n\r\n* create fn to automate class generation\r\n\r\n* add more scopes and falsy check in renderwithclasses fn\r\n\r\n* fix syntax highlighting reconciliation\r\nagain by omitting newly added vim highlights on search\r\n\r\n* add codeblock style and update regexp\r\n\r\n* add idea for generating all default token colors\r\n\r\n* convert away from using fallback\r\ngenerate default vim colors on init\r\n\r\n* move and tidy up fns\r\n\r\n* Add TokenColors service\r\n\r\n* Plumb through token colors as dependency\r\n\r\n* Fix up issue where the token color event wasn't firing\r\n\r\n* Fix lint issues\r\n\r\n* tweak highlighting fix rendering bugs\r\n\r\n* Plumb token colors through the rest of the way\r\n\r\n* Put in a placeholder for converting token style\r\n\r\n* Resolve colors to hex\r\n\r\n* Start stubbing out a test case for TokenColorsTests\r\n\r\n* Update to use real colors\r\n\r\n* Update test interfaces, get tests green\r\n\r\n* remove console.log\r\n\r\n* modularise render prop out tidy up markdown parser\r\n\r\n* move styling into render prop so its passed down\r\n\r\n* add theme provider to vcs\r\n\r\n* rename token generator - probably consolidate in tokencolors\r\n\r\n* Fix typing\r\n\r\n* Factor MockThemeLoader to separate file\r\n\r\n* Bring in bold/italic from nvim_get_hl_by_name\r\n\r\n* Remove TODO\r\n\r\n* tweak styles and symbols and comments\r\n\r\n* rename token generator file aim to consolidate this\r\n\r\n* remove split by new lines fn\r\n\r\n* switchh to lodash merge and remove ramda\r\n\r\n* add semi for markdown config...\r\n\r\n* Start refactoring to handle synchronizing token colors\r\n\r\n* Hook up synchronization of token colors\r\n\r\n* Scope VimHighlights down to the original configuration values\r\n\r\n* Stub out tests\r\n\r\n* Start stubbing out a mock neovim instance interface for testing requests\r\n\r\n* Add simple test cases for NeovimTokenColorSynchronizer\r\n\r\n* Fix bold/italic handling\r\n\r\n* Fix lint issue\r\n\r\n* Return a map of tokens, lines and rules stack\r\nfrom the token generator\r\nuse the line associated with the generated\r\ntoken to match the line marked passes in\r\n\r\n* add more scopes to provider\r\n\r\n* ensure arrays are properly merged in provider creating tokens\r\n\r\n* hide quick hover if no content, remove ramda types\r\n\r\n* add few more tokens\r\nthis will be a theme\r\n\r\n* add strings to defaults\r\n\r\n* fix comment typo remove changes to onedark.json\r\n\r\n* add check for null match in hover renderer\r\n\r\n* add unit tests for markdown functions and tweak md\r\nto work better based on testing\r\n\r\n* remove console.logs\r\n\r\n* reduce cursor positioner width FIX word boundary error!!!!!\r\n\r\n* add new test [WIP]\r\n\r\n* Uncomment test for token generator\r\n\r\n* [WIP] add token generator test\r\n\r\n* add comment for the convert markdown function\r\n\r\n* remove max-width from documentation component - not necessary\r\n\r\n* remove test as its value is questionable and\r\nit requires setting up moving json files around\r\nas grammar loader is a dependecy and cant be\r\nused without a valid textmate json file\r\ncan look into adding this functionality separately\r\nto test grammar loader\r\n\r\n* add spurious change to rerun tests\r\n\r\n* re-add code block highlighting\r\n\r\n* fix mistakenly placed css\r\n\r\n* once again move css as Again missed the target\r\n\r\n* Slightly increase timeout\r\nThis is because hover rendering now involves\r\nslightly more processing and without it\r\nit appearance is noticeably janky looking\r\n\r\n* trim white space if code block to correctly match\r\nremove unadvisable display table css rule\r\n\r\n* remove unnecessary newline char\r\n\r\n* update yarn lock\r\n\r\n* remove code tag as marked provides one\r\nalso remove styling as this is actually unnecessary\r\n\r\n* Add more tokens to default tokens, improve comments\r\n\r\n* revert removal of white-space: pre for code blocks\r\nlack of rule causes weird at a glance issue with larger\r\ncode blocks\r\n\r\n* fix broken unit test\r\n\r\n* Don't use sets as they remove duplicate entries\r\nthis is not ideal as hover then has missing keys\r\nplus some functionality can be achieved without sets\r\n\r\n* fix up comment\r\n\r\n* use dom purify instead of markeds purifier\r\nmarked dumps html into the out put which is less\r\npreferable and its sanitizer option breaks highlighting\r\n\r\n* fix type annotation - since tss forced me to :(((((\r\n\r\n* remove codespan renderer for now"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2336dc75849715a71472173a3b90fd97fe57eb0b", "message": "Add commandline and wildmenu mode on by default (#1532)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6274d251cfb361b692e74f4657b2a39680cf84d0", "message": "Bugfix/on focus split error (#1499)\n\n* await setting items as it is async in vimnavigator\r\n\r\n* add temporary fix in file explorer to pass window id\r\n\r\n* Remove SharedNeovimInstance initPromise and\r\nsimply await the neovim instance starting\r\nit causes a bizarre race condition where\r\nset items could otherwise be called before\r\nthe instance is initialized\r\n\r\n* add new check to see if neovim is initialized before setting items"}, {"url": "https://api.github.com/repos/onivim/oni/commits/284713a4dd3ec2b2aec6d3aaa33f0dc2b9837d4d", "message": "Bugfix/add package json to prettierignore (#1497)\n\n* actually add the new file\r\n\r\n* add typescipt package json to prettier ignore"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a75e10e02ab15ae7c78bf070d6c3a12aa9d51002", "message": "add inner name component to truncate long names (#1489)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cf2c0e4f2a6b3476a553e2f71efc1142561d59fa", "message": "add functionality to keep selected tab in view (#1444)\n\nAdd functionality to keep selected tab in view"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7e4c461161109f96dd620811d4494f3f2ee52972", "message": "Bugfix/use editor dimensions (#1318)\n\n* add marked to render html in quick info\r\n\r\n* Add styling changes to QuickInfo\r\n\r\n* add marked and pre styling\r\n\r\n* attempt to fix keys react\r\n\r\n* add font family to container\r\n\r\n* split out markdown function add link in text component\r\n\r\n* add markdown to editor - temp\r\n\r\n* remove highlight.js\r\n\r\n* remove the horrid cdm link function\r\n\r\n* add background to code block\r\n\r\n* add minContent logic reduce padding\r\n\r\n* fix inner ref in tooltip container\r\nfix code font and markdown styles\r\nNote bug re rendering if width changes\r\n\r\n* fix lint errors\r\n\r\n* remove unhelpful conditional\r\n\r\n* tweak and positioning\r\n\r\n* use fit content with a max width\r\n\r\n* add word break to fix maxwidth bug\r\n\r\n* force descendants to use parent font\r\n\r\n* [WIP] do not render special title comp\r\n\r\n* revert changes\r\n\r\n* re-add min-width\r\n\r\n* Revert \"re-add min-width\"\r\n\r\nThis reverts commit 35c342008afc51f9bf1922a5aa14aad7de1c5e4f.\r\n\r\n* Revert \"revert changes\"\r\n\r\nThis reverts commit 2d8bf6b5f2e26a7730023990d6bc922b18039a14.\r\n\r\n* Revert \"Revert \"revert changes\"\"\r\n\r\noh goooooood\r\n\r\nThis reverts commit 8e47a865f0ec5a5abfad943b71b653609f500e84.\r\n\r\n* Revert \"Revert \"re-add min-width\"\"\r\n\r\n....sigh\r\n\r\nThis reverts commit 2f02306745a8626509584fa69e712db5fd4fd290.\r\n\r\n* Revert \"re-add min-width\"\r\n\r\nThis reverts commit 35c342008afc51f9bf1922a5aa14aad7de1c5e4f.\r\n\r\n* Revert \"revert changes\"\r\n\r\nThis reverts commit 2d8bf6b5f2e26a7730023990d6bc922b18039a14.\r\n\r\n* Revert \"[WIP] do not render special title comp\"\r\n\r\nThis reverts commit 9f3dfef6534bdf1088212880d45e6f585e92ca2a.\r\n\r\n* Add a container element also use fit-content\r\n\r\nthis means that there will occasionally be too much right padding\r\nbut *personally* this seems preferable to vscodes solution to use\r\nword break: break all which splits midword etc...\r\n\r\n* Remove common class in quickinfo and border bottom\r\n\r\n* revert to using word-break\r\n\r\n* add max height\r\n\r\n* add max height to documentation\r\n\r\n* remove max height from container\r\n\r\n* add max height and overflow\r\n\r\n* add max-height to each element\r\n\r\n* add full ternary to hover\r\n\r\n* Revert \"add full ternary to hover\"\r\n\r\nThis reverts commit 617684d56ec771f6b276b54e37f29d60cf00d59f.\r\n\r\n* Revert \"Revert \"add full ternary to hover\"\"\r\n\r\nThis reverts commit 63cef8504503252a81cf6aa0a7dde1c7526cb1d2.\r\n\r\n* Revert \"Revert \"Revert \"add full ternary to hover\"\"\"\r\n\r\nThis reverts commit 835c4a88ff71b01c49d1de740f660526a5eda84c.\r\n\r\n* Revert \"Revert \"add full ternary to hover\"\"\r\n\r\nThis reverts commit 63cef8504503252a81cf6aa0a7dde1c7526cb1d2.\r\n\r\n* Revert \"add full ternary to hover\"\r\n\r\nThis reverts commit 617684d56ec771f6b276b54e37f29d60cf00d59f.\r\n\r\n* attempt to fix package and yarn.lock\r\n\r\n* fix package and lock add keys to signatures\r\n\r\n* remove keys not unique enough\r\n\r\n* remove erroneous setState\r\ncommits are a shambles...\r\n\r\n* fix check to prevent rendering tooltip if no elements\r\n\r\n* remove :empty selector as it removes empty styling elems\r\n\r\n* re-add title styling\r\n\r\n* make code block wrap in hover tool tip\r\n\r\n* pass padding as a props to instances of info title comp\r\n\r\n* fix padding for titles, darken tooltip\r\n\r\n* Handle code block overflow stop\r\n\r\n* add overlflow overlay\r\n\r\n* fix error style highlight\r\n\r\n* remove styles from code block\r\n\r\n* set quickinfo container height to fit content\r\nadd padding default of 0.5rem and max height to\r\ndocumentation and title\r\n\r\n* get dimensions for active editor and use this for cursor positioner\r\n\r\n* use focused editor width to in cursorpositioner\r\n\r\n* remove unused dependency in tooltip\r\n\r\n* [WIP] get component height inside editor\r\n\r\n* tidy up changes\r\n\r\n* revert rxjs to master version\r\n\r\n* update yarn lock to mirror reversion of rxjs\r\n\r\n* revert unnecessary changes\r\n\r\n* use editor viewport for as main height and width saved\r\n\r\n* remove references to focused editor"}, {"url": "https://api.github.com/repos/onivim/oni/commits/216d1aaf48fa6d93f6f654708938532ff00ff9c2", "message": "Bugfix/window number error removing bufferbar highlight (#1419)\n\n* add errorboundary to editor component and handle no window no\r\n\r\n* add comment re how proceed in future\r\n\r\n* tweak fix to filter original array for falsies"}, {"url": "https://api.github.com/repos/onivim/oni/commits/87356ed6936e03eee3121a22ca5a03ccc8519c68", "message": "rename command in statusbar to open statusbar (#1421)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/dd949a780c5d1277d44bc39a384d4052dd4cbe81", "message": "Feature/navigate to project root (#1402)\n\n* [WIP] implementation of project root search\r\n\r\n* add module declaration for find up\r\n\r\n* add configuration settings for autodetection\r\nand project markers\r\n\r\n* switch to use change dir command\r\n\r\n* call autoDetectWorkspace on bufEnter"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c2a2244c61d07df4d3fabe52428b00d712731429", "message": "upgrade ocaml lsp and fix diagnostic typo (#1404)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/011fb4cb97316df510c5c75f32b381c8991cdb81", "message": "add margin right to icons (#1400)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d9d23f7892339e2c78eb4644605c8305937de42a", "message": "Bugfix/check path exists workspace (#1382)\n\n* check folder exists using fs access\r\n\r\n* add pathIsDir to workspace\r\npass null if dir does not exists"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2cf0c412f5f1b9104532b8ad766fad808ef7febc", "message": "bugfix: Ocaml-lang-server path (#1380)\n\n* change path to point towards ocaml/server/index.js\r\n\r\n* adjust max width to apply to all children of quick info docs"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0fc0f435cb63a27a5211ad3fd5a0774ae54f74cd", "message": "Feature/buffers menu (#1334)\n\n* add buffer menu plugin\r\nadd inactive buffers to buffer manager\r\nadd inactive buffer class which is distinct from buffer class\r\nadd icon class for file fn for menu icons\r\n\r\n* prettify buffers-menu index\r\nexperiment with command to delete buffer\r\n\r\n* add indicator for current and tweak styles to menu nowrap\r\n\r\n* recreate inactive buffers on enter and remove max-width\r\n\r\n* rename addInactiveBuffers to populateBuffers\r\nuse this as buffer source as bufbyId is inaccurate\r\n\r\n* truncate filenames\r\n\r\n* remove unnecessary loading false call\r\n\r\n* register different buffer open commands\r\n\r\n* add proxies to handle incorrect input for file open\r\nadd buffer delete command\r\n\r\n* add extra check in item selected to ensure menu item\r\n\r\n* use inactive buffer from oni type\r\n\r\n* fix openBuffers to work with OniEditor\r\n\r\n* use already defined buffer delete command in oniEditor\r\n\r\n* re-add new oni api\r\n\r\n* fix keybindings typo\r\n\r\n* add filter to bufferlist commands\r\n\r\n* [WIP] add filter for menu commands - need to update oni-api\r\n\r\n* update oni-api version\r\n\r\n* add fixme comment to match filepath accurately\r\n\r\n* Remove bufDelete function for now as event is noop\r\n\r\n* fix buffer delete command add new event hooks\r\n\r\n* fix metadata removal\r\nadd buffer navigation following deletion\r\nrename commands\r\n\r\n* fix default binding to use new command name\r\nfix comment typo"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cb475c5c0f07b8f93c65f9e09dc40e8eeb47b5cf", "message": "Feature/prepush hook v2 (#1361)\n\n* add prettierrc, tweak tslint.json to match prettier\r\n\r\n* add prettier husky and pretty-quick dependencies"}, {"url": "https://api.github.com/repos/onivim/oni/commits/51d13ec81be07ee0134f62bcb274c23f01f1f3b0", "message": "fix conditional for hasDocs check (#1339)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/995d7ed4cae66a66eb645d3f34958dadac4bb5b9", "message": "Feature: render markdown and fix tooltip dimensions (#1253)\n\n* add marked to render html in quick info\r\n\r\n* Add styling changes to QuickInfo\r\n\r\n* add marked and pre styling\r\n\r\n* attempt to fix keys react\r\n\r\n* add font family to container\r\n\r\n* split out markdown function add link in text component\r\n\r\n* add markdown to editor - temp\r\n\r\n* remove highlight.js\r\n\r\n* remove the horrid cdm link function\r\n\r\n* add background to code block\r\n\r\n* add minContent logic reduce padding\r\n\r\n* fix inner ref in tooltip container\r\nfix code font and markdown styles\r\nNote bug re rendering if width changes\r\n\r\n* fix lint errors\r\n\r\n* remove unhelpful conditional\r\n\r\n* tweak and positioning\r\n\r\n* use fit content with a max width\r\n\r\n* add word break to fix maxwidth bug\r\n\r\n* force descendants to use parent font\r\n\r\n* [WIP] do not render special title comp\r\n\r\n* revert changes\r\n\r\n* re-add min-width\r\n\r\n* Revert \"re-add min-width\"\r\n\r\nThis reverts commit 35c342008afc51f9bf1922a5aa14aad7de1c5e4f.\r\n\r\n* Revert \"revert changes\"\r\n\r\nThis reverts commit 2d8bf6b5f2e26a7730023990d6bc922b18039a14.\r\n\r\n* Revert \"Revert \"revert changes\"\"\r\n\r\noh goooooood\r\n\r\nThis reverts commit 8e47a865f0ec5a5abfad943b71b653609f500e84.\r\n\r\n* Revert \"Revert \"re-add min-width\"\"\r\n\r\n....sigh\r\n\r\nThis reverts commit 2f02306745a8626509584fa69e712db5fd4fd290.\r\n\r\n* Revert \"re-add min-width\"\r\n\r\nThis reverts commit 35c342008afc51f9bf1922a5aa14aad7de1c5e4f.\r\n\r\n* Revert \"revert changes\"\r\n\r\nThis reverts commit 2d8bf6b5f2e26a7730023990d6bc922b18039a14.\r\n\r\n* Revert \"[WIP] do not render special title comp\"\r\n\r\nThis reverts commit 9f3dfef6534bdf1088212880d45e6f585e92ca2a.\r\n\r\n* Add a container element also use fit-content\r\n\r\nthis means that there will occasionally be too much right padding\r\nbut *personally* this seems preferable to vscodes solution to use\r\nword break: break all which splits midword etc...\r\n\r\n* Remove common class in quickinfo and border bottom\r\n\r\n* revert to using word-break\r\n\r\n* add max height\r\n\r\n* add max height to documentation\r\n\r\n* remove max height from container\r\n\r\n* add max height and overflow\r\n\r\n* add max-height to each element\r\n\r\n* add full ternary to hover\r\n\r\n* Revert \"add full ternary to hover\"\r\n\r\nThis reverts commit 617684d56ec771f6b276b54e37f29d60cf00d59f.\r\n\r\n* Revert \"Revert \"add full ternary to hover\"\"\r\n\r\nThis reverts commit 63cef8504503252a81cf6aa0a7dde1c7526cb1d2.\r\n\r\n* Revert \"Revert \"Revert \"add full ternary to hover\"\"\"\r\n\r\nThis reverts commit 835c4a88ff71b01c49d1de740f660526a5eda84c.\r\n\r\n* Revert \"Revert \"add full ternary to hover\"\"\r\n\r\nThis reverts commit 63cef8504503252a81cf6aa0a7dde1c7526cb1d2.\r\n\r\n* Revert \"add full ternary to hover\"\r\n\r\nThis reverts commit 617684d56ec771f6b276b54e37f29d60cf00d59f.\r\n\r\n* attempt to fix package and yarn.lock\r\n\r\n* fix package and lock add keys to signatures\r\n\r\n* remove keys not unique enough\r\n\r\n* remove erroneous setState\r\ncommits are a shambles...\r\n\r\n* fix check to prevent rendering tooltip if no elements\r\n\r\n* remove :empty selector as it removes empty styling elems\r\n\r\n* re-add title styling\r\n\r\n* make code block wrap in hover tool tip\r\n\r\n* pass padding as a props to instances of info title comp\r\n\r\n* fix padding for titles, darken tooltip\r\n\r\n* Handle code block overflow stop\r\n\r\n* add overlflow overlay\r\n\r\n* fix error style highlight\r\n\r\n* remove styles from code block\r\n\r\n* set quickinfo container height to fit content\r\nadd padding default of 0.5rem and max height to\r\ndocumentation and title\r\n\r\n* replace classnames with quickInfoComponent\r\n\r\n* render documentation as text prop\r\n\r\n* add initial coloring for code blocks, except in pre\r\nfix overflow quirk but setting it only in docs and not its children\r\nincrease arrow size\r\nadd margin right to autocomplete\r\n\r\n* add todo comment to dynamically change darkening\r\nbased on theme\r\n\r\n* add darken to common folder and use for code block\r\n\r\n* add documentation line height for better legibility\r\n\r\n* remove max height from pre tag\r\n\r\n* reorder imports to fix lint issues\r\n\r\n* add user configuration for hover box\r\n\r\n* use tooltip color in container but editor hover for hover items\r\n\r\n* remove border color style as it is unused\r\n\r\n* alter degree of darkening based on lightness or darkness of color\r\n\r\n* [WIP] code blocks to user configurable opts\r\n\r\n* use editor background to darken codeblock\r\n\r\n* reduce container padding use darkened bg to darken code block"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6e2ba2ae7a2c57256c1353e1f5d8b81df5e4c4ae", "message": "Bugfix/open new file after close (#1246)\n\n* return main window and create one if unavailable\r\n\r\n* hide window on \"close\" so object not destroyed\r\n\r\n* add accelarator options\r\n\r\n* explicitly pass in focused window to menu clicks\r\n\r\n* create fn ensure window always exists\r\n\r\n* use browser window for oni command\r\n\r\n* create ref to main window to use on activate\r\n\r\n* Fix incorrect conditional for windows.length\r\n\r\n* fix unintentional command rename\r\n\r\n* re-add old conditional with better ordering\r\n\r\n* remove hiding functionality\r\n\r\n* Fix rename bugs remove traces of quitting state\r\n\r\n* add delayed event sending\r\n\r\n* add event on oni.started listened for in main\r\n\r\n* send delayed event to main process\r\n\r\n* create dryer wrapper fn\r\n\r\n* switch to using once method for ipcMain\r\n\r\n* revert changes to oni.sh\r\n\r\n* finish reverting oni.sh changes"}, {"url": "https://api.github.com/repos/onivim/oni/commits/056ec8b563b677da19e14a6e3de4335cd71e4172", "message": "remove icon for default command line (#1293)\n\n* remove icon for default command line\r\n\r\n* remove unused component"}, {"url": "https://api.github.com/repos/onivim/oni/commits/449a4d2220f2d7994ab4109b27ec514a2a27b1a8", "message": "Bugfix/update colors when config changes (#1276)\n\n* add fix to ensure color store updated when config changes\r\n\r\n* fix change to newfiles command\r\n\r\nno Idea where that change crept in from\r\n\r\n* Simplify fix use available subscription fn\r\n\r\n* remove extra space"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c01ae065c853e50471b7e4b17f4cadbb019fe7f7", "message": "Remove default command line icon/Add Octicons (#1249)\n\n* add octicons and change : icon\r\n\r\n* Remove icon for `:` in commandline\r\n\r\n* tweak package json\r\n\r\n* Add tslint exclude node_modules to package\r\n\r\n* remove unused component"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b552a3f60dfdb5ce2b17d7f8275a11e6cb499a3b", "message": "Feature/add file associations (#1245)\n\n* add filetype associations for os recognition\r\n\r\n* fix json errors\r\n\r\n* fix moar json errors\r\n\r\n* add fileopen command\r\n\r\n* refine file open functionality\r\ninclude check to see if valid path can be created\r\nif so open with valid path\r\n\r\n* [WIP] add handler for responding to open-file\r\n\r\n* add fileprotocol for electron\r\n\r\n* add conditional to file protocol\r\n\r\n* remove conditional add safer logs\r\n\r\n* add is package to associations\r\nremove args from activate create window\r\n\r\n* fix typo and pass correct path to event handler\r\n\r\n* Add environment check\r\n\r\n* add json to filetypes\r\n\r\n* remove logs\r\n\r\n* replace mistakenly removed logs\r\n\r\n* revert change start editor to minimise footprint\r\n\r\n* add browserWindow variable\r\n\r\n* add create window call\r\n\r\n* add createwindow and open-file event\r\n\r\n* remove false assignment"}, {"url": "https://api.github.com/repos/onivim/oni/commits/88f26513b6a46e0a63125ea348deea120ff6659d", "message": "Feature/hide app shortcut on macOS (#1241)\n\n* add hide app command and bind to m-h\r\n\r\n* use app.hide api\r\n\r\n* fix import use remote.app\r\n\r\n* add menu commands and show on activate\r\n\r\n* Remove hide option from dock as it already exists"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5fd608641d3bee9b57eb1234fbc359085ecd7f88", "message": "Feature/add search icon commandline (#1230)\n\n* Rework styling to match quickopen menu\r\n\r\nalso add icon - file icon atm ?alternatives\r\n\r\n* Render wild menu into the stack layer\r\n\r\n* Reduce padding\r\n\r\n* Compose wild menu with commandline\r\n\r\n* Configure wild menu and commandline\r\n\r\nComponents now render in the same layer and\r\ncan be positioned similarly if both present\r\nor interchangeably if one options is disabled\r\n\r\n* Render components separately inside of common\r\n\r\ncontainer\r\n\r\n* Attempt to manually place external menus not working\r\n\r\n* add space to constructor\r\n\r\n* Add timeout to prevent flickering of cmdline\r\n\r\nAlso only render overlay if both elements present\r\n\r\n* revert changes to neovim surface\r\n\r\n* wire up setcursor actions\r\n\r\n* Add a cursor to commandline\r\n\r\n* Remove excess space\r\n\r\n* Remove refs from commandline components\r\n\r\n* re-add focus as this is essential for functionality\r\n\r\n* important: fix html trimming whitespace bug\r\n\r\nusing whitespace: pre-wrap from one of see\r\nfacebook/react#4134\r\nhtml auto removes trailing white space breaking\r\nthe cursor's position functionality\r\n\r\n* add in the prompt segment\r\n\r\n* fix overflow styling\r\n\r\n* add pointer events but not selection\r\n\r\n* Add overflow handling for command line\r\n\r\n* minor change to comment position\r\n\r\n* adjust cursor position\r\n\r\n* re-add missing max width\r\nto ensure commandline and wild menu have\r\nsame width\r\n\r\n* re-arrange css to rerun tests\r\n\r\n* re-arrange css again..\r\n\r\n* reduce timeout to 80ms\r\n\r\n* Add spurious CR to rerun test\r\n\r\n* Add icons to replace the first character\r\n\r\n* Add configuration to show and hide icons"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fe7a054ad8017456af3f14229916a0c5b13d4862", "message": "[WIP]Bugfix: rendering cracks (#1224)\n\n* add normalization to height in canvas\r\n\r\n* round up font sizes\r\n\r\n* Revert changes to width and height measurements"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f2d769d41d1dad7e808536e33d1145bb8ae0a5bf", "message": "Restyle wild menu/add commandline cursor (#1191)\n\n* Rework styling to match quickopen menu\r\n\r\nalso add icon - file icon atm ?alternatives\r\n\r\n* Render wild menu into the stack layer\r\n\r\n* Reduce padding\r\n\r\n* Compose wild menu with commandline\r\n\r\n* Configure wild menu and commandline\r\n\r\nComponents now render in the same layer and\r\ncan be positioned similarly if both present\r\nor interchangeably if one options is disabled\r\n\r\n* Render components separately inside of common\r\n\r\ncontainer\r\n\r\n* Attempt to manually place external menus not working\r\n\r\n* add space to constructor\r\n\r\n* Add timeout to prevent flickering of cmdline\r\n\r\nAlso only render overlay if both elements present\r\n\r\n* revert changes to neovim surface\r\n\r\n* wire up setcursor actions\r\n\r\n* Add a cursor to commandline\r\n\r\n* Remove excess space\r\n\r\n* Remove refs from commandline components\r\n\r\n* re-add focus as this is essential for functionality\r\n\r\n* important: fix html trimming whitespace bug\r\n\r\nusing whitespace: pre-wrap from one of see\r\nfacebook/react#4134\r\nhtml auto removes trailing white space breaking\r\nthe cursor's position functionality\r\n\r\n* add in the prompt segment\r\n\r\n* fix overflow styling\r\n\r\n* add pointer events but not selection\r\n\r\n* Add overflow handling for command line\r\n\r\n* minor change to comment position\r\n\r\n* adjust cursor position\r\n\r\n* re-add missing max width\r\nto ensure commandline and wild menu have\r\nsame width\r\n\r\n* re-arrange css to rerun tests\r\n\r\n* re-arrange css again..\r\n\r\n* reduce timeout to 80ms\r\n\r\n* Add spurious CR to rerun test"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5336bc1c551db591710a030b2fd356a59005294a", "message": "add styled components and status resizer (#1211)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ddfd1a1c3b6e8283c5d1fded3b97066aa2d4c01a", "message": "bugfix/render-italics-and-bold-text (#1203)\n\n* initial investigation re highlight issues\r\n\r\n* add bold and italic to rendering\r\n\r\n* remove unnecessary conditional\r\n\r\n* change ternaries to or operators\r\n\r\n* Add is isBoldAvailable and isItalicAvailable\r\n\r\n* Round font to integer as canvas needs int\r\n\r\nChrome's canvas element rounds non int values for\r\nfonts to nearest int so changed this so it occurs explicitly"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e80ae68341daaccb2e4808304afc7d74f07a8c58", "message": "Feature: pass priority from config (#1210)\n\n* add status priority to config\r\nrefactor status plugin to use priority from\r\nconfig add oni-api 0.0.17 which reflects this\r\n\r\n* fix tests to match changes to oni status api"}, {"url": "https://api.github.com/repos/onivim/oni/commits/86b1eeeeda42127417f3af5bc3acaa004b2cbd1c", "message": "Feature/add focus gained and focus lost hooks (#1198)\n\n* [WIP] add focus hooks\r\n\r\n* re-order imports for linter\r\n\r\n* revert changes to main.ts\r\n\r\n* Pass last buffer to focus gained and lost\r\n\r\nadd subscription to status bar plugin to\r\nupdate git branch on returning to oni\r\n\r\n* correctly type events in workspace"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bf65627a45d250c90092421f10e6f751b0c556cf", "message": "Add flow lang server (#1190)\n\n* add flow lang server\r\nalso add toggle in config to swap flow for ts\r\n\r\n* remove flow lang server as too large\r\n\r\nadd check in typescript plugin to deactivate if alternatives\r\nalso add keys to various components to quiet errors\r\n\r\n* separate check for existing ts lang server\r\n\r\n* revert key changes in buffer bar\r\n\r\n* Remove unnecessary param\r\n\r\n* revert quick info key change"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f706b6e13e5658b65a831d05918f10bee17d556f", "message": "Externalize wildmenu (#1179)\n\n* add formatting changes to jsx elements\r\n\r\n* Add wildmenu externalization [WIP]\r\n* hook up reducer, action creators etc\r\n* add subscription events\r\n* add React component and initial styling\r\n\r\n* Hook up wild menu selection and hiding\r\n\r\n* Use theme to style component\r\n\r\n* Add communal animations file and change pos\r\n\r\nition of wildmenu\r\n\r\n* Place wildmenu behind experimental flag\r\n\r\n* Add scroll list function to ensure autoscroll\r\n\r\n* increase max-height for menu\r\n\r\n* desperate attempt to reconcile with master\r\n\r\nlikely this branch will have to be forgone\r\n\r\n* finish fixing merge conflicts\r\nhopefully all is integrated properly\r\n\r\n* Tweak formatting of neovim surface\r\n\r\n* Add pagination improve stylings of menu"}, {"url": "https://api.github.com/repos/onivim/oni/commits/611b194a22cbfeba175b182e877e696c6c2afa8b", "message": "Continuation externalising cmdline (#1177)\n\n* Initial wiring of external commandline\r\n\r\n* initial hardcode font to white\r\n\r\n* convert commandline components to styled components fix merge conflicts\r\n\r\n* add focus state to input element\r\n\r\n* fix typings for commandline\r\nensure oni-api 0.0.9 for now\r\n\r\n* Add experimental flag for cmdline feature\r\n\r\n* set oni-api to 0.0.9"}, {"url": "https://api.github.com/repos/onivim/oni/commits/30a3f9b2237f834f992d7eb2fdf6c2da24368c09", "message": "Add save window state functionality (#1160)\n\n* Add save window state functionality\r\n\r\n* add better error handling if no bounds\r\n\r\n* ensure there is a default window state\r\n\r\n* add further checks to ensure window.bounds\r\n\r\n* ongoing tweaks in attempt to trace pack error\r\n\r\n* remove defaults add logging\r\n\r\n* fix mistaken if clause to catch falsy args\r\n\r\n* remove logging and excessive conditionals\r\n\r\n* add is maximised so can restart as maximized\r\n\r\n* finalise functionality to save is maximised state"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7b62f0e404d069376a6bc4a22709e34ae35cf45e", "message": "[WIP] Solarized theme (#1122)\n\n* [WIP] add solarized theme\r\n\r\n* add theme folder\r\n\r\n* Add solarized [WIP]\r\ntweak json to match solarized theme\r\n\r\n* add further colors to palette\r\n\r\n* remove unintentional log\r\n\r\n* Remove old solarized.vim split out light/dark\r\n\r\n* name of theme in solarized dark"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0059fb3c7488cd3b350f5dfa9fe93e45d4984ae6", "message": "Add react dev tools and hook up redux dev tools (#1142)\n\n* add react dev tools\r\n\r\n* less asyncification in a misguided..\r\nattempt to debug if that causing the lack of cool tools\r\n\r\n* upgrade electron-devtools-installer\r\nadd func to init tools async\r\n\r\n* hookup redux store\r\n\r\n* fix lint errors"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5a592ceaf64fb4e20535a37c6ca2ee74b9bfe471", "message": "Update oni with existing buffers and deletions (#1086)\n\n* Fix path variable\r\nRemove extra separator in path concatenation\r\nRemove carriage return in exec process return value\r\n\r\n* add logs for debugging path\r\n\r\n* re-add shell-env package\r\n\r\n* re-add shell-env typings\r\n\r\n* remove console.logs\r\n\r\n* Remove final unnecessary separator\r\nReplicate shell environment in `oni`\r\n\r\n* add updated env vars to required opts\r\n\r\n* Re-arrange requiredOptions\r\ncreate this object only after updating process.env\r\nbut not inside try catch as in the case of a failure\r\nit will be undefined\r\n\r\n* remove console.log\r\n\r\n* [WIP]add vim function to gather all buffers\r\n\r\nget buffers loop through each and get buf variables\r\n\r\n* ongoing tweaks to get all buffers on bufenter functionality\r\n\r\n* Add existing buffers to redux state\r\n\r\nUpdate action creator and reducer to\r\nadd existing buffers to state\r\n\r\nside-note try sorting buffers so that when\r\nnavigating via bnext navigation moves in\r\norder from left to right or vice versa\r\n\r\n* Add buffers and buffer formatting state to\r\nredux [WIP]\r\nremove some console.logs\r\n\r\n* [WIP] show all buffers on load\r\n\r\n* Add more stable multi buffer loading\r\n\r\nfilter and format raw buffers in action creator\r\nReturn new set after add all buffers to byId\r\n\r\n[WIP] need to set a new current buffer if\r\nopening and closing a vim session\r\n\r\n* remove console.log\r\n\r\nre-add sort to tabs selector as difficult to\r\ntarget right array in reducer\r\n\r\n* comment out echo in init\r\n\r\n* use notify with buffers in bd event\r\n\r\n* Complete filtering in neovim editor not\r\naction creator\r\n\r\n* move if statements for scratch buffer to else clause\r\n\r\n* fix duplicate imports\r\n\r\n* Remove python comments in interop function\r\nReturn single array of buffers and pull\r\ncurrent out of first place\r\nupdate typings to match changes\r\nre-add bufwipeout function\r\n\r\n* remove null fields from inactive buffers in vimscript\r\nremove filter from bufwipeout event as it is unecessary\r\n\r\n* return evt as an array of objects\r\n\r\n* pass data to updateScroll as before\r\npassing specifically the current buffer\r\nthrows errors with the subscribe function\r\n\r\n* ensure init vim does not send notify instead of notifyWithBuffers\r\nchange BufferContextType to object with current so that this can\r\nbe referenced specifically and typed\r\n\r\n* remove console.logs\r\nfinish tidying up typings\r\nconvert bw to bw! on bufferclose\r\nas neovim terminal buffers resist closing\r\nunless closed with a !\r\n\r\n* re-add sorting to tab bar\r\n\r\n* re-indent neovim surface\r\n\r\n* Revert formatting changes to neovim editor\r\n\r\n* Re-add call to update bufferfrom event\r\n\r\n* fix merge conflict and delete Oni.connect()\r\nas per #1064\r\n\r\n* begin refactor to use neovimInstance autocmds\r\n\r\n* add neovim-autocommand subscribe events\r\ndeprecate general event handler function\r\nconsolidate all general buffer updates to the updateBuffer\r\nevent function which is called in each handler\r\n\r\n* fix lint error re comments\r\n\r\n* replace bufferManager update call\r\nthis is because if not called inside the generic catch\r\nall bufferEvent function it seems certain events do not get necessary updates and the line error recurs\r\n\r\n* call update window more frequently in general handler\r\nsave buffer from buffermanager call to use in bufenter event\r\n\r\n* remove unnecessary semicolon\r\n\r\n* Re-add missing lines to session.ts\r\nshift calls to update window to match prev. order\r\n\r\n* remove bad global _buf\r\nadd if statement not to double update\r\nand if event is bufenter call update buf manager in bufenter event\r\n\r\n* fix typo bufEnter to BufEnter\r\n\r\n* Remove if statement from update buffer ?value\r\nAdd several keys as their absence can lead to\r\nhorrid subtle bugs"}, {"url": "https://api.github.com/repos/onivim/oni/commits/40e54a60eb9c8f9301d05dad10a44cb1e25d476b", "message": "Add new window option (#1111)\n\n* add new window menu option [WIP]\r\n\r\n* Add dock menu building function\r\n\r\nadd option to create new window to top menu bar"}, {"url": "https://api.github.com/repos/onivim/oni/commits/499100e2b8d06e4fbdec4707b0285e38d5e30c6d", "message": "Re-activate git status bar item (#1098)\n\n* add logs and update subscription for git plugin\r\n\r\n* refactor oni-git-plugin to use new Oni api\r\nsubscribe to bufenter event\r\n\r\n* add styles to contain status item from overflowing\r\nvertically\r\n\r\n* don\"t render anything if not a repo\r\n\r\n* show only icon when not in a git repo\r\n\r\n* fix key error warnings and remove component if no branch\r\n\r\n* render nothing if no git repo\r\n\r\n* Remove console.logs as this muddies the console\r\n\r\n* return if no branch name found\r\n\r\n* change order of return statement"}, {"url": "https://api.github.com/repos/onivim/oni/commits/47829a3ec26f389e984aeef364a95f58ebb16cb5", "message": "prevent text-selection of statusbar (#1088)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ed10c47f1b8e60a6f1eed6a7b8c773a6ae2c26b4", "message": "Bugfix/path concatenation (#1066)\n\n* Fix path variable\r\nRemove extra separator in path concatenation\r\nRemove carriage return in exec process return value\r\n\r\n* add logs for debugging path\r\n\r\n* re-add shell-env package\r\n\r\n* re-add shell-env typings\r\n\r\n* remove console.logs\r\n\r\n* Remove final unnecessary separator\r\nReplicate shell environment in `oni`\r\n\r\n* add updated env vars to required opts\r\n\r\n* Re-arrange requiredOptions\r\ncreate this object only after updating process.env\r\nbut not inside try catch as in the case of a failure\r\nit will be undefined"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e51fbf2d64c00f7ff5a6a3ff98dec38e15595847", "message": "add a check for . langs and split if found (#1047)\n\njavascript.jsx and typescript.tsx are very common filetypes\r\nset by vim typescript and js plugins\r\ntweaked the grammar config checker to pickup these filetypes"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e8aa37e7d86f22393a212100690a24cb2384d40b", "message": "Bugfix/quickopen sizing (#1030)\n\n* tweak right position to prevent flickering\r\n\r\n* add overflow rules to reveal any clipped text horizontally in quickfix\r\n\r\n* add conditional to prevent quickopen left side drift\r\nthis is caused by a negative left position\r\n\r\n* extract left positioning ternary into separate function\r\n\r\n* revert canOpenDownward to arrangement on master\r\n\r\n* use Math.abs rather than convoluted ternary fn"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a3da2c9876a5596c86f641df99c945d0a6539d56", "message": "Feature/incorporate shell env package (#934)\n\n* add shell-env module to source shell path\r\n\r\n* add typings for shell env\r\nadd dependencies for shell env `thread sleep`\r\nand `spawn-sync`\r\n\r\n* Add async version of shellEnv call\r\nchange call sites to await fn and typings to return Promise<T>\r\nFix package version for shell env\r\n\r\n* fix version numbers for remaining shell env deps\r\n\r\n* Init tss server host with a pending promise\r\n\r\nAwait promise prior to calling make tss\r\nserver request\r\n\r\n* Remove try-thread-sleep\r\nMerge master\r\n\r\n* add submodules to shell-env branch\r\n\r\n* remove deleted (in master) oni.d.ts\r\nwhich seems to have survived the merge\r\n\r\n* update oni-api package\r\n\r\n* upgrade electron-builder with yarn\r\nadd await to before all in ci test\r\n\r\n* refactor to use child process to find path\r\n\r\n* Remove shell env module\r\n\r\n* merge remote changes\r\nawait `oni.start`\r\n[WIP] fix failing CI tests"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5f7e8a6f75d011466ffa78889f487c5efe3cc0bc", "message": "add overflow-x: hidden to tabs.less (#1017)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/759aa621c202d7769bf9ebc5ee1ec5b8f370aa2c", "message": "* fix user-selection issue for buffer bar (#1013)\n\n- using user-select: none\r\n* added keys to WindowSplits (as the react keys error is Super distracting for me :worried:)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6501a2b50d690ffe31e66aca71a5972c79e3e4eb", "message": "Feature/resize buffer bar scroll (#993)\n\n* Reduce size of BufferScrollBar\r\n\r\n* Add todo comment in tabs component\r\n\r\n* Reduce scrollbar size and show on hover\r\n\r\n* Remove dynamically set overflow in tabs component\r\nas this overrides less hover effect\r\n* Reduce scrollbar height to 3px\r\n* add overflow-overlay to tabs class on hover\r\n\r\n* * remove height from global webkit-scrollbar\r\n* add scoped css for tab bar scrollbar"}, {"url": "https://api.github.com/repos/onivim/oni/commits/26e6c00590ed701b01f65f031404080f42085d0a", "message": "Add minimise keybinding to default key bindings (#964)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/01f439771d8fdc3a324cdbf47a7e725c100be0f0", "message": "bugfix/pass additional paths (#924)\n\n* Start nvim process with helper function\r\n\r\n* [Promiscuous]\r\n\r\n* remove fixpath plugin\r\n\r\n* remove fixpath from package json"}], "pull_requests": [{"url": "https://api.github.com/repos/onivim/oni/pulls/1717", "title": "feature/switch typescript language server to theia-ide", "body": "Following discussion with @bryphe in #1593 this PR switches the default `lsp` for typescript to [`theia-ide/typescript-language-server`](https://github.com/theia-ide/typescript-language-server), more details re. reasoning behind the switch can be found in the linked issue.\r\n\r\n@bryphe I've essentially replicated the steps I took to setup the LSP and haven't touched Oni's ts lsp.\r\n\r\n**Note**:\r\n* Currently there are issues with how oni handles `rename` functionality which are exacerbated with integrating this LSP as I believe Oni might need to make some changes to align with the LSP implementation", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1705", "title": "[WIP] Feature/change token format", "body": "Following discussions in #1443 to match oni's `editor.tokenColors` to match with `vscode`'s syntax to allow for cross compatibility with `vscode` themes this PR changes the theme format to match as well as *aims* to merge the user, default and theme tokens with priority and as a test adds the editor tokens from `vscode/onedark.theme.json`\r\n\r\nTodo:\r\n- [ ] Ensure token merging works as expected.\r\n- [ ] Update theme token provider to fill in any necessary gaps as the imported theme does not cover many token scopes which the hover depends on\r\n\r\nThings to note:\r\n\t* Works quite well once the tokens match `vscode` providing highlighting as pert the theme though maybe since more tokens are processed the initial paint is kind of slow..\r\n\t* Tokens supplied in the vscode theme do not seem to cover the hover box or rather common tokens that appear in the hover box.", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1697", "title": "bugfix/ check if linecontent before executing get token at", "body": "The `getTokenAt` function in the `bufferManager` fails at the substring portion of the function, despite a check to see if the value is falsy. This fails I think because the value is truthy but not a string somehow \ud83d\ude15, I can't find where the value being passed in is incorrect as I cant reliably reproduce this error though its usually on startup, to guard against this I added a check to see if the `substring` exists on the `lineContents` var passed aka if its a string, if not the fn returns null.\r\n\r\nNote the function's parameters are all typed an there are no type warnings so it is seemingly always being passed a string but somehow the value it is passed can fail to have a `.substring` method \ud83d\ude15 ", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1552", "title": "[WIP] Feature/add enzyme unit infrastructure", "body": "Initial infrastructure setup for using `jest` and `enzyme` to begin testing react components,\r\nthis PR includes:\r\n\r\n* configuration of `jest` in package.json\r\n* setting up a jests setup file\r\n* adding separate commands to test `react` components (as this uses jest not mocha)\r\n* create separate `/components/tests/` dir so these test remain in proximity to their subjects for easier importing and also to avoid collision with mocha (not an issue I've observed just one I worry about)\r\n* Add `redux-mock-store` to facilitate testing redux connected components.\r\n\r\nAs discussed in #1128 once this PR goes in I can begin to look at gradually add tests hopefully most/all/hopefully not alone react components\r\n\r\nNB: The tests I've included were more to test that enzyme and redux mock store and the commands were all working correctly, will be changing those subsequently", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1540", "title": "Feature: Prettier plugin", "body": "As discussed on Gitter, this is a plugin to provide `prettier`'s  autoformat capabilities to Oni.\r\n\r\n*Todo*\r\n\r\n- [x] Status bar item ~~with prettier logo~~ - stretch goals: show cross if formatting failed- At present cannot include images ?webpack setup?\r\n\r\n- [x] Check for prettierrc and give that priority if present\r\n\r\n- [x] Setup user config for prettier, should match the prettier config opts settings\r\n\r\n- [x] Fix cursor positioning on format\r\n\r\n- [x] Save buffer following format otherwise buffer saves autoformats aka buffer is continuously in modified state.\r\n- Stretch goal: Tests using @TalAmuyal's plugin testing example for Markdown preview", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1536", "title": "Feature: add file explorer item options", "body": "I went out on a limb and added a feature I *assumed* would be of value to other people which relates to the fact that clicking the root directory in the file explorer does nothing. My immediate thought was that if I didn't find what I was looking for then clicking that would move me one level up \ud83e\udd37\u200d\u2642\ufe0f , I definitely appreciate that this is an assumption someone else might assume that clicking it would close everything ?? (my counter point there would be that that's the equivalent of closing the explorer \ud83c\udf35 )I have no idea what the *correct* action should be but I though I'd put forward my proposed solution. Its a very small addition so not much lost If this doesn't seem like the way we'd like to go with this \ud83e\udd1e \r\n\r\nEDIT:  An additional command I can add to this PR is the reverse action aka navigate downwards and I an also create commands for both so they can be used by the navigator", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1435", "title": "Feature/get, unmap and restore user bindings", "body": "@bryphe whilst looking into #1396 I mentioned I wrote some functionality to get a user's mappings, unmap them and restore them. Whilst not tied into any specific issue it occurred to me that future use cases for this functionality could be \r\n* showing a user their vim bindings in oni,\r\n* giving oni the ability to potentially add some ux to change user's vim binding in oni.\r\n* the original inspiration for this functionality temporarily removing user's bindings in oni's buffer layer\r\n\r\n<img width=\"564\" alt=\"screen shot 2018-02-03 at 10 31 12\" src=\"https://user-images.githubusercontent.com/22454918/35766295-72e40fde-08cd-11e8-84c0-84c8069c0b71.png\">\r\n\r\nA above is a screenshot of the output of the command, which seems like a potential gold mine to me hence the PR, though if there isn't as much utility in this as I'm imagining no worries \ud83d\udc4d , just thought I'd run it past you rather than have it locally and it never see the light of day", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1310", "title": "[WIP] Feature/git changes in statusbar", "body": "Very impetuously I've created an initial implementation of the  feature I proposed in #1308, There were a few questions I raised there regarding how to go about this regarding the `Git` service and how it fits in.\r\n\r\nWhat I've implemented here is using `simple-git` which thankfully is typed and promise compatible. It provides *very handy* wrappers around git commands and added the number of additions and deletions to the git statusbar. Given that I rushed ahead I'm more than open to feed back re choice of library, changes to the `Git` service etc.\r\n\r\n<img width=\"498\" alt=\"screen shot 2018-01-16 at 20 56 06\" src=\"https://user-images.githubusercontent.com/22454918/35012630-533413d8-fb02-11e7-8576-47e688892082.png\">\r\n\r\n\r\n### Outstanding tasks\r\n\r\n- [x] Icons instead of plus and minus to show changes\r\n*EDIT:* Or colors\r\n<img width=\"390\" alt=\"screen shot 2018-01-16 at 21 27 05\" src=\"https://user-images.githubusercontent.com/22454918/35013113-30788282-fb04-11e7-90e8-84c618c53ea0.png\">\r\n\r\n\r\n### Potential additional feature\r\n\r\n* Per Buffer changes - the same function from `simple-git` provides additions and deletions per file so its possible to check for a file match and if available render the changes for the specific file as a configurable option\r\n\r\nwil fix #1308", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/340940671", "body": "Thanks for the reply,\r\nRe the TS config unfortunately its a work repo, although if it helps its pretty deeply nested but the tsconfig is at the root of the project. I had a go with a [much much smaller project](https://github.com/Akin909/typescript-todo) (don't think it'll be much help) with a tsconfig and It also seems not to be picking up the types for the project. \r\n\r\nAlso thanks for the pointer re installing ale in the oni plugins directory i'll give it a go. Out of curiousity I have some plugins which work in Oni out of the box (like easy motion) without needing to be in the oni plugins dir, when does a plugin need to go in there or is the practice with oni that all plugins should really go in there?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340940671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342259741", "body": "Yes I use vim plug to manage my plugins and deoplete for autocompletion, ale for linting (plus dozens more), at the moment though ale which usually shows lint errors with signs in the signcolumn  (or gitgutter which shows git changed lines ) aren't working is there a specific config for allowing the sign column? sorry feel like I'm a little of the original topic.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342259741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342308317", "body": "I use quite a few, so I tried a minimal vimrc\r\n```vim\r\n\" Plug Setup ===================== {{{\r\n\"This will autoinstall vim plug if not already installed\r\nif empty(glob('~/.vim/autoload/plug.vim'))\r\n  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs\r\n        \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\r\n  augroup VimPlug\r\n    au!\r\n    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC\r\n  augroup END\r\nendif\r\n\r\n\r\ncall plug#begin('~/.vim/plugged')\r\nPlug 'airblade/vim-gitgutter'\r\ncall plug#end()\r\n```\r\nWhich unfortunately still didn't work, I also ran the commands above and that worked so it seems the signcolumn works. Lastly I ran `ALEInfo` which show a status log etc \r\n\r\n<img width=\"703\" alt=\"screen shot 2017-11-06 at 22 04 14\" src=\"https://user-images.githubusercontent.com/22454918/32466801-188ce1a0-c340-11e7-8bec-48f1022ee20a.png\">\r\n\r\nNone of my executables were found by Ale which makes me wonder if git can be found by gitgutter although when I run a terminal with my full config it has access to fzf and git for example.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342308317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342323294", "body": "Just tried git version and it's `2.13.6 (Apple Git-96)` in Oni and in my shell its `2.15.0`(I also use hub which is a wrapper around git, not sure if that'd have and impact. The process.env.PATH that Oni detects is not the path variable I export from my zshrc\r\n<img width=\"235\" alt=\"screen shot 2017-11-06 at 23 37 31\" src=\"https://user-images.githubusercontent.com/22454918/32469657-8baee2a4-c34b-11e7-98c1-7357210ee0b5.png\">\r\nShould I be setting this in the Oni config - Just read the docs on this and saw the section on setting this. I wonder if theres a wayI can adjust it so Oni picks it up? I tried passing it to my config but that didn't change oni's PATH.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342323294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342658564", "body": "I had a go with the additional paths but the path oni is using didn't update at all, and the default vars given to the additional paths variable seem like they should include `usr/local/bin` already (which I believe would resolve my issue and is what I was trying to add), I ran into a similar issue with vimr and the solution i found turned out to be running an interactive shell I have no idea if that would relate to this at all but the problem was with finding go executables", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342658564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342997524", "body": "@bryphe  I've had a look at the pre-release version and its soo much better \ud83d\udc4d \ud83c\udf86  thanks !! regarding the path issue i've been looking into that and noted #708 relates to this as well(closed), I think NVIM now correctly sources the relevant rc file and gets the PATH, as in the nvim terminal *in oni* (release version) I get a different path to `echo $PATH` in nvim (via nvim commandline in oni). I had a read through the code and I'm not sure when the cli/oni file is run but its one of the only points when the $PATH is set. I think the additional paths aren't passed through or rather never used in the build versions as when running it locally via the cli it all works with a full path.\r\n\r\nI've found [this module](https://github.com/sindresorhus/shell-path) which hopefully addresses paths not being passed in gui apps on Mac OS (which is where I'm running this sorry for the late info) . \r\n\r\nI think my initial issue re the error highlighting is resolved and I'm getting correct linting errors now from the tslint and tss plugins so I'm happy to close it thanks for the fix. Re. the $PATH i'd be happy to have a go at looking into this although I currently cant figure out how to make changes then build and install the electron app since if I run it via the CLI it all works fine anyway. PS. also happy to leave it be and stop pestering", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342997524/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343421653", "body": "I can look into this and have a go at replacing the `cp.spawn` with the helper function,  and try the `shell-env` module to see if this loads in the full path, I think it would possibly remove the need for the additional paths although I think if a user wanted to add something to the path in oni but not in their shell for some unfathomable reason it might be good to keep the config option around?\r\n\r\nHow do I build and create the electron app so I can test it outside of the cli environment?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343421653/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343750375", "body": "I've had replaced the call to `child_process` with a call to the helper function and it runs correctly locally although having read the development i'm still not entirely clear on how to build the project and output an version of the app to run outside of the console.\r\n\r\nRegarding `shell-env` I tried adding it to the app and it seems to mess with the types in the app and it fails to build. There isn't a type package for it on *definitely-typed*. Im attempting to add type definitions for it manually, in the definitions folder", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343750375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344446455", "body": "@bryphe, i've also noticed this issue I had a go with the above command after loading oni and then restarting a session using the `startify` plugin which handles session management. It seems that the buffers object only contains the active and visited buffers if the others are set to hidden which I have as a default (i'd imagine this is fairly common since you cant switch between unsaved buffers without this setting) heres a screen shot.\r\n<img width=\"1266\" alt=\"screen shot 2017-11-15 at 00 24 54\" src=\"https://user-images.githubusercontent.com/22454918/32812164-94fa4e42-c99b-11e7-8bc4-ffefd03cde54.png\">\r\nI have a split at the bottom showing a list of my buffers using a vim-plugin (there's a few missing from the oni bufferline)\r\n\r\nWhen I do `:bnext` and swap buffers the new buffer gets added and show up in the bufferline.\r\n\r\nFinally when I remove a buffer using `:bd` to delete a buffer it remains in the bar until it is clicked.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344446455/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345025059", "body": "just piping in here but you can do this in your vimrc using\r\n```vim\r\naugroup TerminalStuff\r\n   au! \" Clear old autocommands\r\n  autocmd TermOpen * setlocal nonumber norelativenumber\r\naugroup END\r\n```\r\n\r\nhopefully that helps", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345025059/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345035902", "body": "@bryphe  I've implemented this in #964 :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345035902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345046667", "body": "I'll have a look at resolving that although it seems like that would make it an async call meaning it can't be in the constructor function \ud83d\ude1f , i'll have a go at figuring out how and where to call that function if it's async. Any suggestions?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345046667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345176574", "body": "Thanks for the pointer @bryphe \ud83d\udc4d , hopefully my changes are in the right vein", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345176574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345790477", "body": "Sure \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345790477/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345838886", "body": "I've removed the `try-sleep-thread` module which seems to be a subdependency of shell-env or one of its dependencies, the functionality seems unchanged and it seemed to have been causing the build failure on windows. This does result in a warning from `npm` that the module is missing  though \ud83d\ude1f ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345838886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346172604", "body": "@CrossR thanks for the heads up! I've added the submodules back in (hopefully that reflects whats on master), @bryphe I've made a PR on the Oni-api repo ( with a necessary addition for this PR to work) as the typings for the `Process` functions are there so I have updated them to reflect that the async versions will return promises.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346172604/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346187910", "body": "@bryphe thanks \ud83d\udc4d just upgraded the package and updated the PR", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346187910/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346474645", "body": "Tried running `npm run pack` but this command just hangs on my system and I eventually have to kill it, not sure if i'm missing a step, when I run npm test without the pack command which may not be relevant since I haven't generated a new package all I get is the autocompletion test error.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346474645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346616809", "body": "@bryphe  I completely understand and tbh I don't imagine there is some standard way that vim plugins interact with things like the signcolumn or echo area that are likely to be generalisable and implementing the code in Oni itself rather than as a plugin would likely lead to more harm than good.  If the general plan is to move towards oni plugins with neovim as the \"engine\" then that's fair enough. \r\n\r\nI might have a very brief stab at seeing if this can be easily implemented as a plugin, and if you don't mind leave this thread open for a (very short period of time) whilst I attempt it so I can perhaps pick your brain if I run into any issues. I'll use the tslint plugin as a template for this and see how it works out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346616809/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346617858", "body": "@bryphe  I'm running MacOS, high sierra (version 10.13.1), I've tried running `npm run build` then `npm run pack` but this process reaches the point where it says its building the dmg but then stalls (I've left it for at least an hour at some point with no progress), i'll try running the command on a different branch to find out if its related to my system or my branch and then try taking out the dependencies to see if they resolve the issue", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346617858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346702454", "body": "@bryphe I've tried running the command on my version of master with the node modules cleared and I still get the same issue, here's a screenshot with the warnings I'm getting.\r\n\r\n<img width=\"1392\" alt=\"screen shot 2017-11-23 at 21 53 07\" src=\"https://user-images.githubusercontent.com/22454918/33189304-4a6a00b6-d099-11e7-91c9-f29066b63a54.png\">\r\n\r\nI'm not familiar with `asar` but not sure why or if that'd could be the culprit \r\n\r\nEDIT: Did a bit of digging and seems to be related to electron-userland/electron-builder#2115, \r\na bug related to high sierra \u2639\ufe0f ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346702454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346946606", "body": "@bryphe I managed to get the app building by upgrading electron-builder to the latest version using `yarn`, which seems to have resolved the issue. Testing against that I now get` \"before each\" hook for \"ci test:` for all CI tests and each test specifically errors with the following message ` Error: ChromeDriver did not start within 5000ms` .\r\n\r\nI think it might relate to making the startup async as `Oni.start` in `AutocompletionTest.ts` is sync and meanwhile i think that startup now returns a promise though awaiting it doesn't seem to work. I'll have a closer look (I seem to also get this error with the test on my local master as well). \r\n\r\nAlso given that child_process can be used to find the `PATH` at startup would it be preferable to use that and do away with shell env? or if I get it working with shell env shall I leave it in, looking at the source it looks to be a wrapper around using `child_process` with some intermediate steps and error handling thrown in.\r\n\r\nRunning my local dmg once built works fine btw.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346946606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346970067", "body": "I've refactored this PR to use to `Child_Process.exec` (promisified - using util.promisify) method, great find \ud83d\udc4d @bryphe , also removed shell-env and its dependencies, though my build version is still running into errors with the CI tests due to some async quirk somewhere which i'm investigating", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346970067/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346999298", "body": "@bryphe \ud83d\udc4d yep all set I've been running this version of Oni locally and haven't had any issues I am getting a fluctuating set of results with the tests which was probably due to not running `build` and `pack` before the integration tests, now I'm getting the autocompletion error as before, did a bit of digging couldn't quite find what's causing it to fail", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346999298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347024428", "body": "Thanks @bryphe \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347024428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347536240", "body": "@bryphe @badosu  I'm happy to look into this (if no else is already looking at it) and have done a bit of digging already (I'm using neovim @2.1 on MacOS), I've had a look at some of how buffers are managed and as you say not all buffers are present when checking the redux store. I'm wondering if either of you can point me towards where buffers are initially populated. I was thinking that there needs to be a check on `VimEnter`,`BufWinEnter`,`BufEnter` and `BufRead` and perhaps at other points as if for example I run `bd!` which i commonly do this does not update the bar as well although I don't know where would be a good place to check as im not sure what event is fired if any following an `excommand` in which case I don't know which event to hook into.\r\n\r\nEDIT: Forgot to mention as I think that this relates to this issue rather than a separate issue since buffers for plugins like `nerdtree`, `undotree` etc are shown (but I think should be hidden as the the plugins, i think, do not intend for them to be referenced after for example you close a nerdtree split) if you click on the buffers oni crashes showing the neovim installation error.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347536240/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347600734", "body": "@bryphe , I've tried removing the right option, setting it to a static value or a percentage, as well as creating a less file and sizing it based on a media query unfortunately as it is being styled dynamically in the react component it seems not to pick up any less styles or override them, I think that it likely needs a max width (as a guess re solution) because what seems to be happening is that the element is less than full with then 8px is added to its right forcing it to change width which causes the `this.state.isFullWidth` boolean to flip as it is no longer full width and the cycle continues. I think that if the width was static in some way when at less than full screen then it wouldn't flip?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347600734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348346268", "body": "@bryphe I've started looking into this and having googled a bit and read the docs for the `msgpack` api I couldn't quite find the answer to a problem which I'm facing which is with the `nvim_list_bufs` api method.\r\n\r\nThe method returns a result which still includes the deleted buffer, would you happen to know if there's another poorly documented/ less visible method, or different mechanism you've used to get the current list of buffers as my thoughts are moving towards trying to create a viml function that would return this info although I realise you're trying to reduce reliance on the vim layer, however when I run `ls` for example it always returns a correct list which could possibly be packaged up, as I noticed a method to execute an `excommand` or a function. \r\n\r\nHaving an up to date list seemed like something I'd hoped the api would do well \ud83d\ude1f or at least more info in case there is a clue as to if a buffer has just been deleted but is still being referenced.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348346268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348778799", "body": "@bryphe  it seems that with that PR by pulling in the `PATH` variable and concatenating it with the users additional paths there is a trailing space added as well as a duplicate colon. `luedke/code/go/bin :/usr/bin:/usr/local/bin::/` here is the section, I believe this makes the variable invalid so the lang server isn't picked up.  @josemarluedke are you already setting additional `environment.additionalPaths`? \r\n\r\nI think a possible solution would be to remove the additional variables (which might not be ideal although the variables will probably be in a user's path) another solution is to fix the concatenation on `oni` end but this then leaves the door open to an invalid `oni` path due to potential mix up in the config option or at least causes duplicates, which doesn't invalidate the path but can cause very minimal slowdown on executing commands\r\n\r\n@bryphe depending on your preference I can make a PR to fix this bug, currently my inclination is to use the path that we source from the shell as it is likely less error prone than attempting to concatenate things to the path", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348778799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348782367", "body": "Done a bit of debugging and it seems the process which generates the `PATH` variable includes a `\\n` and an unnecessary extra separator. which I believe is what is causing the path to be invalid", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348782367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348805287", "body": "As a side note, which has led to a bit of confusion on my end,  the `PATH` variable echo'ed by `term` in nvim does not seem to reflect the path that the neovim process is using, which is very confusing but in effect if you run `echo $PATH` (no `!`) as an `excommand` you see a path which is what I think neovim uses however the path for the terminal *in nvim in oni* seems to have ?extra or different access as the variable it outputs does not match that.\r\n\r\nThe `term` path variable in my case seems to include extra separators as I noticed in #1061 but the nvim `echo $PATH` output does not \ud83d\ude15 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348805287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348812658", "body": "Apologies for what is beginning to feel like a stream of consciousness/rant, whilst adding shell env seemed to return the correct path, unfortunately in `go` files it was not picking up hover info for external libs etc. I think this is due to the fact that `go` depends on things like `GOROOT` and `GOPATH` environment variables. I've *hopefully* resolved this by merging the default process.env from `electron` with `shell-env`'s environment.\r\n\r\n<img width=\"695\" alt=\"screen shot 2017-12-03 at 20 28 00\" src=\"https://user-images.githubusercontent.com/22454918/33529520-cff67f20-d869-11e7-9b6a-dc17164b0ddc.png\">\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348812658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349031556", "body": "@bryphe through very superficial perusing of issues re neovim's terminal I *think* it sources it's `path` differently as it's essentially another program embedded in nvim. Re the fix I tried it locally yesterday with no issues except I can't get `reason` running yet but that pre-dates this issue (I haven't set it up properly yet I think) but I made some tweaks since then and think my local build (which includes my experiments is no longer properly sourcing the tss) will the tests pick that up? if not i'd like to revert my build back to this commit and make sure there aren't any issues there.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349031556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349041548", "body": "@bryphe sorry false alarm re `tss` I've got it running, I was experiencing some crashes in the console due to some plugin tinkering, but I've built a version off of that branch i've got a functioning `tss`\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349041548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349292033", "body": "@bryphe, this error occurs in every file including new files. This happens using `yy` and `p`. `yy` should take a whole line with a `\\n` but does not work correctly for me.\r\n\r\nI've tried deactivating all associated pasting plugins and mappings. pasting from the clipboard does the same thing aka inserts without the `\\n`. My `g:clipboard` is set to `unnamedplus`\r\nThe problem occurs in insert mode as well as normal mode.\r\n\r\nScreenshot following `yy` command:\r\n\r\n<img width=\"532\" alt=\"screen shot 2017-12-05 at 12 29 47\" src=\"https://user-images.githubusercontent.com/22454918/33607393-de882ffc-d9b8-11e7-9c3d-151a8e9c9e99.png\">\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349292033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349443521", "body": "@bryphe easy answer there I'm setting `unnamedplus` explicitly as a way of telling neovim to always use the system clipboard. \r\nI just disabled it for oni and that works perfectly i.e. resolving my issue. It might warrant a message in docs? (re copy and pasting as I've seen this setting in a quite a few dotfiles) or maybe oni can override this setting since its unnecessary here \r\nactually not sure considering that default vim behaviour is to not copy to the system clipboard and some users might want that functionality, as I personally have gone back and forth on this and its sometimes useful to only have vim save to the clipboard when set explicitly", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349443521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349451455", "body": "Thats valid, I imagine its a fairly niche audience that would want to restrict access to the clipboard, and the greater majority by far i'm guessing prefer the current out of the box functionality. Re-documentation I can put a line in that section saying that, it shouldn't be set if using oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349451455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349455670", "body": "Added the following to the wiki you linked:\r\n>NOTE: If you have set your `g:clipboard` to include `unnamedplus` you will have to disable this inside of `Oni` as this can lead to issues when pasting with new line characters.\r\n\r\nHappy to close this now @bryphe if you're alright with the docs tweak \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349455670/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349823424", "body": "@bryphe  I've managed to make some progress with the functionality I described, which I've been working on another branch I'll make a PR from there and would be grateful if you could have a look it's about 90% there (I think/hope) aka it loads existing buffers when oni loads a vim session and that function can be reused for other events", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349823424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350018340", "body": "@bryphe just discovered this in the vim docs re auto commands\r\n\r\n>[**BufDelete:**](http://vimdoc.sourceforge.net/htmldoc/autocmd.html#BufDelete)\t\t\tBefore deleting a buffer from the buffer list.\r\n\r\nI've just tested this locally with that in mind and it seems regardless of what the api does this autocommand is called before the point at which it would actually be relevant to this use case \ud83e\udd15, i.e before the before the buffer is *actually* deleted . Seems like a better approach would be to use the `BufEnter` for buffer status updates re deletion and loading vim at least. \r\n\r\nWhich makes sense tbh since whatever is done in `BufDelete` is shortly overidden in `BufEnter`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350018340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350096402", "body": "Completed this functionality now and its stable locally or rather I haven't found any edge cases that have revealed any bugs.\r\n\r\nI ended up using the `BufEnter` event as the primary method of updating buffer statuses, everytime its triggered it replaces the bufferlist with one from neovim using a `oniNotifyWithBuffers` viml function. I removed the `BufDelete` event because it wasn't serving any purpose given that the updating happens in bufenter\r\n\r\nThere's definitely places that this could be improved in the long run as for example I discovered python can be used in `vimscript` to execute functions, a use case for that would be importing the `vim` python module and using that to execute slower computations like getting the number of lines in each buffer.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350096402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350114792", "body": "Re. the `bufdelete` you've definitely hit on something there, as it does in fact cause the exact problem you alluded to, seems it is necessary although I was thinking of using the `bufwipeout` event which the docs indicate is triggered after `bufdelete` so hopefully after the bufferlist is updated.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350114792/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350119985", "body": "I've unified the buffers as you suggested and it's much more straightforward, also removed the python comments as well as re-added the `bufwipeout` event and handler and that actually works really well so you can click to delete an inactive buffer and have it disappear, turns out if the call to `this.getBufferIds()` is in the `bufwipeout` event the `bufferlist` from that function is in fact updated , so I use setCurrentBuffers which is how that function worked before but using a different event.\r\n\r\nRe. changing the `eventContext` type since other events expect different types what would your suggestion be would a union type work? by just removing those fields I dont get any type errors although your intent might have been to have the interfaces exactly match the data.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350119985/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350467075", "body": "@bryphe I've split out the events out of `_vimEvent` into separate handlers and created a BufferEventContext type which is an object which consists of a currentBuffer which is an `EventContext` and existing buffers which are `InactiveBufferContext` types.\r\n\r\nI reverted to using an object because I needed to be able to reference the current buffer separately as the buffer enter event triggered several other functions all of which explicitly expected an `EventContext` and for which the `InactiveBufferContext` was invalid, I spent quite a bit of time trying to use an array but the as it contained multiple types for current and inactive it was very difficult and messy to correctly reference what type was what at different points", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350467075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350495349", "body": "I've tried looking into what causes the `AutoClosingPairs` tests to fail on appveyor however I don't think I've made any changes that relate to that functionality. When I run `yarn test` locally it runs 3 autoclosing pairs tests all of which pass but the `packageMetadataParser` tests instead fail, so it's hard to be sure what's going on", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350495349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350548513", "body": "@bryphe  no problem \ud83d\udc4d , I've removed the the lone fork symbol as well, I went back and forth on whether it communicated that the current file wasn't under version control or not, as I personally sometimes find some sort of indicator of that helpful, but I think the lone icon is probably more confusing than indicative", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350548513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350579762", "body": "@bryphe @CrossR  thanks for the info, I had a look at the previous issue (#840) , with regards to that I think increasing the font size sounds good, as opposed to increasing the zoom level as the results are not pretty, \r\nIt'd be interesting to have things persist, out of interest would this be writing to a user's config file, or saving the previous value to local storage like `redux persist`\r\n\r\nRe the `meta tag` solution to the double tap, and actually pinching to zoom which I discovered I could do changing the meta tag unfortunately doesn't work. I think maybe with each iteration of `macOS` electron are having to re-jig the way they stop the zoom so the current solution doesn't work or i've implemented  it wrongly, I'll post on the thread in the electron repo and see if there's a new solution.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350579762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350588465", "body": "This is likely something for another issue/PR but I was working on trying to truncate the length of this component however there are a couple of issues I've run into. I'd want to do this inside of a `media query` and as It stands I tried creating a less file for the component and passing it a className which doesn't seem to work, I'm not sure how plugins are bundled aka if the less is read.\r\n\r\nAnother approach which did work is I passed the component a prop in the plugin's index.js and in Oni's status bar item component where it is rendered I look for the prop and if present apply a truncation class (to add  text-overflow ellipsis inside a media query which isn't possible with inline styles). I thought of adding the truncate option to the `createStatusBarItem` but this would require  changing `oni-api` to take another argument.\r\n\r\nIt's a minor point and not something I'm necessarily wanting to include here but as I often work with a split view or at least alternate frequently I noticed that the statusbar could get cluttered in which case I think plugin makers (future \ud83d\ude04 ) might find it difficult to apply styles to their components.\r\n\r\ndid you have any specific preferences for how that might happen given that `oni` already exposes some component creation methods but no styling methods?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350588465/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350712246", "body": "@bryphe left this for a bit to see if anyone else wanted to have a go, but I'm happy to do this seeing as there haven't been any other takers, two quick questions though.\r\n1. vim solarized by altercation no longer looks to be maintained, meaning its styles haven't been updated with new highlight groups that exist in nvim? would you still like to use that knowing that or perhaps use a maintained fork like `lifepillar/vim-solarized` \r\n\r\n2. in the `theme-onedark.json` how did you populate those colors did you get them from the vim theme i.e. find the color used for bg in the vimscript then enter that etc. ?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350712246/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350882745", "body": "@bryphe thanks for opening the issue. When working on #1098 I added a text-overflow: ellipsis to the component but in order for that to kick in I'd also have to add a max-width which I was avoiding given that at full screen it'd be a shame to truncate a branch name if there was space on a fullscreen desktop and the max width was hard coded to 120px or something arbitrary. \r\n\r\nThough inside a query however we could make sure the truncation only happened on small viewports or another solution I tried was applying a class based on component priority aka in `statusBarItem` add a class to the general item class if the item has a low priority except at the moment they all have pretty similar priority but I could reduce the priority of the component and then use the method there then apply a max width and text-overflow.\r\n\r\nPerhaps based on priority you could add a truncation class based on 1) number of status bar items 2) width of the screen, and by default all status bar icons are given a width based on priority for example if the priority of the filename is given 1 or something then it has a width of 200px (for example) and at small viewports or with 5 or more items that is reduced to 150 and text overflow is added to it.\r\n\r\nThe widths could be applied using 3 or so different classes with different widths, a side note here is that text overflow might not be enough if the component was comprised of icons etc, so might have to add `object-fit: contain` or some other general styles to force content to stay in its container", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350882745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350884569", "body": "@bryphe  I'll revert all none essential changes in `NeovimEditor.tsx` and see if that helps hopefully nothing got negatively impacted by the formatting\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350884569/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350890657", "body": "Or considering your comment re how vscode handles this, you could have certain priorities relate to levels of truncation/display for example `1 - always show never truncate`, `2- always show but set  max-width and truncate`, `3-always set to max-width, hide when necessary`, the numbers are just for example, this way you could have priority classes and in the component you'd have \r\n```js\r\n  <SomeStatusBarComponent className={`status-bar-item priority-${props.priority}`} />\r\n```\r\nOne problem I can forsee though is that ideally we would get the information re max width from the plugin ahead of time its wouldn't be clear what a good max width would be for each for example setting a max width of 100px for line number would be a waste of space, one way round that could be allowing an extra argument of size in the `Oni.ui.createItem(<- extraSizeArg)` these can relate to sizes oni controls like large = 150px medium 90px etc.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350890657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350898944", "body": "@bryphe  all done, branch still fails though \ud83d\ude2d , I'll also have a look at the last passing commit and see what I introduced after that", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350898944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350971198", "body": "@bryphe I was trying to cover cases where a git branch changed say in the terminal  and a user returned to Oni, that the branch would be updated, I wasn't sure that the bufenter event would cover this. Didn't realise the impact it would have on performance \ud83d\ude1f . I think there are other less expensive hooks that could be used like `FocusGained` etc. but I don't believe theres a subscription hook in oni for that. I think simply doing without the buffchanged till its clear a replacement is needed is fair", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350971198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351014085", "body": "@bryphe apologies seems I got my mac shortcuts confused. You're quite right re cmd n and the double clicking. Essentially any mechanism which leads to having multiple Oni windows (one project open in one instance another in the second) is what I was alluding too so a new window option would be excellent with the potential to bind this to a key, would a new window result in issues I noted there is an array in `main.ts` to keep track of open windows but also some code which seems to be aimed at maintaining a single instance?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351014085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351195665", "body": "@bryphe \ud83d\udc4d . Re. windows closing if that standard behaviour i'll leave that be.\r\nAs for window jumping that would be a really cool feature to use vim-esque key maps to move between windows, I saw somewhere in the docs that windows have x,y positions perhaps looking at those i.e comparing the current positions x to all the other windows in the array and if `otherWindow.x > currentWindow.x` then focus on that instance then map that to the appropriate key, just a thought. \r\nAnother thing I noticed was that you can add recent files to the menu icon in mac and windows thought it isn't clear how to populate the recent files from the docs", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351195665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351243608", "body": "@bryphe  very good catch I was really scratching my head with this \ud83d\udc4d , i'll have a look i think my format buffers function doesn't pass the line to reducer but we still have this value, ah which reminds that actually all the extra values that current buffer has are also not being passed over due to the same function. Ill tweak it and try the tests again", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351243608/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351248556", "body": "@bryphe  I've just added the call to  initial line of the callback before the switch statement that way the function is called for all events and each handler is still free to carry out its own logic. If you'd prefer reverting to `_vimEvent` method though I can also re-add that instead\r\n\r\nTested it briefly with `autoClosingPairs` locally and seems to work with the <CR> expansion and the backspace delete", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351248556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351378944", "body": "fixed by #1111 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351378944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351516416", "body": "@bryphe done as much as I could personally think to do with this, think it might be a situation of learning as more components appear but the general idea is 4 priority classes:\r\n\r\n* 0 - do no truncate till very small viewport (400px)\r\n* 1 - truncate after half screen and disappear if smaller\r\n* 2 - disappear at just under 2/3rds\r\n* 3 - disappear over 2/3rds\r\n\r\npriority is assigned in creation of the component as before and a class assigned based on that though there is one bit of processing before which basically checks the count of right and left status items and increases/aka lowers the priority depending on how busy with the aim that truncation and disappearance happens earlier. As long as there isn't a situation where everything is being set to 1 since 'in a version of the/the future theres components vying for space this works'\r\n\r\nI abandoned the transitioning idea because I had a look at webstorm, atom and vscode and it seems thats not done in any of those on top of which I'd *personally* feel like the transitions would just be visual noise", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351516416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351629867", "body": "@bryphe `vw` 's are more generalisable, \ud83e\udd26\u200d\u2642\ufe0f , i'll give using those a go instead. Re. the solution you describe does sound more robust, I read [this](https://twitter.com/JoshWComeau/status/940029421682962432) yesterday a tweet about a react component which calculates its with as it grows or shrinks and passes it down to its child components. Also whilst working on this I had a question which is a bit tangential for `oni`,  I wonder if you've had a look at any `CSS-in-JS` solutions, like `styled-components`,  they tend to allow you a lot of flexibility with what information is available in your css, aka any react prop  can be used to determine how styles can respond (this would allow for dynamic styles inside of a media query for example), just curiosity on my part.\r\n\r\nAlso re priority 3 that was a typo on my part but since ill be tweaking to use vw ill just include whatever vw I use.\r\n\r\nTbh the tweet really grabbed my attention as it be such a nice solution i.e in conjunction with what you recommended although that would definitely take a bit of time to figure out but would be something i'd be happy to look at after this/ or perhaps in place of it depending on what you think though not sure when I'd crack it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351629867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351632555", "body": "@bryphe, \u270b from the comment above I'm not sure what you mean when you say\r\n>keep those the way they are today.\r\n\r\nDo you mean the way they are on master aka refactor to `_onVimEnter` but the rest of the comment seems to imply the opposite so keep them the way they are in the PR (but add the requested changes),\r\nalso the missing events are those events other than those in `_updateWindow` ?\r\n\r\nEDIT:  based on the inline comments Its most likely you meant refactor to unique `autoCommand.onEvent` handlers and then have the switch containing handler have the general all event logic in it - which is what i'm refactoring too now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351632555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351633325", "body": "Ah completely forgot that background defaults to `light` in vim unless `background=dark`, i'll have another look at these, and split them out", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351633325/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351701246", "body": "@bryphe I've attempted to refactor to what I *think* you had in mind but given my earlier question(s) I'm not entirely certain if this is what you intended apologies for any potential confusion or kerfuffling if I've gone off track", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351701246/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351822109", "body": "@bryphe no worries thats good to hear (that I haven't gone off track) unfortunately it seems somethings gone awry though autocompletion tests are failing and on manually recreating the test i.e. going into a `css` file typing `.test { pos` I get `progress` back not `completion` seems to be picking up html completion though in a less file strangely enough things work correctly. i'll do some digging and re-run the tests", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351822109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351836788", "body": "Problem solved seems to have been due to an unreliable variable, I've also added keys to a few components to quiet react, I know it implicitly uses the array indexes (at least according to the docs) if there are no explicit keys but I've on occasion had some *very* strange list behaviour because of their absence so am a bit skittish about it here's a [horrorpen](https://codepen.io/pen?&editors=0010) showing an example", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351836788/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351864530", "body": "@bryphe, I'd never tried before and it seemed like it should work but having tried it a bunch of different ways as far as I can see using `vh` and `vw` in a media query doesn't work or rather has not worked at all for me having gone through several posts, SO answers etc.I haven't yet seen an example using vh or post using vw or vh in a query.\r\n\r\nIt does work with em which scale based on font size, which is more fluid than a static px value also, on thinking about it this particularly approach would only really be aimed at dealing with small screen sizes which are equivalent to certain px values essentially.\r\n\r\nEDIT: I'm also looking into the more robust solution you mentioned, whereas this is more of a band-aid", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351864530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351878352", "body": "The stuff of nightmares  \ud83d\ude06 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351878352/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351935355", "body": "Yep all good \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351935355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351996256", "body": "@bryphe may or may not be relevant to what your trying to do here or potentially a rabbit hole, though seemed worth mentioning a new `js` bundler called [`Parcel`](https://github.com/parcel-bundler/parcel) it simplifies a lot of what webpack does through painful configuration and endless plugins, it supports `TS` and `Less`, it also does most relevant to this issue `Zero Config` code splitting \ud83d\udcaf Hopefully", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351996256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352047890", "body": "@samvv just very briefly mentioned this to @bryphe in #1114 whilst dealing with some styling issues, I'm a huge fan of `styled-components` and depending on general consensus re a possible change could definitely help with this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352047890/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352203145", "body": "@bryphe It's an amazing library which I think will fit really well with `Oni` as there so many situation where having styles react directly to props is *sooo* helpful plus I think incorporating the `ThemeProvider` is another big boon going forward", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352203145/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352212941", "body": "@bryphe following our discussion re. approaches to the bar I've started work on the strategy you suggested. I'm using `resize observer` to keep track of the sizes of the left and right statusbar sections as well as the children, then using the priority to remove children.\r\n\r\nA question I have is whether or not the status bar is to be split up into three as it is right now as each container needs a width in order for the observer to track it and I can work around the usually empty center container but is it something you'd like to have in the long run as opposed to just a growing left and right which each have 50% of the screen real estate", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352212941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352221376", "body": "Cool @bryphe I personally would find it really frustrating to have to switch between a standalone app and electron. I can add a section in the wiki explaining what to do if it comes up for anyone else", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352221376/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352222094", "body": "Added the following to the docs\r\n\r\n> Note: some users *may* have issues with the `react-devtools` due to OS permissions.\r\nto resolve this follow these steps:\r\n> 1. Navigate to `chrome://extensions` in _*your browser*_, and find its extension ID, which is a hash string like `fmkadmapgofadopljbjfkapdkoienihi`.\r\n\r\n> 2. Find out filesystem location used by Chrome for storing extensions:\r\n   \r\n > * on Windows it is `%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Extensions`;\r\n   on Linux it could be:\r\n > * `~/.config/google-chrome/Default/Extensions/`\r\n >  * `~/.config/google-chrome-beta/Default/Extensions/`\r\n >  * `~/.config/google-chrome-canary/Default/Extensions/`\r\n > * `~/.config/chromium/Default/Extensions/`\r\n >  * on macOS it is `~/Library/Application Support/Google/Chrome/Default/Extensions.`\r\n\r\n > 3. Once you have found the extension location you will need to grant the current user read and right permissions\r\n    using `chmod 777 -R path/to/extension` (N.B. the command recursively grants the current user access to the folder and its subfolders)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352222094/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352481160", "body": "@bryphe managed to get this working as we discussed and following the styled components PR I've tweaked most of the status bar components to also use styled components, I would have converted all of them however an issue I ran into is with the `.loaded` class which is set via redux globally, I think to have this work with `styled components` rather than a class a redux prop would have to be set and then passed to all styled components needing the loaded class. You could have styled components' css helper and then check if truthy render the css chunk.\r\n\r\nI'm happy to do this or leave it to you, either way is fine, I haven't done it here already as it's i think outside the scope of what I was trying to do here. Re the discussion in #1134 I'm  also happy to take some of it on, and perhaps leave some to you so you can decide how you'd like to integrate the library etc.\r\n\r\nEDIT: Forgot to mention that I also added configuration options for the status items so users can change these. I found whilst working on this that I very much quibbled over what should or shouldn't show which I imagine will be the case for the user. If you're in agreement with this addition it'll need documentation which I can add.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352481160/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352485500", "body": "@samvv @bryphe happy to help, ps you did an amazing job in a very short space of time @samvv \ud83d\udc4d , re help I've commented over in #1114 (the gist is happy to do some if you point me towards what to start with)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352485500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352547573", "body": "@bryphe I've been using styled components for a while and I haven't encountered this problem, not immediately sure what could be causing it, a quirk with electron or perhaps our implementation so far not sure if were referencing both the typed version of `styledComponents` in common as well as the untyped `styled-components` lib though I've not known that to be an issue, I can look at some SC repos's issues and also look at the implementation so far, seems there are issues with commas instead of the semi-colons in places which could lead to invalid css that SC may be trying to reproduce each time.\r\n\r\nEDIT: Seems fair to remove it from wherever it's causing a slow down", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352547573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352561927", "body": "That's sounds like a good plan, tbh seeing that component like that is a bit of an ah ha moment as I've definitely never written or seen a styled component that would have that many props alternating 100s+ times in a very short space of time", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352561927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352566591", "body": "@bryphe having a look at the styled components repo I've found [this issue](https://github.com/styled-components/styled-components/issues/134) relating to exactly this problem, it is discussed thoroughly here. The conclusion is the same as yours aka inline style or a styled components escape hatch that is equivalent to that. The example the issue includes is \r\n```js\r\nconst HighlyDynamicComponent = styled.div.attrs({\r\n  style: props => ({\r\n    background: props.bg,\r\n  })\r\n})`\r\n  color: blue;\r\n```\r\n\r\nUPDATE: heres an example for one of our components \r\n```js\r\nconst Marker = styled.div.attrs({\r\n    style: (props: MarkerProps) => ({\r\n        top: `${props.line / props.bufferSize * props.height}px`,\r\n    }),\r\n})`\r\n    position: absolute;\r\n    height: 2px;\r\n    background-color: ${(props: { color: string }) => props.color};\r\n    width: 100%;\r\n    `\r\n```\r\nDocs: https://www.styled-components.com/docs/api", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352566591/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352832037", "body": "A quick solution to the above would be to change that setting to `set listchars+=trail:..` as the explicit `=` does not add to the `listchars` variable but co-opts it entirely, also a question which occurred to me is the order in which oni's init.vim is being read as if it follows the users init.vim it will unavoidably end up clobbering things.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352832037/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352912873", "body": "Sure @bryphe  i'll have a go and make a PR when i've got it working\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352912873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352927348", "body": "@bryphe \ud83d\udc4d  love all the file explorer work really excited to see it :). I noticed that your integrating the theming from `themeProvider` and I wanted to point out that with regards to using the theme if the final component that you want to respond to the theme is a `styledComponent` then they all automagically aka react context have access to the theme props so if the final component you are styling is say a folderView then you can use\r\n```js\r\nconst FolderView = styled.div\r\n     styleA: ${props => props.theme.explorer.background}\r\n\r\n```\r\n\r\nThis means that all child components of the theme provider no matter how far nested down have access to `this.props.theme` as long as its a styled component.\r\n\r\nGiven that its a work in progress, pardon my intruding with my suggestion just wanted to point that out to spare you potentially having to add in loads of `withTheme(comp)`\r\n\r\nEDIT: also the styledComponents @samvv exports from common is typed or can be typed with the theme props so that typescript should pick up the `theme.myOwnThemeProp`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352927348/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353063243", "body": "@bryphe i've tested this locally and it works great also had to explicitly set that if the window was previously maximised it re-opens maximised, all done if tests are passing", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353063243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353085040", "body": "@bryphe with regards to language plugins, I imagine as we continue to have new languages added finding plugins for each will become laborious, in terminal vim I use [`polyglot`](https://github.com/sheerun/vim-polyglot) a vim plugin which uses vim's autoloading functionality to agglomerate language plugins for almost 100 different languages. \r\n\r\nThe plugin author uses autoloading so that vim's startup time is not affected instead it loads language plugins on demand per filetype. He essentially just bundles the most popular language plugins, it is well maintained and is constantly being upgraded meaning that going forward we would pick up any language plugins he provides. \r\n\r\nOne down side worth noting is that for very extensive plugins that do much more than syntax highlight like `go.vim` which comes with a ton of different bits of functionality the plugin only takes the essentials like indenting, syntax highlighting etc. I think there are only a few exceptions like this were the most popular plugin tends to be doing many things and is too big to bundle with all of its functionality.\r\n\r\nThe repo specifies which plugins these are and in those cases it's best to install the plugin separately if you want that functionality.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353085040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353459959", "body": "@bryphe just wanted to clarify whether it takes some time to kick in, as at the moment the changes to the `oni-api` don't seem to have taken effect unfortunately when I re-install the module", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353459959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353500864", "body": "@samvv @bryphe The majority of the work here seemed to be done so I had a quick look at fixing conflicts, and tweaking it to use styled components. \r\n\r\nUnfortunately theres an issue with the cursor which is that as the event happens essentially separately from the input/output component so an input element for example doesn't have full cursor control, @Bretley @samvv  not sure if either of you are still working on this or had any plans as to how to get round this?\r\n\r\nHappy to leave this be if either of you are still working on it was just thinking to get the simplest implementation working since you've both done all the heavy lifting and then that can be iterated on in the future rather than see the work get buried in a sea of merge conflicts?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353500864/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353516680", "body": "@bryphe \ud83d\udc4d thanks for looking into that, seems to have resolved the typing issues.\r\n\r\nI'm having trouble with the tests as the `\"status.priority\"` section I added to the config is being looked for by the status bar items and im not sure how to add it to the new test `config.js` (thanks for adding that btw) I see the env var, are you setting one locally somehow?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353516680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353679116", "body": "@bryphe thanks for the heads up been stuck on that for a little while, had no idea where it was failing \ud83d\udc4d . \r\n\r\nRe the weirdness of the statusbar I haven't seen the behaviour in the screen shot though I haven't tried it with the file explorer open not that I can think of why it would be causing an issue. It's a bit of a head scratcher as you're segments are completely overlapping could you possibly post a screenshot looking at the elements, I'm not sure if theyre crossing over each other \ud83d\ude15 , been using it in my local build for a week now so thought I'd got all/any bugs, not sure how to reproduce that. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353679116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353683145", "body": "@bryphe all done for now \ud83c\udf2e \r\nAgreed re styling it down the line, as its a bit bland perhaps a little later I can have a look at having it look more or less the same as the quickOpen menu. \r\nRe controlling the selection, as far as I can see that all comes from `neovim` so any oni binding would likely be a wrapper for whatever command default neovim uses to navigate the wildmenu, maybe the default `wildchar`, but as with the commandline window it isn't so much us actually sending input from the component so much as too me it feels like eavesdropping on a conversation lol", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353683145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150980351", "body": "I tried adding some typing to the module declaration but not exactly sure how that's done and  could quickly figure this out from the docs", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150980351/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150980372", "body": "I opted for option one here and used async await and added returned promise typings up to the call sites hopefully this doesn't clash with #938 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/150980372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153616939", "body": "Thanks for the tip @bryphe, tweaked it to use `Math.abs`, much simpler!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153616939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155947823", "body": "Think node added it a couple of months ago and I've been taking every opportunity I get to promisify things, that way and avoid all the boiler plate that comes with doing it manually.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155947823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155658611", "body": "A part of my leaving them in there as well as to match the interface was also as potential placeholders in case someone else figured out how to get those values from an inactive buffer and that might potentially be of use to oni? like displaying metadata about files etc somewhere down the line.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155658611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155658781", "body": "Sounds fair definitely crossed my mind a few times I initially thought there might be a specific need to return the current buffer as a separate item but as you point out its not really needed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155658781/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155658966", "body": "Ah I had it somewhere in my head that neovim was compiled with python by default so anyone who had neovim would have setup up python but that was a fairly random assumption on my part. As I haven't been able to get to grips with it anyway ill take that comment out", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155658966/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155659568", "body": "Not really, nor that i've observed with the current state of the function I have it there as a last ditch attempt at catching an error if one occurs but it was essentially there for me to use to debug whilst writing it but also the try/catch would mean that even if there were an error the user wouldn't be faced with vim's not so pleasant scrolling wall of red lines\r\n\r\ni've checked that each function gets the right kind of argument and that it doesn't recieve an invalid argument which in most cases would return in 0 being added as the value to the key. I tried a couple of different methods, and took a lot of inspiration from `buftabline` a plugin I use", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155659568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156538640", "body": "Ah in which case the line variable is needed before the reducer, ill add that in, I think you were likely still right about separating into handlers though as I imagine that as various use cases become know even more handlers will be needed. Im thinking of adding the line to the event handler above the switch statement so it runs before all events", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156538640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156980665", "body": "Ah of course, will do didn't catch that all events were triggering those", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156980665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157074777", "body": "I've pushed a typo fix for that but ended up removing the if statement having had a look at the function as the if statement there seems to be of little value as logging it, that function gets called very frequently and is not very expensive *i think* i.e. does not result in any async actions etc. on top of which it gets called by the `bufWinEnter`event then subsequently by `bufEnter`event then `bufRead` then `cursorsMoved` etc so preventing it being called one extra time seemed to have little value, ideally separating it into the essential bits for buffer updating and a function that returned the desired `OniBuffer` would be ideal as it stands i have to call it in the `bufEnter` handler to get the return  as well as in the general event handler", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157074777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156868347", "body": "The practical effect of that line is that for example the filename component a '1' truncates earlier rather than dropping to half its size. The max here gives these items more space  before they collapse, the idea I was going for was that priority could be for larger components that we wanted on the screen for as long as possible", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/156868347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157652588", "body": "@bryphe cloning the element allows me to add to its properties inside of where its rendered, so that I can clone the element add a method from its parent to the clone as a prop and reference that method in the child, for example inside of the clonedChild aka `statusBarItem` I am able to use `passWidth` a reference to the parents passWidth method or add a hide prop which toggles visibility based on the parent's state/logic. \r\n\r\nIt's crucial to this working and as far as I know the way to attach data or functions to react.children given that here we render an unspecified number of children and they all need this behaviour and the only point at which this data is available is here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157652588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157653506", "body": "@bryphe do you mean deleting it from the createItem method, and the api package and then adding the priority in the statusbar component somewhere like get config value etc.? (for clarification) ^^\r\n\r\nEDIT: Just read below makes sense I'll have to make PR to change the type for the Oni api though as I realised its strongly types so deleting an argument will cause some type issues", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/157653506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159536708", "body": "@bryphe it relates to a scenario where you have command line commands mapped and hit them in quick succession for example if you try `map <tab> :bn<CR>` and hit tab several times in a row with the timeout set to 0 the screen flickers as the component mounts very briefly. Its there to cover any/most (hopefully) of these scenarios.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159536708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159538595", "body": "Whilst it does seem counter intuitive to try and hide it once I enabled it to test and tried using the functionality during a normal session I realised that as a vim user who has dozens of quick commandline mappings like `:w` or `:b#` etc. which I usually execute quickly and dont really think about having that quick flicker is really not a great experience though if you feel it detracts from the usability or have a suggestion other than the timeout like some sort of component mounting throttle I can remove it/try and implement something like that", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159538595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159557725", "body": "Technically in neovim the same thing happens if you watch the command line, the command you entered appears so all the events we're hooked into occur \u2639\ufe0f so it replicates normal vim (subpar) behaviour.\r\n\r\nAs for keypresses that sounds good, though one scenario I can see causing an issue is in the case of key remaps as in my case I've rebound `:` to `;` so the command line wouldn't trigger and whilst I could just add that exception I dont know how many users would have done a similar thing and what their mappings might be for example `\\` remapped to `|` or something else which is fairly unpredictable or we could have it be that oni requires the default bindings or maybe instead offer config options to trigger the commandline if the user wants to remap this \ud83e\udd14  for example default is `[\"/\", \"?\", \":\"]` etc. and users can add keys to the config option.\r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159557725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159560185", "body": "Though annoying given that it results in a delay a 80-100ms timeout seems to be enough unless a user literally held down a mapping for a good bit of time", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159560185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160284529", "body": "@bryphe did you test this with the prev. pr merged #1241, I sort of created these three PRs with each other in mind (basically just sections of things ive tried in my local build) which made/makes it a tiny bit confusing but the logic there is that if you have the pr with the hide functionality then on clicking the icon the `activate` event is dispatched which should trigger a create window if none exists in which case a create window is in progress and so I push the missing file path with that in mind, they might not work as smoothly together anymore", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160284529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160285602", "body": "They're all a little inter-related unfortunately #1245  #1241  and #1246, I was trying to solve each locally and once I did I split the changes into what I hoped where separate PR's rather than one amorphous giant one, apologies didn't forsee their interdependence  \u2639\ufe0f \r\n  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160285602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160287220", "body": "Actually nevermind all that it does cause the same issue for me locally \ud83d\ude06 does need a create window there (not so interdependent just a bug", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160287220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161068948", "body": "@bryphe hopefully my changes are ok? I didn't use the listener you mentioned as looking at the activate function it seemed to be subscribed to config changes to colorsheme already just not updating the store with this info so I added an action there though I might have entirely missed the point of your suggestion \ud83d\ude1f ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161068948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160811256", "body": "@bryphe thats definitely the case the issue I encountered, my thought though is that the initialisation just triggers an event which then sets off other async processes but the createWindow function itself from what I can see is *sync*, I'm not entirely sure how to make it wait, an arbitrary timeout would be a messy/hacky solution, I thought maybe of having the ipcMain process send an event when neovim is initialised and then responding to it in an event handler in the main process sort of the reverse of what we've been doing for the most part so outside in, not sure if thats possible", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160811256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161609406", "body": "@bryphe potential overzealousness on my part I use [`shellcheck`](https://github.com/koalaman/shellcheck/wiki/SC2086) to lint shell scripts and an error it flagged on multiple lines was that those variable were not quoted which helps prevent word splitting and globbing the link is to a wiki page where the rationale for that is explained, I initially made that change because I thought that script wasn't working and was what had led to the file args not being passed to oni on open. I'm more than happy to take them out since its not really (as far as I can tell related to the mac os no file args issue)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161609406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161610618", "body": "Ah @bryphe right on the money \ud83d\udc4d I had noticed this quirk yesterday and wasn't sure what it was and wracking my brain as to what to do did not realise there was a `once` method which fully resolves that so that delayed events are only called once (what I was getting was open file of a closed window click open new file which works but then close that window and click again and the same command would execute, using `once` however resolves that).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/161610618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162149711", "body": "[`marked`](https://github.com/chjj/marked) has an option to sanitize the html which it outputs which I in turn \"dangerouslySet\" \r\n>sanitize\r\n>Type: boolean Default: false\r\n>\r\n>Sanitize the output. Ignore any HTML that has been input.\r\n\r\nIt's generating the html from markdown string it gets from the `lsp` which also in the documentation state that the protocol passes sanitized strings though in the case of potentially malicious attacks if a string is passed containing a script it wouldn't be output via marked so I don't know if there might be a vulnerability i'm missing somewhere?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162149711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162781834", "body": "@bryphe yes that was `prettier's` doing, it works on `md` and `json` as well an they are currently expanding its support for other languages and filetypes", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162781834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162781856", "body": "@bryphe great suggestion I was just testing out commands at that point but those would be good commands to run there wasn't sure which to use", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162781856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164234721", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164234721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164241384", "body": "@bryphe did you intend for the commands to be in caps with the space there, I've changed the command to be `buffer:action` as from looking at the commands none start with caps and none have spaces in them \u2753 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/164241384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162445646", "body": "That's essentially there for development purposes I'll remove that once the PR is finalised", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/162445646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166413844", "body": "@steveukx the bug I'm currently facing is pretty odd and I'm not sure it isn't electron related. Basically when I run `await project.diffSummary()` **in development** it works perfectly for me though when I build and package the electron app the same variable `status` now returns the `simple-git` object so my assumption is somehow something changes once packaged.\r\n\r\nExcept when I run the raw command via `childProcess` that outputs the git command \ud83d\ude15, haven't found reference to a similar issue anywhere so i'm stumped", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166413844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167379426", "body": "@bryphe that all sounds very good \ud83d\udc4d (ps there's a typo on the last word `abvoe`)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167379426/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167402937", "body": "@bryphe whilst I was looking at trying to do this I noted that generally spreading was leading to shallow merging and so for example is user had the following: \r\n```js\r\n\"tokenColors\": [{\r\n\t\"variable.other\": {\r\n\t\t\"bold\": true,\r\n}\r\n```\r\n\r\nand the default had specified:\r\n\r\n```\r\n\"tokenColors\": [{\r\n\t\"variable.other\": {\r\n\t\t\"bold\": false,\r\n\t\t\"italic\": true,\r\n\t\t\"foreground\": rebeccapurple,\r\n}\r\n```\r\n\r\nI *think* at least in the case of objects you end up with one overwriting the other. In the case of spreading arrays\r\nI *again think* that the result will be two `\"variable.other\"` tokens neither of which are quite right. I looked at using lodashes `merge` which works however is a bug magnet as it *`mutates`* the object or array so it can be very hard to debug since you have no reference to the original array or object.\r\n\r\nA solution I planned on discussing was using `ramda's`, ramda is a functional utility lib so emphasis on non-mutation etc, and I believe with tree shaking its possible to import just the one file relating to the merge functionality you want without necessarily importing the whole lib, though depending on your feelings re functional programming I find it to be a safer tool than lodash since it never does things like mutating and has the same/ very similar functionality", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167402937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167405339", "body": "I think having seen it in testing this I found the experience odd from user perspective aka, I wouldnt expect that half filling out a config setting or at least *I wouldn't realise it was half filled out* to suddenly apply my one change but to suddenly lose everything else aka the defaults or to have it not take my settings plus I think the overhead of someone using the tokens to have to wonder/work with duplicates is probably going to cause issues somewhere at some point, I think the expected result should be one object with my changes overriding the one field I filled out.\r\n\r\nI defer to you here but this I think is an undesirable problem which can be fixed at worst by implementing a homebrewed deep merge aka when merging first check if theres a matching scope and update it otherwise just merge. I'm happy to add that if you agree to my PR?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167405339/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/168008832", "body": "Yes I've `imported` it as `git/promise` tried `simple-git` but switched over once I realised we would be able to use promises", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/168008832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167108231", "body": "A bit of a syntax highlighting newbie, I've been trying to go off of the [this](https://www.sublimetext.com/docs/3/scope_naming.html#punctuation) but I missed the bit regarding not styling the meta fields is that what you meant?\r\n\r\nI essentially placed what I thought were relevant sub scopes into the scope of the parent?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167108231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167108517", "body": "ah thats definitely not needed its was a point I missed, no good find and delete in project yet maybe another editor feature \ud83d\ude06", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167108517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167110688", "body": "haha as is always the way I skim read the docs but went through them a bit more closely now and not haphazardly applying styles to scopes against what the documentation recommends actually really improves highlighting \ud83d\ude06 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167110688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170749779", "body": "@bryphe sounds cool when I was adding it it definitely seemed like something that should be configurable given that I arbitrarily chose the number.\r\n\r\nThanks for the snippets that's really helpful as I'm not as familiar with Epics as I'd like and I've seen them around I'll have a tinker locally and push that when I get it working", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170749779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170770813", "body": "@bryphe what looked like a slam dunk given your detailed snippet, has become a bit of a head scratcher. This is what i've got\r\n```ts\r\nconst hideNotificationAfterExpirationEpic: Epic<NotificationAction, INotificationsState> = (\r\n    action$,\r\n    store,\r\n) => {\r\n    let currentExpTime: number\r\n    return action$\r\n        .ofType(\"SHOW_NOTIFICATION\")\r\n        .filter((action: IShowNotification) => action.expirationTime === -1)\r\n        .map((action: IShowNotification) => (currentExpTime = action.expirationTime))\r\n        .delay(currentExpTime)\r\n        .map((action: IShowNotification) => ({ type: \"HIDE_NOTIFICATION\", id: action.id }))\r\n}\r\n```\r\nexcept the map function at then end there gets passed a number by the delay function, not the action and I've had to do this not ideal thing of saving the exp time to an external var because the delay function doesn't get passed the action passed into it.\r\n\r\nHad a brief look at the docs and couldn't find the correct alternative methods easily will have another look in a bit but thought I'd pick your brain first", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170770813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170772331", "body": "I'm quite interested in getting it to work with the `Epic` would be very cool will definitely spend a bit more time on it but can merge as is and I refactor it to the Epic in another PR or do it here?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/170772331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171582173", "body": "@CrossR I'm not sure about pulling values out of one of the many packages.json in the oni editor (or would rather defer to @bryphe here as although its just a `json` file i've never seen it done, which makes me worry a bit) but can copy the list across although one thing I notice is that it includes svgs which tbh I work with on occasion and I think unlike binary ones like png etc. svg is similar to xml so these should be editable in the editor not sure if the layer is toggleable but adding svgs there would make them, as things currently are, impossible to work with.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171582173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171711899", "body": "Just pushed the change \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171711899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171424972", "body": "I kind of like them too but here it wasn't so much a choice as how all the documentation and examples are written out, I would have tried without but didn't want to complicate learning the new tool by doing everything differently from the docs \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171424972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171425652", "body": "LOL \ud83d\ude06 nope nope it is not I was initially doing something more complex than necessary there and when I refactored I completely missed the obvious step there of just using `path.dirname` \ud83d\udc4d \ud83e\udd23 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171425652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171426477", "body": "\ud83d\ude04The library is really quite nice but I fumbled with it a bit initially spent a week making no progress because I didn't realise how the items for dragging and dropping *ought* to be labelled so decided to separate these out into render props that theoretically someone else could use that seemed a little bit more straightforward.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171426477/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171427052", "body": "From the docs all the `shelljs` commands I believe are sync they have a mega thread on their repo about adding async support but doesn't exist yet", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/171427052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/168254545", "body": "That's definitely a concern so need to do that as you point out \ud83d\udc4d , just stalled on this trying to figure out how to use the cursor offset **digit** prettier gives us to generate a line and column number as the function does not return a line and column number which is what oni expects just a single number I assume is the index where the cursor was", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/168254545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "Lucas1993": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1753", "title": "Suggestion: add builtin command to send open files to existing instance from command line", "body": "Pretty much what's on the title. \r\n\r\nA major pet peeve with gui editors is the inconvenience that happens when you are running commands and exploring folders on the terminal and find a relevant file to open. There are solutions for this for neovim, but a builtin command (something like oni -send file.txt) would be great. \r\n\r\nI don't think a GUI editor can ever trully replace terminal vim for quick editing on terminal, but there a lot of times when this feature would come in handy!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Tehnix": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1746", "title": "Sidebar on the right side", "body": "I don't think it's currently possible, but it would be nice to be able to have the sidebar on the right side (i.e. configurable).\r\n\r\nPerhaps someone could point me to the UI code for the sidebar, and I could take a stab at it?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1746/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "badosu": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1728", "title": "Glitch in external commandline with multiple lines", "body": "A common occurrence in my workflow is renaming a file, I do it leveraging `%` expansion as the name of the file, e.g.:\r\n\r\n`:!mv %<tab> %<tab><changes>`\r\n\r\nIt seems like when I do this with a big enough filename, the external commandline glitches on the wrapped lines.\r\n\r\nDoes the external commandline functionality from neovim provide a mean to also show the command in the usual spot? Would be better than the current `...` and also mitigate issues like this.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1716", "title": "Can Oni run commands in login shell?", "body": "I am trying to integrate Oni with Ale (https://github.com/w0rp/ale) for managing asynchronous linting and testing.\r\n\r\nIn particular the tools that I use in Ruby for that require a login shell to be able to access the `PATH` changes, however it seems that the simple setup does not handle that. Also, it must be run under the current project directory as each project can have different ruby versions and binaries available.\r\n\r\nIs there a way to enable that? If not, can we provide an option for this?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1713", "title": "Can't type quotation mark(\")", "body": "Report from @finex:\r\n\r\nHi, I'm trying onivim (v0.3.0) and it doesn't accept quotation mark ( \" ) which needs a three keys combination. Other chars like ~ (just two key combination) works as expected. I'm using the following keyboard settings (Archlinux/KDE):\r\n\r\n    rules: evdev\r\n    model: pc105\r\n    layout: us\r\n    variant: intl\r\n    options: eurosign:\r\n\r\nPlease tell me if can give you more details. Thanks!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1442", "title": "Sidebar: Improve Keybindings/Configuration", "body": "It would improve my workflow if there was a way to configure keybindings related to sidebar functionality:\r\n\r\n- Open/Close folders: I would use `<zo>` and `<zc>` myself, just like the folding ones on vim, as they are more easy to use than `<Enter>`.\r\n- Toggle sidebar visibility\r\n- Toggle sidebar left pane visibility, as the file explorer is more useful for me than the rest", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1414", "title": "Sidebar: Allow resize", "body": "I suggest enabling resize of the sidebar pane, if possible using `<C-w><&gt;>` and `<C-w><&lt;>` analogue vim key bindings.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1336", "title": "Tooltip rendering issue with Vue LSP", "body": "I am not sure if this is a bug from Oni or Vue LSP, but I find this tooltip rendering a bit weird and not helpful:\r\n\r\n![screenshot from 2018-01-22 16-21-44](https://user-images.githubusercontent.com/347552/35237024-84d3390e-ff90-11e7-9e19-ed9453d18122.png)\r\n\r\nThe data is seemingly condensed on a tiny window that can be scrolled, but this window just has 2 rows, which makes reading it very hard.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1083", "title": "Visual artifacts below searched words", "body": "See the underline below the words searched, they persist even after `:nohlsearch`:\r\n\r\n![screenshot from 2017-12-06 13-43-04](https://user-images.githubusercontent.com/347552/33670146-85cd50bc-da8b-11e7-9672-1f54994199b6.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/976", "title": "Expose options on `config.js`", "body": "Since we don't have a preferences dialog, for the user to manage Oni's settings, currently the user has to consult documentation out of the application.\r\n\r\nWhat do you think of exposing all (or a representative subset of) defaul configuration options on the initial `config.js`?\r\n\r\nWe could order and group them into:\r\n\r\n- Semantic and hierarchical structure (top namespace)\r\n- Chunks of relevance (`oni.fontSize` and `ui.fontSize` are more relevant together than `oni.audio.bellUrl`)\r\n\r\nAdding comments perhaps?\r\n\r\nLet me know your thougts.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/976/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/957", "title": "QuickOpen is scoped to single folders/files/exact file path", "body": "Suppose you have a file with the same name on two different folders, for instance:\r\n\r\n- `signup/index`\r\n- `signin/index`\r\n\r\nUsually I would type something like `upindex` or `inindex` to open that. This is a very simple example but for deeply nested files is incredibly useful, e.g. for a Rails project:\r\n\r\n- `app/models/user`\r\n- `app/controllers/users_controller`\r\n\r\nI would type `amouser` and `acuser` to open each respectively.\r\n\r\nIt seems the current fuzzy finder is restricted to a single folder/file or the exact file path, so if I type `models` I get all model files, but if I type `modelsu` I get an empty list.\r\n\r\nNot sure if this is hardcoded by ripgrep but would help me a lot if could be configured (or enabled by default), and one of the reasons I wanted to use a different fuzzy finder (apart from the previous case sensitivity issue, that was fixed).\r\n\r\nI know for instance that this works as I expected on VSCode and all fuzzy finder plugins for vim I have used so far.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/955", "title": "Disable automatic autocomplete", "body": "Since I updated to 0.2.16 I noticed the autocomplete started popping out automatically (perhaps additional language support or difference in behaviour).\r\n\r\nI find this very obstrusive and could not find easily how to disable it. I'd like to have the option to open it though when necessary, usually I use `<C-n>` but this just contains dumb references in open buffers.\r\n\r\nIf there's a configuration to disable automatic popup of autocompletion, is it documented somewhere? If not can we provide this?\r\n\r\nIs there a keybinding to open Oni's autocomplete?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/901", "title": "Add ruby language server support", "body": "Currently the available LS for Ruby is present at (https://github.com/mtsmfm/language_server-ruby), however it is on Alpha stage at the moment.\r\n\r\nI tried not to add this earlier, but the prospect of a deeper integration with Oni excites me.\r\n\r\nThis issue can be maintained to keep track of this until it is deemed good enough to be addressed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/901/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/730", "title": "Modernize Quickfix List", "body": "This is one of the prospects that excited me for a long time since neovim was released.\r\n\r\nCurrently we use neovim's own quickfix list (the lower window):\r\n\r\n![screenshot from 2017-09-27 22-25-15](https://user-images.githubusercontent.com/347552/30945166-ec1d2a1c-a3d2-11e7-9069-e503322693db.png)\r\n\r\nWe can leverage the UI possibilities provided by electron to:\r\n\r\n- Make the quickfix window a proper window, separated from electron window or integrated, much like a console would.\r\n- Improve the display of each quickfix entry (filename, column and text excerpt). E.g. highlighting the found part and truncating the content of the rest of the line to fit it into a sane layout.\r\n- Improve the capabilities of the quickfix window to enable easier iteration through results.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/730/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/729", "title": "Automate AUR package release", "body": "When a new release is tagged, automate the process of updating the `PKGBUILD` version and also version it inside this repository.\r\n\r\nReference:\r\n\r\n- https://github.com/tectonic-typesetting/tectonic/issues/54\r\n- https://docs.travis-ci.com/user/deployment/releases/\r\n\r\nI created this issue to track work and discussion on this matter, will work on it when possible.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/729/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/bba57abfe385d1e8857f7344252445ad89983d44", "message": "Adjust statusbar height scaling (#828)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b0a800aa249f908f105d047068ac6a2621e63d11", "message": "QuickOpen: Support opening file on newtab (#761)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/194147057a9ead25b46ef534abde85d09549ae63", "message": "Refactor handling of arguments to child process (#728)\n\nUse the `LOCAL_ONI` environment variable instead of checking the\r\nplatform and file name of the electron executable."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/315803520", "body": "Hello @extr0py, thanks for the helpful response!\r\n\r\nMy layout is set by: `setxkbmap -model pc105 -layout br`.\r\n\r\nI am using a custom `init.vim`, however if I use a vanilla Oni setup:\r\n\r\n```javascript\r\nmodule.exports = {\r\n  //add custom config here, such as\r\n  \"oni.useDefaultConfig\": true,\r\n  \"oni.loadInitVim\": false,\r\n  \"oni.hideMenu\": true,\r\n  \"editor.fontSize\": \"16px\",\r\n  //\"editor.fontFamily\": \"Monaco\"\r\n}\r\n```\r\n\r\nThe issue persists.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315803520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324275908", "body": "Thanks @terlar! I'll help keeping the package up-to-date, really appreciate.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324275908/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324311158", "body": "I think the appearance is amazing, but the matcher algorithm is not good.\r\n\r\nUsing a configurable fuzzy finder and defaulting it to something like fzf would be great.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324311158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324320650", "body": "This happens if I use `:e` or `:tabnew` to open a file as well as using the Fuzzy Finder.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324320650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324348174", "body": "Ideally it would be a good idea to have something like a `pkg` folder to contain the packaging methods for each system where `oni` is supported.\r\n\r\nI'll see how we can make the `PKGBUILD` script be used from the main repo and how to automate this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324348174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324351771", "body": "@extr0py Currently there's no `oni` icon or desktop entry on Arch, I'll take a look on how to add that later on.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324351771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324359413", "body": "I'll check what are the occasions where it breaks because I noticed sometimes it works as expected.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324359413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324360790", "body": "Ok, it seems like Fuzzy Finder is the culprit.\r\n\r\nTo reproduce the bug enter in a git versioned project folder, open two files with `:e` or `:tabnew` and check that `gt` works. Open a new file with the Fuzzy Finder and see that now you can only navigate the amount of tabs - 1.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324360790/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324495856", "body": "I also notice that hitting `<C-w>q` closes the whole application instead of a single tab.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324495856/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324599486", "body": "One could expect on <Enter> on Quick Open to open in the current tab and with <C-t> to open in a new tab as <C-v> already opens a split.\r\n ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324599486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324614754", "body": "@extr0py I understood now what you mean by tabs and buffers, it seems like the tabs are not an actual replacement of vim tabs, what I expected to be. I wonder if that's possible as it's the behaviour I wanted, to just be a different presentation of the tabs with the same functionality.\r\n\r\n![screenshot from 2017-08-24 08-57-46](https://user-images.githubusercontent.com/347552/29665413-52f90768-88aa-11e7-91d2-745df5baed3c.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324614754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324912319", "body": "> @badosu - Did you try setting the tabs.showVimTabs setting to true? (it will use the tab information instead of the buffer-list as the backing data, but same tab UI). I think that should give you the behavior you're expecting.\r\n\r\nWell, it works with vim's native tabs instead of the nice looking ones from Oni.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324912319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329023705", "body": "@someguynamedmatt Yes, it's present. On a machine with a standard US keyboard layout it works though.\r\n\r\nOn the standard US keyboard there's a different issue though, I use the Compose key to type accentuated characters and it does not work.\r\n\r\nI want to use Oni as my main editor and this is the most painful blocker atm.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329023705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329024508", "body": "This is how it is shown on one of the places I use Oni (Arch as well).\r\n\r\n![screenshot from 2017-09-12 21-41-57](https://user-images.githubusercontent.com/347552/30354509-4e1106c0-9803-11e7-9287-7ba3cafcdd3f.png)\r\n\r\nI would appreciate if there was an option to disable the tabs as buffers behaviour and use the tab layout to replace the current native vim layout that's still visible on the image above (i.e. tabs on the new UI behave exactly like native vim tabs as opposed to having both existing simultaneously).\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329024508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329228829", "body": "@extr0py Thanks for the attentive response, gonna improve my error reports and follow-ups to help you dig into (what I think) are the most fundamental issues for an editor.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329228829/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329229384", "body": "@extr0py Thanks for the response, nvim reports version 0.2.0, gonna try a git release and see if these problems remain, for both use cases (`showVimTabs` true and false).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329229384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329234957", "body": "I see now, 0.2.1 was not released yet, using the git version works. Hopefully oni will push neovim's capabilities, so that's to be expected. I think it would be good to add a remark for this on the README.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329234957/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329494739", "body": "The closing tab behaviour I reported was an unrelated issue that is fixed using the unreleased (as of today) `0.2.1` vesion of neovim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329494739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329544359", "body": "Well, as soon as then next version of neovim is released it will be soon picked up as Arch has a rolling release model. Neovim did not release 0.2.1 yet.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329544359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329783204", "body": "@extr0py At least for Arch the package is consistent, the difference being that it uses the last stable version for neovim (0.2.0). See: https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=oni#n9\r\n\r\nWe can change it to reference `neovim-git` instead, let me know your thoughts.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329783204/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329819551", "body": "> It'd be nice at some point to use a consistent version between windows/OSX/linux. Windows/OSX are using: v0.2.1.4-g9847be58 - I wonder if there is a way to directly reference that in AUR as a dependency?\r\n\r\n@extr0py This is weird, latest stable release I can see is `0.2.0` (see https://github.com/neovim/neovim/releases). Is there any other place where neovim states their releases?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329819551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329844972", "body": "@extr0py Updated AUR for release 0.2.9 (https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=oni).\r\n\r\nCan you please take a look at electron-builder to generate a `.desktop` file? Or taking a look at an AppImage release. See https://www.electron.build/configuration/linux", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329844972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332005614", "body": "@extr0py I made a desktop file for oni and also scripts to download and update the icons for arch packaging.\r\n\r\nYou can find these at:\r\n\r\n- https://aur.archlinux.org/cgit/aur.git/tree/oni.desktop?h=oni\r\n- https://aur.archlinux.org/cgit/aur.git/tree/update-icons.sh?h=oni\r\n- https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=oni\r\n\r\nOne odd thing I found when I was writing a custom Desktop Action, and setting Oni as a file opener application for certain Mime Types is that oni is not respecting `oni %f` and opening `%f`. Is this just not implemented or a bug?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332005614/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332007847", "body": "@terlar Is there a reason for using the `oni.sh` wrapper?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332007847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332046116", "body": "The Desktop file actually should be usable for any linux machine, not only Arch, so if you want to distribute Oni on Linux, you'll want to create one. I think electron-builder is able to create one automatically for you.\r\n\r\nSee the screenshot for the inspected console, note the error on the logs.\r\n\r\n![screenshot from 2017-09-25 20-52-11](https://user-images.githubusercontent.com/347552/30836283-8da0464a-a233-11e7-9fa6-329a2c1d5f86.png)\r\n\r\nIf you want to setup an Arch-compatible machine I recommend Manjaro as it`s really straightforward to install as opposed to having to follow through the Arch tutorial.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332046116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332087835", "body": "Excited to see this being worked on, thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332087835/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332088443", "body": "Another possibility is uploading the desktop file to the repository and using it as a source for all the different packaging systems.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332088443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332669508", "body": "I identified a local issue with my electron installation", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332669508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332680646", "body": "Is there a reason for checking the executable path?\r\n\r\nThis will be troublesome for linking oni or installing it in non-opt directories (which should be the case). I think it would be better to check if we are on a development build or not before compiling oni and setting a variable that can be captured there, what do you think?\r\n\r\nI am fixing this at the moment and can't output any logs for debugging since it's a step before spawning the process, I tried `Log.info` but no dice, any idea?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332680646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332684564", "body": "Mine has `dist/electron` instead of `node_modules/electron` since I am testing the distribution build.\r\n\r\nWould checking if it's terminated in `electron` be a bad idea?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332684564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332684933", "body": "I very much prefer the deterministic approach but I'm not sure of all the edge cases and how to send this state down the stack.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332684933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332694867", "body": "@bryphe See the PR referenced, I preferred to use the environment variable to make Oni more platform agnostic and also it's way simpler. I used the `LOCAL_ONI` name as it make the purpose self-explanatory.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332694867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332698471", "body": "I don't understand the use case for this rule.\r\n\r\nAnyways, I changed it to use a variable access as it makes the code more readable instead of using the comments for the lint.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332698471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332699733", "body": "With regard to the `editor.fullScreenOnStart` option. It makes Oni \"true\" full screen instead of just maximized whereas I just really wanted it maximized.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332699733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332702868", "body": "As soon as you release a new version this will fix the expected behaviour on linux, so keep that in mind for the release notes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332702868/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333729168", "body": "@bryphe I noticed that the release tag for 0.2.10 has an `-recovery` appended. If we are going to automate this we'll have to use consistent names for the release tags. Noticed because I had to change the `PKGBUILD` manually for this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333729168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333730116", "body": "I think this must be windows related as I have used Oni for a month now and did not have a single crash.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333730116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333859063", "body": "Can confirm this on 0.2.10. E.g. can't run `:e ~/.oni/config.js`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333859063/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333880061", "body": "Don't worry, this is not only for AUR but for any automation done by other actors.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333880061/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333883107", "body": "Great, thanks for the reference, will tackle this later on.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333883107/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333884213", "body": "Just something I noticed, you check for Linux or Windows to use Control and Meta for all other OSes.\r\n\r\nI think changing this to check Mac first to use Meta and Control for others is better, e.g. would use Control instead of Meta for BSDs or other OSes that might use Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333884213/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333884698", "body": "@bryphe I'll try to investigate myself using your questions and will return to you ASAP.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333884698/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333904089", "body": "It seems actually each fuzzy-finder uses a different set of keybindings:\r\n\r\n- t, v and x for https://github.com/kien/ctrlp.vim\r\n- t, ] and x for https://github.com/Yggdroot/LeaderF\r\n- l, k and j for https://github.com/vim-scripts/FuzzyFinder\r\n\r\nWe can maintain `s` for the horizontal split but make these keybindings configurable. As my preference is t, v and V but may not be a good default.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333904089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334018293", "body": "Thanks @bryphe, I was able to make the upgrade package to v0.2.10 anyway, next release I'll use the new schema", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334018293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334026910", "body": "I wil create an `oni-git` package to try and reproduce from master branch.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334026910/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334498251", "body": "I pushed #761 for new tab support.\r\n\r\nConfigurable keybindings seem not to be present on that file, so I think it would be better to add configurability later on all.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334498251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334503618", "body": "@bryphe This is the console log:\r\n\r\n![screenshot from 2017-10-05 12-34-39](https://user-images.githubusercontent.com/347552/31236130-a4c0ed82-a9c9-11e7-84aa-14a25ce8cd2d.png)\r\n\r\nAnswering your questions:\r\n\r\n- Did not use it before\r\n- See image above\r\n- A project directory\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334503618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334774689", "body": "@Metamist Thanks for investigating it deeper, do you have any insight if there's a workaround for it (using a library for spawning the process) or if we have to wait the node fix?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334774689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335054632", "body": "I agree with this change (as mentioned on https://github.com/bryphe/oni/issues/452), it's a better use case for many window managers as opposed to full screen.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335054632/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335191529", "body": "Unless we really want to keep track of the dimensions from the last window opened we can close this issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335191529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335444328", "body": "\ud83d\udc4d  Works great, thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335444328/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335445400", "body": "@bryphe The font is indeed adjustable, and for my case I was able to make it look a little better, still tiny though:\r\n\r\n![screenshot from 2017-10-10 08-36-51](https://user-images.githubusercontent.com/347552/31384667-46ced074-ad96-11e7-8c98-98514d5f104f.png)\r\n\r\nHowever the statusbar height does not scale with the font size, so that's what you get without any configuration:\r\n\r\n![screenshot from 2017-10-10 08-35-45](https://user-images.githubusercontent.com/347552/31384702-6b44e1d2-ad96-11e7-88e6-7e355b201fbf.png)\r\n\r\nI'd suggest reopening this issue to fix the height scaling of the statusbar or adding a configuration option to manually set it. I can also take a look at it later on.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335445400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335644794", "body": "@bryphe  I just noticed now that `<C-v>` (without the backticks) was not being displayed, I am sorry.\r\n\r\nThat's the keybinding that triggers the issue, on vim generally it expands an array of options (wildmenu).\r\n\r\nIn this case in particular `folderwithfilesinthem/<C-d>` will list the files present but for some reason it's scrolling down as it should be in normal mode, but not in command mode.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335644794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335646423", "body": "@bryphe First step should be to include the code for packaging it, then automating it later, where do you think would be a good place to put it?\r\n\r\nI thought of `dist/arch` or something like that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335646423/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337268648", "body": "@bryphe It's fixed, thank you very much!\r\n\r\nThe only issue is that now the status bar scales the height more quickly than the font-size, probably a matter of taste.\r\n\r\nIf required as a new issue I'll file to customize the statusbar height.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337268648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337269118", "body": "@bryphe Just tested on 0.2.14.\r\n\r\nIt still hangs, but I guess this is related to some kind of icon fetching from Oni instead of the previous error.\r\n\r\nSee:\r\n\r\n![screenshot from 2017-10-17 13-22-19](https://user-images.githubusercontent.com/347552/31673676-9d9db49e-b33e-11e7-9bdb-5e1c408ab499.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337269118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338745633", "body": "I would just label this as specific to windows or mac if not available there, as the specification for the `.desktop` file we have for linux (on Arch at least) knows the MIME types oni can handle.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338745633/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339173266", "body": "@bryphe Let me know if there's any clarification I can add to disambiguate this issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339173266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339175379", "body": "@bryphe Just tested here both places you suggested and those parts are never reached by Oni when using Fzf.\r\n\r\nI checked with the default finder and could see that data is not null and it's string contents, and that selectedOption would be accessible when selected. This was not the case with Fzf, it just hangs and never reach the stdout binding for data.\r\n\r\nMy biggest gripe with the default algorithm is it being case-sensitive, if I would be able at least to change the default arguments to it I would not require having to dive into this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339175379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339177308", "body": "@CrossR I think this is related to the reason I filed https://github.com/bryphe/oni/issues/747.\r\n\r\nRipgrep is the default fuzzy finder used for quick open and it's hardcoded as case-sensitive, a solution to this issue would be to enable configuration of the default arguments to ripgrep. Or at least the case-sensitive part.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339177308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339180883", "body": "@bryphe One idea would be to split this into a Git plugin since there are many different CVSs to choose from. The Git plugin would be responsible to expose this configuration.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339180883/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339181833", "body": "@bryphe After option for maximization for Oni was merged, would we really want to keep track of the dimensions of the last window opened?\r\n\r\nIf not, this issue could be closed since @HiCodin's problem actually was maximization (same as mine).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339181833/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339296904", "body": "@bryphe Done, can you check if this is satisfiable? See how it shows on my screen:\r\n\r\n![screenshot from 2017-10-25 09-15-10](https://user-images.githubusercontent.com/347552/31995920-25c5c2f4-b965-11e7-8c4b-025adb7c0717.png)\r\n\r\nThis is to showcase the issue with scaling width (this with fontSize 34px):\r\n\r\n![screenshot from 2017-10-25 09-15-54](https://user-images.githubusercontent.com/347552/31995943-3e19c2c4-b965-11e7-826d-fdc60fc5c9f5.png)\r\n\r\nI tried adding configuration option but it seems like a lot of boilerplate, I can take a look at adding it later if this is not yet enough.\r\n ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339296904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339299831", "body": "@bryphe Defaulting case sensitivity to 'smart' would be a good idea I think (it would be good enough for me, and probably for most people).\r\n\r\nAlso, if someone is configuring `execCommand` it should be pretty clear for the person that it is not following the 'standard' configuration for the quickOpen functionality. Thanks for the clarification @bryphe, really good job!\r\n\r\nTo be frank I am not sure why we have this complicated setup, shouldn't ripgrep be fast enough to be called each time? At least that's how most of the Vim world uses a fuzzy-finder, but I should test both configurations to be sure it's better than what we have (probably not).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339299831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339511890", "body": "@bryphe Your PR is much better, I'll be able to configure how I like with it and have reference for when I need to add customizable css to Oni in the future.\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339511890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339512115", "body": "This is great, thanks!!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339512115/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342870110", "body": "Really can't tell too much without testing this, but I was wondering whether we could reuse something for the logic and just stylize the output? If this requires more boilerplate than what we are saving then great (or has fundamental limitations/flaws), if not I would suggest:\r\n\r\n- (NerdTree) https://github.com/scrooloose/nerdtree\r\n- (vim-vinegar) https://github.com/tpope/vim-vinegar\r\n- vim's native netrw", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342870110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342893233", "body": "@bryphe Can you confirm that linux distros won't have to keep track of neovim versions of packaging?\r\n\r\nIf true, I'll remove dependencies on neovim for the next release (for AUR)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342893233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343143950", "body": "@keforbes I agree, however that requires having to add a check not to include and not to use the bundled neovim binary on linux systems.\r\n\r\nIf neovim for ubuntu is not working for you, then I am not sure it will work for most people, ideally the package from the distro should be working and using a recent stable version.\r\n\r\nIf neovim keeps being bundled for linux, keeping the dependency will make no difference as it will use the bundled one anyway.\r\n\r\nThe distinction to be made is:\r\n\r\n- Assume that for linux the user and distro should be providing a working and up-to-date neovim version (not very difficult but adds friction)\r\n- Use the bundled neovim version and don't care about redundant neovim versions (bundled and packaged) on the user system.\r\n\r\nNot sure what @bryphe's plan is for this. I prefer (1) as most linux users that care about neovim should be power users that understand that if there's no package for their distro they'll have to pay attention to this.\r\n\r\nIdeally we should provide not only AUR packages, but .deb, .rpm, etc. But that's a lot of work for one person to do, and I am not sure if the automated builds we have are capable of this. Ubuntu/Debian/Mint/... users that care about this could take this work and maintain the packages, that's how it usually works and should happen with Oni as it gains popularity over time (before it is taken to the official repositories)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343143950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343145815", "body": "Will this be provided as an optional plugin for Oni?\r\n\r\nI am not most people would like this be enabled by default.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343145815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343262422", "body": "Even if we agree on this issue, currently the next version will bundle neovim, so that's why I need @bryphe's confirmation on his plan for this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343262422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343916249", "body": "Confirming this issue happening for me as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343916249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344356338", "body": "@bryphe I remember that one of the reasons I was still using `useDefaultConfig` was that because if it is false some Oni functionalities are disabled. Is this true?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344356338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344761400", "body": "Thanks @bryphe, that solves it for me.\r\n\r\nDo you think we could make it clearer on the documentation on what are the additional configurations pre|appended by oni?\r\n\r\nAs I see there are two different parts that are very important, basic vim configurations that provide Oni with that IDE look-and-feel (colorscheme, vim compatibility, etc..) and others like additional plugins and keybindings.\r\n\r\nThese are the ones I had to maintain to keep the Oni experience without sacrificing configuration:\r\n\r\n```viml\r\nset number\r\nset noswapfile\r\nset smartcase\r\n\r\n\" Turn off statusbar, because it is externalized\r\nset noshowmode\r\nset noruler\r\nset laststatus=0\r\nset noshowcmd\r\n\r\n\" Enable GUI mouse behavior\r\nset mouse=a\r\n\r\nset list\r\nset listchars=trail:\u00b7\r\n\r\ncolorscheme onedark\r\n```\r\n\r\nThese are good defaults in my opinion, since I am aware of how to configure it the way we have the default config is fine by me, I am not sure everyone has interest in the additional plugins, configurations, keybindings (except for vim-unimpaired \ud83d\ude02 ).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344761400/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344772001", "body": "> Which files are you seeing this for? TypeScript / JavaScript files did have a bug fix addressing the language service not being fully initialized (which brought in completion).\r\n\r\nI noticed this with javascript recently. And got annoyed mostly because of (https://github.com/onivim/oni/issues/956).\r\n\r\nWith regard of discoverability I guess I should have paid more attention, but showing it at the default `config.js` would be great, many vim users rely on functionalities present on vim for autocompletion `<C-n>`, `<C-u>`, `<C-x>`.\r\n\r\nThe keybinding specifically I think could use the same pattern as native vim ones: prepended with a `C`.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344772001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344775276", "body": "Is Neovim capable to be run as a server that can be connected via ssh?\r\n\r\nIf yes we could gain this functionality for free, just connecting Oni to that server. The rest is wrapping up and displaying information to the user (e.g. \"On the other machine run `oni -C x.x.x.x:1234`\")\r\n\r\nPS: Seems like not (https://github.com/neovim/neovim/issues/5773)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344775276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344809394", "body": "Seems like after further test I noticed this actually works, I'll see if it was a mistake on my test or some misconfiguration.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344809394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344809575", "body": "Ok, now I can confirm, weirdly enough if I type fast it breaks, if I type slowly it works.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344809575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344974853", "body": "@CrossR Was not aware of ui fontSize, perhaps I should do my homework before putting issues. \r\n\r\nThank you very much @CrossR!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344974853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345031941", "body": "> As far as I know, SSH would only allow a single cursor working on one file at once.\r\n\r\nNot a limitation of SSH itself, but from core neovim, if the server has this implemented, should work: https://github.com/neovim/neovim/issues/7257\r\n\r\n@tphecca That said, I agree with you, if this is worth it we should not have to wait. And also even then, if `teletype-client` can connect with other editors then the benefit is hugely increased.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345031941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345289127", "body": "@bryphe I am not having too much time in hands lately so I'll probably have to test it in the next stable release.\r\n\r\nIf I am able to test before I'll let you know, thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345289127/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345293073", "body": "Thanks, this was happening with me for Ruby", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345293073/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345294294", "body": "@bryphe To be frank, I am not sure if we should configure so much stuff from the default vim experience.\r\n\r\nPeople that use vim have a lot of different use cases/requirements and are power users.\r\n\r\nI guess it's fine to have a 'batteries included' default config, but my opinion is that the default should be just stuff that really matters for Oni to work (mouse, tabs, statusbar fixes, etc...).\r\n\r\nAnd the batteries included be all the other stuff. Ideally optin instead of optout.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345294294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345413676", "body": "The defaults above still have some opinionated decisions, decisions that do not essentially adjust vim to work with Oni but are already a great improvement.\r\n\r\nFrom what I see the real core is:\r\n\r\n```viml\r\n\" Turn off statusbar, because it is externalized\r\nset noshowmode\r\nset noruler\r\nset laststatus=0\r\nset noshowcmd\r\n\r\n\" Enable GUI mouse behavior\r\nset mouse=a\r\n```\r\n\r\nProceeding in order of less to more relevancy (IMO), current configs that are not essential but are sensible:\r\n\r\n```viml\r\n\" Not sure why this is important, I always prefer exact searches, but more IDE like probably?\r\nset smartcase\r\n\r\n\" Look and Feel\r\nset list\r\nset listchars=trail:\u00b7 \r\n\r\n\" Look and Feel, but more and more the standard on all IDEs these days\r\nset number\r\n\r\n\" This is not really essential, but swap on vim never helped me and issues with it are a pain the ass, so this is one that almost makes it to core\r\nset noswapfile\r\n```\r\n\r\nThe decision on what to keep/take off should be based on what do you think is the direction you want take Oni:\r\n\r\n- A modern GUI for Vim\r\n- A powerful IDE with IDE's expectations met, powered by Vim\r\n\r\nIt's not one or another, I feel it's tilted more to the second even though I very much prefer the first, but I think with thoughtful considerations we can support both use cases.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345413676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345415539", "body": "Btw `<C-Enter>` is fine by me.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345415539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345532486", "body": "@allyraza Can you tell us why it's a partial and not a full fix?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345532486/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345835841", "body": "I don't understand why a fresh installation behaving differently from vim\nis a happy path.\n\nCare to share your thoughts?\n\nEm 20/11/2017 19:12, \"Bryan Phelps\" <notifications@github.com> escreveu:\n\n> Thanks for putting this together so quickly, @CrossR\n> <https://github.com/crossr>! \ud83d\ude04\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/onivim/oni/pull/992#issuecomment-345833383>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAVNoBVumwdAX80ZGbq_Tg738xLkQ-RHks5s4essgaJpZM4Qkr6Z>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345835841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345908282", "body": "I mean, I don't understand why buffers is easier to understand | work with for begginers, I don't understand how to work with it \ud83d\ude02 . If you tell me this is the default on other IDEs and more usable for beginners then great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345908282/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345920967", "body": "@CameronDiver I see you used the `aur` package for Oni. Current version is at `0.2.17`, perhaps you could confirm that this bug is happening on the last stable version?\r\n\r\nAlso, it's not explicit but Oni depends on Neovim being at least `0.2.1`, this is important for tabs to work, we also removed the dependency from `neovim-git` once the stable repositories were updated to use the recently released version (the previous installation method could have had an incompatibility).\r\n\r\nThis is a long shot, but it's low effort and huge benefit if it solves the issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345920967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345923956", "body": "Well, a decision has to be made, if one wants to configure, for instance, smaller or bigger ui elements (tabs, statusbar), should the completion follow? Is it a ui or editor element?\r\n\r\nBy this line of reasoning it seems (to me) suitable as an editor setting as it uses the same visual span as the editor itself.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345923956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346638698", "body": "@jordwalke I can't reproduce this issue, do you know if this is specific to a certain configuration?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346638698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346701575", "body": "@bryphe I guess this is done already, or is there anything to address on this issue?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346701575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346947761", "body": "@bryphe Feel free to close it, my concerns were adressed, even though this still may be a standing issue for some.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346947761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347016882", "body": "The issue I am having with the current implementation is that if I want to enter a commonly named file nested into separate folders it is not scoped correctly.\r\n\r\ne.g. `AComponent/index.js`, `BComponent/index.js` if I type `ACoinde` it actually does not filter `BComponent`.\r\n\r\nI was hoping that the changes that are implemented in master would fix this, but after typing very slowly noticed this still happens.\r\n\r\nI can provide a repro if necessary.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347016882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348932507", "body": "@topaxi As a workaround you can use the * register.\r\n\r\n- In insert mode: `<C-R>*`\r\n- In normal mode: `\"*p`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348932507/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349067453", "body": "Assuming x64 is what is referenced on arch as x86_64 and that this was always the target architecture, it's safe to assume that this should be a x86_64 package only.\r\n\r\nIf users actually want another architecture supported we must support it explicitly and actually make it be a supported target.\r\n\r\nI am in favour of **Option 1**.\r\n\r\nIf someone can say that they use a different architecture and that it still works even unsupported I can rollback to **Option 2**. \r\n\r\nLet me know your decision and I'll update the package.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349067453/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349069077", "body": "It seems this has been an issue on atom as well, see:\r\n\r\n- https://github.com/atom/atom/issues/2244\r\n- https://github.com/atom/atom/pull/4211\r\n- https://github.com/atom/atom/pull/3027", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349069077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349069920", "body": "@bryphe This is not something actually related to Vim, except the integration from X11 to the * register so I would not say it's related to #973.\r\n\r\nThis is the behaviour expected for any app that runs under X11 (that probably will or should not be expected to work when Wayland gets mainstream usage), and I was surprised that electron did not support it by default.\r\n\r\nAnyway, if it's an easy enough fix should make the linux experience a lot better.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349069920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349071137", "body": "Just one thing that is important to keep in mind, usually there are two registers the normal clipboard (C-C, C-V) and this 'selection clipboard'.\r\n\r\nThe solution integrated by atom does not seem to be the best one, so I recommend atom/atom#3027 as a better reference.\r\n\r\nThere's an even better way, that is to use the same thing that Vim uses (the * register). If it's not supported by your vim configuration then it probably should not on Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349071137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349077376", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349077376/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349288744", "body": "@bryphe I tested in the new release, the feedback from the quickopen is much better now!\r\n\r\nHowever the issue with the fuzzy finder is still present (not being able to find files with folders and filename matching the search).\r\n\r\nGonna take some time to present you with a repro repository soon.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349288744/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349289143", "body": "Also, `maximizeScreeOnStart` is a good option.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349289143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349289610", "body": "Hope we can have a configuration to disable this without the overhead of it's implementation. Ideally optin, but that's something @bryphe has to decide.\r\n\r\nAlthough I think this is a great feature (for some users) it's very obstrusive for the edititing flow.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349289610/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349290651", "body": "@hoschi 0.2.18 was released, can you check is this is fixed?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349290651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349746267", "body": "You need to configure oni to not load init.vim, see: \r\n\r\n- https://github.com/onivim/oni/issues/929#issuecomment-343993252", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349746267/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350143540", "body": "@bryphe Chiming in a little bit late, but shouldn't this be unrelated to whether tabs mode is buffer or tabs (e.g. introducing a ui.showTabIcons = true|false option)?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350143540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350179399", "body": "Did not know about the tab renaming issue, thanks for the clarification \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350179399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/onivim/oni/comments/24738928", "body": "\ud83c\udf89\ud83c\udf89", "reactions": {"url": "https://api.github.com/repos/onivim/oni/comments/24738928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141407221", "body": "\ud83d\udc4f \ud83d\udc4f \ud83d\udc4f ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/141407221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/149719474", "body": "@bryphe Just noticed now, perhaps `s/Lucide/Lucida`  `s/seriff/serif`?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/149719474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/149950231", "body": "I am sorry @bryphe just noticed also Cantarell -> Cantarelli", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/149950231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152086179", "body": "I feel this is making configuration very complex with settings that depend on context of other settings. It's good for retrocompatibility but bad in the long run.\r\n\r\nWhat about: `tabs.showVimTabs = (buffers)|files|native`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152086179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152100623", "body": "Well, `tabs.enabled` seems like a different configuration altogether, not sure it could be replaces.\r\n\r\nThoughts @bryphe ?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152100623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152173120", "body": "I think the idea is fine, the only problem is that to enable a specific configuration I want I'll have to check a 'truth table'.\r\n\r\nI think it would be much more straightforward to enable or disable tabs and then (if they are enabled) choose explicitly the behaviour as a string (buffers|tabs|native).\r\n\r\nThis is just my aversion to configurations that depend on each other.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152173120/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152179728", "body": "> Only downside is changing the setting would be a breaking change.\r\n\r\nThat's the advantage of being a 0.2.x version :-). We need to make it right now not to have to deal with this in the future", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152179728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152373548", "body": "Is necessary for tabs visibility be tied with the tab mode?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152373548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152411055", "body": "Very nice, thanks!!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/152411055/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153275245", "body": "If I use `console.log` I can see the output when debugging oni now?\r\n\r\nI was trying to fix something this weekend and this issue arised.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153275245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153296239", "body": "Thanks, gonna check it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/153296239/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/151827093", "body": "What do you think about also exposing this on `config.js`?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/151827093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159246236", "body": "Are `pixelX` and `pixelY` numbers? If so this can have ambiguous keys, e.g. X=50, Y=50 | X=100, Y=0 | etc.\r\n\r\nMaybe `` `${pixelX},${pixelY}` `` would be a better choice in this case.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/159246236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167369814", "body": "> Also, I did create an account - onivim with oni@onivim.io, but haven't set up any keys yet. @badosu - could you please add us both as co-maintainers?\r\n\r\nDone for oni.\r\n\r\n@someguynamedmatt what's your AUR username?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167369814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167376878", "body": "@someguynamedmatt Added as well.\r\n\r\n@bryphe I think @someguynamedmatt will need your AUR credentials (or send you the public key) and also send you the private key or access the Travis CI admin panel.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167376878/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "qazip": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1709", "title": "Oni asks for ssh password at opening time", "body": "Whenever I open Oni with \"oni\", in terminal, it asks for my ssh password, for some reason.\r\n\r\nWhy is that and how do I disable it? I'm using ubuntu 16.04.\r\n\r\nRight now, I can't use oni for anything. It opens, but it's just stuck, nothing works. I try to open a new file with CTRL+n, but nothing happens. I try to open a file with \"oni file\", but oni doesn't open any file again. I try to press \":\" to see if there's any settings, but nothing happens again... \"oni --version\" and \"oni --help\" opens a new oni window. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "LucianBuzzo": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1708", "title": "How do I change the background color in a theme?", "body": "I'm using the `solarized8_light` theme, but I don't like the mustardy yellow that gets set as the background color.\r\n\r\n<img width=\"601\" alt=\"screen shot 2018-03-04 at 07 41 21\" src=\"https://user-images.githubusercontent.com/15064535/36943331-96e5a848-1f7f-11e8-9ef6-19c47dce2bba.png\">\r\n\r\nI tried copying the theme to my plugins directory and changing the background color to a different value, but it had no effect. \r\nSo I have a few questions:\r\n- How can I change this background color? \r\n- Is it calculated on the fly or is it set somewhere? \r\n- does the value come from the vim theme in `solarized8.vim`? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/e433b6787fddae2a6bf9fd0db5b3241f39fabc3d", "message": "Remove unused attributes from StatusResize state interface (#1739)\n\nFixes #1726"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/352485946", "body": "@bryphe Thanks a bunch", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352485946/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "13k": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1707", "title": "RFC: Command line usage", "body": "Disclaimer: beware, wall of text ahead.\r\n\r\n## Abstract\r\n\r\nCommand line usage is pretty much ingrained in my workflows, as I suspect is for most vim users. Currently, the `oni` command lacks much of what would make it good for such usage.\r\n\r\nI'm new to both neovim and oni, but I've used vim for more than 12 years and I want to switch to a modern version of vim. I tried both atom and vscode with vim emulation extensions, but it doesn't live up to expectations. \r\n\r\nI have installed the rpm release package in Fedora, and everything I say here is in regards to using `oni` from the command line when installing it from release packages (not the npm package, neither from a dev checkout).\r\n\r\n## Motivation\r\n\r\nI always start editors from the command line, mostly because:\r\n\r\na) I use the terminal when working on a project. I have tmux setup with sessions spawning panes and windows accordingly for each project. There's also a myriad of other command line tools that are used in development workflows.\r\nb) To use the same environment in the editor as the environment set up in `a)`. For example, variables set up according to several environment managers (pyenv, rbenv, nvm, gimme, rustup, etc). This enables development tools (debuggers, linters, language servers, etc) to be correctly detected, on a per-project basis.\r\n\r\n## Concerns\r\n\r\nThe release package installs a symlink to the electron binary in the system `$PATH`, bypassing `cli/oni` and spawning the electron app directly.\r\n\r\nSo my main issues are:\r\n\r\n1) Regardless of `cli/oni` [being changed to spawn the electron process in the background](https://github.com/onivim/oni/pull/150), it's never used and the editor is always launched in the foreground;\r\n2) Command line options seem to be ignored or don't exist at all (correct if I'm wrong);\r\n3) Workspace detection seems non-intuitive\r\n\r\n## Proposal\r\n\r\nStarting the editor from command line should be treated as a separate concern from the regular app launch. When starting from the command line, it should:\r\n\r\n* Dettach to background by default, since it's not a terminal application;\r\n* Provide command line options with help;\r\n* Provide a command line option to keep in the foreground (named `foreground` for reference), like `gvim -f`. This makes it possible for `oni` to be used in command line workflows that requires spawning an editor and waiting for termination (like `git mergetool` or setting `VISUAL=oni -f`);\r\n* Provide command line option to open a buffer at a specific location (named `goto` for reference), similar to `vim +line <file>`;\r\n* Apply specific workspace detection (see below);\r\n\r\n### Workspace detection\r\n\r\nWhen detecting workspaces, `$PWD` should be taken into consideration. Therefore, detection logic could be:\r\n\r\n* if no arguments are given: open an empty buffer, detect workspace using `$PWD`. If it fails, don't use any workspace\r\n* if a directory is given as argument: detect workspace using the given directory. If it succeeds, open empty buffer. If it fails, open netrw's listing in a buffer\r\n* if a file is given as argument: open the file in a buffer, detect workspace for the given file. If it fails, don't use any workspace\r\n\r\nThen when respecting workspace configuration:\r\n\r\n* `\"workspace.autoDetectWorkspace\": \"noworkspace\"`:\r\n  - if previous workspace is available: activate it\r\n  - if no previous workspace is available: use detection logic\r\n* `\"workspace.autoDetectWorkspace\": \"always\"`: always use detection logic\r\n* `\"workspace.autoDetectWorkspace\": \"never\"`:\r\n  - if previous workspace is available: activate it\r\n  - if no previous workspace is available: do nothing\r\n\r\n## Implementation proposal\r\n\r\nMost of the proposed points are taken from VSCode's `code`, with the exception that it also ignores `$PWD` when detecting workspaces.\r\n\r\nInvestigating more about the `code` command, the release package installs a symlink to a platform-specific launch script, which then runs the node cli script:\r\n\r\n```\r\n$ file $(which code)\r\n/usr/bin/code: symbolic link to /usr/share/code/bin/code\r\n$ file /usr/share/code/bin/code\r\n/usr/share/code/bin/code: Bourne-Again shell script, ASCII text executable\r\n```\r\n\r\nTail of the Linux launch script:\r\n\r\n```shell\r\nELECTRON=\"$VSCODE_PATH/code\"\r\nCLI=\"$VSCODE_PATH/resources/app/out/cli.js\"\r\nELECTRON_RUN_AS_NODE=1 \"$ELECTRON\" \"$CLI\" \"$@\"\r\nexit $?\r\n```\r\n\r\nvscode's platform-specific launch scripts: [linux](https://github.com/Microsoft/vscode/blob/8c37fa806d3044f5a3eeb2edea276c6aa66e56bc/resources/linux/bin/code.sh), [win32](https://github.com/Microsoft/vscode/blob/8c37fa806d3044f5a3eeb2edea276c6aa66e56bc/resources/win32/bin/code.cmd), [darwin](https://github.com/Microsoft/vscode/blob/8c37fa806d3044f5a3eeb2edea276c6aa66e56bc/resources/darwin/bin/code.sh)\r\n\r\nvscode's CLI script: https://github.com/Microsoft/vscode/blob/8c37fa806d3044f5a3eeb2edea276c6aa66e56bc/src/vs/code/node/cli.ts\r\n\r\nSo steps for accomplishing the proposals would be (correct me if I missed something):\r\n\r\n* Create platform-specific launch scripts that runs `cli/oni` using the electron binary\r\n* Change packaging to install a symlink to the launch script\r\n* Change `cli/oni` to:\r\n  - extract CLI-specific options from argv (from proposal: `foreground`)\r\n  - add a command line option to the main process that indicates it was started from the command line or [manipulate the environment](https://github.com/Microsoft/vscode/blob/8c37fa806d3044f5a3eeb2edea276c6aa66e56bc/src/vs/code/node/cli.ts#L117-L122) (named `is_cli` for reference)\r\n  - be aware of both invocations (node or electron), which is mostly [re-spawning its own process](https://github.com/Microsoft/vscode/blob/8c37fa806d3044f5a3eeb2edea276c6aa66e56bc/src/vs/code/node/cli.ts#L327) (the platform-specific launch script already decided in cases of release-installed invocations and is node itself in case of development invocations)\r\n  - pass the rest of argv to the child process\r\n  - wait for child process to exit if the `foreground` option was given\r\n* Change the main/browser processes to:\r\n  - parse command line options (from proposal: `goto`, `is_cli` if a command line)\r\n  - change file opening to check for `goto`\r\n  - change workspace detection to check `is_cli` and apply proposed detection logic if it's enabled\r\n\r\n## Additional Proposals\r\n\r\nThese are additional proposals for command line usage, which I think would require new features:\r\n\r\n* Provide instance management command line options (new instance, reuse existing instance)\r\n* Provide a diff mode command line option", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1707/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Uroc327": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1680", "title": "Don't open a new tab for every specified file", "body": "Is there any way to prevent oni to open a tab for every file from the command line? I'd prefer it to just have a single tab, containing any single one of the provided files.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1679", "title": "Option to hide Oni's tab UI when there is only one tab to show", "body": "I'd really like to have an option to hide the tab bar, when there is only one tab. So whenever the tab UI would show only a single file/tab, it just disappears instead.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/338966929", "body": "This seems to be fixed (as well as #447 ) . `:set virtualedit=all` seems to result in the desired behavior: free cursor movements in all modes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338966929/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338967311", "body": "Apparently this is fixed. Setting `virtualedit=all` the cursor can be moved over tabs in any direction or mode.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338967311/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "GeorgeTG": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1674", "title": "Closing all tabs results in \"Uh oh! Unable to launch Neovim...\"", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\nEverytime I close all open tabs with :q or :wq, an error message appears that states neovim cannot be launched, even if i try to click on another file to reopen nvim nothing works, a restart of oni is required.\r\n\r\nDeveloper tools show the general error:\r\n`bundle.js:1 Neovim disconnected. This likely means that the Neovim process crashed.`\r\n\r\nFull console log at: https://pastebin.com/Zx7kaKPq", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/303855700", "body": "I have the same issue with youcomplete me.\r\nI installed the regular way with install.py\r\nWhen suggestions are displayed, typing the whole word or pressing enter\r\nwont close the window.\r\nSo if i try to press Enter to get a new line, the keyword is inserted again.\r\nI have to manually press Esc for the window to close and then press enter to get a new line.\r\nI have `let g:ycm_autoclose_preview_window_after_completion=1`\r\nin my init.vim file, but it seems it is ignored.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303855700/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ha7ilm": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1654", "title": "Emojis in Markdown preview", "body": "It was nice to support GitHub emojis in Markdown preview, like Atom does:\r\n\r\n![image](https://user-images.githubusercontent.com/5903408/36728619-a4bd03ce-1bc1-11e8-9cc9-8e3f1a928e2f.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1653", "title": "Images not shown in Markdown preview", "body": "The images should be sourced from the directory where the document is saved to:\r\n\r\n![image](https://user-images.githubusercontent.com/5903408/36728536-5af769aa-1bc1-11e8-967b-60f18289947a.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "trusktr": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1652", "title": "File Explorer: Enable search ('/' and '?')", "body": "I really like that in NERDTree it's just a buffer, so I can hit `/` and search for text in it to move the cursor there quicker. I miss this in File Explorer, where I feel more limited in that sense.\r\n\r\n(for now I can still use NERDTree after hiding File Explorer)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1652/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1651", "title": "equivalent of gui_running?", "body": "I have some config in my .vimrc like the following in which I set colorschemes:\r\n\r\n```viml\r\n                if &term == \"xterm\" || &term == \"xterm-256color\" || &term == \"screen-256color\" || (&term == \"nvim\" && !has(\"gui_running\"))\r\n                  \" set 256 colorscheme\r\n                elseif has(\"gui_running\")\r\n                  \" set 24-bit colorscheme\r\n                endif\r\n```\r\n\r\nHowever Oni is falling into the first category. I was hoping it would `has('gui_running')` or something similar to that I can do 24-bit color stuff.\r\n\r\nHow would we do this in OniVim?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1634", "title": "How to open/close the file explorer?", "body": "How can we open/close the file explorer on the left?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1633", "title": "Is there a way to map Command to Control?", "body": "It'd be great if there was a way to map Command to Control. This would be outside of the Neovim instance, in Electron. Not sure if Electron supports it. Neovim would see it as if we pressed Control, and would not know about this setting.\r\n\r\nIn iTerm, there's an option to map Command to Control, and Bash will see Control when we're actually pressing Command.\r\n\r\nIs this possible?\r\n\r\nIn macOS, I have Caplock Key mapps to Command, which works great with iTerm (as Control). Would be great to have this in Oni!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1633/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1627", "title": "Pleeease, show actual tabs, not buffer tabs.", "body": "The main thing I displike about Vim emulation in editors like Atom or Sublime is that they don't group window splits inside tabs.\r\n\r\nAtom, for example, groups tabs inside of splits, which is completely a bad workflow that I like to avoid by using Vim. See this issue: https://github.com/atom/atom/issues/672\r\n\r\nBut, I noticed that in Oni vim, when I try to make a `:tabnew`, it doesn't show it in the tabs. \ud83d\ude22 \r\n\r\nAnd, if I try splitting windows, then click on Oni's tabs, it will change the buffer of the active split. \ud83d\ude22 \r\n\r\nThis is moving away from Vim-style tabs and going towards Atom-style or Sublime-style tabs, which is \ud83d\ude22 .\r\n\r\nIt would be great for tabs to represent actual Vim/Neovim tabs.\r\n\r\nIs there a setting for this?\r\n\r\n I really admire the project, but I can't live without the splits-inside-tabs workflow.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/267088048", "body": "Some ideas:\r\n\r\n- when we scroll down, we know for fact that the text that is moving upward is not changing, the only real new stuff to render is the stuff that comes in at the bottom. If we render stuff at the bottom one new line at a time, that should perform almost the same speed at just moving the cursorline, plus the overhead of moving the whole upper portion upward while clipping it at the top.\r\n- Another high-level idea is to make the actual buffer height larger than the viewport, and using the default config, you can make things like `H` and `L` move to the top and bottom of the visible viewport rather than the top and bottom of the buffer. Then, you can render new chunks of the buffer only when the end of the buffer gets near the end of the viewport. This would allow the implementation of smooth inertial scrolling with mouse or touch, as well as tweened transitions (with easing curves) when scrolling line by line with the keyboard at the edge of the view port.\r\n  - To further explain (and lacking visual diagrams while on mobile), imagine the buffer is always 40 lines taller than the viewport, and 40 columns wider than the viewport. By default, when the user isn't scrolling, the viewport is centered in the buffer (except on edge cases when there is no buffer left and the viewport is fully scrolled to the edge). For this example, imagine we have 20 lines or columns of buffer beyond each edge of the viewport. When the user begins to scroll down, the renderer simply transforms the entire buffer texture with translation along the Y axis, and the only thing it needs to re-render inside the buffer is the cursorline update. When the bottom edge of the buffer gets close to the bottom edge of the viewport, then neovim is scrolled down (text moves up) 20 lines at once (f.e. `20<c-e>`). To maintain the effect of the cursor still being at the bottom edge of the viewport, the buffer is translated instantly 20 lines downward and the cursorline will be exactly where it was before. The end result of this is that now there is a new 20-line area below the viewport that can be scrolled into view smoothly. The process is repeated every time the bottom edge of the buffer gets close to the bottom edge of the viewport. This would mean that a new chunk of text only needs to be rendered every so often, and most of the time only the current line-by-line rendering would happen. The same concept applies around all four edges of the viewport and buffer, for each direction of scrolling. The actual size of the offscreen area may be bigger than 20 lines or columns, may not be the same number of lines as columns, and we would need to experiment to find good values.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267088048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291228310", "body": "Have you tried rendering by running `setState` inside `requestAnimationFrame`? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291228310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291229381", "body": "Not sure what you're doing for the react stuff, but if you `key` lines by line number, then when scrolling, React dom diff will only remove the line at the top and add a new line at the bottom, without touching the DOM in the middle (it will re-use the DOM in the middle without making new instances of either DOM objects or React Components), so scrolling might be really fast.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291229381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291229737", "body": "The only slower parts would be (for example) deleteing a line or inserting new lines, because then all the lines below the modified part of the screen would be re-keyed. React will be smart enough to actually re-use the DOM still though, it's gotten really smart over the years. For example, after deleting a line (while lines are keyed), React will keep the DOM elements that were below the deleted line, but it will replace their content (new string characters are placed into the re-used elements).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291229737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291231591", "body": "It seems much faster now though anyways!! Haven't tried on a vertical monitor yet, I'll try when I get to one...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291231591/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "succcubbus": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1625", "title": "Skipping of closed brackets fails when some characters are present", "body": "When `autoClosingPairs.enabled` is true any closing bracket can by typed over (e.g. for `(|)` typing `)` results in `()|`). This behaviour does not work when some characters are present in the same line.\r\n\r\nHow to reproduce:\r\n- insert an `\u00e4` in any way\r\n- type `()` behind it\r\n- expected: `\u00e4()`\r\n- actual: `\u00e4())` with cursor between the two closing brackets\r\n\r\nThis only happens if the problematic character is preceding the closing bracket in the same line. It does not matter if the character was typed or was already present. The character must not but can be immediately preceding the brackets for this problem to occur.\r\nSome non-working characters: `\u00b4`, `\u00b0`, `\u00a7`, `\u00df`, `\u00e4`.\r\nI'm using a german keyboard, and these are all available characters. I believe all characters available on the us keyboard are working fine.\r\n\r\noni v0.3.0 on linux", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1544", "title": "sidebar vim modes", "body": "When the sidebar is selected using `<C-w>h` I'm able to enter insert/visual mode with `a`, `i`, `v`, etc. The mode is displayed nowhere and seems to have no effect other than disabling normal mode keybinds i.e. `<C-w>l`, `j` or `k`.\r\n\r\noni v0.3.0 on linux", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1544/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "taohonker": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1624", "title": "No CJK font support.", "body": "Is it possible to specify a different font for CJK words? For example, `guifont=Consolas` for ASCII chars and `guifontwide=Noto Sans CJK SC` for wide chars such as Chinese chars?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "clee": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1614", "title": "Requesting new config option editor.fontSmoothing", "body": "I'd like to be able to disable font smoothing for the text-editing view but not for the rest of the UI.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hoschi": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1610", "title": "Per tab buffer list", "body": "This is the only feature, because I still must use [ctrlspace](https://github.com/vim-ctrlspace/vim-ctrlspace). The docs can be found [here](https://github.com/vim-ctrlspace/vim-ctrlspace/blob/master/doc/ctrlspace.txt#L523) but it is probably easier to try it out. [I talked about the current behavior of vim tabs model](https://github.com/onivim/oni/issues/1582#issuecomment-367981318) and recognized that I never created a ticket for that feature request. So here it is :grin: \r\n\r\nA tab act as container for one or more splits. With Oni there can be also read only splits like the markdown preview, I believe. However, the buffer list show you all buffers in the current instance. While this global view of your current opened files is useful, a more scoped version makes \"tabs as containers\" more useful.\r\n\r\nCtrlspace also described that workflow:\r\n* open a tab\r\n* open the file list (which show all files of the cwd)\r\n* search all related files you want to work on (like ComponentA.ts and ComponentA.test.ts) and put it in the current tab via a shortcut\r\n\r\nI never used that however, but wanted to mention that, in case someone finds this idea useful. I mainly use two spilts per tab and very often I \"create\" them by viewing the test file for the current code by a short cut and not searching for that file. I often jump to another file, probably a component which is used in the code you initially, via the \"go to definition\" feature and going back with `Ctrl+O`. Doing this in more containers let your buffer list grow quickly. This where the buffer per tabs list really shines, as you only see their files which you looked up *for this particular tab*. Without anything to do from you, you have a nice view of related stuff.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1599", "title": "Highlight problems with current line ", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\nhttps://github.com/onivim/oni/issues/1379#issuecomment-366523987", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1598", "title": "Option to disable default token colors ", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\nhttps://github.com/onivim/oni/issues/1379#issuecomment-366526780\r\n\r\nWithout that option, I must create overrides by hand on every change you implement. Or every other theme. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1589", "title": "Broken nvim plugin input", "body": "I use UltiSnips which asks me which snippet to expand when their are more than one with the same name:\r\n![2018-02-20-181201_905x86_scrot](https://user-images.githubusercontent.com/163128/36438227-8e2e5b7e-1669-11e8-9035-8f18c02b01ad.png)\r\n\r\nNow this doesn't working anymore and my input is rendered where my cursor was but not forwarded to that input. Must kill Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1588", "title": "Crash report after creating an empty tab", "body": "![2018-02-20-174815_1403x1339_scrot](https://user-images.githubusercontent.com/163128/36437080-550a644e-1666-11e8-9094-cc0d6729cbce.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1586", "title": "Tab dirty state wrong after reading a changed file", "body": "When\r\n\r\n* buffer contains unsaved changes\r\n* file was changed from outside\r\n* you focus Oni and get the \"file was changed, press [o]k or [r]ead file\" (translated)\r\n* press `r`\r\n\r\nthe buffer is in sync with the file but I still see the \"dirty\" circle in the tab. Unfortunately `:buffers` output is also messed up:\r\n\r\n![2018-02-19-173905_1117x93_scrot](https://user-images.githubusercontent.com/163128/36388350-d660f772-159b-11e8-9e67-8437c541724c.png)\r\n\r\nshould look like this:\r\n\r\n![2018-02-19-174004_587x101_scrot](https://user-images.githubusercontent.com/163128/36388378-ed047e7c-159b-11e8-9483-1466c31e3c76.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1584", "title": "TextMate Highlighting: Highlighting doesn't work after jump", "body": "* I have a file with 154 lines of code\r\n* 62 of them are visible, cursor is at the first line\r\n* `:60`\r\n* `z<Enter>` brings line 60 to the top of the 'viewport'\r\n\r\nNow all lines below are not highlighted. After I move a line down, TextMate highlighting kicks in. Probably related to #1256. My version is 44e162d359c6b2a669", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1580", "title": "Add styling option for \"dirty\" marker in tabs", "body": "After @CrossR fixed #977 it would be great to give that another color and I can't find one in https://github.com/onivim/oni/blob/master/extensions/theme-onedark/colors/onedark.json\r\n\r\nWith solarized theme it is hard to see:\r\n![2018-02-18-173636_121x28_scrot](https://user-images.githubusercontent.com/163128/36354279-463287ca-14d2-11e8-846f-669349272573.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1577", "title": "Token colors are not applied right when file changed from outside", "body": "E.g. when you do a `git reset --hard HEAD` and you focus Oni again the colors don't apply correctly. I changed line 11 to:\r\n`    let formatted = formattedParam ? efined`\r\nand did a reset and come out with this:\r\n![2018-02-18-163133_1356x1370_scrot](https://user-images.githubusercontent.com/163128/36353851-f8b56ac2-14cb-11e8-9eae-8e0e85a72aff.png)\r\n\r\nAs you can see `formattedParam` and `undefined` has the wrong colors. It should look like this instead:\r\n![2018-02-18-165225_1356x1370_scrot](https://user-images.githubusercontent.com/163128/36353860-19c28b32-14cc-11e8-81db-96c9fa9c772f.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1576", "title": "Border in quick info tooltip", "body": "I know have this border or bar under the description, is this intended? I don't see the need for this:\r\n\r\n![image](https://user-images.githubusercontent.com/163128/36353432-b37dbfcc-14c6-11e8-8db5-9f9d3b07cb63.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1575", "title": "How should workspaces be used?", "body": "Like, really, I don't get it :cry: \r\n\r\nBefore this new feature the current directory of my shell was set as `cwd` for Oni, when I called `oni` from command line. Now it opens the last workspace it was in. This on its should be changed or controlled with a command line flag. Opening oni from a current directory, just to be in another directory and navigating again to it is pretty awkward.\r\n\r\nAnother problem is to switch workpaces at the moment. It seems the only way to do this is to issue the \"Workspace: Open Folder\" command or via the menu entry. This opens a unusable file dialog on Linux, don't know if it is better on other platforms. Unusable because it doesn't show me the last folders I opened with oni. It show instead recently used folders ... where I don't even know how they come from. I suspect they get gathered when I use the system file explorer (like `Explorer` on Windows or `Finder` on Mac). But since I only use the console this list doesn't match anything useful for me. Even it would work, I still find it way more natural to open the current working directory where I'm at the moment.\r\n\r\nTo still be able to use Oni, I did following workaround in my config:\r\n```js\r\nlet argv = require('electron').remote.process.argv\r\nlet defaultWorkspace\r\nlet cdIndex = argv.indexOf(\"--cd\")\r\nif (cdIndex >= 0) {\r\n\tdefaultWorkspace = argv[cdIndex+1]\r\n}\r\n\r\nmodule.exports = {\r\n    // ... normal config\r\n    \"workspace.defaultWorkspace\": defaultWorkspace,\r\n}\r\n```\r\n\r\nand call oni with 'oni --cd `pwd`'. Just to realize that `defaultWorkspace=undefined` has the same effect as gathering the `cwd` via args :grinning: Is this a bug? :wink: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1574", "title": "Onis version of the prompt has no completion", "body": "In nvim I get completions when I press `Tab` but in Oni I don't:\r\n\r\n![2018-02-18-152908_1365x1377_scrot](https://user-images.githubusercontent.com/163128/36352977-9a027638-14c0-11e8-9ea3-e6582304f405.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1379", "title": "Can't assign highligt to called function name in JS", "body": "My test file:\r\n```js\r\nimport * as R from 'ramda'\r\n\r\nconsole.log('test')\r\n\r\nexport let getMetaData = (node) => ({\r\n    ...R.pick(['hasConnectedError', 'syntaxError'], node),\r\n    title: 'node-' + node.customId\r\n})\r\n```\r\n\r\n`log` in `console.log` gets a color via `support.function` but `pick` in `R.pick` does not. There is `meta.function-call` but it colors the whole `R.pick`, but I want only color `pick`. I tried `entity.name.function - meta.function-call` without luck.\r\n\r\ntoken config part:\r\n```js\r\n    \"editor.tokenColors\": [\r\n\t\t{\r\n\t\tscope: \"meta.function-call\",\r\n\t\tsettings: \"TestColorG\",\r\n\t},\r\n\t\t{\r\n\t\tscope: \"support.function\",\r\n\t\tsettings: \"TestColorC\",\r\n\t},\r\n\t],\r\n```\r\n\r\nScreenshot of the outcome so far:\r\n![2018-01-27-121055_596x241_scrot](https://user-images.githubusercontent.com/163128/35471420-237e2d5c-035b-11e8-8ad7-a3b8d46f5de2.png)\r\n\r\n![2018-01-27-121140_551x481_scrot](https://user-images.githubusercontent.com/163128/35471425-3ea6feb0-035b-11e8-906b-b0a6c6173a50.png)\r\n\r\nOnly `support.function`:\r\n![2018-01-27-121303_593x235_scrot](https://user-images.githubusercontent.com/163128/35471432-6e8a9dc6-035b-11e8-9111-479366adf6cf.png)\r\n\r\n`pick` not higlighted in line 11:\r\n![2018-01-27-121345_607x593_scrot](https://user-images.githubusercontent.com/163128/35471436-93daeea0-035b-11e8-90cf-40ac45beb983.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1379/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1320", "title": "Jump to definition not working when tab was cloned", "body": "When cursor is on a word which has a definition and I use `:tab split` to clone this tab I can't press `F12` to jump to the definition. I have to move the cursor first to be able to do that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1319", "title": "Open a buffer with non Oni methods breaks LSP things", "body": "I talked to @bryphe already on [gitter](https://gitter.im/onivim/Lobby?at=5a5386f583152df26d461649 ) about that. When I open a buffer with e.g. a vim plugin (CtrlP) the quickInfo/jumpToDefinition functionality is broken. I used only Onis `ctrl+p` for some days now and this works as expected.\r\n\r\n@bryphe can you show me where I should look for that `textDocument/didOpen` event? I can check that then.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1305", "title": "SCSS warnings without message", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n![2018-01-16-115651_1013x285_scrot](https://user-images.githubusercontent.com/163128/34985583-d5f214b2-fab4-11e7-830d-843cb010c6ee.png)\r\n\r\nI can't get what they want to tell me as on hover on the icon it does nothing, also when cursor is in that line. Oni `Show Errors` doesn't show anything either.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1280", "title": "Too much completion candidates", "body": "Since my last updates I get a lot of completions.\r\n\r\nNothing of these should be there, see grep split:\r\n![2018-01-12-122756_2044x1395_scrot](https://user-images.githubusercontent.com/163128/34873096-1047a31c-f794-11e7-9245-a536de491c31.png)\r\n\r\n![2018-01-12-122958_2044x1395_scrot](https://user-images.githubusercontent.com/163128/34873156-4f1cce46-f794-11e7-91c7-8e22aed9bc9f.png)\r\n\r\n* Listed `get` trice, should not be there once\r\n* `getCiphers` is unknown in project\r\n* also the matches change but I didn't change code\r\n\r\n![2018-01-12-123421_2044x1395_scrot](https://user-images.githubusercontent.com/163128/34873397-47bcbd0e-f795-11e7-88fe-1c95edbd3494.png)\r\n\r\n![2018-01-12-123602_2044x1395_scrot](https://user-images.githubusercontent.com/163128/34873399-49e4cf90-f795-11e7-9a87-decb50dd805c.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1272", "title": "TextMate Highlighting: Weird artifacts", "body": "I got them not to rarely but can't identify a root case, yet:\r\n![2018-01-11-151513_466x91_scrot](https://user-images.githubusercontent.com/163128/34829911-864df532-f6e2-11e7-9f93-74d0a95d604b.png)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1272/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1248", "title": "After suspend/wakeup UI is not fully rerendered", "body": "When I put my PC into suspend-to-RAM and wakeup it again not all parts of the editor is rendered correctly:\r\n![2018-01-07-104732_2058x1409_scrot](https://user-images.githubusercontent.com/163128/34648317-3619f9dc-f398-11e7-9566-81c4fa71f14f.png)\r\n\r\nWhen I move the cursor some lines down it looks like this:\r\n![2018-01-07-104258_2058x1409_scrot](https://user-images.githubusercontent.com/163128/34648289-d3009ec8-f397-11e7-9d33-bd828091cd6b.png)\r\n\r\nIn some older versions `:redraw!` helped, but this not the case anymore. The only way to fix it is to resize the window. I'm running Linux.\r\n  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/979", "title": "Rename feature puts me into `lib.es6.d.ts`", "body": "When I want to rename a variable like this:\r\n![2017-11-18-112207_1370x1384_scrot](https://user-images.githubusercontent.com/163128/32979288-b81d2aa2-cc52-11e7-96ec-501fef0d751e.png)\r\n\r\nI end up in `lib.es6.d.ts`\r\n![2017-11-18-112104_2058x1409_scrot](https://user-images.githubusercontent.com/163128/32979286-a7e69c40-cc52-11e7-86cf-e49f3661c5fd.png)\r\n\r\nBut rename was done\r\n![2017-11-18-112303_1370x1384_scrot](https://user-images.githubusercontent.com/163128/32979296-d8fa88f0-cc52-11e7-9b79-32e95b0210d3.png)\r\n\r\nFile and repo is here: https://github.com/hoschi/yode/blob/2c279b07ba84e97a7ae101d2c55558dbc3b9da3f/packages/core/src/BufferManager.js", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/894", "title": "Integrate Yode into Oni", "body": "[Yode](https://github.com/hoschi/yode ) allows you to edit parts of a JS file, at the moment functions. It allows the user to stay focused on the important parts of a task. Past discussion started [here](https://github.com/onivim/oni/issues/362#issuecomment-320433400 ) \r\n\r\nThere is a guide to integrate Yode in an editor with a reference implementation: https://github.com/hoschi/yode/blob/master/docs/integration.md\r\n\r\nCurrent tasks on Yode side: https://github.com/hoschi/yode/projects/2\r\n\r\nLast comment is [here](https://github.com/onivim/oni/issues/362#issuecomment-342346363 )", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/894/reactions", "total_count": 3, "+1": 1, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/838", "title": "Vertical split line has no consistent width", "body": "![2017-10-29-113628_2058x1409_scrot](https://user-images.githubusercontent.com/163128/32142737-99a9a42a-bc9d-11e7-8db6-328feafab0bf.png)\r\n\r\nAt the current line in left pane the split border is 1px smaller than normal. This happens also to other lines as you can see in screenshot. I don't see a pattern and it looks random.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/712", "title": "No errors are reported in JS", "body": "Completion works, but Oni doesn't report errors in JS files for me. Here is an example file and my jsconfig.json:\r\n![2017-09-17-123902_1370x1384_scrot](https://user-images.githubusercontent.com/163128/30520074-98df2f4c-9ba5-11e7-8ec1-d583b4e04fe4.png)\r\n\r\nShould it work in general? I saw the feature in README.md but not listed here (like \"error reports\" with a \"+\"):\r\nhttps://github.com/extr0py/oni/wiki/Languages#javascript-and-typescript\r\n\r\nEDIT:\r\nSome versions ago I saws the error \"Unreachable return statement\", but this doesn't show up anymore. This was the only error I saw reported by Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/320433400", "body": "@extr0py I saw you completed #557 and want to ask if you had some insights which bring this task further?\r\n\r\nI'm also really interested in that feature, because I have an advanced use case for\r\nmanaging splits (I call them editors) in another way it works at the moment in vim\r\n(and other apps like Atom/VsCode/...). I build a project which enables the user to not\r\nonly edit files like all of us are used to, instead you can now edit nodes of the\r\nabstract syntax tree (AST). This allows you to focus on parts of different files\r\nbut save a lot of screen space so you can see all nodes (arrow functions in JS atm)\r\non the screen. It is like [NrrwRgn](https://github.com/chrisbra/NrrwRgn ) on steroids.\r\nMy project (called NFBE, still searching for a better name) syncs\r\nthe code of a function editor to the file (editor) in (near) real time, so all other\r\ntools like test runners, compilers, ... can still do their jobs without knowing that\r\nthe user don't edit files, instead just a small part of it.\r\n\r\nTo integrate this in a real editor I need two things:\r\n* editors (splits atm) should not have a defined height, instead the height\r\n  should be defined by the lines of the content\r\n* call my own save logic, because a function editor doesn't write to a file\r\n  with the traditional logic\r\n\r\nBecause function editors are contain less code, it makes sense to turn around\r\nthe fixed height splits into auto sizing splits to see all content easily.\r\nWith this new pattern of editing parts of a file it also adds other use cases\r\nto the window manager. For example now you just can say \"split vertical\" or\r\n\"split horizontal\" to use screen space for other files to edit which are related\r\nto the file you originally edit. With editable functions you now have use cases\r\nas:\r\n* drill down into the function of this file, replacing the current file editor window to focus on something\r\n* open this function of the file in a new window to see its content as a reference while moving around in the file it contains something\r\n* temporary open this function in its own window to scope editor commands (e.g. search/replace) just on this part of the file and then close it\r\nand more things like this.\r\n\r\nIt also allows a new world of intelli sense.\r\nBy allowing to be more \"white space\" by shrinking the editors and not render\r\nthis white space lines (starting with a \"~\" in vim), one can go even further\r\nand open up related function editors automatically. Like an editable version of\r\ncode completions or imported React components of the current file. This is not ready yet,\r\nbut the end goal I want to achieve.\r\n\r\nSorry for the wall of text, here are some screenshots. Say you want to change the\r\nbehaviour of how a todo gets saved in a TodoMVC app by adding an additional parameter.\r\nViewing all files to edit would look like this, the lines in question are selected\r\n(gray/pink background):\r\n![traditional](https://user-images.githubusercontent.com/163128/28994564-62d77044-79d1-11e7-8d2a-6530b9b59c00.png)\r\n\r\nWith function editors you can focus a lot better and make space for additional code you need to\r\nopen while you implementing your feature, e.g. add another test for it:\r\n![function-editors](https://user-images.githubusercontent.com/163128/28994569-71cf0ecc-79d1-11e7-923a-fd19da46a717.png)\r\n\r\nIn my prototype UI it is possible to change the width of each editor and move them around in a simple two column grid. In one column the editors simply stack. Integrated in a real editor I would add more features to this.\r\n\r\nDo you think this is possible with Oni and the work you are achieving with this task?\r\nAny feedback is appreciated ;)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320433400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320433579", "body": "It is also possible to have function *and* file editors:\r\n![mixed](https://user-images.githubusercontent.com/163128/28994594-4b355e14-79d2-11e7-9b95-affa5f3c0847.png)\r\n\r\nSorry if this was not clear, you can still edit the way you are used to even with NFBE integrated.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320433579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320514876", "body": "I'm glad that you like the idea @extr0py !\r\n\r\nI found Light Table when it was in an early stage and they said they want to do what I did, but then switched away to that \"we build a new programming language to make this all happen\" and so I started something that works with already used languages like JavaScript.\r\n\r\nThat said, I'm a professional JS freelancer ... but don't know much about VimL. I use Vim for years and also backed (and still supporting) NeoVim. My config is really big and I managed to move it over to use it with Oni, but I never had the need to dive into VimL. So it would be great when you focus on the NeoVim instance multiplexing thing. Even a PR with a basic version would be cool, I think this would give me enough to play with the JS part of it.\r\n\r\n> we just need to figure out the right design and how it fits in with the rest of the editor infrastructure\r\nI draw already some general architecture stuff, but going to make this more shareable.\r\n\r\nSo my next steps would be:\r\n* share overview of architecture/integration of NFBE and Oni\r\n* refactoring some of my current code so you (and others) get not scared away when you see it ;)\r\n* publish current state of NFBE, I think this would help you/us more to collaborate on the design things\r\n\r\nNFBE needs not much API surface when it comes to NeoVim instance, mainly:\r\n* get current cursor positon\r\n* get current buffer content\r\n* set current buffer content\r\n\r\nPlease reach out if you need additional things from me and/or general feedback of things you have in your mind. Also in general of this window management thingy stuff of this ticket!\r\n\r\nSo, thanks again and I'm really happy that Oni makes this integration possible *and* that you like the idea in general :heart_eyes:\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320514876/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320669107", "body": "Instead of a scrollbar, is it possible to make the tabs container wrapping in to more lines than one? Like flexbox + flex-wrap. I know that behavior of IntelliJ and really liked it. With a scrollbar you not see all your opened tabs. Probably it is a problem that the editor space gets smaller so a render cycle in NVim must be triggered?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320669107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320670389", "body": "![multi line tabs](http://hadihariri.com/images/no-tabs-1.png)\r\nfrom http://hadihariri.com/2014/06/24/no-tabs-in-intellij-idea/", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320670389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320671254", "body": "I have the same thing, but with latest release v0.2.7\r\n![2017-08-07-155759_609x54_scrot](https://user-images.githubusercontent.com/163128/29029834-4526ad08-7b89-11e7-8bcf-e7c50e061271.png)\r\nthe text is\r\n```js\r\nlet overrideDetailProp = setPath(R.__, R.__, defaultDetailProps);\r\n```\r\nI'm also on Linux like @keforbes \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320671254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320671698", "body": "When I go into line selection mode (`V`) and back to normal mode I I see them with strange artifacts. Underscores and artifacts go away when I switch modes again or do something other.\r\n\r\n![2017-08-07-155942_621x47_scrot](https://user-images.githubusercontent.com/163128/29029918-9904e4a8-7b89-11e7-9541-01ad8cb436e8.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320671698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320672713", "body": "I use Ramda for years now and `R.pipe` combined with other Ramda functions and ES6 arrow functions can replace a good amount of imperative code and are *much* more readable:\r\nhttp://randycoulman.com/blog/2016/06/14/thinking-in-ramda-declarative-programming/", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320672713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320694663", "body": "@extr0py \r\nI use a [solarized](https://github.com/lifepillar/vim-solarized8 ) theme:\r\n```VimL\r\nset background=light\r\ncolorscheme solarized8_light_high\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320694663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320710309", "body": "@extr0py great :+1: \r\nYeah, I think some people want to stick to the default vim behavior. An option would be good.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320710309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320933081", "body": "that was fast 0.0 thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320933081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320943005", "body": "It must be later than 0.2.0, I have `VIM v0.2.0-240-gc5f4b92ff` and this thing is \"old as hell\" in OSS terms (not updated for months). You can close this issue if you want, because I don't think I have to upgrade neovim in the next 7 days :(\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320943005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320983540", "body": "I'm fine with the color in terminal, just wanted to mention that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320983540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322514955", "body": "I'm sitting at the task \"share overview of architecture/integration of NFBE and Oni\" and found probably a problem with my current architecture and the integration into Oni. I just want to ask some (probably really dumb) questions, before I head into the wrong direction ;)\r\n\r\nNFBE is at the moment a React+Redux app and all logic to make functions of a file editable is handled in reducer functions. As in React+Redux common, the editor dispatches an action and the state gets changed, UI changes \"magically\" on its own. If I saw it right you also use Redux, so this should be familiar. E.g. when the user removes a word in a function in a file, in the reducer the state of the corresponding file *and* function editor get just changed and all is rerendered from React as needed. Totally cool ...\r\n\r\nBut, Oni/NeoVim won't work this way right? As far what I saw in Oni and nvim, it is more of an event/method API where you can subscribe to events to get notifications e.g.\r\n* cursor position changed\r\n* active buffer/window changed\r\n* buffer content changed\r\n* buffer deleted\r\n\r\nand call methods to make changes from outside, like\r\n* closeBuffer(id)\r\n* getCurrentCursorPosition()\r\n* closeWindow()\r\n\r\nIs this right @extr0py ?\r\nI just want to sure that I have to switch from the Redux state tree logic to something other, because this would be bigger changes and I would probably rearrange my todos a little bit.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322514955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323089122", "body": "Thanks for answering my questions :)\r\nI then scratch the in place refactoring and release the current version of Yode (prior known as NFBE) as next step. With the switch to an event/method API I need to change a good amount of code anyways, so this is includes the refactoring then.\r\n\r\nI finished my overview diagram:\r\n\r\n![oni-yode integration](https://user-images.githubusercontent.com/163128/29417107-5ee38dc4-8368-11e7-90af-f3afc1901efc.png)\r\n\r\nThis shows a high level view of Oni and Yode. It shows which (big) parts need to communicate and where to group which logic. As I need to separate the current version of Yode in (NPM) packages, I added that information also.\r\n\r\n> The way I see it, is that NFBE is really another way to manage windows/buffers (laying them out, what sections are visible, etc). I think that we could reuse the current Neovim rendering strategy, and build out these as custom editor/renderer components, if the window manager knows how to lay them out.\r\n\r\nI don't got this right probably. Yode (NFBE) benefits from another layout instead of the current used \"split buffers into window, size is controlled by splits\", but the user should still be able to edit other files which other file types (e.g. Markdown) in the same tab. So there shouldn't be separate tabs or something where one only contain Yode editors and the other tab contains \"normal nvim\" windows. Does this still fit what you wanted to say?\r\nWhat do you mean by \"we could reuse the current Neovim rendering strategy\"?\r\nDoes Oni implement the logic to position/size windows or does nvim still do its split thing? Probably I didn't get what \"rendering strategy\" means here.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323089122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323091815", "body": "I forgot the events/actions I identified from current code.\r\n\r\nEvents\r\n\r\n* text updated\r\n* buffer/window closed\r\n* file opened\r\n* buffer should be saved to disk\r\n\r\nActions\r\n\r\n* set buffer \"read only\"\r\n* add error UI for connected buffers (e.g. function buffer which contains to file)\r\n* set buffer content for buffer ID\r\n* swap window X with Y\r\n* create buffer\r\n* create window to show buffer", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323091815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323812783", "body": "> It seems like, based on the notes in the diagram, that we could reuse most of the pieces (the neovim-backing implementation), plus UI layers like autocomplete/signature help, and then have the Yode pieces on top.\r\n\r\nSounds good.\r\n\r\n> For Yoni, ...\r\n\r\n:D\r\n\r\n> > Yode (NFBE) benefits from another layout instead of the current used \"split buffers into window, size is controlled by splits\", but the user should still be able to edit other files which other file types (e.g. Markdown) in the same tab.\r\n> \r\n> The NeovimEditor actually provides the tabs right now - so that should be easy to remove ...\r\n\r\nI looked into the changes of #622 a bit more deeper but couldn't get what you mean here. It removes the tab in the tab line, so you can't close the file editor?\r\nYode should not change the tab behavior of Oni, I think. That was also the main thing I want to say in the comment you quoted. `Yode(File|Func)Editor` should be able to live in the same tab with other `IEditor`s. At least for the start. With bigger features of Yode, like open functions under cursor or in the same line automatically to provide deeper context, this can change but it is a long way to that kind of things.\r\n\r\nHere is the setup from last Yode screenshot in Oni:\r\n![yode-splits-start](https://user-images.githubusercontent.com/163128/29532121-e796e508-86ab-11e7-915e-98497aea5c55.png)\r\n\r\nObviously it lacks the features wich get implemented in `YodeXXEditor` which is (at least) to show the function id/name and things like that, but from a layout perspective it can work. As I said, I think other layouts are more useful, I come to that later again.\r\n\r\nOne example which needs to be controlled by Oni window manager and not works with current nvim splits, is when I `:split` an existing buffer:\r\n![yode-splits-wrong](https://user-images.githubusercontent.com/163128/29532131-f33d6dc8-86ab-11e7-8e84-57cdc4d0098e.png)\r\n\r\nNow I can't see the whole text of `id: 18` anymore, it should look like this:\r\n![yode-splits-right](https://user-images.githubusercontent.com/163128/29532138-fd680f6a-86ab-11e7-9d65-0fb5993f0bd6.png)\r\n\r\nThe splitted clone has not the space to show `id: 18` entirely. With nvim split logic you have now a scrollbar in the very last window in the right column.\r\n\r\nWith the layout used in Yode prototype you would get a global scrollbar:\r\n![yode-splits-yode-way](https://user-images.githubusercontent.com/163128/29532152-058cce38-86ac-11e7-9ac3-f78eec87b700.png)\r\n\r\nWhich leads to its own problems, like you now don't see the upper left window anymore when scrolled down. Which brings me to:\r\n\r\n> Like I'm wondering, would it be possible to have half the screen in a traditional tab-layout and half in the Yode-style layout?\r\n\r\nThis leaves us to a \"yes\" for this question. You can imagine a normal file editor on the left side and three Yode windows in the right as in the screenshot. This should work good for the case when you have just a bunch of functions you want to focus and a bigger file you wanna jump around in.\r\n\r\n> Yep, I think the layout is one of the most interesting pieces here.\r\n\r\nIndeed :D\r\n\r\n> It sounds like we'll need some more interesting ways to manage layout, for Yode, though, so we'll need to figure out how to expand and generalize this interface.\r\n\r\nThe `openSplit` method and PR #637 is a good start I think. It definitively is enough to start! \"swap\" operation should also work with this. Another interesting approach in my opinion are layouts used in tiling window managers like [Xmonad](http://xmonad.org/ ) which I personaly use. I have a long journey with this kind of stuff, started using [i3](https://i3wm.org/ ) and then switched to Xmonad because of layouts. By definiton, a tiling window manager uses always the whole space to fill it with windows, instead of a stacking window manager (Gnome, Windows, Mac OS). Just want to say that, because it is confusing that I'm talking about tiling window managers when the Yode prototpye UI has space which is not used by windows. Instead of normal window managers we have the case that we know how much content is in a window and can take advantage of this, instead of real window managers. So, layouts. i3 uses the same methods as nvim, forcing the user to manage the windows by splitting it on his own. Xmonad uses layouts which have logic to place windows in a certain position in size. This way the user just moves windows \"up\" and \"down\" in the stack and they get sized automagically. Here is an example of the Tall layout:\r\n\r\nSee the ascii art at [dmw.vim](https://github.com/spolu/dwm.vim ). When you move \"S1\" \"up\" in the stack, it swaps its place with \"M\" so you maxed \"S1\" in size and made \"M\" as high as \"SX\". By the way \"M\" is master and \"S\" is slave.\r\n\r\nOther sources:\r\n* [bluetile - starter GUI for Xmonad](https://vimeo.com/6661713 )\r\n* [overview of basic layouts](https://github.com/xmonad/xmonad/wiki/Layouts )\r\n* [video how layouts behave](https://www.youtube.com/watch?v=8jULGE0rq8  )\r\n* [full list of all layouts - look for XMonad-Layout-XXX](https://hackage.haskell.org/package/xmonad-contrib-0.13/docs/ )\r\n* [real world usage of ThreeColumns](https://youtu.be/70IxjLEmomg?t=2m35s )\r\n    * imo, really usefull for wide monitors (I have 34\" ultra wide screen)\r\n    * [source of ThreeColumns](https://hackage.haskell.org/package/xmonad-contrib-0.13/docs/XMonad-Layout-ThreeColumns.html )\r\n\r\nThe last video shows the thing I found usefull for Oni. Layouts can have sub layouts. This means you can use a TwoColumn layout with traditional nvim splitting in the left pane and Yodes \"makes windows as high as content and stack them\" on the right columns. It also gives you more options, here are some thoughts:\r\n* \"full\" layout modifier to maximize one window but you can still cycle all other ones\r\n* \"magnifier\" for slave windows allows them to grow and float above other windows, when they have focus \r\n* \"tall layout\" as used in dwm.vim, which I use with Oni right now ... because manual splitting sucks :D\r\n* column layouts, two for normal sized screens, three for bigger ones\r\n* \"accordion\" is usefull to cycle through your windows in one tab to search a window you not know by name\r\n* \"limit windows\" limits the amount of slaves, all other should be shown only as one line split which is really usefull for nvim splits as the when you have more than three slaves their height is so low that you can hardly see anything\r\n* \"no borders\" would remove the split (used for dragging) \"line\" which is useless when you have a number row in each window, imho\r\n\r\nUsing this layout (commbinations) has also the advantage that a plugin (like Yode) can add its own logic for window management easily.\r\n\r\n> And in terms of overwriting the save behavior - if we are using Neovim instances to back the YodeFunc/YodeFileEditor, we might not have to do special syncing on save\r\n\r\nI don't get this. A YodeFuncEditor can't be saved, because is is an buffer without a file association (in nvim lingo). So you would get the error \"no file name\" if you hit `:w` in that window. That was the purpose to get a \"on save\" hook to say \"do `:w` in file XX buffer because it contains the content of this buffer\" when the user does `:w` in a func editor.\r\n\r\n> if we are porting the edits back to other open buffers (which seems like what we'd want), we'd just have to listen for buffer changes and broadcast them out to the inactive editors\r\n\r\nYode puts all changes to func editos into the corresponding file editors all ~500ms at the moment. This is not only important for saving to disk, it is also nice to see your changes in a function editor happen in the file editor it belongs to when it is visible. For performance reasons I put probably some logic into that case so it is only done when the file editor is visible. If file editor is not visible, just put it right before a save to disk op.\r\n\r\n> It'd also be cool to hook up the language service, and have an option to open like all usages or all related functions.... just ideas.\r\n\r\nYeah thats also some great things which are then possible with Yode. Or a tree view which lays functions of the current file in a tree and you can jump/open them easily. So many ideas :D\r\n\r\n> Oh, and does this mean that you are going to have a release available? I'd love to try it if so!\r\n\r\nJupp :) I hope I can finish the publish this week, at least next week. I think it really helps to understand the use cane, when you can play with the prototype UI.\r\n\r\nPS\r\nWriting these \"wall of texts\" feels like being penpals :D\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323812783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323938179", "body": "`showSideBar` should be probably `showDock` so these special windows can also be at top/bottom not only at the side.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323938179/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325131829", "body": "@extr0py I released Yode, check it out \\o/\r\nhttps://github.com/hoschi/yode", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325131829/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325415125", "body": "Thanks for the nice words :heart: \r\n\r\n> It's neat that you used AST Explorer and Recast - I've been meaning to try those out.\r\n\r\nAST Explorer is a *life saver* with this things!\r\n\r\n> It's cool to see ideas that can change the way we use screenspace, because as you mentioned in the README, I'm sure we haven't maxed out with the tabs/splits layouts.\r\n\r\nOr reusing all the additional space we have in our pockets like tablets and phones to \"flip\" some text there and ... these things are bugging me for a long time and Yode is one way to deal with it :smile: \r\n\r\n> Excited to work more with you on this!\r\n\r\nme too :100: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325415125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325651036", "body": "Seems it isn't that easy :cry: Now the TypeScriptServer won't start anymore:\r\n![2017-08-29-143748_3309x1384_scrot](https://user-images.githubusercontent.com/163128/29821351-dfa3b692-8cc7-11e7-9f6c-8956e25da0f4.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325651036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326522736", "body": "> I would try closing Oni completely (including all electron processes, and reopening). It might be trying to reference the previous electron build\r\n\r\nthat did the trick :bowing_man: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326522736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326743846", "body": "@extr0py Do you saw https://github.com/neovim/neovim/pull/6619 ? Seems to me as controllable windows but without the need of multiplexing when done with one instance per window. An dedicated instance might be still needed for some special cases, like the file manager thingy you work on, but not for the \"normal\" stuff. I don't know if this helps you or is easier as the implementation you thought about, just wanted to share it ;)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326743846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326789691", "body": "Ok. Thanks for the clarification :bowing_man: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326789691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328428690", "body": "I moved again to master, works great :+1: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328428690/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332106576", "body": "`// @ts-check` is enough to get error reports working. Unfortunately this isn't a option for me, so I stick with Neomake till this is fixed in the language server. Do you by chance found a ticket somewhere which tracks this?\r\n\r\n`checkJs` does nothing for me.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332106576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332417726", "body": "@bryphe thanks, this would be great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332417726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340252829", "body": "Could this be happen because the cursor is 1px bigger than the width of a vim column? As you can see here the cursor is bigger than the \"visual block\" selection:\r\n\r\n![2017-10-29-114415_2058x1409_scrot](https://user-images.githubusercontent.com/163128/32142800-a860535a-bc9e-11e7-8096-ae016a6af630.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340252829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340763668", "body": "![2017-10-31-142840_1370x1384_scrot](https://user-images.githubusercontent.com/163128/32226058-cbaa79d0-be47-11e7-8120-9301c26c2528.png)\r\n\r\nI looked into and switched from my own arch package to `neovim` https://www.archlinux.org/packages/community/x86_64/neovim/\r\n.......... where I missread 0.2.0-2 as 0.2.2 which is greater than the version mentioned here\r\nhttps://github.com/bryphe/oni/issues/579#issuecomment-320982971\r\n\r\nsorry :disappointed: I switch to `neovim-git` package then\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340763668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342234651", "body": "I finished the API refactoring and added documentation how to integrate Yode in an existing editor https://github.com/hoschi/yode/blob/master/docs/integration.md\r\nThe Yode demo app is a reference implementation for this part of the bigger picture above:\r\n![2017-11-06-184943_278x329_scrot](https://user-images.githubusercontent.com/163128/32455812-b3e32d16-c323-11e7-9860-e2f5207c470d.png)\r\n\r\nI also published it to NPM so you can test it https://www.npmjs.com/package/yode\r\n\r\nFrom my side Yode is ready to test it in a real editor. I still can do stuff without a integration, like\r\n* better naming for function node (generated id at the moment)\r\n* get object functions to work\r\nare my next biggest issues, I think. But these don't change the API, because it is internal \"stuff\". I'm also going to add more issues at github to make this process more transparent.\r\n\r\n@bryphe I don't know what all happened at Oni in the mean time ... you're commiting speed is HUGE. As a user of Oni this is really cool :+1: \r\nBut I have no idea how far the stuff grown in part of plugin management, IEditor, key bindings, ... and if the plan discussed above (months ago ... 999+ commits ago) still holds :grinning: \r\nI think for a first version, living in a PR not merged in the near future, could definitively be done without full fledged window management and such. E.g. opening a function buffer in a new split would be a good first start in my opinion. Would love to hear your thoughts :wink: \r\n\r\nAlso ... should we open a new issue? This one grown very big :grin: \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342234651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342915419", "body": "> I've been fortunate to be able to work on Oni full-time for the next few months\r\n\r\nNice!! :100: \r\n\r\n> Sure, that would be great. Perhaps we could have one tracking Oni + Yode integration?\r\n\r\nI created #894 and add my answers/questions there\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342915419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342923829", "body": "> It's actually great timing, as I'm going to start working a bit on some new IEditor implementations - a file explorer window, and a markdown previewer. So I think those will be good test cases - and maybe we can implement Yode in parallel as an IEditor?\r\n\r\nI looked into the Code I found but there wasn't much. As I understand it an `IEditor` renders its contents on its own and doesn't use NeoVim? @bryphe \r\n\r\nI think, in Oni terms, Yode would use a normal `NeovimEditor` enhanced with stuff a plugin API would give a Oni-Yode-Plugin, so I can use NeoVim editing capabilities.\r\nYode integrates with \"text changed\" hooks at the moment. I need a way to get notified about text changes of the user to refresh Yodes state.\r\nAlso it needs to set text to e.g. change the file when the user changed a function in its own function buffer.\r\nSo this can be done with hooks/callbacks in JS which translates to native NeoVim events/autocomands? I'm not sure if this is the job of an `IEditor` because `NeovimEditor` implements already that interface.\r\nThis was just a short version or big picture, the integration docs have more events listed/linked to code.\r\n\r\nAdditional things the referencen implementation misses and would be needed in Oni:\r\n\r\n* a save hook for function buffers, because they can't be written as they are not a file, so the file should be written instead.\r\n* buffer deletion is implemented in core, but not in the demo UI ... this \"should\" work \r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342923829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343511976", "body": "> So it might not be the default strategy when you open Oni, but perhaps we surface it in some of those places?\r\n\r\nI agree in general. I also really think we need to use this in day to day editing in a \"beta phase\" and see how things work, because I think it feel really different in some places. One example I already thought of is editing functional React components where I think want to focus on the render function instantly. Not\r\n* open that file\r\n* move to render function body with vim movement\r\n* hit keybinding to \"open function under cursor\" in a new split\r\n* close the file\r\n\r\nWhich no one does then, because the outcome for the three additional steps are not worth in every situation. Instead an action for \"open render function of that component\" make 100% more sense here. There are problems like \"how to generalize this logic and not focus on React\", but I just wanted to give an example of that new use cases arise when it is there. On the other side \"Go to definition\" is a \"no brainer\" for me, opens a function buffer here saves you a good amount of space. If we don't want this as default, there can still be two binding for the \"open file and jump to position\" and the \"open function which contains this definition, or if this thing is a function just open it\" without much additional logic I think. With the command palette it is now even easier to recognize these things for new users as both commands show when you type \"Go to def\" :grin: \r\n\r\nI repeat some things in my words to make sure I got it right, tell me if I don't @bryphe :wink: \r\n\r\n> There's a bunch of assumptions in the code right now that there is only ever one NeovimEditor (and one NeovimInstance), we'll have to break those assumptions.\r\n\r\nAt the moment there is one `IEditor` on the screen, `NeovimEditor`, which renders the \"text editing\" part like buffers and splits. Splits of the editing space are rendered by NeoVim at the moment, not by Oni.\r\n\r\n> An example of where this abstraction is somewhat broken is that the INeovimEditor is responsible for rendering the tab bar.\r\n\r\nTabs are rendered by Oni, but the state is still in that one NeoVim instance, [here](https://github.com/onivim/oni/blob/master/browser/src/Editor/NeovimEditor.tsx#L187 )\r\n\r\n> What I'd like to do is basically have some special splits for working with editors - an TabbedEditorCollectionSplit that **manages a collection of IEditors**. You could imagine that the TabbedEditorCollectionSplit could have a bunch of IEditors, and it could take the responsibility of rendering the tab bar, as well as **rendering the active editor for the selected the tab**.\r\n\r\nHere we have more `IEditor`s, one for each tab, and only render the `IEditor` which is responsible for that tab content. Tab state is now not only rendered by Oni, state is also managed by Oni and not by NeoVim anymore. \r\n\r\n> The nice thing about this abstraction is that the yode model fits in pretty easily - it would still manage a collection of IEditors, but instead of having a model of tab + only one editor shown, it could show them in whatever layout made sense.\r\n\r\nAt this point even the splits are managed by Oni, not by NeoVim anymore?\r\nSo the implementation of the `IEditor` interface which enables the user to edit text, what is now `NeovimEditor`, manages only one \"vim window\" instead of \"tabs + splits + windows (aka splits)\" by that time? \r\n\r\nFor me `IWindowSplit` is confusing ... does this stand for Oni splits like tab bar, status line, main content area or does it stand for splits which are managed by the NeoVim instance at the moment? Also in combination with `WindowManager` which manages at the moment one split, the `NeovimEditor` instance.\r\n\r\n> Sorry for the wall of text, I hope that made sense! On my end, I'm starting to look at the file explorer + integrated browser window, so I hope as I drill into those it might help clarify some of the unknowns (and have more examples in place).\r\n\r\nThat would be great, just wanted to ask some big questions to get a picture of that future in my head :wink: \r\nFor what I can tell by now, the plan for prototyping sounds good to me. Hook me up when we can work on this :grinning: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343511976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343657977", "body": "(FYI I started to put the stuff from my notes to issues, here is the project which tracks the tasks I work on next https://github.com/hoschi/yode/projects/2)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343657977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344825848", "body": "Can we make this configurable? My point of wrapping tabs was to show always the full name.\r\n\r\n@Shou when you use flexbox for shrinking can you add wrapping with `flex-wrap` in one go? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344825848/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345758315", "body": "@bryphe Syntax highlight is broken as you can see in screenshot. Only the vim built in syntax parts have colors. I thought that was the content of the response :grinning: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345758315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345758469", "body": "b64f415ce05244a9bf2063880602d813833ece8c is the last working version", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345758469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345759664", "body": "Hm I don't think I can live without that. How do I get the vim tabs back? `tabs.enabled=false` gives me no tabs at all ... ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345759664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346365507", "body": "@CrossR thanks for the comment! I didn't see it, indeed.\r\n\r\n> I'm going to have a look into getting the modified state for all buffers in a tab as well now that is merged.\r\n\r\nWould be super awesome, I really like the new (wrapped) tabs :100: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346365507/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349318417", "body": "@badosu hm \"kind of\" :grin: \r\nWhen I enable the experiment syntax highlight looked good for me, but tested just a single file. Problem for me is that it doesn't work with vim colorschemes so I switched back to my working Oni version till #1050 is fixed.\r\n\r\nIf the experiment part is ok and intended you can close this imo.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349318417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351622424", "body": "@Akin909 AWESOME :100:\r\nI still sit on b64f415c from 7 weeks ago and I think after this one I can upgrade again and get working syntax highlighting \\o/", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351622424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351622709", "body": "@bryphe your screenshot hasn't syntax highlighted I realize after my last comment. Does it work with the new theme?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351622709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352841639", "body": "@bryphe Can you have a look at my questions above?\r\n\r\nI hope I can finish the last tasks in the GH project linked above and/or start on the Oni integration in my upcoming holidays :grin: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352841639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353096994", "body": "@CrossR still sitting on an old version because of some bugs/missing features, but I should be able to update with the solarized theme now. I put this on my list to check it, when I updated. You can close it in the meantime, if you want.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353096994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ram535": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1594", "title": "Is possible to add org-mode in oni as a build-in feature?", "body": "One of the best feature in emacs is org-mode. I think it would be a great feature for oni if it is possible.\r\nThere is a new org-mode parser written in javascript called [Orga](https://github.com/xiaoxinghu/orgajs) that might help to accomplish that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MikeDacre": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1583", "title": "NeoVim editor does not spawn on Mac OS X 10.13.3", "body": "When trying to run Oni (0.3.0) for the first time on my Mac (10.13.3), the GUI and folder list open, but the actual neovim editor does not, it just appears as a blank screen:\r\n\r\n![image](https://user-images.githubusercontent.com/77714/36358251-24257154-14c0-11e8-9b16-a64dab9afa9d.png)\r\n\r\nI then have to force quit it to get it to actually close.\r\n\r\nWhen I look at the console, I see this error when I try to open a file to edit:\r\n\r\n```\r\n0.bundle.js:182 Uncaught (in promise) TypeError: Cannot read property 'request' of undefined\r\n    at T.command (0.bundle.js:182)\r\n    at ee.<anonymous> (1.bundle.js:58)\r\n    at Generator.next (<anonymous>)\r\n    at 1.bundle.js:58\r\n    at Promise (<anonymous>)\r\n    at Z (1.bundle.js:58)\r\n    at ee.openFile (1.bundle.js:58)\r\n    at p.<anonymous> (1.bundle.js:34)\r\n    at Generator.next (<anonymous>)\r\n    at 1.bundle.js:34 \r\n```\r\n\r\nThe full log is here: https://pastebin.com/RzEBGK2V\r\n\r\nSome possible issues I can think of:\r\n\r\n- Some conflict with my config (https://github.com/MikeDacre/nvim)\r\n- Some conflict with the homebrew installed `nvim`\r\n\r\n*Note*: I also have an Arch Linux machine, and Oni just worked perfectly there with the exact same config, so that makes the first option much less likely. I also tried deleting my entire config from the `~/nvim` and `~/.oni` directories, so that probably eliminates the config as an issue, unless Oni is caching it somehow.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nwaywood": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1582", "title": "[Feature Request] Modern tab management option", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nOne thing I always wished about vim is that I wanted buffers to work the same way they do in every other editor (called tabs in other editors). I never thought it was possible but I saw this tweet thread on the weekend by @jordwalke that got me really excited thinking about having this in Oni.\r\n\r\nTweet thread: https://twitter.com/jordwalke/status/965030611458056193\r\n\r\nIn the thread, he talks how he is using [wintabs](https://github.com/zefei/vim-wintabs) (I realise Oni probably wouldn't actually use wintabs under the hood, just linking it here as an example).\r\n\r\nIn summary, I think it would be awesome if Oni had an option to make tabs work like normal tabs. Buffer tabs is similar but is not quite as intuitive. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1582/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1553", "title": "Thoughts on the new global search", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nHi all, I just updated to `0.3.0` which has the new \"VS Code\" style sidebar with global search and I wanted to give my input about an alternative implementation (I sincerely hope that no one takes any offence to this).\r\n\r\nI personally prefer the approach to global search that [emacs-helm](https://github.com/emacs-helm/helm), [atom-narrow](https://atom.io/packages/narrow) and [unite.vim](https://github.com/Shougo/unite.vim) take. The advantages of this style of approach include:\r\n\r\n- You get a consistent UI for narrowing lists of different types of data sources instead of a specific UI for just global line-wise search (i.e. ripgrep). For example, with the tools listed above you can use to same UI for `local symbol search`, `global symbol search`, `global line-wise search`, `local line-wise search`, `local folds` and more\r\n- It can be made to be extensible (just like how you can add your own custom `sources` with `unite.vim`)\r\n- Quicker to visually parse because the input text field is co-located with the results\r\n- This last point is quite opinionated, but I also feel that this approach is more \"vim-like\"\r\n\r\nLooking forward to hearing your thoughts on this :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1553/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1539", "title": ":set nolist from init.vim file not being read", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nI have `set nolist` in my `init.vim` file (https://github.com/nwaywood/dotfiles/blob/master/oni/init.vim#L56) which is meant to hide invisible characters but it doesn't seem to be working. Here is what it looks like:\r\n\r\n![image](https://user-images.githubusercontent.com/3773641/36125051-96365b00-10a6-11e8-8b1c-790a7583ec77.png)\r\n\r\nHowever, if I manually execute `:set nolist` as an ex command then it gets applied properly:\r\n\r\n![image](https://user-images.githubusercontent.com/3773641/36125082-b78dd986-10a6-11e8-915f-204b8ace850c.png)\r\n\r\nSo it seems like Oni is failing to read/apply `nolist` when it is set from the `init.vim` file but applies it fine when set manually. I have also tried with a minimal `init.vim` file but it is still the same issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1483", "title": "Navigating to terminal creates a cursor artefact each time", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\nI think the gif is pretty self explanatory, as always let me know if you need any more information\r\n\r\n![oni_term](https://user-images.githubusercontent.com/3773641/36005835-a4be5ffe-0d8d-11e8-8a8b-8d79d75b44f5.gif)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1483/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1299", "title": "[Question] Keybinding to close pop up menus?", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nI didn't say this with the last issue I submitted but I want to say thank you for all the work you have put into this project! I am often switching between Atom and Neovim/Tmux and the potential of Oni is amazing!\r\n\r\n## The issue\r\n\r\nBy default, you can close the pop up menus (`<m-p>` and `<m-s-p>`) using `<esc>` or `<C-c>`. But I am trying to add a binding to close them with `<C-g>` because thats what I am used to from my dark days when I used emacs.\r\n\r\nI have tried:\r\n\r\n`noremap <C-g> :call OniCommand('menu.close')<cr>`\r\n\r\nbut it doesn't seem to do anything. Is this the right keybinding to be using? Or is there another keybinding that isn't documented?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1299/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adabo": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1570", "title": "Requesting help installing c++ language support with intellisense for Oni [Help Wanted]", "body": "I'm having difficulty setting this up. I couldn't find instructions. It's over my head, to be honest.\r\n\r\nI read that I should install clangd, which then lead me to install LLVM. Another vague instruction was what to put in Oni config file. I am not familiar with Oni config files.\r\n\r\nI'm not even sure what I'm doing. I could be trying to do something that is not what I want.\r\n\r\nThe only IDE I've used was Visual Studio. It works with c++ out of the box and shows me everything I need to know about my code. And it runs my code and tells me if there are problems.\r\n\r\nSo what is the language support for Oni for? And how do I enable it?\r\n\r\nThank you for your time. The project looks promising.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "powermosfet": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1568", "title": "Very sensitive scrolling on macbook pro", "body": "When scrolling using the trackpad on my 2017 Macbook pro, the sensitivity is so high that the only thing i can reliably do is going to the start or end of the file.\r\n\r\nGoing slowly seems to make it even worse, i can scroll through a 500-line file with about 2cm of movement.\r\n\r\nOther text editors on my system do not have this problem.\r\nOther electron apps on my system do not have this problem.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1568/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1565", "title": "Multiple new files show as single tab", "body": "When using tab mode \"buffers\", creating multiple new files results in a single tab.\r\nEven `:tabe` only opens a new empty file in the current tab:\r\n\r\n<img width=\"406\" alt=\"bilde\" src=\"https://user-images.githubusercontent.com/53771/36255800-b8eb5aa0-1250-11e8-944a-ad1a0d483c05.png\">\r\n\r\nIt's possible to switch between the buffers with `:bn`, but only a single tab named \"No Name\" is shown.\r\n\r\nThe unsaved buffers all have the name \"No Name\":\r\n<img width=\"418\" alt=\"bilde\" src=\"https://user-images.githubusercontent.com/53771/36255846-d89284a0-1250-11e8-9360-7adf3e8fb9ea.png\">\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tobiasandersen": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1567", "title": "Reveal active buffer in file explorer", "body": "There's a command in Atom called `tree-view:reveal-active-file` that I think would be really cool to have in Oni as well. When invoked in Oni, I'd expect it to look at the currently active buffer and locate that buffer's file in the file explorer (sidebar) and give focus to it.\r\n\r\nI'm not familiar with the codebase, so it's a bit hard to tell how hard this would be to implement. But I'd love to give it a shot if you agree it's a feature worth adding.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1567/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rockneverdies55": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1561", "title": "existing file opens as new file", "body": "I'm on Oni 0.3 latest. \r\n- launch oni\r\n- change to the project folder (via launching file browser from the left bottom link)\r\n- ctrl + p and fuzzy type file name\r\n- click enter when the file is found and selected in the dropdown\r\n\r\nFuzzy file finder gets closed and the file is loaded. However the buffer is empty and in the status line it's saying (NEW FILE (or NEW DIRECTORY sometimes)) along with the full path to the file for some reason. Yeah crazy but true :slightly_smiling_face: \r\n\r\n![image](https://user-images.githubusercontent.com/4588562/36211481-57dbf21a-116f-11e8-8c38-f998f7218d35.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/273234333", "body": "Confirming the fix with 0.1.8. Thanks.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273234333/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340052722", "body": "Awesome thank you guys. Perhaps the best way to implement this would be closing the popup with user's any ESC key mappings. \r\n\r\nThough this will definitely feel better as it is for me.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340052722/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343663214", "body": "just updated to version 0.2.16 and now I see about oni in help menu. What a timing :slightly_smiling_face: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343663214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344654115", "body": "You're the man, thanks for quickly releasing the new version.\r\n\r\nYes, the issue has disappeared.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344654115/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Contextualist": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1560", "title": "Shortcut hints on the command pallet got cropped when the window size is small", "body": "(Just saw Oni's \"What's new in 0.3.0\" video and realized that the command pallet had been long available. \ud83d\ude09 Really helpful video for the slow-witted me.)\r\n\r\nWhen I started to explore Oni's shortcuts with command pallet, I noticed that some shortcut hints are not fully displayed:\r\n![2018-02-14 21 15 40](https://user-images.githubusercontent.com/16000021/36209630-c9dc4b8a-11ce-11e8-9ec9-9500b30c5d90.png)\r\n\r\nWhen I entered full-screen, the issue is solved, so there're probably some problems with the overflow strategy.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1560/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1378", "title": "LSP: The client should request for completion / completion details only if the server supported", "body": "Oni does not seem to respect the language server capability settings of `InitializeResult.capabilities.completionProvider` and `InitializeResult.capabilities.completionProvider.resolveProvider`.\r\n\r\n## Details\r\nWhen I was using `go-langserver` and editing a go file, I noticed in the dev console that Oni is making `completionItem/resolve` requests to the server, which returned `Error: method not supported: completionItem/resolve`. Go-langserver does not support completion detail resolve, and it declares so by not setting `InitializeResult.capabilities.completionProvider.resolveProvider`, but Oni does not seem to respect this server capability setting.\r\n\r\n`go-langserver` has a flag to switch on/off the completion capability, which, when disabled, will not set the field `InitializeResult.capabilities.completionProvider` at all. I tried disabling the flag in the language server argument in `config.js`. Still, I see Oni making failed `textDocument/completion` requests.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1330", "title": "[Feature request] LSP: pass environment vars to the language server process", "body": "## Expected outcome\r\nConfig entries like `language.<language-identifier>.languageServer.env` specify a group of additional environment variables for each language server when spawning its process.\r\n\r\n## Problems\r\n[`pyls`](https://github.com/palantir/python-language-server) detects the env `VIRTUAL_ENV` to set up the completion scope/virtualenv. This is a crucial setting when `pyls` is installed in a different virtualenv to the project. I can start `pyls` by setting `language.python.languageServer.command=\"/path/to/pyls_virtualenv/bin/pyls\"`, but without setting `VIRTUAL_ENV`, the server by default supply completion in scope `/path/to/pyls_virtualenv`, not the one my project located.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/349829636", "body": "`go-langserver` does not support completion yet (see sourcegraph/go-langserver#201). For now, you may use [gocode](https://github.com/nsf/gocode) for completion.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349829636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353596696", "body": "~Try setting `\"language.go.languageServer.arguments\": [\"--gocodecompletion\"]`, then the language server will enable completion for you. See https://github.com/sourcegraph/go-langserver/blob/6d17b634f244650517ca2ec9a82068d02a581b09/main.go#L32~\r\n\r\n~This is an experimental feature. Sorry for that it is not well documented.~\r\n\r\nSorry for my irrelevent rushed answer. I checked the [LSP spec](https://microsoft.github.io/language-server-protocol/specification#initialize) and how Oni initialize LSP\r\n\r\nhttps://github.com/onivim/oni/blob/611b194a22cbfeba175b182e877e696c6c2afa8b/browser/src/Services/Language/LanguageClientProcess.ts#L151-L180\r\n\r\nIt seems that many of the above params should not be simply set as a bool. Besides, a few entries' names seem mismatch with the spec.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353596696/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353610611", "body": "@saibing , I agree with you. I'm sure it will be addressed soon. If you are eager to see it work, you can simply delete L152-179 in oni/browser/src/Services/Language/LanguageClientProcess.ts and build Oni, since these params are optional.\r\n\r\nBy the way, @bryphe , to what extent and when would you like to implement these optional params? Just curious.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353610611/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "magopian": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1558", "title": "Deleting a buffer using \":bd\" doesn't remove the tab before changing tabs to refresh", "body": "From time to time, when I use `:bd` to close a tab (that's the only solution I found other than clicking on the little cross in the tab menu using my mouse), the tab doesn't properly get removed before I refresh the tab menu, for example by switching to another tab.\r\n\r\nIn the scenario, I'm in the `Main.elm` file, and I type `:bd`. The result is as shown in the screenshot below:\r\n<img width=\"1006\" alt=\"screen shot 2018-02-14 at 09 50 53\" src=\"https://user-images.githubusercontent.com/167767/36195177-eea068fa-116c-11e8-9e97-080f748f9807.png\">\r\n\r\nI'm now in another buffer (not the next one though), and the `Main.elm` tab is still visible. As soon as I change tabs or open a new tab/file, the `Main.elm` tab disappears.\r\n\r\nHere are the logs while doing that:\r\n[-1518598505466.log](https://github.com/onivim/oni/files/1723244/-1518598505466.log)\r\n(I added a `console.log(\"<<<<<<<<<<<<<<<<< TAB IS STILL THERE, REFRESHING BY SWITCHING TABS\")` in the console to show where I switched tabs to \"refresh\" the tab list).\r\n\r\nThis doesn't happen all the time though... To reproduce:\r\n- Open a `Session.vim` file\r\n- try the `:bd` command it fails\r\n- move around tabs using `:bnext` or `:bprevious`: it refreshes the tab bar\r\n- try the `:bd` command: there's some good probability that it fails also\r\n- after some time switching around tabs, using the `:bd` command suddenly works as expected, and from then on it will always work (until the next `:so Session.vim`)\r\n\r\n\r\nI'm using the latest released version 0.3.0, and my `config.js` file is as follows:\r\n\r\n```js\r\n// For more information on customizing Oni,\r\n// check out our wiki page:\r\n// https://github.com/onivim/oni/wiki/Configuration\r\n\r\nconst activate = oni => {\r\n    console.log(\"config activated\")\r\n\r\n    // Input\r\n    //\r\n    // Add input bindings here:\r\n    //\r\n    oni.input.bind(\"<c-enter>\", () => console.log(\"Control+Enter was pressed\"))\r\n\r\n    //\r\n    // Or remove the default bindings here by uncommenting the below line:\r\n    //\r\n    // oni.input.unbind(\"<c-p>\")\r\n}\r\n\r\nconst deactivate = () => {\r\n    console.log(\"config deactivated\")\r\n}\r\n\r\nmodule.exports = {\r\n    activate,\r\n    deactivate,\r\n    //add custom config here, such as\r\n\r\n    \"ui.colorscheme\": \"nord\",\r\n\r\n    //\"oni.useDefaultConfig\": true,\r\n    //\"oni.bookmarks\": [\"~/Documents\"],\r\n    \"oni.loadInitVim\": \"~/.oni/init.vim\",\r\n    //\"editor.fontSize\": \"14px\",\r\n    //\"editor.fontFamily\": \"Monaco\"\r\n\r\n    // UI customizations\r\n    \"ui.animations.enabled\": true,\r\n    \"ui.fontSmoothing\": \"auto\",\r\n}\r\n```\r\n\r\nAnd my `init.vim` file is:\r\n```vim\r\nset ruler  \" show the cursor position all the time\r\nset showcmd  \" display incomplete commands\r\nset ignorecase  \" case insensitive searches\r\nset smartcase  \" case sensitive searches if there's an uppercase letter\r\nmap <F2> :nohlsearch<cr>  \" disable the highlighted searches\r\nimap <F2> :nohlsearch<cr>\r\n\r\n\" visual indication of the 80 char column\r\nset colorcolumn=80\r\n\r\n\" visual indication of trailing and non-breaking spaces\r\nset list\r\n\r\n\" move through tabs with CTRL+h and CTRL+l\r\nmap <C-h> :bprevious<cr>\r\nmap <C-l> :bnext<cr>\r\nimap <C-h> <Esc>:bprevious<cr>\r\nimap <C-l> <Esc>:bnext<cr>\r\n\r\n\" colorscheme wombat  \" wombat is saved in .vim/colors/wombat.vim\r\n\r\n\" gundo: https://github.com/sjl/gundo.vim\r\nnnoremap <F6> :GundoToggle<CR>\r\nlet g:gundo_preview_bottom = 1  \" preview changes below the current windows, using full width\r\n\r\nlet mapleader=\",\"\r\n\r\n\"ale\r\nlet g:ale_fixers = {\r\n\\   'javascript': [\r\n\\       'prettier', 'eslint',\r\n\\   ],\r\n\\   'elm': [\r\n\\       'format',\r\n\\   ],\r\n\\   'rust': [\r\n\\       'rustfmt',\r\n\\   ],\r\n\\   'reason': [\r\n\\       'refmt',\r\n\\   ],\r\n\\}\r\nlet g:ale_linters = {'rust': ['cargo']}\r\nlet g:ale_fix_on_save = 1\r\nnmap <silent> <C-k> <Plug>(ale_previous_wrap)\r\nnmap <silent> <C-j> <Plug>(ale_next_wrap)\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1557", "title": "Menu \"Oni > Close file\" doesn't close the file", "body": "When I'm selecting \"close file\" (which I assume should close the tab?) nothing happens (the file is still opened in a tab).\r\n\r\nHere are the logs when I select \"close file\" from the menu:\r\n<img width=\"555\" alt=\"screen shot 2018-02-14 at 09 43 21\" src=\"https://user-images.githubusercontent.com/167767/36194968-0d53e6ec-116c-11e8-9100-7dbbc8ed307a.png\">\r\n\r\nI'm using the latest released version 0.3.0 and neovim 0.2.2, and my `config.js` file is as follows:\r\n\r\n```js\r\n// For more information on customizing Oni,\r\n// check out our wiki page:\r\n// https://github.com/onivim/oni/wiki/Configuration\r\n\r\nconst activate = oni => {\r\n    console.log(\"config activated\")\r\n\r\n    // Input\r\n    //\r\n    // Add input bindings here:\r\n    //\r\n    oni.input.bind(\"<c-enter>\", () => console.log(\"Control+Enter was pressed\"))\r\n\r\n    //\r\n    // Or remove the default bindings here by uncommenting the below line:\r\n    //\r\n    // oni.input.unbind(\"<c-p>\")\r\n}\r\n\r\nconst deactivate = () => {\r\n    console.log(\"config deactivated\")\r\n}\r\n\r\nmodule.exports = {\r\n    activate,\r\n    deactivate,\r\n    //add custom config here, such as\r\n\r\n    \"ui.colorscheme\": \"nord\",\r\n\r\n    //\"oni.useDefaultConfig\": true,\r\n    //\"oni.bookmarks\": [\"~/Documents\"],\r\n    \"oni.loadInitVim\": \"~/.oni/init.vim\",\r\n    //\"editor.fontSize\": \"14px\",\r\n    //\"editor.fontFamily\": \"Monaco\"\r\n\r\n    // UI customizations\r\n    \"ui.animations.enabled\": true,\r\n    \"ui.fontSmoothing\": \"auto\",\r\n}\r\n```\r\n\r\nAnd my `init.vim` file is:\r\n```vim\r\nset ruler  \" show the cursor position all the time\r\nset showcmd  \" display incomplete commands\r\nset ignorecase  \" case insensitive searches\r\nset smartcase  \" case sensitive searches if there's an uppercase letter\r\nmap <F2> :nohlsearch<cr>  \" disable the highlighted searches\r\nimap <F2> :nohlsearch<cr>\r\n\r\n\" visual indication of the 80 char column\r\nset colorcolumn=80\r\n\r\n\" visual indication of trailing and non-breaking spaces\r\nset list\r\n\r\n\" move through tabs with CTRL+h and CTRL+l\r\nmap <C-h> :bprevious<cr>\r\nmap <C-l> :bnext<cr>\r\nimap <C-h> <Esc>:bprevious<cr>\r\nimap <C-l> <Esc>:bnext<cr>\r\n\r\n\" colorscheme wombat  \" wombat is saved in .vim/colors/wombat.vim\r\n\r\n\" gundo: https://github.com/sjl/gundo.vim\r\nnnoremap <F6> :GundoToggle<CR>\r\nlet g:gundo_preview_bottom = 1  \" preview changes below the current windows, using full width\r\n\r\nlet mapleader=\",\"\r\n\r\n\"ale\r\nlet g:ale_fixers = {\r\n\\   'javascript': [\r\n\\       'prettier', 'eslint',\r\n\\   ],\r\n\\   'elm': [\r\n\\       'format',\r\n\\   ],\r\n\\   'rust': [\r\n\\       'rustfmt',\r\n\\   ],\r\n\\   'reason': [\r\n\\       'refmt',\r\n\\   ],\r\n\\}\r\nlet g:ale_linters = {'rust': ['cargo']}\r\nlet g:ale_fix_on_save = 1\r\nnmap <silent> <C-k> <Plug>(ale_previous_wrap)\r\nnmap <silent> <C-j> <Plug>(ale_next_wrap)\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1556", "title": "sneak mode selection in the sidebar is shifted by one", "body": "When in sneak mode, it seems the labels for the sidebar entries are shifted by one: when I enter the label of an entry, it's actually the entry above that is activated.\r\n\r\nSee the following two screenshots:\r\n\r\nEntering sneak mode:\r\n<img width=\"1144\" alt=\"screen shot 2018-02-14 at 09 29 35\" src=\"https://user-images.githubusercontent.com/167767/36194391-c3008ae8-1169-11e8-8a92-c3d2a888585a.png\">\r\n\r\nSelect \"AV\" to open the `src` folder: it's the file above `exact-dependencies.json` which is opened:\r\n<img width=\"1119\" alt=\"screen shot 2018-02-14 at 09 29 50\" src=\"https://user-images.githubusercontent.com/167767/36194441-ed99a596-1169-11e8-953f-87d076cac023.png\">\r\n\r\nIf I deliberately use the label below the one I'm interested in, it does open the entry I'm looking for.\r\n\r\nThere's something weird though: if I select the very first entry in the sidebar, it pops up \"not implemented yet\", exactly as if I clicked on the first line (the path) in the explorer. Also, it seems there's one label displayed in front of an empty line at the end of the list... as if the whole list was shifted down by one.\r\n\r\nI've tried the other labels (switching to the file or search panes from the leftmost sidebar, switching tabs) and they all seem to behave normally.\r\n\r\nI'm using the latest released version 0.3.0 and neovim 0.2.2, and my `config.js` file is as follows:\r\n\r\n```js\r\n// For more information on customizing Oni,\r\n// check out our wiki page:\r\n// https://github.com/onivim/oni/wiki/Configuration\r\n\r\nconst activate = oni => {\r\n    console.log(\"config activated\")\r\n\r\n    // Input\r\n    //\r\n    // Add input bindings here:\r\n    //\r\n    oni.input.bind(\"<c-enter>\", () => console.log(\"Control+Enter was pressed\"))\r\n\r\n    //\r\n    // Or remove the default bindings here by uncommenting the below line:\r\n    //\r\n    // oni.input.unbind(\"<c-p>\")\r\n}\r\n\r\nconst deactivate = () => {\r\n    console.log(\"config deactivated\")\r\n}\r\n\r\nmodule.exports = {\r\n    activate,\r\n    deactivate,\r\n    //add custom config here, such as\r\n\r\n    \"ui.colorscheme\": \"nord\",\r\n\r\n    //\"oni.useDefaultConfig\": true,\r\n    //\"oni.bookmarks\": [\"~/Documents\"],\r\n    \"oni.loadInitVim\": \"~/.oni/init.vim\",\r\n    //\"editor.fontSize\": \"14px\",\r\n    //\"editor.fontFamily\": \"Monaco\"\r\n\r\n    // UI customizations\r\n    \"ui.animations.enabled\": true,\r\n    \"ui.fontSmoothing\": \"auto\",\r\n}\r\n```\r\n\r\nAnd my `init.vim` file is:\r\n```vim\r\nset ruler  \" show the cursor position all the time\r\nset showcmd  \" display incomplete commands\r\nset ignorecase  \" case insensitive searches\r\nset smartcase  \" case sensitive searches if there's an uppercase letter\r\nmap <F2> :nohlsearch<cr>  \" disable the highlighted searches\r\nimap <F2> :nohlsearch<cr>\r\n\r\n\" visual indication of the 80 char column\r\nset colorcolumn=80\r\n\r\n\" visual indication of trailing and non-breaking spaces\r\nset list\r\n\r\n\" move through tabs with CTRL+h and CTRL+l\r\nmap <C-h> :bprevious<cr>\r\nmap <C-l> :bnext<cr>\r\nimap <C-h> <Esc>:bprevious<cr>\r\nimap <C-l> <Esc>:bnext<cr>\r\n\r\n\" colorscheme wombat  \" wombat is saved in .vim/colors/wombat.vim\r\n\r\n\" gundo: https://github.com/sjl/gundo.vim\r\nnnoremap <F6> :GundoToggle<CR>\r\nlet g:gundo_preview_bottom = 1  \" preview changes below the current windows, using full width\r\n\r\nlet mapleader=\",\"\r\n\r\n\"ale\r\nlet g:ale_fixers = {\r\n\\   'javascript': [\r\n\\       'prettier', 'eslint',\r\n\\   ],\r\n\\   'elm': [\r\n\\       'format',\r\n\\   ],\r\n\\   'rust': [\r\n\\       'rustfmt',\r\n\\   ],\r\n\\   'reason': [\r\n\\       'refmt',\r\n\\   ],\r\n\\}\r\nlet g:ale_linters = {'rust': ['cargo']}\r\nlet g:ale_fix_on_save = 1\r\nnmap <silent> <C-k> <Plug>(ale_previous_wrap)\r\nnmap <silent> <C-j> <Plug>(ale_next_wrap)\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "balupton": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1549", "title": "request for homebrew installation", "body": "It would be great if this was available on [homebrew](https://brew.sh) so I could do `brew install oni` to install it", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1549/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MikaAK": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1529", "title": "Resize fits to screen whenever opening ctrl-p", "body": "Having some issues with oni latest release. Whenever I open `ctrl-p` using `ctrl-p` (which i have unbound in oni` it causes the window to resize to fullscreen for some reason!\r\n\r\n![2018-02-11 22 16 58](https://user-images.githubusercontent.com/4650931/36085253-58958f1a-0f79-11e8-9cf5-e0844e6ace26.gif)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1441", "title": "Quick Info stopped showing", "body": "I just updated to the latest oni and I've noticed that the quick info stopped showing entirely. It used to stop after about 30 min but now it doesn't work even after restarting oni!\r\n\r\nOni Config\r\n```\r\nconst activate = (oni) => {\r\n  oni.input.unbind('<C-p>')\r\n  oni.input.unbind('<Tab>')\r\n  oni.input.unbind('<C-n>')\r\n  oni.input.unbind('<C-tab>')\r\n  oni.input.unbind('<m-e>')\r\n  oni.input.unbind('<down>')\r\n  oni.input.unbind('<up>')\r\n\r\n  oni.input.bind('<esc>', 'language.rename.cancel')\r\n\r\n  oni.input.bind(['<shift-tab>', '<up>'], 'contextMenu.previous')\r\n  oni.input.bind(['<tab>', '<down>'], 'contextMenu.next')\r\n  oni.input.bind(['<shift-tab>', '<up>'], 'menu.previous')\r\n  oni.input.bind(['<tab>', '<down>'], 'menu.next')\r\n  oni.input.bind('<m-w>', () => document.querySelector('.tab.selected .corner.enable-hover').click())\r\n}\r\n\r\nconst deactivate = () => {\r\n}\r\n\r\nmodule.exports = {\r\n   activate,\r\n   deactivate,\r\n  \"editor.maximizeScreenOnStart\": true,\r\n  \"oni.useDefaultConfig\": false,\r\n  \"oni.loadInitVim\": true,\r\n  \"ui.fontSmoothing\": \"subpixel-antialiased\",\r\n  \"ui.colorscheme\": \"molokai\",\r\n  \"editor.fontFamily\": \"Hack\",\r\n  \"ui.fontFamily\": \"Hack\"\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1261", "title": "Many errors and warnings in devtools console", "body": "I'm seeing many errors and warnings in the console while typing and jumping around files. Might be something in my config?\r\n\r\n(these errors are a pain to type. for some reason I can't copy from the console directly \ud83d\ude22 )\r\n\r\n**Version:** 0.2.20\r\n\r\n### Oni Config\r\n```javascript\r\nmodule.exports = {\r\n   activate,\r\n   deactivate,\r\n  \"editor.maximizeScreenOnStart\": true,\r\n  \"oni.useDefaultConfig\": false,\r\n  \"oni.loadInitVim\": true,\r\n  \"ui.fontSmoothing\": \"subpixel-antialiased\",\r\n  \"ui.colorscheme\": \"molokai\",\r\n  \"editor.fontFamily\": \"Hack\",\r\n  \"ui.fontFamily\": \"Hack\",\r\n  \"language.javascript.languageServer.argument\": [\"--no-port-file\"]\r\n}\r\n```\r\n\r\n### Errors\r\n```\r\nWarning: Each child in an array or iterator should have a unique \"key\" prop.\r\n\r\nCheck the render method of `s`. See https://fb.me/react-warning-keys for more information\r\n      in div  (created by s)\r\n```\r\n```\r\nWarning: Encountered two children with the same key, `2red`.\r\nKeys should be unique so that components maintain their\r\nidentity across updates. Non-unique keys may cause children to be \r\nduplicated and/or omitted - the behavior is unsupported and \r\ncould change in a future version\r\n   in div (created by styled.div)\r\n```\r\n\r\n\r\n### Warnings\r\n```\r\nError: No content available.\r\n  at TypeScriptServerHost._parseResponse (TypeScriptServerHost.ts:292)\r\n  at Interface.<anonymous> (TypeScriptServerHost.ts:75)\r\n  at emitOne (events.js:115)\r\n```\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/904", "title": "Invalid \"Cannot find module\" complaints with absolute path", "body": "Oni complains about cannot find module when using absolute paths.\r\n\r\nI've got my `baseUrl: \"./` and have `./shared/helpers/util/index.ts` doing \r\n`import {myStuff} from 'shared/helpers/util'` works with the compiler but I'm still getting this:\r\n![image](https://user-images.githubusercontent.com/4650931/32609312-20018956-c514-11e7-8fa6-628dfb5fc208.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/904/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/816", "title": "Weird keybinding of <M-e> on mac", "body": "In my old config I use `<M-e>` to expand ultisnippets. However for some reason `<M-e>` does this weird behavior where in insert mode it takes the character before the cursor and moves it to the end of the line, I can't find a reference to `<D-e>` or `<M-e>` anywhere else asides for ultisnips expansion", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/735", "title": "Integrating with elixir alchemist", "body": "https://github.com/msaraiva/elixir_sense provides a language server for elixir and has been used in things like https://github.com/slashmili/alchemist.vim/wiki. How would one add support for this in oni?\r\nIf not supported it would be great to allow for a fallback to deoplete in order to support this!\r\n\r\nAnother thing I'm trying to figure out is how to get completion to work in this way \r\n![2017-09-29 04 03 34](https://user-images.githubusercontent.com/4650931/31013508-4301d122-a4cb-11e7-89c6-97ac15889ff3.gif)\r\nwhere whenever completion next is shown it cycles through the completion options\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/1da1104f6a6b5cd744a658dedffbce2265c56fd9", "message": "Change quit to quit app instead of close current window (#787)\n\nQuit was previously only closing the current window, this meant that the application didn't quit as expected when on OSX. This fixes that issue and causes the whole application to quit."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/329317303", "body": "I'm having an issue where I do have these settings but it's still not respecting my colorscheme!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329317303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329641919", "body": "Ah moving to the RC did indeed fix this. Sorry for the confusion. I'm super excited to start using this, as a vim user it's really frustrating to not be able to use the cool new IDE features from things like typescript! Good work \ud83d\ude04  Hope I can contribute one day", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329641919/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329643426", "body": "I found out that if you have your colorscheme set at the top of your init.vim it doesn't load. It must be after the plugins it seems!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329643426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333436397", "body": "Wow that's pretty cool, maybe I'll take a quick stab at an elixir plugin, since I use it daily I'm sure it would be handy and I'm sure other can benefit! Thanks for the info \ud83d\ude04  \r\n\r\nThe completion is probably due to having deoplete in since this is what I wanted to use for elixir. This is my oni config\r\n```js\r\nconst activate = (oni) => {\r\n  oni.input.unbind(\"<c-p>\")\r\n  oni.input.unbind(\"<Tab>\")\r\n  oni.input.unbind(\"<c-n>\")\r\n  oni.input.unbind(\"<enter>\")\r\n  oni.input.unbind(\"<down>\")\r\n  oni.input.unbind(\"<up>\")\r\n  oni.input.bind(\"<enter>\", \"quickOpen.openFile\")\r\n  oni.input.bind(\"<up>\", \"menu.previous\")\r\n  oni.input.bind(\"<shift-tab>\", \"menu.previous\")\r\n  oni.input.bind(\"<tab>\", \"menu.next\")\r\n  oni.input.bind(\"<down>\", \"menu.next\")\r\n  oni.input.bind(\"<m-q>\", () => require('electron').remote.app.quit())\r\n  oni.input.bind('<m-w>', () => document.querySelector('.tab.selected .fa-times').click())\r\n}\r\n\r\nconst deactivate = () => {\r\n}\r\n\r\nmodule.exports = {\r\n   activate,\r\n   deactivate,\r\n  \"oni.useExternalPopupMenu\": true,\r\n  \"editor.completions.enabled\": false,\r\n  \"oni.useDefaultConfig\": false,\r\n  \"oni.loadInitVim\": true,\r\n  \"tabs.enabled\": true,\r\n  \"editor.fontFamily\": \"Hack\"\r\n}\r\n```\r\nas well as my plugins\r\n```viml\r\n\" Completion\r\nPlug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }\r\n\r\n\" Movement\r\nPlug 'easymotion/vim-easymotion'\r\nPlug 'tpope/vim-surround'\r\nPlug 'terryma/vim-multiple-cursors'\r\n\r\n\" Files\r\nPlug 'kien/ctrlp.vim'\r\nPlug 'scrooloose/nerdtree'\r\nPlug 'Xuyuanp/nerdtree-git-plugin'\r\n\r\n\" Syntax\r\nPlug 'vim-syntastic/syntastic'\r\nPlug 'ternjs/tern_for_vim'\r\nPlug 'ntpeters/vim-better-whitespace'\r\n\r\n\" Status Lines\r\nPlug 'airblade/vim-gitgutter'\r\nPlug 'bling/vim-airline'\r\n\r\n\" Colors\r\nPlug 'tomasr/molokai'\r\n\r\n\" Typescript\r\nPlug 'leafgarland/typescript-vim'\r\nPlug 'othree/javascript-libraries-syntax.vim'\r\nPlug 'gavocanov/vim-js-indent'\r\nPlug 'othree/yajs'\r\nPlug 'othree/es.next.syntax.vim'\r\nPlug 'mhartington/nvim-typescript'\r\n\r\n\" HTML Languages\r\nPlug 'digitaltoad/vim-pug'\r\n\r\n\" Fish\r\nPlug 'dag/vim-fish'\r\n\r\n\" Elixir\r\nPlug 'slashmili/alchemist.vim'\r\nPlug 'elixir-editors/vim-elixir'\r\n\r\n\" Tracking\r\nPlug 'wakatime/vim-wakatime'\r\n\r\n\" Utility\r\nPlug 'jiangmiao/auto-pairs'\r\nPlug 'scrooloose/nerdcommenter'\r\nPlug 'godlygeek/tabular'\r\nPlug 'tpope/tpope-vim-abolish'\r\nPlug 'wellle/targets.vim'\r\nPlug 'xolox/vim-misc'\r\nPlug 'xolox/vim-session'\r\n```\r\nI have this for deoplete however\r\n```viml\r\ncall deoplete#enable()\r\ninoremap <expr><tab> pumvisible() ? \"\\<c-n>\" : \"\\<tab>\"\r\n```\r\nAll I'm doing is using tab to cycle through the options visible. This is the behavior I want to keep however when using completion directly from oni I cannot find a way to replicate this. Rather I have to use next/previous then use the select completion button which does cause extra keypresses and errors when forgetting them \ud83d\ude2d  \r\n\r\nLemme know what else I can do to help!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333436397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335968150", "body": "I actually was using that binding before but unfortunately I found that it did slow me down. I would like to disable the autocomplete if possible and just use deoplete for now,  is that possible @bryphe", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335968150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338364581", "body": "I do not have defaults set and I am loading my init.vim I suppose I can do a better and test neovim itself to see if it's maybe a plugin or other config ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338364581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343384160", "body": "It's actually just off `@angular/cli` using `ng new project`. It uses a tsconfig.app inside src which extends of the tsconfig in root. I've tried adding switching rootDirs  between them but no configuration seems to work for me \ud83d\ude2d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343384160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348947331", "body": "That was totally it. Even thought it was the first breaking change somehow I missed it! Thanks", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348947331/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353019014", "body": "Nice work guys!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353019014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "coeuvre": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1475", "title": "Can we have keyword completion for file type without language support?", "body": "Currently, without touching neovim config file, only file type with language support like JS can use auto completion. When typing in other file types, no completion popup will show up.\r\n\r\nCan we have keyword completion working out of box?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1475/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "saibing": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1459", "title": "Welcome Page: When enabled, space/enter key don't work", "body": "Oni: \r\n\r\nversion: 0.2.22 \r\nos: Windows 7\r\n\r\n\r\nI try input space on anywhere such as command line, text editor etc. there is no any response for me.\r\n\r\n![image](https://user-images.githubusercontent.com/5676390/35901405-647003c6-0c11-11e8-9608-8e9bf0fdafc4.png)\r\n![image](https://user-images.githubusercontent.com/5676390/35901453-97f0d798-0c11-11e8-8c3b-0a7284a2642d.png)\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1240", "title": "The key binding mechanism does not work", "body": "```js\r\nconst activate = (oni) => {\r\n    console.log(\"config activated\")\r\n\r\n    // Input \r\n    //\r\n    // Add input bindings here:\r\n    //\r\n    oni.input.bind(\"<c-enter>\", () => console.log(\"Control+Enter was pressed\"))\r\n    oni.input.bind(\"<c-s-r>\", \"language.findAllReferences\")\r\n\r\n    //\r\n    // Or remove the default bindings here by uncommenting the below line:\r\n    //\r\n    // oni.input.unbind(\"<c-p>\")\r\n}\r\n```\r\n\r\nI input &lt;c-enter&gt; , there is no any output on developer console\r\nI input &lt;c-s-r&gt;, there is no any response.\r\n  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1237", "title": "Hover's float window size problem", "body": "The oni hover's window:\r\n\r\n![oni](https://user-images.githubusercontent.com/5676390/34618702-8bfba1ee-f27a-11e7-9705-ad57c533068a.png)\r\n\r\nThe vscode hover's window:\r\n![vscode](https://user-images.githubusercontent.com/5676390/34618719-9bb18784-f27a-11e7-9f04-01c343691599.png)\r\n\r\nI feeling that vscode's float window is better\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1237/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1016", "title": "Integrated a new c/c++ language server: cquery", "body": "I'm try a new c/c++ language server: [cquery](https://github.com/jacobdufault/cquery)\r\n\r\nCQuery is a Low-latency language server for large C++ code-bases, powered by libclang. It is much more powerful than clangd.\r\n\r\nBut I ran into some trouble that cquery need add some initializationOptions:\r\n\r\n```json\r\n{\r\n        \"initializationOptions\": {\r\n                \"cacheDirectory\": \"/tmp/cquery\",\r\n\t\t\"resourceDirectory\": \"yourCQueryDirectory/clang_resource_dir\"\r\n        }\r\n}\r\n```\r\n[How to use cquery with LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim/wiki/cquery)\r\n\r\nMay be Oni need to support config language server's initializationOptions?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/297589343", "body": "@keforbes @extr0py \r\nI feel very sorry when I want to upload pictures to github, github reported the following error:\r\n\r\n```error\r\nSomething went really wrong, and we can't process that file. Try again\r\n```\r\n\r\nI think you are right, The issue should be caused by the IME event process.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297589343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306379496", "body": "@keforbes , thanks for your answer.\r\n\r\nfzf is supported non-interactive mode:\r\n\r\n```sh\r\n$ fzf -f  querystring\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306379496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/309932962", "body": "@extr0py \r\n\r\nmy oni config's content as follow:\r\n\r\n```js\r\nmodule.exports = {\r\n  //add custom config here, such as\r\n  //\"oni.useDefaultConfig\": true,\r\n  \"oni.loadInitVim\": false,\r\n  \"editor.fontSize\": \"15px\",\r\n  \"editor.fontFamily\": \"Source Code Pro\",\r\n  \"editor.quickOpen.execCommand\": \"fzf -f ${search}\"\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/309932962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332755397", "body": "Thanks :+1: \r\nCan you release a new version?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332755397/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333006114", "body": "@bryphe \r\nThank you very much. The chinese IME can work now.  I will use Oni as my daily-editor. :+1: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333006114/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341739673", "body": "Thank you very much, it works very well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341739673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343517269", "body": "```js\r\n\r\nbundle.js:1 Unhandled command: mode_info_set\r\nt.warn @ bundle.js:1\r\nt.forEach @ bundle.js:44\r\n_handleNotification @ bundle.js:44\r\n_neovim.on @ bundle.js:44\r\nemitTwo @ events.js:125\r\nemit @ events.js:213\r\n_decoder.on @ bundle.js:26\r\nemitOne @ events.js:115\r\nemit @ events.js:210\r\naddChunk @ _stream_readable.js:252\r\nreadableAddChunk @ _stream_readable.js:239\r\nReadable.push @ _stream_readable.js:197\r\nTransform.push @ _stream_transform.js:147\r\nn.push @ bundle.js:44\r\nflush @ bundle.js:5\r\no._transform @ bundle.js:44\r\nTransform._read @ _stream_transform.js:186\r\nTransform._write @ _stream_transform.js:174\r\ndoWrite @ _stream_writable.js:371\r\nwriteOrBuffer @ _stream_writable.js:357\r\nWritable.write @ _stream_writable.js:274\r\nondata @ _stream_readable.js:628\r\nemitOne @ events.js:115\r\nemit @ events.js:210\r\naddChunk @ _stream_readable.js:252\r\nreadableAddChunk @ _stream_readable.js:239\r\nReadable.push @ _stream_readable.js:197\r\nonread @ net.js:589\r\n```\r\n\r\nMaybe there are some network access problems. I use oni behind the company's proxy.\r\n\r\nCan oni skip these failed network access?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343517269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343520455", "body": "@bryphe \r\nCan oni support setting http / https proxy?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343520455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343612576", "body": "@bryphe \r\n\r\nThe Oni.debug.enableDebugLogging is undefined\r\n\r\n```js\r\nOni.debug.enableDebugLogging()\r\nVM552:1 Uncaught TypeError: Cannot read property 'enableDebugLogging' of undefined\r\n    at <anonymous>:1:10\r\n(anonymous) @ VM552:1\r\nOni.debug\r\nundefined\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343612576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343615334", "body": "@bryphe \r\nc++ file:\r\n\r\n```js\r\n[NeovimInstance] Executing command: :e! hello.cpp\r\nbundle.js:1 No supported language\r\n\r\n[NeovimInstance] Executing command: :e! hello.cc\r\n2bundle.js:1 No supported language\r\n```\r\n\r\npython file\r\n\r\n```js\r\n[NeovimInstance] Executing command: :e! LanguageClient.py\r\nbundle.js:1 No supported language\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343615334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343618684", "body": "@bryphe \r\n\r\nI has sloved the problem via add follow item into config.js:\r\n\r\n```js\r\n    \"experimental.enableLanguageServerFromConfig\": true,\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343618684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351249393", "body": "@bryphe \r\n\r\nThank you. It solved the problem for me :+1: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351249393/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353594073", "body": "I trace the detail message of go-langserver as follow:\r\n\r\n```json\r\nlangserver-go: reading on stdin, writing on stdout                                                                                                                                                                 \r\n--> request #0: initialize: {\"clientName\":\"oni\",\"rootPath\":\"/data/saibing/git/go/src/jvmgo\",\"rootUri\":\"file:///data/saibing/git/go/src/jvmgo\",\"capabilities\":{\"workspace\":{\"applyEdit\":true,\"configuration\":true,  \r\n\"workspaceEdit\":{\"documentChanges\":false},\"didChangeConfiguration\":true,\"didChangeWatchedFiles\":false,\"symbol\":true,\"executeCommand\":true},\"textDocument\":{\"synchronization\":true,\"completion\":true,\"hover\":true,  \r\n\"signatureHelp\":true,\"references\":true,\"documentHighlight\":false,\"documentSymbol\":true,\"formatting\":true,\"rangeFormatting\":true,\"onTypeFormatting\":false,\"definition\":true,\"codeAction\":true,\"codeLens\":true,      \r\n\"documentLink\":false,\"rename\":true}}}                                                                                                                                                                              \r\n<-- error #0: initialize: {\"code\":0,\"message\":\"json: cannot unmarshal bool into Go struct field TextDocumentClientCapabilities.completion of type struct { CompletionItemKind struct { ValueSet []lsp.             \r\nCompletionItemKind \\\"json:\\\\\\\"valueSet,omitempty\\\\\\\"\\\" } \\\"json:\\\\\\\"completionItemKind,omitempty\\\\\\\"\\\" }\",\"data\":null}                                                                                             \r\n--> notif: textDocument/didOpen: {\"textDocument\":{\"uri\":\"file:///data/saibing/git/go/src/jvmgo/jvm.go\",\"languageId\":\"go\",\"text\":\"package main\\n\\nimport \\\"fmt\\\"\\nimport \\\"strings\\\"\\nimport \\\"jvmgo/               \r\nclasspath\\\"\\nimport \\\"jvmgo/instructions/base\\\"\\nimport \\\"jvmgo/rtda\\\"\\nimport \\\"jvmgo/rtda/heap\\\"\\n\\ntype JVM struct {\\n\\tcmd         *Cmd\\n\\tclassLoader *heap.ClassLoader\\n\\tmainThread  *rtda.                 \r\nThread\\n}\\n\\nfunc newJVM(cmd *Cmd) *JVM {\\n\\tcp := classpath.Parse(cmd.XjreOption, cmd.cpOption)\\n\\tclassLoader := heap.NewClassLoader(cp, cmd.verboseClassFlag)\\n\\treturn \\u0026JVM{\\n\\t\\tcmd:         cmd,       \r\n\\n\\t\\tclassLoader: classLoader,\\n\\t\\tmainThread:  rtda.NewThread(),\\n\\t}\\n}\\n\\nfunc (self *JVM) start() {\\n\\tself.initVM()\\n\\tself.execMain()\\n}\\n\\nfunc (self *JVM) initVM() {\\n\\tvmClass := self.classLoader.    \r\nLoadClass(\\\"sun/misc/VM\\\")\\n\\tbase.InitClass(self.mainThread, vmClass)\\n\\tinterpret(self.mainThread, self.cmd.verboseInstFlag)\\n}\\n\\nfunc (self *JVM) execMain() {\\n\\tclassName := strings.Replace(self.cmd.class, \r\n\\\".\\\", \\\"/\\\", -1)\\n\\tmainClass := self.classLoader.LoadClass(className)\\n\\tmainMethod := mainClass.GetMainMethod()\\n\\tif mainMethod == nil {\\n\\t\\tfmt.Printf(\\\"Main method not found in class %s\\\\n\\\", self.cmd.   \r\nclass)\\n\\t\\treturn\\n\\t}\\n\\n\\targsArr := self.createArgsArray()\\n\\tframe := self.mainThread.NewFrame(mainMethod)\\n\\tframe.LocalVars().SetRef(0, argsArr)\\n\\tself.mainThread.PushFrame(frame)\\n\\tinterpret(self.     \r\nmainThread, self.cmd.verboseInstFlag)\\n}\\n\\nfunc (self *JVM) createArgsArray() *heap.Object {\\n\\tstringClass := self.classLoader.LoadClass(\\\"java/lang/String\\\")\\n\\targsLen := uint(len(self.cmd.                  \r\nargs))\\n\\targsArr := stringClass.ArrayClass().NewArray(argsLen)\\n\\tjArgs := argsArr.Refs()\\n\\tfor i, arg := range self.cmd.args {\\n\\t\\tjArgs[i] = heap.JString(self.classLoader, arg)\\n\\t}\\n\\treturn argsArr\\n}\"}} \r\njsonrpc2 handler: notification \"textDocument/didOpen\" handling error: server must be initialized\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353594073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353595401", "body": "\r\n```json\r\n\"textDocument\":{\"synchronization\":true,\"completion\":true\r\n```\r\n\r\n\"completion\":true may be wrong", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353595401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353604284", "body": "@Contextualist \r\n\r\nThank you very much. I have already setting this in config.js:\r\n\r\n```json\r\n\"language.go.languageServer.rootFiles\": [\".git\"],\r\n\"language.go.completionTriggerCharacters\": [\".\"],\r\n\"language.go.languageServer.arguments\": [\"--logfile\", \"goserver.log\", \"--trace\", \"--gocodecompletion\"],\r\n\r\n```\r\n\r\nSo I think the problem is that:  {\"completion\":true} can not be  unmarshal to golang struct in go-langserver.\r\n\r\nMay be  {\"completion\":true}  does not accord with the new version [Language Server Protocol](https://github.com/Microsoft/language-server-protocol/blob/gh-pages/specification.md)?\r\n\r\n```ts\r\n/**\r\n\t * Capabilities specific to the `textDocument/completion`\r\n\t */\r\n\tcompletion?: {\r\n\t\t/**\r\n\t\t * Whether completion supports dynamic registration.\r\n\t\t */\r\n\t\tdynamicRegistration?: boolean;\r\n\r\n\t\t/**\r\n\t\t * The client supports the following `CompletionItem` specific\r\n\t\t * capabilities.\r\n\t\t */\r\n\t\tcompletionItem?: {\r\n\t\t\t/**\r\n\t\t\t * Client supports snippets as insert text.\r\n\t\t\t *\r\n\t\t\t * A snippet can define tab stops and placeholders with `$1`, `$2`\r\n\t\t\t * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\r\n\t\t\t * the end of the snippet. Placeholders with equal identifiers are linked,\r\n\t\t\t * that is typing in one will update others too.\r\n\t\t\t */\r\n\t\t\tsnippetSupport?: boolean;\r\n\r\n\t\t\t/**\r\n\t\t\t * Client supports commit characters on a completion item.\r\n\t\t\t */\r\n\t\t\tcommitCharactersSupport?: boolean\t\t\t\r\n\r\n\t\t\t/**\r\n\t\t\t * Client supports the follow content formats for the documentation\r\n\t\t\t * property. The order describes the preferred format of the client.\r\n\t\t\t */\r\n\t\t\tdocumentationFormat?: MarkupKind[];\r\n\t\t}\r\n\r\n\t\tcompletionItemKind?: {\r\n\t\t\t/**\r\n\t\t\t * The completion item kind values the client supports. When this\r\n\t\t\t * property exists the client also guarantees that it will\r\n\t\t\t * handle values outside its set gracefully and falls back\r\n\t\t\t * to a default value when unknown.\r\n\t\t\t *\r\n\t\t\t * If this property is not present the client only supports\r\n\t\t\t * the completion items kinds from `Text` to `Reference` as defined in\r\n\t\t\t * the initial version of the protocol.\r\n\t\t\t */\r\n\t\t\tvalueSet?: CompletionItemKind[];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The client supports to send additional context information for a\r\n\t\t * `textDocument/completion` requestion.\r\n\t\t */\r\n\t\tcontextSupport?: boolean;\t\t\r\n\t};\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353604284/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jordwalke": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1434", "title": "Scrolling should close popups.", "body": "<img width=\"721\" alt=\"screen shot 2018-02-03 at 2 14 24 am\" src=\"https://user-images.githubusercontent.com/977348/35766197-180bfa6c-0888-11e8-962e-ad9140e62205.png\">\r\n\r\nThe second image shows scrolling with the mouse while the first popup is open. It should close.\r\n\r\n<img width=\"749\" alt=\"screen shot 2018-02-03 at 2 14 43 am\" src=\"https://user-images.githubusercontent.com/977348/35766199-1aa8b1c0-0888-11e8-8f3a-c1888b11fb3c.png\">\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1434/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1008", "title": "Support Multi-Root workspaces.", "body": "There is likely a little bit of support needed on LSP clients to support multi-root workspaces. I believe different clients may decide for themselves how the user conveys what is and isn't a \"workspace\".\r\n\r\nhttps://code.visualstudio.com/docs/editor/multi-root-workspaces\r\n\r\nIt might need to be taken into account when thinking about the file explorer, as this is the integration point that VSCode has chosen - users convey that they want to add an additional workspace by opening another folder in the Explorer. I'm not sure what the roadmap for Oni has planned here, but I thought I'd make a Github issue to at least track the feature.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1007", "title": "Help Explaining Scrollbars ", "body": "Hello,\r\n\r\nI've never quite understood the information that the scrollbars are attempting to convey in Oni. Could you help me understand?\r\n\r\n**One question/issue**:\r\nWhen inserting many newlines into a document, the scrollbar small light gray region grows smaller.\r\n\r\n<img width=\"808\" alt=\"screen shot 2017-11-23 at 12 54 47 am\" src=\"https://user-images.githubusercontent.com/977348/33164792-3cfdea1a-cfe9-11e7-9ccf-9cec57826212.png\">\r\n\r\nThat seems to make sense, but then when I hit escape and move the cursor a line up, it looks like this: (All of a sudden the light gray rectangle became large again).\r\n\r\n\r\n<img width=\"814\" alt=\"screen shot 2017-11-23 at 12 54 57 am\" src=\"https://user-images.githubusercontent.com/977348/33164831-6244d658-cfe9-11e7-8908-fb7f127e9ba6.png\">\r\n\r\nThe overall size of the document didn't change when hitting escape and moving up a line, and I've always thought that the size of the light gray \"grip\" should convey size of the visual portion of the document relevant to the entire document.\r\n\r\n**Another question/issue**:\r\nWhen the majority of the entire document is visible, the size of the gray \"grip\" is quite large, which is expected:\r\n\r\n<img width=\"867\" alt=\"1\" src=\"https://user-images.githubusercontent.com/977348/33165121-86e05acc-cfea-11e7-8308-73da74ffa0da.png\">\r\n\r\nBut then when I scroll *past* the end of the document, the size of the grip becomes very very small. I think it's because from Vim's perspective the \"visible portion of the document\" is only a couple of lines, so compared to the entire document the ratio is small and that results in a very small gray grip - almost zero height. This is jarring and not what I would expect.\r\n\r\n<img width=\"868\" alt=\"2\" src=\"https://user-images.githubusercontent.com/977348/33165123-88ae372a-cfea-11e7-88e9-93522c69f705.png\">\r\n\r\nTo the user, it's as if scrolling past the end of the document increases the document's size to make room for your scroll. The gray grip in that case would decrease in size, but not by much.\r\n\r\n**A Feature Request**\r\nThis might just be a personal but the little white \"tick\" seems to represent the cursor. Is there a way to disable it? I don't really find it that useful but I know that VSCode has something similar (and it confuses me there too). I generally understand my place in the entire document by merely looking at a scroll bar \"grip\" size compared to the entire right border of the application. I think that a cursor \"tick\" is redundant information that can be derived from the size of the \"grip\" compared to the application window height.  Maybe I should file a separate feature request for disabling the cursor \"tick\"?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/676", "title": "WSL LSP integration.", "body": "Oni would be a good opportunity to build a bridge to WSL in order to run LSP servers inside of WSL. I believe that this shouldn't be terribly difficult. The benefit is that you can build Linux projects, using Linux development tools (LSPs) inside of a Windows subsystem. Oni would simply proxy all LSP requests into the WSL somehow.\r\nIs this possible/difficult?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/39", "title": "Better :messages log", "body": "Here's a proof of concept for Atom's notifications that get rid of the spammy user experience of Atom's notifications. It would be cool to render Vim's `:messages` log in this manner:\r\n\r\nhttps://github.com/atom/notifications/issues/29", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/39/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264734822", "body": "I would love to help with enlisting a professional graphic designer. Please get ahold of me if you're interested.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264734822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264734927", "body": "> Long-term, my vision for this project is to make modal editing through neovim more friendly and attractive to users of VSCode/Atom/etc, \r\n\r\nWhere do I sign?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264734927/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264735117", "body": "One thought: If there were an *efficient* way to invoke VimScript commands directly from JavaScript, then I'd be okay with half my configuration being in VimScript, and the other half being in JS because I know that I can eventually *port* my VimScript setup to JavaScript (including keyboard mappings).\r\n\r\nBonus: The JS configuration can be made to *spit out* regular VimScript, and then the configuration can be loaded directly from VimScript for better use in regular (non-Oni) Vim (which would also help keep startup performance fast - if computing the pure VimScript configuration ahead of time (and caching it)).\r\n\r\nThe result is that there would be a path to converting all your vimscript config/bindings to JS without any downsides.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264735117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264995491", "body": "Do you have a Twitter account? You can chat with me there.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264995491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265294989", "body": "I do not currently share the same concern. I'll explain why. There are many great editors out there with great plugin systems (JS is very popular/strategic choice for plugin language). Most of them lack great vim keybindings (besides vmp, of course). Even if Oni was *only* using NeoVim just to create great vim-faithful key bindings (and undo/redo, cursor position, visual block mode - creating that excellent, authentic vim *feel*) it would be worth it even if *zero* Vim plugins were supported. Still, the better support there is for Vim plugins, the better, and I've proposed some interesting ways to make sure that Oni can integrate very well with other Vim based configuration. I just thought I'd express that although I feel this tight integration is great, it's doesn't seem as important when the alternative is using another IDE entirely with vim bindings that don't even feel authentic.\r\n\r\nAs far as Atom is concerned, I have to say I appreciate the instant startup time of Oni and would not see much point in integrating into Atom unless somehow you found a way to make Atom's startup time/perf as fast as raw vim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265294989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265297298", "body": "@bert88sta That's a good idea. I'd love to see some examples of what the bidirectional conversion might look like. One challenge is that there may be complex logic in determining what bindings are generated. For example, let's take the case where we use JS to configure via a file `myKeyBindings.js`\r\n\r\n```js\r\nlet something = reallyComplicatedExpression ();\r\nlet other = reallySlowExpression ();\r\nmodule.exports = {\r\n  'insertMode': {\r\n     'ctrl-l': something,\r\n     'ctrl-h': other\r\n  }\r\n};\r\n```\r\n\r\nThe idea I had was that this file could use *arbitrary* JS expressions / dependencies to determine the keybindings. That isn't something that's easy to convert into VimScript. It's similar to how many are using CSS in JS. You could take this raw JS object that is returned and turn it *into* pure VimScript.\r\n\r\nThe benefit is that we can run `myKeyBindings.js` ahead of time, convert it to VimScript, and cache the result so that not only are not waiting on a JS engine at startup time. Furthermore, the resulting VimScript is more lightweight than the original `myKeyBindings.js` because none of the expressions are evaluated.\r\n\r\nThe same could be done of color schemes, and possibly many other forms of configuration.\r\n\r\nWhen given the full power of the language (JS) to author configuration, it's very expressive and powerful, but it is then impossible to create a bidirectional mapping between VimScript and JS. However, if the results are rendered as regular VimScript, it makes the appeal of bidirectional mapping smaller. The generated VimScript config could work in any existing Vim configuration (even without NeoVim). Yes, it must be authored in JS, but it works in all versions of Vim, and works *fast* at startup time because all the expensive stuff has been precomputed.\r\n\r\nI think it's worth Oni coming up with some conventions early on about which things must be precomputed, and which things can be computed at runtime/startup time. You can put a hard line in the sand that anything that blocks the initial rendering/config of Vim must not have huge JS dependencies or huge computations. That could help keep the \"new window\" operation blazing fast, while allowing more expensive plugins to be loaded lazily, and asynchronously. I feel it's important to get this right early on before people start making render blocking heavy plugins.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265297298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265325956", "body": "> However, if the results are rendered as regular VimScript, it makes the appeal of bidirectional mapping smaller.\r\n\r\nIt's only my personal opinion, but if you can render to plain VimScript, then the desire to be able to convert from JS to VimScript, *and* from VimScript to JS seamlessly seems less appealing.\r\nIf you can render from JS to VimScript *ahead of time*, then you can always just convert any JS config to plain VimScript, so that it can play well with other non-Oni based Vims.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265325956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265383192", "body": "> highlights and applying them to the UI - trying to pick good defaults for the built-in UI elements like the menu, etc.\r\n\r\nI do think that is a good approach. Use the popup menu for the \"command p\" menu colors for example.\r\n\r\n> The hardest part with that is to bridge the gap so that users can bring in the themes they are comfortable with.\r\n\r\nYou could use any existing Vim color scheme, but then just provide a JSON/JS API for *creating* those (again, could be converted to plain VimScript ahead of time to not block startup time). I think you could take the top 5 Vim colorschemes and port them from VimScript to JS(ON) by hand just so that they serve as an example. Once you give people a JS API to do things, the community tends to come and fill in all the missing pieces for you.  I could see them creating all kinds of tools to port over VimScript syntax themes to the JSON format (which is then transformed back into VimScript behind the scenes). I think Atom only ships with 5 stock colorschemes, but look what people have done! I would probably help you port a few of my favorite ones.\r\n\r\n> And once we've parsed this file, we'd convert it the vim-syntax related items to highlight instructions, and preserve the rest to be used in the UI. Is that sort of what you were thinking?\r\n\r\nYes, except I might suggest that you try to define the entire color scheme in JS instead of supporting the \"extension\" of the base `.vim` colorscheme. It just keeps it simple and makes your job much easier. Because people like JS, you don't need to worry - people will port everything to JS. Everything that can be ported to JS *will* be ported to JS! :D\r\n\r\nAnd I do believe that converting these high priority (blocking visual load time) configuration should be cached so that the second time you start up the editor, you do not need to recompute them (unless the file changed.) Baking that behavior in early is very wise because it ensures people don't add features that degrade startup time.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265383192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265573301", "body": "Looking forward to this! I've curated a very specific [vim config](https://github.com/jordwalke/VimBox) to create a modern editor feel and I'm looking forward to trying it with `oni`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265573301/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265582496", "body": "Great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265582496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265715659", "body": "I like the idea of either using everything out of the box, or a completely from-scratch config. The odds of my plugins conflicting with the built in ones is so great, that it's probably better to just have them be separate (at least to start with).\r\nWhen I try this pull request, I get an error in the console (missing `init_template.vim` or something).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265715659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265846196", "body": "Yes I like the idea of an out of box awesome experience even if people quickly disable it to get their own config. It sets the bar and shows people \"yes you can create an amazing, modern experience with Vim\".  They will poke around into how the out of box experience was achieved and start moving the best parts to their own config. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265846196/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267217780", "body": "Could someone summarize the overall architecture for vim keybindings? Is anyone else concerned about impacting the gloriously fast startup time of Vim, by putting large, user configurable JS bundles in the critical load path? This is why I suggested that a more constrained approach be taken for a subset of editor functionality (colorschemes, key bindings, and syntax highlighting), which allows that configuration to compiled ahead of time to VimScript. I understand that no one wants to build that ahead of time converter right now, but it would be nice to take into account the architecture's future *potential* to be able to do such a thing. Namely - would it require a JavaScript interpreter to know which `map` commands to execute/send to neovim? I believe that we could even adopt Atom's keybindings json configuration scheme.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267217780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267280616", "body": "One idea I had (which is way beyond the scope of Oni/NeoVim) is a protocol for an editing engine like Vim, to be able to tell the client, in many situations, exactly what should happen in each of the possible key combinations that could be pressed - before the key is pressed. So at any given point in time, you know immediately how to update the screen depending on various key combinations. This wouldn't work everywhere obviously (like if you entered a command `:doSomeSideEffect()` - Vi couldn't tell you what to show on the screen if you were to hit `<cr>`, but I do believe it could work for the core editing experience. It is a fun challenge to try to relay this information efficiently, choosing to precompute and compress the subset of possibilities that are most likely to occur next for the given typing mode. There would also be some tolerance, where in some rare cases you let the optimistic update to be wrong (and ideally the user could enforce a high integrity mode which forbids this at the expense of latency).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267280616/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273989442", "body": "This other issue might be related:\r\n\r\nhttps://github.com/extr0py/oni/issues/39\r\n\r\nIt seems much better than the Atom UI notifications feature.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273989442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279994367", "body": "Gitter is nice, and I would very much recommend Discord.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279994367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291652580", "body": "Cool!\r\nI'm curious, to what extent does this use the VIM language service shims?\r\n\r\nhttps://github.com/tjdevries/nvim-langserver-shim\r\nhttps://github.com/autozimu/LanguageClient-neovim", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291652580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292028031", "body": "Awesome!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292028031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292030415", "body": "> move away from VimL and leverage JavaScript (or BuckleScript/ClojureScript/JavaScript) for the plugin infrastructure\r\n\r\nIf only we had a Buckle(VimL)Script backend!\r\n\r\n>  I hope I can revisit those shortly for 0.4 - but I'd like to see those moved as well to JavaScript.\r\n\r\nTo summarize my original position is that JS would be a great target for scripting this configuration as long as it can eventually be taken out of the startup path, generating a raw VimL config script, and that can be cached so that startup is very fast. Seems that this should be doable without anyone touching a line of vim script. In fact, this could even produce a highly condensed VimL cached boot script that's faster than any VimL you would be likely to write by hand.\r\n\r\n> The difficulty with a VimL LSP solution in this world is that the Neovim instances would not have much knowledge of each other (worst case - spawning new instances of LSP for every window/split/tab), whereas a LSP implemented in the Oni layer could be shared.\r\n\r\nI'll have to take your word for that.  Seems like an oversight somewhere in either LSP or in NeoVim if it's truly not possible.\r\n\r\n> I also called out a more selfish reason in #6 - I personally am not very productive in VimL. \r\n\r\nYou have no idea how much I can relate.\r\n\r\n> The existing LSP VimL clients are awesome and both of the authors have done incredible work, but the end goals / vision are simply different.\r\n \r\nMy thoughts were that they just might create 90% of the needed functionality and could possible even be extended to include the remaining 10%.\r\n\r\nUltimately, I don't predict the LSP layer is going to be too large anyways. That's kind of the point - isn't it? The bulk of language plugins happens behind the service - it's a good time to be alive.\r\n\r\nMy only suggestion is that for anything not dynamic (configuration, theming, mappings, settings, workspaces),  that it \"eject\" to VimL which can be cached and loaded without ever needing to loads tons of JS. LSP integration is beyond that use case. I'm just thinking it's a way that Oni can set itself apart, by maintaining super fast startup time.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292030415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295657517", "body": "In the ReasonML Discord channel, we consistently hear overwhelmingly positive feedback about @freebroccolo's VSCode plugin and language server.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295657517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295898044", "body": "I would want these key bindings to integrate with the actual internal vim windows. For example in Atom, I have a binding to move to the left window or right window. It focuses either the split to the left or right but then it eventually focuses the file tree if that is the left most window. I would hope it possible to make the internal key mappings integrate well in a similar manner. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295898044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296345974", "body": "Is there a really good example of an editor using this without a Flash of Unstlyed Content or other lags? Does VSCode currently use this? Does going out of process make performance more difficult? I'm not skeptical, just curious. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296345974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296347876", "body": "I completely agree. It's bad to design under false/incomplete assumptions about performance.\r\n\r\nMy main point was that, it's critical to get all the UI blocking things out of the load path, as much as possible. It doesn't necessarily come down to VimL vs. JS performance, though we should also measure that - but often is more a matter of the *massive* amount of runtime dependencies JavaScript developers put in the `require()` code path. I worry that each color scheme or keyboard configurator plugin will pull in one little dependency on a utility library which brings in many more.\r\n\r\nSo - all that to say, even if the compilation strategy is not to target VimL, but to target *JavaScript* - having *some* sort of staging that allows a condensed representation is very desirable.\r\n\r\nI don't know if VimL would be faster than executing remote neovim calls from JS. Perhaps if you could batch them all and send them all from JS, it would be faster than VimL, as long as you do some kind of staging/compiling to a condensed representation that sheds all the node modules dependencies.\r\n\r\nIt's difficult because no *one* dependency is the culprit. It's death by 1,000 paper cuts. I strongly suggest going the way of VSCode and saying that if you want to extend the UI, it has to be done according to some API/constraints that allows load time to be optimized. It can still be JS.\r\n\r\nI did like the idea of a VimL target because I considered that it actually allows people to migrate to Oni. I would begin by writing my JS/json configuration, letting oni create the output VimL for configuring key bindings, colors, other things - and then use that in my Vim today. Of course when you go through the Oni configuration, you can get all these great UI managers for viewing/editing keybindings etc, but at least people can start migrating their vim config over today before they switch to Oni.\r\n\r\nI like how you're thinking about this problem, and you're right we should get a sense of the actual performance differences. Are calls to NeoVim fast? Do they themselves have to go through VimL, or do they end up going right to native code? Can they be batched?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296347876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304151325", "body": "You can have a separate dedicated npm package whose only job is to create two global binaries `oni` and `oni-dev` which will open the installed `/Applications/Oni`.\r\n\r\n`npm` has already handled the permissions if they have npm installed. You could even just have people install the launcher from the command line `npm install -g oni-launch`.\r\n\r\nI would heavily discourage those binaries being written in JS as that adds a considerable amount of startup time (100+ms). I would use a small shell script that uses some node features to work on either windows (cmd) or bash(*nix).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304151325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/309984085", "body": "FYI: You can set the environment variable `export MERLIN_LOG=~/Desktop/log` which will have merlin log its internal steps/logic to that file (assuming your Oni picks up the environment vars).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/309984085/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310205738", "body": "Yeah, if you're building with bucklescript, the project must first be built in order for the Js namespace to be picked up. Does that help?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310205738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310292188", "body": "This could be totally nitpicky.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310292188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310790260", "body": "Looks pro. I imagine one day being able to map keyboard shortcuts just to scroll the doc browser (which could apply to other scrollable dialogs too).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310790260/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329679839", "body": "I downloaded the (second) latest release from today and closing a tab with `:q` does not work. It leaves the tab open, although it's not in the `:tabs` list. Just the GUI is stale.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329679839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/330762723", "body": "Maybe we could start also by making its hue match the OneDark color theme (right now the command pallet has a warm hue and the OneDark base color is cooler (more blue)).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/330762723/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338539159", "body": "Looks much more consistent!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338539159/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341590549", "body": "Great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341590549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344440400", "body": "I had the name wrong: it\u2019s 'MartinLafreniere/vim-PairTools.\r\n\r\nYou might seriously consider it. Like you, I\u2019ve tried everything else and they are all terrible. This one is really good, allows per language configuration and even supports jsx pair insertion etc.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344440400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344483937", "body": "What are some of the things that can go wrong? How does this work with auto wrap mode?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344483937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344485268", "body": "How long does a neovim round trip take? Is there a way to bump the neovim process priority to help improve it?\r\nSince key strokes are highly interactive, it would be very helpful to align the keyword interactions with display refresh events, such that the UI is updated by the next frame update deadline. Would it be possible to run neovim in essentially an embeded library mode (even if it goes over serialized rpc - it could exist in the same process so that we are not at the mercy of the operating system scheduler\u2019s opinion about how important neovim is to Oni.)\r\n\r\ncc @justinmk", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344485268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344555860", "body": "Sounds like you've got a handle on things then. If packaging Python is out of the question, I'll close this issue. (I mean, I can't blame you - there's no way I would ever attempt that).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344555860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344732333", "body": "Very interesting findings.\r\n\r\nOne other potentially jarring experience I'm curious about:\r\nSuppose you have a syntax highlighting rule that highlights `let`. If you type `le` it will remain white text, but then when you hit the final `t`, today, Vim will instantly highlight the `let` keyword. Does predictive editing allow for a moment where `let` is white, but then asynchronously highlighted to be the correct color? If so, this should probably be added to the list of error cases even though I think this may not be bad at all - compare to Atom's very distracting FOUC (Flash Of Unstyled Content) when opening an entire file.\r\n\r\nI've always wished that Vim had *built in* support for predictive edits. The approach you're taking is a great way to explore the benefits even if not baked into Vim/NeoVIm. Along with every UI update command, I would like Vim to report back a set of possible (and commonly executed) key combinations that might be entered next, and how they will affect the UI. I imagine something very minimal like:\r\n```\r\nalphanumeric: [insert_char_at(x=34, y=98, bufferID)]\r\nesc: [leave_insert_mode, block_cursor, move_cursor(x=.., y=.., bufferID)]\r\n```\r\nIf baked into NeoVim, it could account for line wrapping as well.\r\n\r\n> This means the approximate latency for that keystroke is ~50ms, which isn't really ideal.\r\n> ...\r\n>  the spot where that black arrow is where we render the predicted text - that means we show the typed character in ~10ms from the start of the interaction, which is a huge improvement!\r\n\r\nThat's really great!\r\n\r\nI'd be interested to do the experiment with a completely empty vim configuration and no syntax highlighting to try to isolate what is purely NeoVim + communication overhead. My markdown Vim plugin is very slow, for example.\r\n\r\nI would highly recommend recording the interaction with a high speed camera because the instrumentation can lie sometimes, and the act of having the instrumentation active/recording can (in my experience) disrupt the measurement itself and provide misleading results. The iPhone 6/7Plus has a 240fps mode which allows you to time with a granularity of 4ms.\r\nHere's what I do: I record a video of hitting a key very quickly, and then isolate the part of the video where I can hear the key enter - and begin counting the number of frames from that point until the time when the screen updates and multiple by `4ms`. If you don't have an iPhone Plus, I can perform this experiment if you make a release of Oni that has predictive edits enabled (the red flashing is also helpful).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344732333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345073491", "body": "Really exciting!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345073491/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346572849", "body": "Someone correct me if wrong, but I think that the core task of an LSP client here, is to determine which files belong to which \"workspace\". VSCode does this by having users mount multiple folders in the explorer, but I could imagine there being many other ways to accomplish the same. I'm sure there's benefits to keeping the [File Explorer](https://github.com/onivim/oni/pull/886) simple as well without adding the multiple folders feature.\r\n\r\nMaybe in the simplest case, you could say that Oni doesn't support multiple workspaces, and requires opening multiple windows - one window per workspace. Even in that event, it might make sense to have one language server per language running in the background that all of the clients talk to (that could keep system resources lean), and to do that I believe it would still require that whatever does this demultiplexing, understands how to inform the language servers about these multiple workspaces.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346572849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346591923", "body": "On the latest release, with the following on config I get the same error:\r\n\r\n```\r\nmodule.exports = {\r\n    \"menu.caseSensitive\": \"smart\",\r\n    \"editor.scrollBar.visible\": false,\r\n    \"editor.cursorLine\": false,\r\n    // \"oni.useDefaultConfig\": false,\r\n    \"debug.incrementalRenderRegions\": false,\r\n    \"prototype.editor.backgroundOpacity\": 1.0,\r\n    \"prototype.editor.backgroundImageUrl\": \"\",\r\n    \"prototype.editor.backgroundImageSize\": \"cover\",\r\n    // \"oni.useDefaultConfig\": true,\r\n    \"experimental.autoClosingPairs.enabled\": true,\r\n\r\n    \"prototype.editor.maxCellsToRender\": 12000,\r\n\r\n    \"oni.loadInitVim\": true,\r\n    \"oni.hideMenu\": true,\r\n\r\n    \"editor.fontLigatures\": false,\r\n    \"editor.linePadding\": 1,\r\n    \"editor.fontSize\": \"14px\",\r\n    \"tabs.mode\": \"buffers\",\r\n    \"tabs.height\": \"2em\",\r\n    \"editor.quickInfo.enabled\": false,\r\n    \"editor.completions.enabled\": false,\r\n    \"editor.errors.slideOnFocus\": false,\r\n    \"editor.formatting.formatOnSwitchToNormalMode\": false,\r\n    \"editor.fontFamily\": \"PragmataPro\",\r\n    \"statusbar.enabled\": false\r\n}\r\n```\r\n\r\nIt's only when I disable the default Oni config that it cannot find the neovim python plugins.\r\n\r\nWhen running `:CheckHealth` from within Oni, I get:\r\n\r\n```\r\n## Python 2 provider (optional)\r\n  - INFO: Using: g:python_host_prog = \"/usr/local/bin/python\"\r\n  - INFO: Executable: /usr/bin/python\r\n  - ERROR: Command error (job=4): '/usr/bin/python' '-c' 'import neovim; print(neovim.__file__)'\r\n    Output: Traceback (most recent call last):  File \"<string>\", line 1, in <module>ImportError: No module named neovim\r\n  - INFO: Python2 version: 2.7.10\r\n  - INFO: python-neovim version: unable to load neovim Python module\r\n  - ERROR: Neovim Python client is not installed.\r\n    Error: unable to load neovim Python module\r\n    - ADVICE:\r\n      - Run in shell: pip2 install neovim\r\n\r\n## Python 3 provider (optional)\r\n  - INFO: Disabled. g:loaded_python3_provider=1\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346591923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346593220", "body": "I'm curious how this performs compared to Vim syntax highlighting? Did you consider creating an at-startup-time conversion from a textmate theme to a Vim highlighting scheme as opposed to the more dynamic version?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346593220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346605505", "body": "Cool! I'm sure Oni will end up with a great pair completion either way. I can see how typing prediction would definitely benefit from it as well. If written in JS, you'll probably get a lot more people to help add the polish. Looking forward to using it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346605505/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346706954", "body": "> This is good to hear - I wasn't sure if it is too distracting (and it certainly can be intrusive if it is common up too aggressively, like this case).\r\n\r\nI did find that it can become distracting after some extended use. The most important thing to me is being able to never touch the mouse, and so having an explicit keyboard shortcut to trigger the info dialog would probably be a better long term setting for me. However, for the \"out of the box\" configuration, it might make sense to keep the cursor tracked auto-popup just so that it shows off Oni's features. It wouldn't be as easily discoverable with a keyboard shortcut - though that keyboard driven setting could be encouraged for serious users.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346706954/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346707054", "body": "I seem to recall that the background-color matching trick might require a restart when changing color schemes. Is it dynamically adjustable once the app starts up? Maybe that's why VSCode seems to require restarts for changing themes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346707054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346707565", "body": "[Here's a blog post](https://www.christianengvall.se/electron-white-screen-app-startup/) detailing how setting the background color does fix the white flash on startup. The downside is that you have to know ahead of time what the colorscheme will be (I think).\r\n\r\nOne trick could be, whenever switching colorschemes, have Oni record the color of Vim's background into `~/.oni/.recentSettings` or something, and consult it upon startup. The last used background color when shutting down is likely a 98% accurate indication of what the background color will be upon starting back up.\r\n\r\nHowever, I think this doesn't solve the resizing - which might require a reloading of the entire window. VSCode insiders has definitely solved it though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346707565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352285487", "body": "Cool idea. The same UI elements could be repurposed for other things like tracking project source code TODO/FIXMEs etc. \r\n\r\nI actually think opt out is better. In fact, have to condidered activating vim \u201ceasy mode\u201d by default, with immediate \u201cUpsells\u201d to modal editing? No power vim user would mind adding one line to their Oni config to begin unlocking achievements.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352285487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353483559", "body": "I believe I\u2019ve created an issue for this. Away from keyboard at the moment. Oni encourages use of buffers but I agree it would be nice if this tabs bug was fixed. I\u2019m a heavy tabs user, so it\u2019s currently blocking my use case. I\u2019m not clear what the benefit of being buffer centric is.  The downside of tabs is that it makes it harder to implement docked panels - but Oni implements those itself anyways so I don\u2019t know what the remaining trade offs are.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353483559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/125158995", "body": "This sounds like something isn't picking up `refmt` in your PATH. Could it be the case? How did you install merlin/reason/ocaml?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/125158995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173567929", "body": "You may want to try the newest `npm install -g reason-cli@3.1.0-darwin`\r\n(Faster download, more updated merlin).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/173567929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "justinmk": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1331", "title": "ALT/META key seems to be ignored", "body": "Steps to reproduce:\r\n\r\n    :nnoremap <M-a> :echo \"foo\"<CR>\r\n\r\nPressing ALT-a does not invoke the `<M-a>` mapping.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/271197238", "body": "FWIW, CheckHealth should work in Windows using the neovim HEAD build (now linked from AppVeyor). ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271197238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271317738", "body": "@extr0py If you were previously using @equalsraf's binaries (from https://github.com/neovim/neovim/pull/810) I'd wait ~1 week. I'm working on merging all the remaining Windows patches to master, in an effort to get Windows support up to par. Until then, master is a \"behind\" https://github.com/neovim/neovim/pull/810 in some respects.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271317738/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273784541", "body": "Note that the `'linespace'` option exists for this, and `OptionSet` autocmd could be used by frontends to handle changes to it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273784541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273864103", "body": "Should this be driven by the 'titlestring' option ?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273864103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273882411", "body": "Yes `OptionSet` event can listen to changed options. Note that 'titlestring' holds am expression so the option itself wouldn't change often. But the expression could be eval'd by the front-end via nvim_eval() as needed. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273882411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274289028", "body": "FWIW, after implementing 'inccommand' feature in nvim core, I have the impression it wouldn't be a huge task to use a similar approach to get multi-cursors in nvim core. That might be 6 months away though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/274289028/reactions", "total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276673988", "body": "This is a known limitation of `:terminal`. See `:h terminal-emulator-configuration`, the `{g,b}:terminal_color_*` variables define the 256-color `:terminal` palette, which could be set by oni programmatically, I suppose.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276673988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279125428", "body": "Window dimensions for the current window can be found by `winwidth('%')` and `winheight('%')` (VimL functions).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279125428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279245285", "body": "I think https://github.com/neovim/neovim/pull/5269 is intended to help with this. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279245285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279409880", "body": "I plan to implement a POC myself. The feedback on that will reveal whether I'm crazy.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279409880/reactions", "total_count": 11, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 11}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280013508", "body": "Note that since ~~0.1.7~~ 0.1.6, [nvim provides](https://github.com/neovim/neovim/pull/5535) a `version` dict in the `api_info()` result, it contains various fields that help to dynamically determine compatibility. Also each function description in `api_info()` has a `since` field which indicates the `api_level` where that function first became available.\r\n\r\nThe fields are briefly described at `:h api-metadata`.\r\n\r\n\r\n```\r\n   api_info()['version'] => {\r\n      major: 0,\r\n      minor: 1,\r\n      patch: 6,\r\n      api_level: 1,\r\n      api_compatible: 0,\r\n      api_prerelease: false,\r\n    }\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280013508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280785065", "body": "In my view init.vim should always be loaded, and the user may choose to opt-out of oni's default stuff it they want. That is, `.oni/config.json` should load after init.vim.\r\n\r\nAt least, that's the way we're planning for GUIs to work on the nvim side...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280785065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280792907", "body": "> why would that mean .oni/config.json should be loaded after init.vim? Wouldn't we want init.vim to be loaded last so it has the final say on any values that are defined in both places?\r\n\r\nThe conventional way to provide \"standard plugins\" is to put them on the runtimepath. Then the user may set flags in vimrc (init.vim) to disable any plugins they don't want loaded.\r\n\r\nTypically for mappings, a plugin should skip them by default if the user already defined something.\r\n\r\n```vim\r\nif mapcheck('foo', 'n') ==# ''\r\n   ...\r\nendif\r\n```\r\n\r\nDefault options are more tricky. I guess they should be set before loading init.vim, until there is a better way for plugins to detect whether the user modified them. (It's possible, but awkward, using the `OptionSet` event)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280792907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282569376", "body": "@kopischke the version numbers are semantic. The API level is more correct for comparing API capabilities. API level might not change between Nvim releases. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282569376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283431976", "body": "Vim has the 'confirm' option. Nvim may need to add a new UI event for this. \r\n\r\ncrated an issue: https://github.com/neovim/neovim/issues/6201", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283431976/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283458590", "body": "@keforbes Yeah, instead of a 'confirm' event, we should just externalize the dialog.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283458590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285791832", "body": "It shouldn't have changed. But I definitely recommend using the latest binary, tons of fixes for Windows in 0.2", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285791832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285965778", "body": "I'm surprised the nvim tree is copied to oni's source tree. Any plans to do that at build-time instead? Or instead expect the user to have an existing nvim?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285965778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287638110", "body": "Many users' vimrcs are not prepared for re-sourcing. E.g., if they defined autocmds without an augroup, re-sourcing the file will create duplicate autocmds each time, which will slow down the session more and more each time the vimrc is sourced.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287638110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290079561", "body": "> instance.command(\"exec \" + JSON.stringify(message) + \"\")\r\n\r\nIn this case, that's an improvement because the `\\` slashes look like escape characters to the vim command processor, since the message is dumped as a raw string to `:exec`...\r\n\r\nBut the filename arg should also be wrapped in vim's `fnameescape()`...\r\n\r\nThis seems harder than it should be :<", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290079561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290136906", "body": "I would instead suggest using `\"let &rtp.='...'\"` as [neovim-qt does](https://github.com/equalsraf/neovim-qt/issues/237#issuecomment-279879407). The single-quotes make the string literal.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290136906/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290139552", "body": "But this only appending stuff to the runtime path, right. Notice the `.=`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290139552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291160265", "body": "FWIW, vim-plug won't require python once we fix the remaining Windows bug in nvim core. That will be done this week.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291160265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293044689", "body": "@keforbes https://github.com/neovim/neovim/pull/6359 (if you can try that PR, that's also helpful. But it's only waiting on cleanup and merge, which has been \"my next priority\" for a week now...)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293044689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295727831", "body": "I wonder what mechanism could be added in core nvim to help with this. E.g. for the examples of an embedded web browser, or a graphical file tree, one can ask: what do users want carried over to those components?\r\n\r\nThe most basic thing that stands out is key mappings. As I user I would want to be able to ctrl-w to the graphical window like any other text window,  and have buffer-local mappings there.\r\n\r\nThese graphical windows could be backed by a special buffer type (or even just a blank, normal buffer with a name like `[External]` and `filetype=extfoo`).  Then users can set up mappings using the typical approach, on a FileType event: `au FileType extfoo nnoremap <buffer> a b`. The external UI would probably need to ignore the cursor position reported by nvim in these buffers, but the external component still needs to know the user pressed something (`j`) that means \"go down 1 unit\". \r\n\r\nWhat's the minimum needed from core nvim to support this somewhat elegantly for external UIs? Perhaps a new mode (and/or new \"mapping namespace\", e.g. `:enoremap`) is justified?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295727831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296367577", "body": "> don't know if VimL would be faster than executing remote neovim calls from JS. Perhaps if you could batch them all and send them all from JS, \r\n\r\nnvim_call_atomic exists for batching all RPC calls.\r\n\r\n> Are calls to NeoVim fast? Do they themselves have to go through VimL, or do they end up going right to native code\r\n\r\nRPC is quite fast, actualvim proves this. VimL execution isn't involved unless you send VimL to be evaluated. But we currently don't have a lot of native functionality exposed directly as RPC functions.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296367577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297410992", "body": "In nvim, externalization of tabline was just merged. Looking for feedback there, which will inform the approach for statusline, cmdline and wildmenu. \r\n\r\nThere are PRs open for those already, and work will accelerate now that we have the API contract clarified (`:help api-contract`). But we do need feedback from UI authors.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297410992/reactions", "total_count": 5, "+1": 3, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326799381", "body": "Instead of defining a dummy event(s), one can check `nvim_eval(\"exists('#FocusGained')\")`. And this can be done in `nvim_call_atomic()` to avoid a (unlikely) race-condition.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326799381/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344558226", "body": "Vimr uses nvim as an in-process lib.\r\nhttps://github.com/qvacua/vimr\r\n\r\nBut this doesn't sound like RPC is the problem :\r\n\r\n> we spend a significant amount of time idling until we get a response from Neovim, \r\n\r\nAnd the approach proposed by @bryphe   here is very interesting. Really interested to see how it works out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344558226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/95720404", "body": "nvim_call_function could be used instead of nvim_command", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/95720404/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/99696164", "body": "Instead of using command() and then concatenating here, one could use `nvim_feedkeys()` (which takes same options as VimL `feedkeys()`). Assuming that's mapped to `instance.feedkeys()`,\r\n\r\n    instance.feedkeys(message, \"n\", false)\r\n\r\nNote: in nvim master (not 0.1.7), API functions are documented in help, e.g. `:h nvim_feedkeys`.\r\n\r\nhttps://neovim.io/doc/user/api-funcs.html", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/99696164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/99710001", "body": "Hmm, this works from the nvim command line:\r\n\r\n    :call nvim_feedkeys(\"\\<c-r>\", 'n', v:false)\r\n\r\nBut of course that \"escaped\" keycode `\"\\<c-r>\"` is a special thing that won't work outside of vim-land. Using the API from something like python or oni, one would need to send the raw ^R byte (however one's client represents \"octal 22\"):\r\n\r\n    :call nvim_feedkeys(\"\\022\", 'n', v:false)\r\n\r\nYuck, that's actually worse than sending the literal string `\"norm! \"\\<c-r>\"` to nvim_command().\r\n\r\n`nvim_input()` is much more convenient in this regard: `nvim_input('<c-r>')` does what you might expect. But it is raw user input, so one can't disable mappings. \r\n\r\nI should have realized this when I suggested feedkeys(), my mistake.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/99710001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103104834", "body": "Only the API level should be checked (that's the entire purpose of having an API level). The nvim major/minor versions are irrelevant regarding API compatibility.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103104834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103104882", "body": "Also these fields didn't exist in api_info result before 0.1.6.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103104882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103109891", "body": "The fields won't exist at all in older versions", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103109891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Bradley-Morris": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1306", "title": "capslock key replacement being ignore", "body": "I'm using autohotkeys on windows 10 to replace the capslock key press with escape.\r\n\r\nIt works for every program I've used up till now except Oni Vim , when Oni Vim is running it ignores the autohotkeys remapping and capslock works like it normally does.\r\n\r\nAny idea why the remap could be ignored?(I've tested it with NeoVim and the mapping works as expected).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "khalidchawtany": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1292", "title": "Three dots appear on tab through wildmenu", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\n\r\nWhen I tab through the wildmenu results (using `tab`, `ctrl+n`, or `ctrl+p`) I get three dots at the bottom of the screen for each key press.\r\n\r\nThis happens even If the wildmenu result is empty.\r\n\r\n![screen shot 2018-01-14 at 10 41 34 pm](https://user-images.githubusercontent.com/1681606/34919970-3bc54ae6-f97c-11e7-86ca-c2f0d6ee79d3.png)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1235", "title": "Blank black screen", "body": "<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\nI am on OS X 10.13.2, running latest head Neovim, and build Oni from master. When I launch Oni I get a blank black screen.\r\n  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuglee": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1260", "title": "Colorscheme solarized8_light has dark background after startup", "body": "The colorscheme solarized8_light has dark background after startup.\r\nThe default config is used except for ``` \"ui.colorscheme\": \"solarized8_light\"```\r\n\r\nOS: macOS 10.13.2\r\nOni version: 0.2.20\r\n\r\n![image](https://user-images.githubusercontent.com/1316211/34737727-3feedc8a-f577-11e7-922c-da08cd117176.gif)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1138", "title": "editor.errors.slideOnFocus not working", "body": "The editor.errors.slideOnFocus setting not working even when set manually.\r\n\r\nThe error message should show up the following scenario:\r\n![nevtelen](https://user-images.githubusercontent.com/1316211/34064396-e763b590-e1f8-11e7-9878-805e93150c62.png)\r\n\r\n\r\nOni version: 0.2.19\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/340307708", "body": "Thanks, I've had to install Command Line Tools, Xcode wasn't enough.\r\n\r\nBelow is a basic howto of the process. I've only copied the header files to minimize conflicts because the latest macOS uses llvm 4 and having multiple versions installed is not advised. Hopefully clangd will be included in the next version of macOS.\r\n\r\n# How to install clangd on macOS\r\n\r\n- Install the Command Line Tools with the following command: ```xcode-select --install```\r\n- Download or build llvm.\r\n- Copy ```bin/clangd``` to ```/usr/local/bin/```\r\n- Copy ```lib/clang/\u00abclang version\u00bb/include``` to ```/usr/local/lib/clang/\u00abclang version\u00bb/```\r\n- Copy ```include/c++/v1``` to ```/usr/include/c++/```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340307708/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352207150", "body": "From the wiki:\r\n- editor.errors.slideOnFocus (default: true)\r\nEnables / disables showing details when cursor is over an error.\r\n\r\nIt supposed to be on by default. But even if I set it the error details are not shown.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352207150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rococode": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1252", "title": "[UI] Bold fonts slightly cut off", "body": "![](https://i.imgur.com/hIKpdGG.png)\r\n\r\nIt seems that bold characters get slightly cut off: in the image above you can see the `m` at the end of `from` looks like it's missing a lil bit at the end.\r\n\r\n![](https://i.imgur.com/fDcuW8E.png)\r\n\r\nThis is the same font and color style in an IDE.\r\n\r\nStrangely enough, when the letter is highlighted by the cursor in oni there's no problem :\r\n![](https://i.imgur.com/166qdxX.png)\r\n  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1250", "title": "[UI] Brief flicker on using Alt to close menu bar", "body": "This is just a tiny thing (and possibly purely caused by Electron?)\r\n\r\nWhen menu bar is hidden (so that it can be opened using Alt), closing it will cause a little flicker at the bottom of the screen, apparently the same height as the menu bar.\r\n\r\nWould be nice to have it fixed!\r\n\r\nDemo of the bug: https://gfycat.com/AnchoredWideBarnacle\r\n  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Dcryfm": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1220", "title": "Please provide an option to set tabSize", "body": "I want to set `tabSize` directly without having to disable `oni.useDefaultConfig`.\r\nthanks.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1212", "title": "About modifying the current file name", "body": "When I use `:file newName` to modify the current file name, The file name on the tabs does not immediately display the new filename. I have to switch to other files first and then switch back and get into effect.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1162", "title": "[b and ]b does not work when I disabled oni.useDefaultConfig", "body": "I want the indentation of two spaces, so I disabled `oni.useDefaultConfig`, but `[b` and `]b` does not work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TalAmuyal": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1200", "title": "AutoPairs masses with macros", "body": "When recording `iconst a =(\\n` as input (using `qq`), I expect `@q` to put `const a (\\n\\t\\n)` but instead I get `const a ()\\t`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1200/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/697", "title": "[Suggestion] Add .editorconfig's plug-in by default", "body": "Hi,\r\n\r\nI see that Oni already has an `.editorconfig` (http://editorconfig.org/) file (which I really appreciate).\r\n\r\nI would like to suggest adding `.editorconfig` as one of Onis' default plug-ins.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/697/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/f5d92dddf36190876a8a2719cc77684038af0e4d", "message": "Use official PluginManager API (#1550)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b05d2ed92a07ace477bf1627137954196854a204", "message": "Bugfix: Reduce log noise (#1538)\n\n* Ignore unhandled Neovim events\r\n\r\n* Prettify oni-plugin-markdown-preview's package.json"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fec88f118699ad3ed25a5ff734fec081f067b385", "message": "Add tests for Markdown preview plugin (#1415)\n\n* Add tests for Markdown preview plugin\r\n\r\n* Implement plugin API\r\n\r\n* Implement mock API for oni-plugin-markdown-preview\r\n\r\n* Implement actual tests\r\n\r\n* Add custom conf that enables the markdown-preview plugin for testing\r\n\r\n* Code Review changes"}, {"url": "https://api.github.com/repos/onivim/oni/commits/59bf2aaf2ffc48acebb1e63a802773df5e17494a", "message": "Feature: Improve initial markdown preview impl (#1181)\n\n* Move Markdown-preview plugin to 'extensions' folder\r\n\r\n* [Markdown preview] Theme links\r\n\r\n* [Markdown preview] Reduce stuttering\r\n\r\n* [Markdown preview] Fix styling and processing of code-blocks\r\n\r\n* Fix CI issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1c54d039ede8c2690a701df4fc1e466a8d0a8cb4", "message": "Markdown preview (#922)\n\n* Start bringing over bounds detection\r\n\r\n* Add detection for window bound cases\r\n\r\n* Update window navigation bindings\r\n\r\n* Add window-manager definition\r\n\r\n* Initial prototype of WindowManager API\r\n\r\n* Add marked\r\n\r\n* Initial markdown preview plugin\r\n\r\n* Add typescript file\r\n\r\n* Remove index.js from lib\r\n\r\n* Get markdown preview renderer hooked up\r\n\r\n* Get marked rendering\r\n\r\n* Add buffer entered, buffer changed events to Editor interface\r\n\r\n* Start porting over interface to editor\r\n\r\n* Plumb through onBufferEntered, onBufferChanged events\r\n\r\n* Add additional editor events\r\n\r\n* Add tsconfig\r\n\r\n* Revert travis branch change, as it prevents artifacts\r\n\r\n* Make plugin error message visible\r\n\r\n* Remove test code\r\n\r\n* Fix WindowManager API\r\n\r\n* Add building of Markdown-preview plugin\r\n\r\n* Fix .gitignore exclusion of libs\r\n\r\n* A step towards implementation\r\n\r\n* Open on startup a split with a generated Markdown\r\n\r\n* Hook up on-buffer-enter trigger\r\n\r\n* Some tweaks to get markdown preview showing\r\n\r\n* Cleanup\r\n\r\n* Hookup onBufferChanged event and set pane open, close and toggle commands\r\n\r\n* Make Markdown pane scrollable\r\n\r\n* Fix mis-meging\r\n\r\n* Test onBufferScrolledEvent\r\n\r\n* Remove unused 'require'\r\n\r\n* Add initial implementation for auto-scrolling\r\n\r\n* Use an official version of oni-api in the markdown-preview plugin\r\n\r\n* Sanitize Markdown preview using DOMPurify\r\n\r\n* Set \"onBufferScroll\" event to fire for 'G', 'gg' and searches when appropiate\r\n\r\n* Expose colors in the API\r\n\r\n* Set the Markdown-previews OniApi package version to Onis\r\n\r\n* Fix the Mardkown-preview's background and foreground colors\r\n\r\n* Hide the Markdown-preview plugin behind a false-defaulted experimental.markdownPreview.enabled flag\r\n\r\n* Remove unneeded \"export\"-s\r\n\r\n* Fix build errors\r\n\r\n* Restore missing piece in .travis.yml\r\n\r\n* Undo unintended changes\r\n\r\n* Fixes to unblock 922 pull request\r\n\r\n* Try working around CI build error"}, {"url": "https://api.github.com/repos/onivim/oni/commits/85f3cff6115bbfa42850c90e69044da273a5aa6a", "message": "[WIP] Support `clangd` as an LSP client (#757)\n\n* Support clangd as an LSP client\r\n\r\n* Add missing file from prev commit\r\n\r\n* In .gitignore, ignore only the lib dir that is at the projects root\r\n\r\n* Fix definition of 'stderrAsLog' flag\r\n\r\n* In LSP, support the 'insertText' field for auto-completions\r\n\r\n* Add a README.md to oni-plugin-cpp"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/279990812", "body": "P.S: If the gitter option is acceptable, please note the small `github projects?` link at the bottom.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279990812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280329232", "body": "Yes, my `~/.oni/config.json`:\r\n\r\n```\r\n{\r\n    \"oni.useDefaultConfig\": true,\r\n    \"oni.loadInitVim\": true,\r\n    \"editor.completions.enabled\": true,\r\n    \"editor.fullScreenOnStart\": true\r\n}\r\n```\r\n\r\nIf `oni.useDefaultConfig` is set to `false`, the BG becomes black and some other coloring degrade, but Oni behaives as I expect nvim to.\r\nIf `oni.useDefaultConfig` is set to `true`, Oni behaves as Oni usually does (like the white-space approach described in the previous post), but some of my configurations are still in place (like YCM).\r\n\r\nFrom looking a bit around the code I found that in `browser/src/NeovimInstance.ts` line 367 there is a function called `startNeovim` that starts Neovim and either lets it load files as usual or denies the loading of the configuration using the `-u` flag.\r\n\r\nSo I assume that the configurations that are Oni's default are loaded afterward (using my common sense only, so I might be wrong) and thus take precedence by overriding previous settings.\r\n\r\nIs there a current method of cooperating with it?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280329232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280783425", "body": "Oni's default configurations are also loaded via the command arguments (--cmd set rtp+=...).\r\n\r\nMaybe another option is to move the loading of the user's `init.vim` to `runtimepath` (rtp) and then control the order within it.\r\n\r\nThough I think that a 3rd script has the additional benefit of custom Oni-specific configurations.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280783425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280854446", "body": "In order to avoid the collision, we could make the default configuration configurable.\r\nThat is, segmenting the `oni/vim/default/bundle/oni-vim-defaults/plugin/init.vim` file into chunks that can be enabled or disabled by the user in `config.json`.\r\n\r\nWhat do you think?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280854446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280863510", "body": "I tried your suggestion:\r\nSetting `oni.useDefaultConfig` to `false` doesn't quite do the trick, as that disables the loading of everything under `https://github.com/extr0py/oni/blob/master/vim/default/` (including the implementation of the color-schemes).\r\n\r\nOn the other hand, just removing the content of `https://github.com/extr0py/oni/blob/master/vim/default/bundle/oni-vim-defaults/plugin/init.vim` (except for `colorscheme onedark` and `set completeopt=longest,menu`) does yield the desired result.\r\n\r\nHow about moving the conflicting content (all except `colorscheme onedark` and `set completeopt=longest,menu`) to a different path for the `rtp` and make that disableable?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280863510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282537677", "body": "In the meantime, you can install a plugin for neovim and have it in Oni\nthat way.\nI have youcompleteme, and it works pretty good.\n\nOn Fri, Feb 24, 2017, 20:11 extr0py <notifications@github.com> wrote:\n\n> Once #6 <https://github.com/extr0py/oni/issues/6> is implemented, we'll\n> be able to pick up implementations for C++, C, and python. So it's\n> definitely in the works :)\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/253#issuecomment-282362460>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AE3IjYkIuWQujs3nNzDKulQhD6trR7XQks5rfx1RgaJpZM4MLgNq>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282537677/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282574618", "body": "For me, I just couldn't get YCM to work with Vim.\nIn contrast, with Neovim it worked on the first try.\n\nAs for the language-server -protocol, recently, LLVM/Clang started a new\nsub-project, `clangd`, which seems to match Oni perfectly for C/C++ users.\nYCM is a plugin built on Clang, but clangd is *meant* to be used exactly\nfor that purpose and with a wider audience, as it will not target a\nspecific IDE or editor.\n\nDhruv Paranjape, I've yet to have a full work day of using Oni but so far\nYCM + Oni seems as great as in Neovim.\nI'm trying to configure Oni so it will be a match for my current Neovim\nconfiguration.\n\nWhen I'm there (and probably along the way). I'll update ;)\n\nOn Sun, Feb 26, 2017 at 6:54 PM extr0py <notifications@github.com> wrote:\n\n> The nice thing is that, since Neovim enables the externalpopupmenu UI\n> option, and we pick that up in Oni is that regardless of your completion\n> provider (vanilla omnicomplete, YCM, deoplete, etc) - you should get that\n> same look and feel. There are some bugs around this but that is the goal.\n>\n> On top of that, Oni will expose some additional rich completion options\n> (like completion signature details, method signature help) that there isn't\n> really a concept for in vanilla Vim or Neovim today. The language server\n> protocol gives us this information, and so Oni can act as a bridge this\n> into the Vim world.\n>\n> For YCM, I had a heck of a time getting it running on Windows. It was\n> pretty brutal... Lots of issues with Python versions, conflicts with some\n> ms*.dlls, etc... For Oni, I want that to be a bit easier :)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/253#issuecomment-282569512>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AE3IjRh5E0A4xN6hJZJc6_DruBYt7eYuks5rga5EgaJpZM4MLgNq>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282574618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282575191", "body": "Yes, as far as I can see they do.\n\nOn Sat, Feb 25, 2017 at 5:05 AM extr0py <notifications@github.com> wrote:\n\n> If you grab that PR, and set oni.useDefaultPlugins to false + set colorscheme\n> onedark in your init.vim, do things work as expected?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/pull/227#issuecomment-282455260>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AE3IjV3w6rjxEKwz2lNkh19FgzBkSvYmks5rf5qNgaJpZM4MEj6U>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282575191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282575206", "body": "Works for me :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282575206/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282595780", "body": "This far, I've tried `set termguicolors` but didn't see any change.\r\nWould be nice if you could dig up the missing piece.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282595780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285156848", "body": "Just tried replacing the color-scheme (sadly, left it to be the last test).\r\nSeems it works, though it has some small color differences...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285156848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325207200", "body": "Same behavior for me.\r\nI think it should stay `\u2588` in visual mode as well as `|` is very confusing...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325207200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328296280", "body": "Hi, long time no see!\r\n\r\n**clang 5** has been officially released, and **clangd** is available.\r\n\r\nSince I want it supported by Oni, I've taken the initiative and started implementing its' support (using oni-plugin-python as an example).\r\n\r\nQuestions:\r\n\r\n1. Is anybody currently working on this? (if so, let's join forces!)\r\n2. Are there any tips for implementing a new LSP client?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/328296280/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334272249", "body": "Thanks, that one bothered me a lot :P", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334272249/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334745060", "body": "Re-based on master, now can't build Oni :(\r\nhttps://github.com/bryphe/oni/issues/765", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334745060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334837945", "body": "It helped, but now `npm run build` yields:\r\n\r\n```\r\nError happened when running command /path/to/project/oni/node_modules/bs-platform/bin/bsb.exe with args [ '-make-world' ]\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334837945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334855704", "body": "Tried removing the `node_modules` folder, now `npm install` generates:\r\n\r\n```\r\nnpm ERR! Linux 4.10.0-35-generic\r\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\"\r\nnpm ERR! node v7.10.1\r\nnpm ERR! npm  v4.2.0\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\n\r\nnpm ERR! bs-platform@1.8.0 postinstall: `node scripts/install.js`\r\nnpm ERR! Exit status 1\r\nnpm ERR! \r\nnpm ERR! Failed at the bs-platform@1.8.0 postinstall script 'node scripts/install.js'.\r\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\r\nnpm ERR! If you do, this is most likely a problem with the bs-platform package,\r\nnpm ERR! not with npm itself.\r\nnpm ERR! Tell the author that this fails on your system:\r\nnpm ERR!     node scripts/install.js\r\nnpm ERR! You can get information on how to open an issue for this project with:\r\nnpm ERR!     npm bugs bs-platform\r\nnpm ERR! Or if that isn't available, you can get their info via:\r\nnpm ERR!     npm owner ls bs-platform\r\nnpm ERR! There is likely additional logging output above.\r\n\r\nnpm ERR! Please include the following file with any support request:\r\n```\r\n\r\n:(", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334855704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334876450", "body": "Well, tried `rm -rf node_modules && npm install --loglevel verbose && npm run start` a few times and now it works...\r\n\r\nDoesn't seems to be a good thing though...\r\n\r\nWill try a few more things and report back.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334876450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334917918", "body": "Since #765 is not always in the way, I could resume :D \r\n\r\nThe flag now works as expected, thanks!\r\n\r\nRegarding the completion issue, I took a deeper look at it and the issue is on Oni's side.\r\n\r\nThe protocol states that `label` should be used unless `insertText` is present.\r\n\r\nThe first entry in the response that `clangd` sends is: `{\"label\":\"namespace name = namespace\",\"sortText\":\"00040namespace\",\"filterText\":\"namespace\",\"insertText\":\"namespace\"}`\r\n\r\nSo I made a few changes and now it works.\r\n\r\n**Please review the changes**", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334917918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335615546", "body": "@bryphe, it's not perfect but I believe that #757 addressed this issue.\r\nShould it be closed now?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335615546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337467474", "body": "Looks great!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337467474/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 3, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337734819", "body": "Thanks!\r\nLooks neat.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337734819/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339878763", "body": "Sorry for the late reply.\r\n\r\nI tried your snippet, it seems to work well for me.\r\nI'm using a version of `clangd` I compiled from source though, so a newer version of `clangd` might help.\r\n\r\nNotes:\r\n1. Tried on Ubuntu.\r\n2. Might be a problem with system configs. (`'std::__1::ostream' (aka 'int')` looks really suspicious).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339878763/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340295397", "body": "Just my thought:\r\nI too experienced the case of complaints of \"small text\" when showing code to co-workers.\r\nHaving a way of instantly scaling it would be great for this scenario.\r\nHowever, I personally prefer it to be a temporary thing only.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340295397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342497750", "body": "@bryphe \r\n> and could be extracted out to a separate project / npm package\r\n\r\nIf there is no existing project for a Markdown LSP server, I implore you to make it a separate project so:\r\n\r\n1. The non-Oni community could benefit your work.\r\n2. that the LSP server will have a wider audience for incoming feedback/PRs.\r\n\r\nAlso (and this is completely unrelated to the above), I would like to suggest that this will be implemented in a different language (like Python, Go, Rust or Kotlin) for the following reasons:\r\n\r\n- Completely subjective but true honesty: I find it hard to use (and thus contribute to) JS/TS projects\r\n- Wider target audience (I think that running Python or Go applications is much easier for most users on most platforms)\r\n- Performance (AFAIK, Go should yield superior performance over JS/TS, see https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=go&lang2=node)\r\n\r\nPlease forgive me if it seems rude, I have only good intentions and am greatly inspired by your work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342497750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342521177", "body": "I would like to give this a try.\r\n\r\n@Bretley, did you continue working on it?\r\nIf you are interested we can co-develop this feature.\r\n\r\n@bryphe \r\nBy `What is the entry point?` do you mean `What is the trigger for opening the preview section`?\r\n\r\nI would like to have (and thus propose to implement):\r\n\r\n- Live rendering to HTML + CSS (using an external project).\r\n- Markdown-flavor selection.\r\n- Configurations.\r\n    - Font.\r\n    - Text-size.\r\n    - Default Markdown-flavor\r\n- Automatic coordination between preview-pane and source-buffer.\r\n- Read-only & no Vimability (simpler without, and can be added later on).\r\n- Auto-opening/closing the preview-pane (pseudo-code):\r\n    ```\r\n    function markdownPreviewTrigger() {\r\n        if (fileTypeIsMarkdown && userConfig.allowMarkdownPreview) {\r\n            openMarkdownPreview()\r\n        }\r\n    }\r\n\r\n    OnFileOpen.register(markdownPreviewTrigger)\r\n    ```\r\n- Toggling key-binding option for opening/closing the preview-pane.\r\n\r\nReferences to consult with before implementing:\r\n- https://github.com/extr0py/vim-electrify-markdown-preview\r\n- https://github.com/chjj/marked\r\n- https://github.com/onivim/oni/pull/124\r\n- https://github.com/onivim/oni/pull/637\r\n- https://github.com/onivim/oni/issues/362\r\n- https://github.com/onivim/oni/pull/622\r\n\r\n@bryphe, what do you think?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342521177/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343162400", "body": "I took a look on Yode's into video and got really excited - It looks AWESOME!\r\nIt's at the top of my Oni wish list!\r\n\r\nI hope to have a chance helping with it (right after #49).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343162400/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343165539", "body": "I just tried 0.2.16 on Ubuntu 17.10 and it works for me.\r\nCan you describe what actions you've taken? (I installed using `sudo dpkg -i Oni-0.2.16-amd64-linux.deb`)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343165539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344206787", "body": "Looks great! :+1: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344206787/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345106888", "body": "Got stuck on updating the preview component.\r\n\r\nWhen a Markdown file is opened, a split opens and tries to update the component's state with the loaded file's content.\r\nAt that stage, the following error is logged:\r\n```\r\nsetState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.\r\n\r\nPlease check the code for the MarkdownPreviewEditor component.\r\n```\r\n\r\nI followed a few tutorials and read some docs, but to no avail.\r\nImplementing:\r\n```\r\n    componentDidMount() {\r\n        console.warn(\"Mounted\")\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.warn(\"Unmounted\")\r\n    }\r\n```\r\n\r\nOnly confirmed that something is wrong.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345106888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345225788", "body": "Now the following can be set in the configuration file:\r\n```\r\n    oni.input.bind(\"<f6>\", \"markdown.openPreview\")\r\n    oni.input.bind(\"<f7>\", \"markdown.closePreview\")\r\n    oni.input.bind(\"<f8>\", \"markdown.togglePreview\")\r\n```\r\n\r\nNext up:\r\n- Fix the styling\r\n- Implement automatic coordination between preview-pane and source-buffer", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345225788/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345228238", "body": "Made a [project ](https://github.com/TalAmuyal/oni/projects/1) on my fork, so the progress can be tracked as individual sub-tasks.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345228238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345827706", "body": "Tried to implement auto scrolling, but no success so far :(\r\nWhat I did was setting `overflow-y: scroll` to `<MarkdownPreview />`-s \"container\" `div` and setting the div's `scrollTop` property.\r\nAfter setting a value to it, it just remains at 0...\r\n\r\nAny tips?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345827706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346492706", "body": "Tried your suggestions and once again they have worked like magic.\r\nScrolling is now possible with the mouse wheel, as well as the auto-scrolling I've implemented.\r\n\r\nUnfortunately, the auto-scrolling isn't really usable for since I calculate the ratio of the current cursor's line in proportion to the total lines count.\r\nThis is bad since it is both jarring and otherwise uncomfortable.\r\n\r\nA bit more suitable solution should be using the top-of-screen's line instead of the cursor's line, though it doesn't solve the issue created from the fact that on the rendered pane, the lines' height is not constant.\r\n\r\nI think of implementing a logic that identifies the top-most rendered element that is in the current visible part of the buffer and use that instead.\r\nAnother possible solution could be implanting an anchor in the input to `marked` and then scroll to it using `scrollToView()`.\r\n\r\nIn any case, a `bufferVisibleSectionChanged` event is required.\r\n\r\nWill report back again when I have more progress with that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346492706/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348818424", "body": "Worked some on the auto-scrolling.\r\nI think it works pretty good, though there might be some corner cases which will require special attention.\r\nFor instance, the auto scrolling implementation breaks the table rendering (will fix soon).\r\n\r\nAside from that, I think that `gg` and `G` doesn't fire up the scrolling event.\r\n@bryphe, do you have an idea?\r\n\r\nAlso, waiting on https://github.com/onivim/oni-api/pull/4.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348818424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349395614", "body": "As far as I know, the latest `clangd` should be able to read your `compile_commands.json` (can be generated by `CMake`).\r\nIDK of other methods of feeding `clangd` with relevant arguments, but on the other hand, I'm not on the mailing list so maybe there is a way.\r\n\r\nOn the `Oni` side, I think there is still no such mechanism (@bryphe surly knows for sure).\r\nAlso, I believe that a PR that implements that will be accepted swiftly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349395614/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350194216", "body": "Thanks for the tip!\r\nAn interesting read - [embedded](https://github.com/onivim/oni/pull/922/commits/612887dd308cc6be036d30793a969661087ae997) `dompurify` into the previewer.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350194216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350478459", "body": "@bryphe another option is to have a class that holds the index with getters for 0-based and 1-based:\r\n\r\n```Python\r\nclass Index(object):\r\n  def __init__(self, zeroBased):\r\n    self.zeroBased = zeroBased\r\n\r\n  def getZeroBased(self):\r\n    return self.zeroBased\r\n\r\n  def getOneBased(self):\r\n    return self.zeroBased + 1\r\n\r\n  @staticmethod\r\n  def fromZeroBased(self, zeroBased):\r\n    return Index(zeroBased)\r\n\r\n  @staticmethod\r\n  def fromOneBased(self, oneBased):\r\n    return Index(oneBased - 1)\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350478459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351850439", "body": "At last, I succeeded in syncing the colors.\r\nMy next and last step (if it is enough for this PR) is to add a enable-disable flag.\r\n\r\nI think of something like `experimental.markdownPreview.enabled` which defaults to `false`.\r\n\r\n@bryphe, do you think it should be experimental for now? and should it defaults to false? (BTW, waiting for the API PR)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351850439/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351977317", "body": "I'm done, but unfortunately the PR [fails in CI](https://ci.appveyor.com/project/bryphe/oni/build/1.0.927/job/br9ng4tfydguyesj#L341) on `npm run dist:win` (as well as other dists).\r\nAny idea why or how it can be fixed?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351977317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352206615", "body": "Doesn't seem to solve it :(", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352206615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216105", "body": "Now there is a different error >< https://travis-ci.org/onivim/oni/jobs/317490353#L1019", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353050982", "body": "Well, I tried a few more things, but no complete success.\r\nIt fails a bit further down the road (times-out on every `ci tests * ci test` test).\r\nI don't think the issues originate from this PR.\r\n\r\nIf you don't mind, please do merge this PR and let's fix any ramifications independently.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353050982/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353414507", "body": "@bryphe,\r\n\r\nOn Linux Travis approves, but [on Mac it yields a timeout](https://travis-ci.org/onivim/oni/jobs/319731938#L1584).\r\nI guess it either happens on `master` or is just inconsistent in general.\r\n\r\nAside from that, on Windows, it fails to install. I want to think that the reason is that my changes are non-Windows compatible , but I just can't imagine the relation between [the change](https://github.com/onivim/oni/pull/1172/files#diff-b59bd66e53ff1d95df53b911a567b60dR9) and [the error](https://ci.appveyor.com/project/bryphe/oni/build/1.0.1063/job/qleihau7n9lxad9u).\r\n\r\nBTW, I don't know if it's a bug in `npm` or just a \"feature\" - it seems that if a dependency is local (`file:`-prefixed) then its dependencies are not installed.\r\nThat is the reason for [the change](https://github.com/onivim/oni/pull/1172/files#diff-b59bd66e53ff1d95df53b911a567b60dR9).\r\nAny idea of a better solution?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353414507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353484523", "body": "Gotcha, making an alternative PR.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353484523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353568926", "body": "Added to my list of followups.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353568926/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678678", "body": "Replaced by https://github.com/onivim/oni/pull/1181.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678678/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678741", "body": "Should be fixed by https://github.com/onivim/oni/pull/1181 (please verify).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678741/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678759", "body": "Should be fixed by https://github.com/onivim/oni/pull/1181 (please verify).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678759/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678787", "body": "Should be fixed by https://github.com/onivim/oni/pull/1181 (please verify).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678787/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678816", "body": "Should be fixed by https://github.com/onivim/oni/pull/1181 (please verify).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353678816/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160280001", "body": "I think it should work/scale/evolve the same as the `activate` mechanism does.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160280001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160280182", "body": "It is needed only for `Oni`-s mock, as it doesn't the the `performance` module (the one that is used on the non-mock version).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/160280182/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165752703", "body": "As you can see in the PR's diff, there is nothing special - I just assumed it will work.\r\nOn the other hand, I didn't really tested it since there in no implementation for `getPlugin` & `getStatus` in Oni yet.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/165752703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166869153", "body": "Oops...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166869153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "meijieru": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1199", "title": "Wired behavior when use fzf", "body": "When use `fzf.vim`, it should exist the window when I use `Esc`, which works within terminal neovim, but not oni. The window does not closed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1197", "title": "Better integration with theme gruvbox", "body": "Currently when work with gruvbox light, most of them are really well, except the tab. Anyway to improve it?\r\n\r\n![image](https://user-images.githubusercontent.com/9511136/34439650-5c913cc4-ecea-11e7-85f2-db57d1d5e71e.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1197/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1194", "title": "Ctrl-^ not work", "body": "{num}<Ctrl-^> should switch to the {num} buffer, but it does not work in oni", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Bretley": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1174", "title": "Default neovim tabs behaving weirdly", "body": "I'm not entirely sure what's wrong here but doing :tabnew then :tabprev hides the newly created tab... I'm going to try and hunt down some init.vim fixes", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/776", "title": "Generic Fuzzy Finder/Quickopen Menu ", "body": "Hi, I think with a little bit of tweaking the QuickOpen and Fuzzy Finder could be really powerful as a config tool. \r\n\r\nI'm imagining the user giving us an opening action (i.e some keybinding), a list of things or a way to get this list, and a behavior once an item is selected. If you know what helm is, you'll know that it's every Emacs user's favorite thing that vim can't do.\r\n\r\nI think if this were done, we'd have a solid way to replace wildmenu\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/776/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/610", "title": "Scriptability of Oni", "body": "How scriptable is Oni right now? I know that we have an existing plugin infrastructure, but if I miss the whole \"Just add it to your .vimrc\" mentality for small things", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/545", "title": "Is it possible to individualize vim tabs and splits?", "body": "I feel as though putting each tab in its own container, which then in turn contains multiple splits, could be beneficial for rendering. If we're forced to track where the edits are taking place or where the scrolling is, then we don't have to redraw other splits.\r\n\r\nAlso, one of the things I've always wanted (that seems impossible in vim) are split borders. I've abandoned airline in favor of the builtin colorscheme and Oni's statusline, but this annoys me:\r\n\r\n<img width=\"1680\" alt=\"screen shot 2017-07-20 at 9 45 09 am\" src=\"https://user-images.githubusercontent.com/8421641/28420440-28cb0f30-6d30-11e7-829b-9f09bfb081cc.png\">\r\n\r\n(these are 2 separate splits, but if they were the same language it would be hard to tell where one begins and one ends)\r\n\r\nWe would probably have to make special exception for terminals, which can redraw whenever because they're running backgrounds", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/505", "title": "E-mail Notification, Weather, and Time Statusbar sections", "body": "These don't have to be defaults, but these are something I miss having when I'm in oni that I normally get from my tmux statusline\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/505/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/405", "title": "Can we move away from emulating neovim behavior for scrolling?", "body": "I think the Grid implementation is a bit bad, and I don't mean that from an implementation perspective. The scrolling in oni, in my opinion, isn't worse than neovim. At least for me, it feels about the same. If we could somehow render a *large* (basically render ahead to a certain arbitrary point where it becomes not worth the benefit) portion of the Grid implementation but make it all on an actually scrollable page, we could just send a cursor position back to Neovim instead of sending scroll events. The issue with scroll events is that (especially on OSX) on modern laptops that have fast/inertia scrolling, it's just firing off too many times in a second.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/405/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/508e326616607ad48503fd41320e4182fc6b2d4e", "message": "[WIP] preliminary incremental buffer updates (#539)\n\n* preliminary incremental buffer updates\r\n\r\n* Update NeovimInstance.ts\r\n\r\n* Update init.vim\r\n\r\n* Update init.vim\r\n\r\n* Update NeovimInstance.ts\r\n\r\n* Whitepsace\r\n\r\n* Fix vim load blocking\r\n\r\n* remove last_cursor_line\r\n\r\n* Update lastBufferLines\r\n\r\n* fixed regresson of completion errors"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8d3bc168970f5fc9a2d061e50c82f90ae975fd48", "message": "BREAKING CHANGE: Fix #322 & #281 (mouse fixes, and remove default relativeline setting) (#323)\n\n* Fixed innacurate clicking\r\n\r\n* change default from relative to regular line number\r\n\r\n* change rounding to floor()"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bbcfee6f68f5c51165d9afa347e9c98bdeaaf048", "message": "Fix for 287, added missing commas. (#288)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d17535ff7d66c43443f9be89facb198ce98c1328", "message": "Added check and method for neovim api info (#258)\n\n* Added check and method for neovim api info\r\n\r\n* fixed tslint and logic\r\n\r\n* Added failsafe if neovim < 0.1.6\r\n\r\n* Fixed minor whitespace issue"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b83a467126f42b485252b8c403e2fd80c2008a66", "message": "242 - fix and features (#254)\n\n* Changed opacity and added to state\r\n\r\n* added opacity config options for CursorLine and CursorColumn\r\n\r\n* added some startup logic for cursorline settings"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fecb3bc42159fee312456d0a3a99d9676966c349", "message": "Prevented default on all modifier keys (temporary fix for 216) (#223)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/00cdbcf16538f2075a4f8459e0f38cea6474b4fd", "message": "202 - Leverage Externalized cursorcolumn and cursorline (#219)\n\n* Created CursorLine and CursorColumn Components\r\n\r\n* Added editor.cursorLine and editor.cursorColumn as options for config file\r\n\r\n* Added CursorLine and CursorColumn visibility to store.\r\nAlso created methods to toggle visibility\r\n\r\n* added startup code and logic to handle some visibility issues\r\n\r\n* Removed font vars and Config calls\r\n\r\n* Moved to shared class implementation\r\n\r\n* Removed CurorLine Class\r\n\r\n* Replaced CursorColumn with multiple CursorLine in Root component\r\n\r\n* renamed Cursorline to CursorLine to fix travis error in RootComponent"}, {"url": "https://api.github.com/repos/onivim/oni/commits/43f81cc86d1fca5773715651c6df4a8139b79a0c", "message": "Bugfix: 193 (#211)\n\n* \tmodified:   browser/src/Config.ts\r\n\tmodified:   browser/src/index.tsx\r\n\r\n* removed extra comment\r\n\r\n* fixed tslint issue in Config.ts\r\n\r\n* Generic fix for #193"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0bc052b5f4a31653d32e16301350cddeaaa6540e", "message": "Add option to fullscreen on start (#203)\n\n* \tmodified:   browser/src/Config.ts\r\n\tmodified:   browser/src/index.tsx\r\n\r\n* removed extra comment\r\n\r\n* fixed tslint issue in Config.ts"}, {"url": "https://api.github.com/repos/onivim/oni/commits/df81d5f23ad3d487546bf0ac154ed1397d6790dc", "message": "This worked for me for #196 (Fix for the fix) (#198)\n\n* \tmodified:   browser/src/index.tsx\r\n\r\n* Fixed the Fix, made cut copy and paste work again in  the Electron menu"}, {"url": "https://api.github.com/repos/onivim/oni/commits/87e48ad7404e536a8314d94320b1993d94fdc9da", "message": "\tmodified:   browser/src/index.tsx (#197)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6c9471b578aceb3e7c826a96ce60bc52785702e0", "message": "\tmodified:   browser/src/Input/Mouse.ts"}, {"url": "https://api.github.com/repos/onivim/oni/commits/414ff9042f4bf94ebf0a0b61aa736c773e01077e", "message": "Merge remote-tracking branch 'upstream/master'\n\nUpstream merge"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b6de78222d49544b1cd2e76d3a4fed2157dcbd15", "message": "Automerge issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4a98fd13b84da213b2bde1612ff305d0e1bd7142", "message": "Added event coordinates back into Mouse"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3e7146a1fd1007519e579c90ef12980db6f42aa3", "message": "Put Coordinates back into scroll event\n\tmodified:   browser/src/Input/Mouse.ts"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3490a0f302dc65f6eef9678fd4d6ab66d05c084e", "message": "Added UI closing on commandline mode"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1d05f8522ebc13b73b26e9e22baec2081b782c8a", "message": "Last one i swear (more errors)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/2eb434e94380290e8c54c0a572c3f23f2cb9ec9d", "message": "fixing travis errors"}, {"url": "https://api.github.com/repos/onivim/oni/commits/accf65ff4d07a0b44cf32c7870ca6fb70e1b31dc", "message": "whitespace fix"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e4bf79038f8841a29a2f9f389b18796d4141989e", "message": "internal bugfix"}, {"url": "https://api.github.com/repos/onivim/oni/commits/75d100198b9d92ba93183de039d5161cba4a92c5", "message": "Further Housekeeping/code style"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e7b2bba442458ec8fda9b87119cce3b4353d40a6", "message": "Fixed Mouse.ts"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4622320a7df12d35d523d8ff5b4423edbf352882", "message": "\tmodified:   browser/src/Input/Mouse.ts"}, {"url": "https://api.github.com/repos/onivim/oni/commits/226085aa29615df94c88244e0af51ecd0627a2e9", "message": "Added 256x256 icon, as well as icns version."}, {"url": "https://api.github.com/repos/onivim/oni/commits/3ff2839ee6a5417f106452ed3ff947a0c2916f32", "message": "Updated Icon"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b5f95f2e6cb1a6eb5fc80eeee8b085de5b1e50fb", "message": "Updated Oni_2.ong"}, {"url": "https://api.github.com/repos/onivim/oni/commits/b0b4906be9c7b542dd96001bf789b8111e70d614", "message": "Added Oni logo to README.md"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264723750", "body": "This is just a poopy rough draft that I came up with, I'm by no means a graphic designer, so I won't be offended if anyone thinks it's bad. It's just a concept, someone with more talent than me could maybe work off of it\r\n![oni](https://cloud.githubusercontent.com/assets/8421641/20868511/7733ba90-ba2b-11e6-90f1-c97da9d1a801.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264723750/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264723891", "body": "I'm not a huge TS/JS guy at all, but what would you use besides a switch to handle the keycodes?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264723891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726173", "body": "Yep, I'll probably be using this for as far as development goes, I'm already super impressed with everything you've done so far.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726376", "body": "@extr0py for regular vim-functionality bugs, would you want an issue per or would you rather a large issue/tag that people can post in?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726679", "body": "I'm using solarized dark truecolor, as you suggested (or maybe it was the vimR guys?) to use for gui. Other than that, I don't have any of my own customisations to the color", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264726679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264727977", "body": "@extr0py : \r\n\r\nI've changed in my config.json the lines you suggested to a powerline font, and the airline segments look identical. I've changed it to my other favorite colorscheme, wombat, and it still does not work. Regular solarized looks really weird in gui, truecolor looks fine though.\r\n\r\nEDIT: Doesn't work, thought I was in the wildmenu issue", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264727977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264728089", "body": "The issue went away when I changed to wombat, I'll screw around with some settings and see if I can make it work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264728089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264728771", "body": "I tried Molokai with no tweaks, airline disabled, and it has issues. I can't actually take a good screenshot on mac because the meta key seems like it isn't handled", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264728771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264729545", "body": "Alright, and what size would you want for the app icon? I just need a resolution number.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264729545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264737147", "body": "Haha no problem, I didn't know what size would be appropriate. I'm going to include a 128x128, as well as one in a .icns file so that mac will handle it properly if you decide to add it as the icon of the program.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264737147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265203866", "body": "For keybindings then, would it be feasible to make a keybinding interpreter/generator so that people can choose to live in their configuration environment of choice? if there was a way to convert vim keybindings into the JSON/JS usable form and vice verse, people can live in their configuration environment of choice. For most people, it would probably be the init.vim, at least until oni attracts new users on its own.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265203866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265204460", "body": "Uh, just mean you have to have a neovim executable available on MacOS. What error do you get when you type 'oni' in the shell?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265204460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265211200", "body": "Update: In a similar vein (pertaining to the colorschemes) certain errors ( use ! to force ) don't display or are highlighted improperly in the statusline.  I think for solarized it might just be that the colors end up hiding the text, as molokai and wombat display them in wrong colors", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265211200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265261943", "body": "@extr0py I'm kind of an idiot to JS/TS, but if you could point me to some resources that would help me specifically understand the overview of the events and how they interact with the neovim instance (besides me combing the source) I could probably get some of these easier ones done :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265261943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265302799", "body": "I'm working on OSX here: I can only get the \"scroll\" event to fire when pinch zooming. If I disable it in my system preferences, I can't get the event to fire.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265302799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265305103", "body": "@jordwalke \r\n\r\n> However, if the results are rendered as regular VimScript, it makes the appeal of bidirectional mapping smaller.\r\n\r\nI don't follow.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265305103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265336556", "body": "So I changed the args in guiattach from \r\n(80,40,true)\r\n to\r\n (80,40, {\"rgb\" : true, \"popupmenu_external\" : true})\r\n\r\nas was suggested by the rpc doc you linked. What's weird is that the screen doesn't draw **at all.**\r\n\r\n It still works, (as in connects to neovim) I edited and saved a file with no screen \ud83d\udcaf \r\n\r\nI'm not super familiar with the hierarchy of this repo and am still exploring, but if you have any guidance let me know; I'd like to learn :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265336556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265349513", "body": "I don't know much about the principles of Typescript, i.e. what needs encapsulation and whatnot, so here's my question.\r\n\r\nthe popupmenu needs access to UI for completion and menu access. Do we move these popupmenu signals from \"actions\" to a diffferent type of event? it seems like you put all the other redraw options under actions, so I went with that, but short of bringing UI into Screen.ts there doesn't seem another way to do it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265349513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265436550", "body": "@JakubJecminek the issues are mostly features and or bug fixes,  any of those would be great \r\n:) ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265436550/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265473280", "body": "Whatever works works man,  I just threw that together until ya get a better one :P\n\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265473280/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265507942", "body": "@extr0py: do we want to add a dispatch method to UI? As neovim grows, the level of UI control we have is only going to increase, and more of the on(\"action\") (which I assume you want to maintain since all of the \"action\"s are used for redraw) are going to make calls to UI for popups. If not, just give me a general overview of what you'd think is a good way to implement.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265507942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265583212", "body": "@extr0py \r\n\r\nAfter reading some crash course node/electron/flux/redux materials, I realize now that the last comment made 0 sense in terms of design. I do actually have an important question for you though:\r\n\r\nDo we handle completion completely externally, as in menu interactions will not interact back with vim? I think that it makes sense to allow things from vim to come into the list, but passing c-n back to vim for it to register the selections might get tricky if we ever run into the issue of vim and oni plugins fighting for space on the completions menu.\r\n\r\nI think this is an important plan to come up with before ppopupmenu/completion work gets too in depth", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265583212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265610687", "body": "Just to get started, is the UI going to hijack the right/middle click? It seems like neovim uses them for little to nothing, and most people's terminals already intercept them.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265610687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265635728", "body": "A place to start might be comparing the output of :map to a list of oni keybindings and just looking for conflicts", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265635728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265639655", "body": "I see extr0py is working on a scrolling optimisation branch, which is good. scrolling causes some matrix-effect level artifacting. I guess it's a new \"feature\"", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265639655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265770435", "body": "Are there tools out there that have general case document rendering? Doing it live for markdown might be a bit harder, but having pdf viewers available (I use LaTex for everything),  as well as other types of text that gets converted into some graphic filetype would be extremely useful", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265770435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265834403", "body": "As long as it's  configurable item,  starting with the current image (or none) is honestly fine. Most people will appreciate that it's minimal,  and If they want more they can install a plug-in or choose a different wallpaper. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265834403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265855038", "body": "@extr0py for some reason I removed the coords from the emit, just went and fixed it. Is there anything else you want done it Mouse before a PR comes your way?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265855038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266087768", "body": "@extr0py : As a start, I'm going to implement actual variables for keys globally... where would I define this? in config.ts? Oni.d.ts?\r\n\r\nAny help would be appreciated", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266087768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266164342", "body": "@extr0py : I was just thinking of this suggestion\r\n\r\n1) Generalize functions that do things consistently ( UI.genericNext() instead of UI.nextCompletion() or UI.nextFile etc..). By offloading the logic into some boilerplate functions, the index code gets cleaned up.\r\n\r\n2) Because of 1, we can have general-case keybindings, as well as cleaning up some of the logic in browser/src/index. If we got keybindings 1 to 1 with generic functions, we can avoid nasty unclear code and make people like json config since it will be simple.\r\n\r\nAs for the OniCommand thing, I'll get on that since (unlike TS) I can actually write vimL. Assuming it's efficient to use it, keeping neovim in charge of the things neovim does best is a pretty solid Idea.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266164342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266232330", "body": "It doesn't break the app at all, just a slight tick.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266232330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266240542", "body": "After some more digging, I'm sure it's got to be some sort of incongruency between how neovim would render the fonts normally and how it's sending them to oni. I think this is this way because my terminal is zsh and uses patched fonts, which render fine. However, airline still does not. Honestly though, patched fonts are much much more relevant in the context of people using this as a terminal, since we could probably replace the statusline", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266240542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266245022", "body": "alright, so the question becomes how do we add the state info for neovim to get a hold of?\r\nI made the OniExecute function and replaced the \"keybinding\" in index with one in the init.vim, but as of right now, vim can't know anything about the UI state.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266245022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266498459", "body": "Where exactly do you think the culprit is? I'd be happy to take a poke around", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266498459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266500305", "body": "As per the author's own software package (OS X)  \r\n![screen shot 2016-12-12 at 12 48 04 pm](https://cloud.githubusercontent.com/assets/8421641/21109973/6523728e-c069-11e6-930e-cb9d79a30f89.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266500305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266500849", "body": "To Improve, I think a simple step would be to see if we can optimize the logic in the editor. The last keys to get pressed are the ones that aren't \\<bs\\> \\<esc\\> ... along with some other off key codes.  Ideally, we want the most frequent keys to be at the top of the switch case. I don't know if there's a good way to implement this generally, as JS/TS key codes don't seem to follow any logical mapping.\r\n\r\nI know it's probably not a huge difference, but every tick counts", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266500849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266935871", "body": "Trust me, this is a thing we're working on. By \"we\" I mean @extr0py because I don't know what I'm doing besides a bugfix here and there. \r\n\r\nThanks for bringing this up, any other testing bugs or issues would be welcome!\r\n\r\n-- Bret", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266935871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266936587", "body": "@extr0py:\r\n\r\nIs it safe to assume that there's only going to be one \"list\" up at a time? A.K.A there won't be multiple UI instances that require c-p to navigate simultaneously? If not this is going to be complicated and slow.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266936587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267137032", "body": "@extr0py \ud83d\udc4d \r\n\r\nThat makes my life a bit easier when it comes to the vim <-> oni communication.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267137032/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268378013", "body": "Not exactly what you're looking for, but if we can integrate a pdf viewer that supports auto-reloading, [this](https://github.com/donRaphaco/neotex) seems pretty sweet\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268378013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268870242", "body": "If you read my last comment, that was a lie. It does, however, actually recognize the glyphs, leading me to think that changing the font to a power line one would work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268870242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268870882", "body": "Alright, this is the current state of airline (granted we're hoping for separation of ui elements)  \r\n![screen shot 2016-12-22 at 2 18 44 pm](https://cloud.githubusercontent.com/assets/8421641/21437413/ad79bc42-c851-11e6-8d2f-9cbe7b0eaf41.png)\r\n\r\nYou can see that it at least acknowledges the glyph of the patched font. Changing the font doesn't help, be it guifont in my init.vim or editor.fontfamily in config.json\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268870882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269069072", "body": "You're right, this can be closed. We've got to find a way to conditionally load the most important priority config items first, i.e. load init.vim and default any conflicts to init.vim\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269069072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270067651", "body": "@kybaeus it works!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270067651/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276252994", "body": "Hey @extr0py, I'd be happy to maintain this. If there's something I'm actually good at, it's writing. I'd be happy to fill this up with features and goals :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276252994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277453094", "body": "I've noticed that completions in general are slow,  and as a someone who\ntypes 120+ wpm,  the completions get \"behind\"  both in terms of completion\nitems and actual position of the menu\n\nOn Feb 4, 2017 10:24 AM, \"extr0py\" <notifications@github.com> wrote:\n\n> Definitely, this is not the right behavior! Thanks for tracking. I think\n> we assume when we're in insert mode, if the cursor moves, we should still\n> be displaying the completion... But that is certainly wrong in this case.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/193#issuecomment-277452795>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCcyIT0Tdm5Y9F6dBBsrAFIGlVczmks5rZJhAgaJpZM4L19V2>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277453094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277454137", "body": "I know it's probably hard to do with a massive program,  but do we have a\nway to probe and profile bits of code?\n\nOn Feb 4, 2017 10:36 AM, \"extr0py\" <notifications@github.com> wrote:\n\n> Agree, it's almost not usable in some cases - hopefully can get some time\n> to look at the performance soon. That's the biggest pain point for me in\n> using ONI for my daily editing tasks - the completion just breaks my flow\n> at the moment.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/193#issuecomment-277453532>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCTKPlr6ZQKKQTcof7Sp9Cn_ZZvadks5rZJrqgaJpZM4L19V2>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277454137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277499099", "body": "Well, as per your suggestion, I'm diving in headfirst. Is there an easy way to get an idea for the structure of the project besides combing source? I just want a hierarchy of what's attached to what and how things are subdivided with windows etc.\r\n\r\nI think if we've got individual windows (buffers technically, i suppose) we could split one of those or something else, otherwise this will be a real pain", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277499099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277541469", "body": "@extr0py ,  I think we need to add an \"OnStart\" field in config.json instead of having editor.action and editor.actionOnStart for everything. Just a thought \r\n\r\nif we further follow this, we could actually just let arbitrary JS go in there instead, as long as the action exists in the editor it could be called.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277541469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277563497", "body": "@extr0py not to be dense, but would this be the UI or regular index. To further my density, what exactly is the BrowserWindow in index? I'm assuming that main creates browser window, and then index is somehow called, but I couldn't find a BrowserWindow object in index.tsx. I don't know if putting logic in main is either the right solution or a really dumb idea... :/\r\n\r\nIs there anything that you would personally recommend that would help me get a better feel for the structure of oni?v\r\n\r\nAlright, this is sort of a progress report in a way, but I now realize we can do remote.BrowserWindow.getFocusedWindow().maximize().\r\n\r\nThe issue with this is that it doesn't start the window in maximized mode or fullscreen, it renders (rather slowly) in initial and then after some delay maximizes, which is why I was wondering about putting logic in main so as not to re-render.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277563497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277583971", "body": "A few things. I've fixed this issue by just flat out changing it to exec\r\n\r\nexec \"normal! \\<something>\" is pretty explicity listed in vimdoc as being the right way to use escape sequences with normal!, so we won't have any worries there. also the single slash escape was giving it issues. The other issue I noticed here is that for me (OSX) the menu where all of this stuff works is under Electron. I think there might have to be reworking based on OS, but we can jump off of that bridge when we get to it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277583971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277831510", "body": "Just wrote a fix,  will make a PR in a minute here.\n\n\nOn Feb 6, 2017 4:20 PM, \"keforbes\" <notifications@github.com> wrote:\n\n> This fix broke Cut, Copy, and Paste. I'm guessing it's because those\n> options use \" in their command.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/pull/197#issuecomment-277816941>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCev-ymad0Fjs65QfkRBOJ6jp-7ozks5rZ46MgaJpZM4L3xLB>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277831510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278012033", "body": "@extr0py I don't mean to be destroying your inbox, just looking for input on the last comment. I know I'm asking enough that you might as well do it yourself, but this is a learning process for me too :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278012033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278523603", "body": "@extropy: I fetched upstream and merged in (glad to finally learn how git actually works). In the 'compare' section of the future PR, it doesn't show the diff of  the copy-paste-redo-undo menu, but the commits are still listed.... I'm assuming I have to rebase but I've no clue what or how that works", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278523603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278527960", "body": "@extr0py thanks, and if there's some way you could keep me up to date, I think seeing how this project grows will help me understand how this project actually works. Right now there's like 3 files that handle logic that I understand. Anything GUI related as of right now is still magic to me :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278527960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278532504", "body": "I think this is something that, with some guidance, I would be able to implement. I would be learning from scratch, but if you're interested, helping me learn this would probably make me 3x as useful with contributions.\r\n\r\nAlright, so I'll give you this for feedback\r\n\r\nAs of right now, I'm thinking:\r\n\r\n * Copy cursor boilerplate\r\n * Adjust props \r\n * lower opacity\r\n * change width to current window/buffer size", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278532504/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278990390", "body": "@extr0py : the biggest issue I'm having right now is getting a buffer\r\nspecific width for cursor line. It didn't seem like we have any way of\r\ngetting that unless neovim can actually provide that to us.\r\n\r\nOn Feb 10, 2017 10:15 AM, \"extr0py\" <notifications@github.com> wrote:\r\n\r\n> Awesome, it would be great to have your help. The starting point for\r\n> cursorline sounds great. You probably want to create a copy of\r\n> browser\\src\\UI\\components\\Cursor.tsx.\r\n>\r\n> To understand the CursorRenderer piece, it might be worth reading up on\r\n> React. That part isn't too bad - it's really just rendering a div based on\r\n> a bunch of options (and styling it to be at the right position).\r\n>\r\n> The connect and mapstateToProps piece is more interesting - you might\r\n> want to read up on redux: http://redux.js.org. Basically, we have a State\r\n> object in browser\\src\\UI\\State.ts that contains all the Overlay UI state,\r\n> and that function hooks up our UI state to the cursor state. Pretty much\r\n> all the UI, aside from the actual neovim rendering, is contained here - so\r\n> there is state for things like autoCompletion, quickInfo, popupMenu,\r\n> signatureHelp, etc (and all the cursor stuff of course).\r\n>\r\n> But ya, it should be basically the same as the state we need for the\r\n> cursor. Once you have that, you'll want to add it to\r\n> browser\\src\\UI\\RootComponent.tsx to get it rendering. Sometimes I color\r\n> things bright red and make them take up the whole screen, just so I have\r\n> confidence that it is actually rendering.\r\n>\r\n> For now, we could add another setting, like Oni.editor.cursorLine to\r\n> decide if we render this or not. We still need to have a story to\r\n> synchronize this with the VIM settings, but we can use a separate issue for\r\n> that.\r\n>\r\n> And then, cursorcolumn would be basically the same... just the height\r\n> would need to go to window/buffer height.\r\n>\r\n> Let me know if you have any questions along the way!\r\n>\r\n> \u2014\r\n> You are receiving this because you commented.\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/extr0py/oni/issues/202#issuecomment-278971123>, or mute\r\n> the thread\r\n> <https://github.com/notifications/unsubscribe-auth/AICBCfcKvwtjT0Pk6t_l0l3R6UD3hyEHks5rbH8VgaJpZM4L635G>\r\n> .\r\n>\r\n\r\nEDIT: I got a basic version up and running that just relies on being linked to either CursorX or CursorY for updates, but there will be issues with rendering in the command window as well. I don't know  the best way of getting window dimensions for the cursorline, I know Window.ts has a method\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/278990390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279020264", "body": "Here is what I have right now\r\n\r\n\r\n![cursorline](https://cloud.githubusercontent.com/assets/8421641/22838162/eabf7288-ef91-11e6-8164-a405f4204c89.gif)\r\n\r\nAs you can see, it isn't bounded by window sizes or knowledge of where it is, just follows the cursor.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279020264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279084521", "body": "@HiCodin:\r\n\r\nAdd to your Config.json \r\n\r\neditor.fullScreenOnStart : true\r\n\r\nas an option. See PR #203 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279084521/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279125717", "body": "@justinmk: Thanks for that. As of right now, I found where it is in the source code of Oni, it's just not really accessible by the part of the code that handles cursor/cursorline rendering.\r\n\r\nSeriously though, Thanks to you and tarruda for being active not just in neovim but in the community. I honestly think that your involvement with major guys like shuogo is really driving neovim forward in a way that regular vim is lacking. Keep crushing it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279125717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279155645", "body": "Theoretically  as of now the pop-up menu from neovim will be in the oni\npop-up menu,  but it's quite slow.  We'll look into it :)\n\nOn Feb 11, 2017 10:45 AM, \"xelra\" <notifications@github.com> wrote:\n\n> Would it be possible to have a common ground regarding syntax plugins with\n> deoplete?\n>\n> It would be great if the syntax plugins of deoplete were also to work with\n> Oni. That way the wheel wouldn't have to be reinvented over and over.\n>\n> Maybe even some kind of common framework can come from this?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/206>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCVKSoJQcD4WeWkId5U6dBbR_DTrBks5rbdd2gaJpZM4L-NQ3>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279155645/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279200065", "body": "@extr0py : as of right now, I've been throwing things in RootComponent because that was where the cursor was. I'm assuming that the 'object may be null' error I get is because the window isn't actually up and running in time for cursorline to properly get a hold of it. Where should they go?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279200065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279224855", "body": "Yes,  in mapStateToProps i have\n\nx: state.ActiveWindowDimensions.x\n\nWhich it gives me the potentially null error.  Also, how do we add a cursor\nline to the root component dynamically,  as in the result of a\nconfiguration file\n\nOn Feb 12, 2017 10:11 AM, \"extr0py\" <notifications@github.com> wrote:\n\n> Cool, RootComponent is fine, that's where all the UI elements are null..\n>\n> Regarding the object may be null error - is that when you are trying to\n> access the activeWindowDimensions value?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/202#issuecomment-279224702>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCcmeWldaA55U6GJI6nqpMOJ6dQHIks5rbyEFgaJpZM4L635G>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279224855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279448346", "body": "I tried to rebase to upstream master but there were conflicts,  and when I\nresolved them it said there weren't any changes...  Git is 2 hard 4 me.\n\nOn Feb 13, 2017 11:43 AM, \"keforbes\" <notifications@github.com> wrote:\n\n> Also, since you said you couldn't get the rebase to work, here are the\n> steps I follow to rebase. Hopefully this will work for you next time.\n>\n> When there are changes to extr0py's main repo you'll need to pull them\n> into your fork.\n>\n> git fetch upstream\n>\n> This will download the changes from extr0py's main repo to your disk.\n>\n> Then tell git to apply those changes to your local repo.\n>\n> git rebase upstream/master\n>\n> This will apply extr0py's changes to your local repo on disk.\n>\n> Then tell git to push those changes to your GitHub fork.\n>\n> git push\n>\n> After that, if you login to GitHub it should tell you that your branch is\n> \"even\" with extr0py's branch.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/pull/218#issuecomment-279447763>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCfXyU7laQ4TLP4loWPi7pT0fTx8Bks5rcIgPgaJpZM4L-l9E>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279448346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279599668", "body": "I've made a cleaner version over in #219 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279599668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279601976", "body": "I'm going to weigh in right now and say that CSS is the right answer, mainly because on OSX it's cmd - a which we don't handle but will still cause the same undesired effect. I know nothing about CSS but I'll see if I can throw something together", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279601976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279698580", "body": "@v3ss0n : Have you found anything more for this issue for us to work with?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279698580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279727197", "body": "@extr0py: \r\n\r\nCan I just pass in parameters in Root component, i.e\r\n\r\n```\r\n<... />\r\n<CursorLine(\"line\") />\r\n<CursorLine(\"column\") />\r\n<... />\r\n```\r\n\r\nTypescript expects an identifier on those lines, do they need to be assigned to something first?\r\n\r\nOtherwise I'm not sure how we'd reuse the same class in RootComponent.\r\n\r\nAlso, the references to fonts and Config.getValue() have been removed", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279727197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279862473", "body": "We need to do a similar thing for Super key and prevent default on all the\nbindings then.  They behave the same way but don't convert into ctrl-a.\n\nOn Feb 14, 2017 5:46 PM, \"keforbes\" <notifications@github.com> wrote:\n\n> Wouldn't it be better to prevent Ctrl+A from performing any action at\n> all? The current behavior prevents Ctrl+A from being mapped to anything\n> because Electron will perform the action first. Similarly, Ctrl+R will\n> perform Electron's Reload action rather than NeoVim's Redo command.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/216#issuecomment-279860975>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCZDb4kgP8rSe8me6vub6seAbiOaBks5rci63gaJpZM4L-huh>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279862473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279997647", "body": "I'd be happy with any of the above. As someone who's still learning git and typescript, being able to ask dumb questions without raising issues would help me learn faster and make better contributions.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279997647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280050245", "body": "If you have any other white listed things I can put them in before this is\nmerged in,  just list them\n\nOn Feb 15, 2017 10:53 AM, \"extr0py\" <notifications@github.com> wrote:\n\n> Great, thanks! The only downside that I can see is that I can't use\n> Control+Shift+I to open the dev tools anymore - but it still works from\n> the menubar, right?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/pull/223#issuecomment-280049629>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCYZZdg6GcpXXIkD7zOIa1z9a2AZ7ks5rcx-HgaJpZM4MB3J4>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280050245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280066087", "body": "This is ready to go when you are, enjoy", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280066087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280077444", "body": "@extr0py: Uhm, is there a different way to open it on mac? Which menu bar should it be under? I can't seem to open it with ctrl-shift-I, and that's after removing any of the code I put in originally.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280077444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280319819", "body": "Actually as of right now I can't, and that's after removing all evt.preventDefault(). Is there a specific way I need to be building it?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280319819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280320436", "body": "In your config file for oni, have you set \r\n\r\noni.loadInitVim: true\r\n\r\nIf you haven't, your init.vim is completely skipped over in terms of loading, and there might just be some happy overlap between yours and the default. If you're feeling brave, you can set both that setting and the default setting to true. I'll have to see the order the files are loaded in, as that would set the precedence for neovim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280320436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280652786", "body": "Perhaps this is another issue for another time, but I can't find it\r\n\r\n![screen shot 2017-02-17 at 8 43 16 am](https://cloud.githubusercontent.com/assets/8421641/23067418/39b5f41a-f4ed-11e6-9aa0-9dfde58adc1f.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280652786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280682496", "body": "It's got to be something weird, because after leaving it open for a while and coming back to it, it's there... What I showed you was immediately after startup. I'd say ignore that for now, it might just be me. However, the issue I'm running into with this PR is getting the actual key combined with the modifier state. We might have to abuse key codes or something similar in order to catch key chords involving more than one modifier. Until then, the developer tools (for me at least) does work when invoked from the menu, and I can catch Windows because it binds to <C-I> and shift doesn't really count.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280682496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280894025", "body": "@extr0py \r\n\r\nSorry, is this between neovim and oni or between oni and TS server?\r\n\r\nCould you list a few files to check out?\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280894025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280901965", "body": "Alright, having taken on a bit more of the codebase I'm feeling motivated.\r\n\r\nWhat exactly is the boilerplate like for this? I've gone and made a new plugin and changed package.json and a basic index.js\r\n\r\nWhat do I do to get something to show up? I'm without the console unfortunately, but I can't get a new BrowserWindow or anything, which leads me to think that I'm missing some middleman extras", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280901965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281172140", "body": "@extr0py: \r\n\r\nI've done a bit of preliminary work on this. I've added this to the init.vim\r\n\r\n```\r\nfunction OniNotifyBufferUpdate()\r\n\r\n    if !exists(\"b:last_change_tick\")\r\n        let b:last_change_tick = -1\r\n    endif\r\n\r\n    if !exists(\"b:last_cursor_line\")\r\n        let b:last_cursor_line = 1\r\n    endif\r\n\r\n    if b:changedtick > b:last_change_tick\r\n        let b:last_change_tick = b:changedtick\r\n        let buffer_lines = getline(1,\"$\")\r\n        if b:last_cursor_line < line(\".\")\r\n            let buffer_lines = getline(b:last_cursor_line, line(\".\"))\r\n        elseif b:last_cursor_line > line(\".\")\r\n           let buffer_lines = getline(line(\".\"),b:last_cursor_line)\r\n        elseif b:last_cursor_line == line(\".\")\r\n        \"    let buffer_lines = getline(\".\")\r\n              let buffer_lines = [getline(\".\")]\r\n        endif\r\n\r\n        let context = OniGetContext()\r\n        call OniNotify([\"buffer_update\", context, buffer_lines])\r\n        let b:last_cursor_line = line(\".\")\r\n    endif\r\nendfunction\r\n```\r\n\r\nNow I'm assuming that whatever handles the update logic doesn't account for it just being a string.\r\n\r\nEDIT:\r\n\r\nOk, so I changed it to a single element list, and got much better results than you. This was with just generic typing in a ~400 line file\r\n![screen shot 2017-02-20 at 3 32 24 pm](https://cloud.githubusercontent.com/assets/8421641/23140843/d0cbaec6-f781-11e6-8435-ee2ff6998d15.png)\r\n\r\nHowever there was some sort of freeze, I'm trying to repro before I open a PR\r\n\r\nEDIT 2: I think it was some kind of electron freeze because the devtools were unresponsive. I was typing, clicking, and pasting in a 1000+ line file and fastbuffer stayed below 5%", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281172140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281238366", "body": "@extr0py I've been using this for a little bit now and haven't managed to break anything, but I'll try to get into it and make the appropriate changes", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281238366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281331774", "body": "Looking at this, do you think it would be a better idea to just turn Config into a react component and put the config in the state?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281331774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281460530", "body": "My bad, I pulled but didn't hard reset\r\n\r\nIgnore the village idiot :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281460530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282013828", "body": "Doesn't Neovim already come with a client mode? I'm not familiar with it, but it might be something to look into. If it's lackluster, this might be something to look into, but we don't want to rewrite a feature that might be improved later in neovim core", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282013828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282014386", "body": "This is the cursor line not darkened, but turned down to 0.1 opacity.\r\n\r\n\r\nThoughts? \r\n\r\n![screen shot 2017-02-23 at 9 59 58 am](https://cloud.githubusercontent.com/assets/8421641/23264317/e95eef1e-f9ae-11e6-98b7-a240317b133e.png)\r\n\r\nI think it's worth mentioning that this is notably dimmer than visual selection, at least in my color scheme", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282014386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282017173", "body": "@extr0py: I've got some of the boilerplate set up with listening to a save event for config.json and then emitting, is there a specific library I should be using to reload the config file? I was originally just going to change the internal declarations to let instead of const and then add a reload method, but I didn't know if that was breaking some important rules of typescript\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282017173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282187255", "body": "@extr0py: I'll open a WIP PR maybe tomorrow, I'm like 15 hours a day at school because of theatre.\r\n\r\nFirst, if we want to have Config.on(\"event\"), does Config have to become a class that extends event emitter, or am I missing something? I get an error\r\n\r\nProperty 'on' does not exist on type 'typeof \"/Users/Bret/oni/browser/src/Config\"'\r\n\r\nwhich likely means I'm missing an import of some type.\r\n\r\nThe second thing is (and this is why I naively suggested make Config a React Component) how do I put the Config settings in the state? I guess we could just make an array, but it seems like the State has to be pretty specifically defined ahead of time, which will be a pain if we end up adding the millions of config options vim users love.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282187255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282361267", "body": "@extr0py : I've definitely been able to find some of the glitchy cases here. I think this is going to have to go hand in hand with the adding of the Change event for TS Language Server.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282361267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282561560", "body": "YCM is not cross-platform friendly, which means a good bit of software bundling. I don't know if extr0py is up for it or not. However, you could still use it for yourself. You're not limited to the default init.vim in Oni, so you can port over your prior YCM setup and whatnot", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282561560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282576677", "body": "I use salaried dark, I'd suggest using nvm true color or term gui colors.\nI'll post my vimrc later if you can't get this resolved\n\n\nOn Feb 26, 2017 1:36 PM, \"Tal Amuyal\" <notifications@github.com> wrote:\n\n> TL;DR\n>\n> Themes that aren't the defaultly supplied, don't work.\n> Details\n>\n> In my regular Neovim work-flow I use the Solaraized (dark) color-scheme.\n> For some reason, it doesn't work well on Oni (that is, it is very similar\n> to deleting the colorscheme onedark part of the default configuration of\n> Oni).\n>\n> When trying to use some of Neovim's default color schemes on Oni, I\n> understood that most of them (or all?) have little to no effect.\n>\n> Does a color scheme for Oni need to be specialized in any way?\n> Does anyone knows what I'm talking about or have a suggestion?\n>\n> A side-by-side example is attached.\n> [image: screenshot from 2017-02-26 09-20-23]\n> <https://cloud.githubusercontent.com/assets/5097613/23342444/0893c5ba-fc63-11e6-998f-1e2ee3722da2.png>\n>\n> In each window, the Solaraized color-scheme is set.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/259>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCUOLjFzLD5FxW0qzyMv8vtwfwMQLks5rgcYWgaJpZM4MMeJd>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282576677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282786537", "body": "give this a try\r\n\r\nfrankier/neovim-colors-solarized-truecolor-only\r\n\r\n(Plugin manager of your choice)\r\n\r\nalong with \r\n\r\nlet $NVIM_TUI_ENABLE_TRUE_COLOR=1\r\n\r\nand \r\n\r\nset termguicolors\r\n\r\n\r\nIt works for me, ket me know how this goes\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282786537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283107078", "body": "This gets into the issue of synchronizing key bindings and synchronization,\nwhich I don't think we have completely figured out yet\n\nOn Feb 28, 2017 11:57 AM, \"keforbes\" <notifications@github.com> wrote:\n\n*@keforbes* commented on this pull request.\n------------------------------\n\nIn browser/src/index.tsx\n<https://github.com/extr0py/oni/pull/260#discussion_r103502091>:\n\n> @@ -251,6 +251,10 @@ const start = (args: string[]) => {\n             return\n         }\n\n+        if (key === \"|\") {\n+            pluginManager.findAllReferences()\n+        }\n\nDoes it have to be a single character? I'd probably go for something like g|\nsince g is usually used for the weird extra commands. That probably\nwouldn't help you for this method though.\n\nDo we have to map it to a key now? Could we add it to the command palette\ninstead and then provide a config for mapping keys to Oni commands? That'd\nbe the more extensible solution so users could map any other commands in\nthe palette to arbitrary keys.\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n<https://github.com/extr0py/oni/pull/260#discussion_r103502091>, or mute\nthe thread\n<https://github.com/notifications/unsubscribe-auth/AICBCYFpW048PKuHUkZdKvj0LFcqzrpIks5rhFHsgaJpZM4MOh-M>\n.\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283107078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285745081", "body": "@extr0py : Nope, i'm just forgetting quotes when I send back {api_level:0}, check #288 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285745081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285757484", "body": "@extr0py is your npm username also extr0py? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285757484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285966796", "body": "Oh, I talked to the guy who owns oni and he said he'd just give it to you\n\nOn Mar 12, 2017 2:49 PM, \"extr0py\" <notifications@github.com> wrote:\n\n> Yep, same name on npm.\n>\n> I started looking at oni vs onivim and it seems like in general onivim is\n> more available:\n>\n>    1. onivim.io is available\n>    2. Subreddit is available: http://www.reddit.com/r/onivim\n>    3. npm package onivim is available\n>\n> I snagged all of those above :)\n>\n> For the next release (likely 0.1.11), I'm planning on making the switch.\n> If we stick with just oni, it'd be harder to get the rest of those\n> collateral. Let me know if you have any concerns @keforbes\n> <https://github.com/keforbes> @bert88sta <https://github.com/bert88sta>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/279#issuecomment-285965316>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCbIbfkDUSywVTvP8ui3d6Qjz8dgoks5rlD49gaJpZM4MUgVY>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285966796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285968753", "body": "This is his/her email to me\n\nHello\n\nSure, you can have the package name. My project isn't really serious.\n\nTo transfer the package to you I just run:\n\nnpm owner add extr0py oni\n\nright?\n\nCheers,\nTill\n\nIs that right? I don't know about npm enough to verify\n\nOn Mar 12, 2017 3:27 PM, \"keforbes\" <notifications@github.com> wrote:\n\n> If the guy who owns oni on npm is willing to give it to us I'd rather keep\n> that name. It's good to grab onivim on things like reddit since oni has\n> another meaning, but on software-specific sites I think we should use the\n> name oni.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/279#issuecomment-285968521>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCYBXdpwCdnughqQJnyqt0F2qCdkQks5rlEcvgaJpZM4MUgVY>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285968753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285975799", "body": "Hello\n\nI just transferred the package.\n\nYou don't have to thank me in the README, but if you really want to you can\njust reference my github handle @tillarnold\n\nCheers,\nTill\n\n\nQuoted from the email to me\n\nOn Mar 12, 2017 3:44 PM, \"extr0py\" <notifications@github.com> wrote:\n\n> And ya, since you did all this legwork, I agree - having the oni name\n> would be awesome, we'll stick with that as our name. I do prefer having a\n> short, easily identifiable name.\n>\n> I have the onivim subreddit and onivim.io domains - it's a bummer we\n> can't get just oni for those, but not the end of the world.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/279#issuecomment-285970069>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCfE-jc4L4EZhym2SBTgylP8k85Zgks5rlEsLgaJpZM4MUgVY>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285975799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286865090", "body": "@keforbes are we looking to UI-ify this or just have the regular prompt for now\r\n\r\nAt the very least we could ```set confirm``` in the forced settings", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286865090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287669466", "body": "I'd like to add to this as well, if you open and search for \"init.vim\" it\ndoesn't pop up, despite being an exact result. Um jot sure this this is a\nsearch algorithm bug or just a result of fuzzy searching, but it's an issue\n\nOn Mar 19, 2017 10:44 PM, \"Guilherme Leobas\" <notifications@github.com>\nwrote:\n\n> [image: image]\n> <https://cloud.githubusercontent.com/assets/2712115/24087281/d43f4df8-0cfb-11e7-9c48-980a1c059065.png>\n>\n> *\"Open\"* keyword should be highlighted.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/304>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCcUQ2EjGWgSH-dbvRbk_gvd5IwnMks5rnef3gaJpZM4Mh-yV>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287669466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287673923", "body": "I don't know how taxing it is, but sequence matcher or a rough search on\nthe actual filename and then on the full path but with lower precedence\nwould be a good start.\n\nOn Mar 19, 2017 11:36 PM, \"keforbes\" <notifications@github.com> wrote:\n\n> It's an issue with the search algorithm. It's looking at the entire path\n> and removing a character from the search string as it finds a match. You\n> can see it highlighted o, p, e in the path and by the time it got to the\n> filename it only had n left in the search string.\n>\n> I don't know if we need to search the filename first or allow for\n> characters in the search string to happen multiple times. I've been giving\n> this some thought but I don't have a good solution yet.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/304#issuecomment-287673246>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCQHShEKT2nmNnlQJNASo2htQAcnwks5rnfQhgaJpZM4Mh-yV>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287673923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287936442", "body": "Anything i could do to speed this up for you? I'm stoked that this has been started, but I'm not too familiar with how the plugin-host business works... Always a first time to learn I suppose", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287936442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288118911", "body": "@extr0py: I'll get it taken care of here soon, doing a lot of financial aid business for college at the moment", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288118911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288201295", "body": "Just testing this as you go, I definitely get some weirdness with text selection\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288201295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288602230", "body": "If you could list out fairly explicitly what you want to be in the video I'd be happy to do that. I might need some of the shortcuts listed out .", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288602230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289253163", "body": "Because I'm young and inexperienced :P \r\nI'll change it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289253163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290281517", "body": "I don't actually know if the work you're doing on changing the UI into a component is going to help with the gui-tabline, but if you think it will let me know. Most of the actual vim boilerplate isn't too bad to get the information we need for an external tabline\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290281517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290285101", "body": "@tjdevries: you seem to have a decent amount of knowledge on the subject. After we hijack VSCode's implementation and use it for our own nefarious purposes, would we just have the gui act as a sort of middleman between langserver and your shim?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290285101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292625726", "body": "After npm install, nom run build, and nom link, I discovered by accident that I could run Oni from anywhere in terminal, and even on Spotlight. Is this not the case for other installation methods?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292625726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292747271", "body": "Neovim API has several functions for getting info about the tab bar and tab pages. I *think* the only \"global\" tab-info function is the one that lists the IDs of the tabs from left to right, the rest are info about the current tab. I'll try to put something together soon", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292747271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293032591", "body": "Getting this quasi-synced with the color scheme in vim is a must for the\nfuture  I don't know if this is doable now\n\nOn Apr 10, 2017 2:08 PM, \"Simon Van Casteren\" <notifications@github.com>\nwrote:\n\n> Oh yeah I'm definitely open to changing the background. I think I got the\n> color from somewhere in the UI, I think from the line numbers, but I\n> suppose it's something that should be themed. I tried to look around a bit,\n> but I couldn't immediately figure out how the css/color structure and\n> theming support works or would work, so I just tried to make the first\n> iteration of something and build on that.\n>\n> I'm personally not a fan of opacity, since it makes the message harder to\n> read. I like it on the small error markers on the right since they're\n> always visible, but this one is only visible when you're on that line. It's\n> your call though, I'll change it if you want to.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/pull/357#issuecomment-293031824>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCbk13OvlAac9q_UiyHFwujTaS6ekks5runAtgaJpZM4M31Ox>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293032591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295328343", "body": "Ive heard that hash tables aren't more efficient than switch cases in JS,\nis this true because hash tables are implemented differently or because\nswitch statements are optimized into a hash table\n\nOn Apr 19, 2017 12:11 PM, \"keforbes\" <notifications@github.com> wrote:\n\n> I had intended to only add a clause for the set_icon event so we wouldn't\n> get the Unhandled command: set_icon warning anymore. The set_title event\n> tells us the window title to set, the set_icon event just tells us the\n> title to use when the window is minimized. Even the Neovim docs say:\n>\n> In windowing systems not distinguishing between the two, \"set_icon\" can be ignored.\n>\n> After making that change though, I felt compelled to change the list of else\n> if statements into a switch statement. I then looked for more occurrences\n> of these lists of else if statements and only found one other offender.\n>\n> So yeah, functionally, this Pull Request does nothing. It just cleans up\n> some annoyances in the code I've been wanting to address.\n> ------------------------------\n> You can view, comment on, or merge this pull request online at:\n>\n>   https://github.com/extr0py/oni/pull/390\n> Commit Summary\n>\n>    - change lists of else-if statements to switch statements\n>\n> File Changes\n>\n>    - *M* browser/src/NeovimInstance.ts\n>    <https://github.com/extr0py/oni/pull/390/files#diff-0> (62)\n>    - *M* browser/src/Plugins/PluginManager.ts\n>    <https://github.com/extr0py/oni/pull/390/files#diff-1> (39)\n>\n> Patch Links:\n>\n>    - https://github.com/extr0py/oni/pull/390.patch\n>    - https://github.com/extr0py/oni/pull/390.diff\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/pull/390>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCdbCoAihtB9eF-ECbimXfT-Ddkh9ks5rxjIbgaJpZM4NB6BE>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295328343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295328594", "body": "Just asking because in python this would all go into a dictionary lookup. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295328594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295333477", "body": "Interesting, I've seen some tests where larger lists  (100) in switch\nstatements are slower than object lookup\n\nOn Apr 19, 2017 12:26 PM, \"keforbes\" <notifications@github.com> wrote:\n\n> It's my understanding that switch statements are still preferred in\n> javascript when there are more than 3 conditions.\n> http://stackoverflow.com/questions/2922948/javascript-\n> switch-vs-if-else-if-else\n> http://archive.oreilly.com/pub/a/server-administration/\n> excerpts/even-faster-websites/writing-efficient-javascript.html\n> https://www.safaribooksonline.com/library/view/high-\n> performance-javascript/9781449382308/ch04s02.html\n>\n> Of course, with all that said, I really did it because I find switch\n> statements easier to read. \ud83d\ude06 I doubt these methods were performance\n> bottlenecks.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/pull/390#issuecomment-295332416>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCeYMpdxx2Oy04aOB8vsHt0wyHfQ3ks5rxjXNgaJpZM4NB6BE>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295333477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297163338", "body": "I installed from npm and it worked. I'm not sure how different npm is from the git version, but hopefully that narrows down the issue\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297163338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297418078", "body": "I was writing just a little bit of the vim script to get the necessary data, would you care to point me to which methods were just added?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297418078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297419754", "body": "@extr0py I think we should have a list of Oni commands based on object lookup defined by key mappings. This would make it so that you could define oni operations in your config.js and then have them mapped to a fast object lookup. This way we can avoid if-statements piling up and not have any hardcoding of keys.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297419754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297454518", "body": "I built from source when it happened, I don't know  if it's on my end or\nyours, but I installed (npm install oni) and it fixed. It's the same thing\nthat happens when I run it out of tmux, but I wasn't using tmux at the time\n\nOn Apr 26, 2017 10:28 AM, \"extr0py\" <notifications@github.com> wrote:\n\n> Weird - I'm assuming by git version, you mean building from sources? Or\n> did you install the dmg via the Releases tab (https://github.com/extr0py/\n> oni/releases)?\n>\n> The npm version is a bit outdated - I've added a deprecation page to the\n> entry for oni on npmjs.org. It's strange that your config isn't loading,\n> though. Might be worth putting a breakpoint in the configChange handler\n> in browser/src/index.tsx to see what it is picking up in terms of\n> editor.fontFamily.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/403#issuecomment-297426161>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCaynksPSqoVbR_G5rGdqmn_oFbe8ks5rz1SdgaJpZM4NH3CT>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297454518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297768428", "body": "I don't know how we'd return the functions though given that there are\r\nquite a few objects/modules. We could construct it at the beginning of\r\nindex.tsx, but I'm not sure that would be optimal\r\n\r\n\r\nOn Apr 27, 2017 12:09 PM, \"extr0py\" <notifications@github.com> wrote:\r\n\r\n> @bert88sta <https://github.com/bert88sta> - \ud83d\udc4d , I agree, this seems like\r\n> a natural time to even bring in a keybindings.js so we can stop baking in\r\n> commands and start having them be configurable. This would remove a large\r\n> chunk of if-statements especially in index.tsx.\r\n>\r\n> \u2014\r\n> You are receiving this because you were mentioned.\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/extr0py/oni/issues/404#issuecomment-297762511>, or mute\r\n> the thread\r\n> <https://github.com/notifications/unsubscribe-auth/AICBCfDoWhuHp_0vCWmXk2eiXncvOnh3ks5r0L3EgaJpZM4NIsWO>\r\n> .\r\n>\r\n\r\n@extr0py : any ideas?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297768428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297785745", "body": "@extr0py : I've managed to completely break everything... What's the best way to purge node/oni stuff?\r\n\r\n:(", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297785745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297837846", "body": "@extr0py : I did all that, deleted everything, and got an omnisharp error... maybe I'll just come back later ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297837846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297998721", "body": "@extr0py : I got everything to install correctly, then I ran it in tmux and it broke, and the breaking persisted to after the end of the tmux session. I can fix by fresh installing, so I'll leave this up to track breaking in tmux", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297998721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298414010", "body": "Check keyboard.tsx, as of right now any command-prefixed keys are just\ndiscarded\n\nOn May 1, 2017 3:30 PM, \"Josemar Luedke\" <notifications@github.com> wrote:\n\n> Hey there! Fist, great project, looking forward to it evolve nicely.\n>\n> I was wondering if command (or ctrl in windows) + v (or c to copy) is\n> implemented or it is just not working for me? I tried to use the edit menu\n> but nothing happens as well.\n>\n> Using the last build (v0.2.3-rc2) on MacOs Sierra.\n>\n> Thanks.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/434>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCVeDXHNwG0WyiY28mKVOK4Z2RZAGks5r1jLqgaJpZM4NNWPT>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298414010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305080655", "body": "@extr0py \r\n\r\nI think the first thing we need to decide about is whether or not we're going to send keys on a \"round trip\" or whether oni should intercept bindings it recognizes. On one hand, I like the idea of an init.vim config because our convert to vimkey method doesn't handle complicated bindings well (leader key, for example, which I know for sure I want to be able to use in an oni config for control of UI). On the other hand, there are definitely benefits to be had handling certain actions in-house (not having to come up with a  complicated scheme for interpreting keymappings). I think this is going to clear up well as more UI business becomes externalized\r\n\r\nRegardless, the problem above doesn't change my overall thoughts too much. Here's my idea\r\n\r\n1) Define a set of actions that a keybinding could take, i.e scrollDown, sendKeyToVim, etc.\r\n\r\n2) People can execute a set of actions linearly that they assign to a key. If we're clever and let them send keys to neovim, this allows us to make macros that work across oni and neovim both (!) I might want to do a UI selection and then completion, and then tell neovim to do some manipulation afterwards all in one keybinding.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305080655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306053035", "body": "I think we're definitely in agreement about the functionality of Oni-side\nbindings.\n\nThis is one of those situations where I'm again going to tout object lookup\nas being superior to if or switch statements, especially if we're checking\n hundreds of key chords.\n\nI know that vim round trip is slow, but if I wanted to use my leader key,\n(space bar) in a keybind, Say <Space>gb for git blame overlay.  How can we\navoid sending that to neovim?\n\nOn Jun 3, 2017 12:10 PM, \"extr0py\" <notifications@github.com> wrote:\n\n> @bert88sta <https://github.com/bert88sta> Yes, good point, I don't think\n> this has been called out explicitly.\n>\n> I think the first thing we need to decide about is whether or not we're\n> going to send keys on a \"round trip\" or whether oni should intercept\n> bindings it recognizes.\n>\n> Definitely. My plan is to handle the keys directly, for the keys that Oni\n> knows how to handle. This is for a couple of reasons:\n>\n>    - The round-trip through (Neo)Vim incurs a non-negligible delay\n>    (10-20ms), so if we can handle it directly, that helps performance.\n>    - There are some features I'd like to implement that would be outside\n>    of Neovim. Things like #366 <https://github.com/extr0py/oni/issues/366>\n>    .\n>\n> But Neovim has rich input handling, especially for the text-edit\n> experiences, so for editing, I'd prefer to delegate to Neovim.\n>\n> I know this is heresy, but I've been looking at the Emacs model for\n> keybindings. Emacs' functional approach combined with key binding is pretty\n> powerful. The JS runtime has the potential to have similiar flexibility.\n> Here's sort of an API I was thinking about:\n>\n> // My plugin.js\n>\n> const activate = (Oni) => {\n>\n>     const showRefactorMenu = () => {\n>         Oni.showPopupMenu([\"Extract Method\", \"Sort Imports\", ...], doRefactor)\n>     }\n>\n>     const doRefactor = (selectedOption) => {\n>         // do some refactoring stuff..\n>     }\n>\n>     Oni.keys.bind(\"<C-A-r>\", Mode.All, refactor)\n> }\n>\n> As you mentioned, being able to also send keys to Neovim, or execute a\n> function, would be pretty powerful too. Would just need to expose that in\n> the Oni plugin object, which would be straightforward. That hybrid\n> behavior - of doing stuff in Oni and having Neovim manipulate, etc is\n> basically how most of the current UI enhancements are implemented anyway -\n> it makes a lot of sense to expose those to keybindings and plugins, as I'm\n> sure people can think of really creative things to do with that\n> extensibility.\n>\n> I'd also like to have a way for people more comfortable in the VimScript\n> world to be able to customize the Oni-facing functionality as well - this\n> is sort of along the lines of your #1\n> <https://github.com/extr0py/oni/issues/1> suggestion:\n>\n> // Some plugin exposes a 'command' - a named string mapped to the function\n>\n> const activate = (Oni) => {\n>\n>     const showRefactorMenu = () => {\n>         Oni.showPopupMenu([\"Extract Method\", \"Sort Imports\", ...], doRefactor)\n>     }\n>\n>     const doRefactor = (selectedOption) => {\n>         // do some refactoring stuff..\n>     }\n>\n>     Oni.commands.register(\"command.refactor\")\n> }\n>\n> // And then later, in `init.vim`\n>\n> nnoremap <C-A-r> :call OniCommand(\"command.refactor\", ..someOptionalArgs)\n>\n> I'm holding off on this PR for now, to think through that model a bit\n> more. Let me know if you have any ideas - thanks for your thoughts!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/pull/408#issuecomment-305984627>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCb7WVCwZVYzvMQapeeUoTiAbGOZyks5sAYWCgaJpZM4NKbuk>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306053035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306601081", "body": "Alright, I'm not sure exactly how neovim does it, but getting a leader key chord is usually based on a timeout IIRC, I'm going to dig through vimdoc and see if I can find more implementation details.\r\n\r\nAlright, it seems like if we grab the 'timeoutlen' variable from neovim, we can be consistent in how we handle leader-based key chords. Also, and I don't know how well neovim does this anyway, we should see if we can get multiple modifiers to work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306601081/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306956035", "body": "Hey, I've been keeping tabs on this and I want to say: Good work! It's getting to look like a really nice, sleek status line. The only thing that's going to suck (and this is something simple enough that i could probably help with it ) is color scheming. As a chore, once this is in, we're going to have to add probably 10-20 of the most popular color schemes and have the status line conform to them. Also we should make the insert|visual|normal|replace block overridable in terms of color, that way people can fix a color theme we might not support. I'm hoping this really becomes a selling point for oni in terms of configurability of the status line. \r\n\r\nIn addition, we might want to throw in some of the typical stuff from powerline/airline, such as percentage scrolled, dirty marker, whether or not it's a new file etc.\r\n\r\nKeep up the great work!!!\r\n\r\nI'm hoping that over the summer I'll have a lot more time to contribute since I'm graduating high school and won't have any more dumb summer assignments", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306956035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307270216", "body": "Keyboard.tsx has a block of code I wrote that discards all command prefixed\nkey chords. As of right now we're not sure if there's going to be a\nconfiguration value or if we'll whitelist certain common non-vim bindings\n\nOn Jun 8, 2017 1:53 PM, \"\u2039 \u2044 li \u203a\" <notifications@github.com> wrote:\n\n> On MacOS, the expected behavior for all apps is that Cmd+Q will fully\n> close an app, including open windows. This doesn't work for Oni, I have to\n> either right click on the icon in the dock or use the menu bar to fully\n> quit.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/483>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCTfOYGZcaDgSt_1WLLxB3EW0TDN0ks5sCDUegaJpZM4N0aa7>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307270216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311060271", "body": "This should be a quick fix, I'm just trying to think if there's any weird cases where neovim says to close completions even though oni itself has completions... I think neovim is smarter than us on completions mostly though, so I'll just throw a few lines into the AutoCompletion Service and test it out to see if it's mostly good", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311060271/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311355572", "body": "Alright, at least in my generic testing it should be good to go. We also need to stop showing a completion that is the same as the word, which I'm not sure how to do", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311355572/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311686473", "body": "I'm not sure if you'll have fixed this or not, but opening a vertical or horizontal split whilst an error is present (under cursor) causes a bit of weirdness", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311686473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311850947", "body": "The main issue with opening multiple files is behavior. We can't know for sure how you'd like to open your files, and even if we can we don't know that others will. \n\nAs for your fuzzy finder issue, is it loading forever or is it just empty? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311850947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311944995", "body": "I've got some code for this, I made a component and everything, I'm just not sure where it should go. I added a method to the Git.ts that this needs to run, so it seems like oni-core-statusbar/index.js is not the right place. Any thoughts?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311944995/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311997132", "body": "I meant more along the lines that I didn't know if I could put it in it's own file in there or not. I'm not sure about importing Git into index.js, doesn't seem very \"decoupled\" and also I don't know if javascript is just going to let me import a Typescript file...\r\n\r\nSorry these are just basic questions haha. I like code, not architecture\r\n\r\nI wouldn't know how to take what I had in the index.js and port it to its own file", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311997132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311999917", "body": "I think we could include instructions, but you can set up token\nauthentication that only has to be done once. The user just gets the code\nfrom google and pastes it in maybe their Config.js.\n\nAfter that you just have to use a generic mail API to get unread or\nsomething along those lines. The tmux one I think is specifically gmail but\nI'm not 100% sure\n\nOn Thu, Jun 29, 2017 at 11:10 AM extr0py <notifications@github.com> wrote:\n\n> Cool ideas! Time seems like a really easy one to enable - we could even\n> include that in our default statusbar in oni-core-statusbar and enable it\n> via a setting. It would be useful.\n>\n> E-mail and weather would be great ways to exercise Oni's 'plugin' system.\n> I'm not actually sure how the e-mail one works - would we need to support\n> authenticating with GMail/Hotmail/etc?\n>\n> Weather one seems straightforward, with a REST API we could populate that\n> statusbar item. And there is at least a sun and cloud icon on font\n> awesome, but maybe there are better icons to use.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/505#issuecomment-311997198>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCX0UKVupIJrEsYyO2F4ItDILbmrQks5sI759gaJpZM4OJX8z>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311999917/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312020148", "body": "So I'm reading through API/Oni.ts and I  don't quite understand it >_<\r\n\r\nAm I just supposed to have Git.ts Imported in Oni.ts? I see lots of notifications getting pushed through plugin channels but that's it.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312020148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312344994", "body": "I have the component made and showing, but I'm not exactly sure why it isn't working. It works if I put a default value in for the branch name, but the call to getBranch() is failing and blocking the Statusbar.\r\n\r\nI'm going to submit a PR so you can see the code", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312344994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312363933", "body": "I suspect that I've done something incorrect with the promise in the getBranch() function", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312363933/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312470867", "body": "Whoa thanks for the help!\r\n\r\nThe abbrev-ref is weird, the same command run in the terminal gives me the branch name. We'll probably move over to the first line of HEAD\r\n\r\nYep, this is what's going on:\r\n\r\n~/oni(branch:bert88sta/486*) \u00bb git rev-parse  HEAD     \r\n                                                                                                                                                                         95199a1b3316bb3f4b8eb560688e70e2249d0ec3\r\n\r\nIn Oni, it's ignoring the abbrev-ref argument somehow, which is why it says abbrev-ref [hash]", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312470867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312504280", "body": "AH! Notice I spelled \"abbrev\" with one \"b\". It works now!\r\n\r\nMy only concern with filesystem watching is if people migrate to a different project we're going to have to use a similar git command anyway to get the root git folder. There is an async version of exec from child_process, but I keep getting errors when I try to use it... Not completely sure about that.\r\n\r\nI'm also wondering (weloming suggestions) for what colors we should use, and how we should do status. I personally love the agnoster zsh theme for git things, but we can work on this. Hopefully I'll have some work done later today", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312504280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312748263", "body": "I meant colors (or potentially an asterisk) for dirty and staged changes,\nor anything else git related that we want oni to track. Also, the upward\nsearch is alright, we just have to know when we're in root.\n\n\n\nOn Jul 3, 2017 5:04 PM, \"extr0py\" <notifications@github.com> wrote:\n\n> AH! Notice I spelled \"abbrev\" with one \"b\". It works now!\n>\n> Nice find! \ud83d\udc4d\n>\n> My only concern with filesystem watching is if people migrate to a\n> different project we're going to have to use a similar git command anyway\n> to get the root git folder. There is an async version of exec from\n> child_process, but I keep getting errors when I try to use it... Not\n> completely sure about that.\n>\n> I think we could also look upward, recursively, to see if there is a .git\n> folder - we wouldn't actually need to run a command. All git repos have a\n> .git folder - so if we don't eventually find one, we're not in a git\n> repo. In any case - whether use the file system or spawn a process - we'd\n> want to use the async version of the APIs, so that they don't block the UI.\n>\n> I'm also wondering (weloming suggestions) for what colors we should use,\n> and how we should do status. I personally love the agnoster zsh theme for\n> git things, but we can work on this. Hopefully I'll have some work done\n> later today\n>\n> Ya, this is a tough one - here's a quick mock-up I did:\n>\n> [image: image]\n> <https://user-images.githubusercontent.com/13532591/27807839-525c27ac-5ff8-11e7-84d9-76ca09ac85b5.png>\n> (with the git branch slightly darker) - that's using the fa-code-fork\n> <http://fontawesome.io/icon/code-fork/> icon, a background-color of rgb(20,\n> 20, 20), and a foreground color of white. I think as long as it looks\n> reasonable with the default theme it'll be cool. When #33\n> <https://github.com/extr0py/oni/issues/33> comes in we can do some more\n> interesting things \ud83d\ude04\n>\n> Hope that helps!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/pull/507#issuecomment-312733490>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCQSozPiyJr-7mfgyIwUUdTmCJYyVks5sKVdlgaJpZM4OK7lU>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312748263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313188835", "body": "@extr0py : I can't get the exec() to work async because I'm not familiar with how callbacks (?) should work. Can you point me in what might be the right direction so I can learn?\r\n\r\nI'm probably going to check out the file I/O option next.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313188835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313454885", "body": "I don't know if this is at all feasible to improve rendering in the mean time, but could you glue multiple individual windows where neovim says there are splits?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313454885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313455564", "body": "That should help a ton, the issue I was having was that I couldn't return a promise as per the interface definition", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313455564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314638508", "body": "I'm going to close this out and let @Galbar submit his.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314638508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315104586", "body": "@extr0py: Now that language server items have been implemented (mainly Change()) do you think it would be worth it to send the line/character data for buffer updates instead of the whole thing? I'm editing 700+ line scripts at work and I'm feeling the burn with the lag.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315104586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315243881", "body": "@extr0py : I've been back to looking at this code chunk I wrote a bit back... Who all catches the neoviminstance emit?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315243881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315249859", "body": "As a sanity check I npm rm'd everything, but rebuilding isn't working.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315249859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315387747", "body": "I swear every time I reinstall I break it and look like an idiot :P", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315387747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315544926", "body": "@Galbar: Thanks for picking up after me! Do you think you could potentially model this after the zsh git integration?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315544926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315547647", "body": "Let me mess around in the bigger python script I have at work. I only noticed it in weird circumstances, might be a syntax thing (ie don't highlight if it's not a grammatically correct else:)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315547647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315547816", "body": "@Galbar: I'm not sure of the syntax exactly, I believe it's  * to indicate dirty, + to indicate commits or something along those lines. I'll get a link for you.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315547816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315548079", "body": "@Galbar: \r\n![image](https://user-images.githubusercontent.com/8421641/28241242-b744d71c-695e-11e7-89d2-c466783d16f4.png)\r\n\r\nIt doesn't have to be exactly like it, but having markers for useful info is nice :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315548079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315548551", "body": "@extr0py: thoughts?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315548551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315625129", "body": "I'm honestly not sure why this is happening. the *only* difference between\nthe prior implementation and this implementation is lastBufferLines. Other\nthan that, this uses the same methods. I'll give it a look later tonight or\ntomorrow since I have off work\n\nOn Sun, Jul 16, 2017 at 12:01 PM extr0py <notifications@github.com> wrote:\n\n> I just tried again - I'm still seeing the completion issues.\n>\n> Here's a gif of the *expected* behavior on master:\n> [image: inc-completion-current]\n> <https://user-images.githubusercontent.com/13532591/28249129-f705741e-6a04-11e7-9a9d-26e2a2a08e25.gif>\n>\n> Note that as the value is typed from w -> wi -> win, the set of\n> completions is changed.\n>\n> Here's the behavior I'm seeing on this PR:\n> [image: inc-completion-539]\n> <https://user-images.githubusercontent.com/13532591/28249136-0c2dead8-6a05-11e7-90aa-1e1bb8c6e3f6.gif>\n>\n> This appears to be a regression from this change, so we'll need to fix\n> this.\n>\n> I see that a failure in the getCompletions code in the typescript\n> language service, in this block:\n>\n>         while (col >= 0) {\n>             var currentCharacter = currentLine[col];\n>             if (!currentCharacter.match(/[_a-z]/i)) {\n>                 break;\n>             }\n>             currentPrefix = currentCharacter + currentPrefix;\n>             col--;\n>         }\n>\n> It seems like the values in the current line are out of sync with the\n> column value (so somehow the current line isn't making it all the way here,\n> or something), and the col ends up indexing a value outside of the\n> current line. Likely this is occurring further up, or their is some timing\n> change that is impacting this code path.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/pull/539#issuecomment-315618785>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCSOOHU9UMrPY4CVck7USzYGyOVhKks5sOjPtgaJpZM4OYO88>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315625129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315625700", "body": "Actually, this bit from the index.js:\r\n\r\n```const activate = (Oni) => {\r\n    Oni.on(\"buffer-update\", (args) => {\r\n        const fullText = args.bufferLines.join(os.EOL)\r\n        const words = fullText.split(/\\W+/)\r\n\r\n        lastBuffer = args.bufferLines\r\n\r\n        currentWords = Object.keys(words.reduce((prev, cur) => {\r\n            prev[cur] = cur\r\n            return prev\r\n        }, {}))\r\n            .filter(w => w.length >= 3)\r\n    })\r\n\r\n    const getCompletions = (textDocumentPosition) => {\r\n        if (textDocumentPosition.column <= 1)\r\n            return Promise.resolve({\r\n                completions: []\r\n            })\r\n\r\n        let currentLine = lastBuffer[textDocumentPosition.line - 1];\r\n        let col = textDocumentPosition.column - 2\r\n        let currentPrefix = \"\";\r\n\r\n        while (col >= 0) {\r\n            const currentCharacter = currentLine[col]\r\n\r\n            if (!currentCharacter.match(/[_a-z]/i))\r\n                break\r\n\r\n            currentPrefix = currentCharacter + currentPrefix\r\n            col--\r\n        }\r\n```\r\n\r\nI'm going to take a wild guess and say that lastBuffer is supposed to be the whole thing, but is getting assigned to the single line that gets sent over from neovim. I don't know if this would throw an error or not", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315625700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315944615", "body": "Aha! fixed it. Now we'll just see if I linted my code well enough :/", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315944615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320341697", "body": "I still seriously think that somehow TMUX is messing this up\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320341697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320342079", "body": "Ah nevermind, fixed it. I'm really not sure why weird things like this happen. Through my own testing, it seems like it's either the issue with OSX not really closing the last process, or TMUX is messing with things (which has been the case with other programs that run from command line)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320342079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320389751", "body": "We're working on a way currently to make keybindings much easier, but it's going to take a while.\r\n\r\nBear with us :)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320389751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320974513", "body": "The video on this site is a nice comparison, although these may be geared more for touch devices\r\n\r\nhttps://medium.com/@devlucky/about-passive-event-listeners-224ff620e68c\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320974513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321631472", "body": "Hmm, not sure I like it as a default setting or as a gui-friendly setting, although I could imagine it being useful if i wanted persistent windows.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321631472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322002435", "body": "This is old and no longer relevant with either solarized or default", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322002435/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322002532", "body": "Haven't seen a repro, so I'm going to go ahead and say that I wrote something poorly and the vim syntax highlighter didn't see it", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322002532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322022272", "body": "Maybe a dumb example, but hypothetically I might want to change the\nbackground color of the whole status bar based on mode. I don't actually,\nbut it seems like something I *should* be able to do. I don't know that\nit's going to be feasible in JS and electron, but basically any state that\nisn't critical to the editor's correct functionality should be available to\nthe user\n\nOn Sat, Aug 12, 2017, 6:16 PM extr0py <notifications@github.com> wrote:\n\n> Great question. This is something I've been thinking about.\n>\n> One thing I'd like to do is treat the Config.js as a mini-plugin, and\n> have an activate method for it - so you can script against the Oni object.\n>\n> You can also open the developer tools and make calls against the Oni\n> object (which is the same thing the plugins get), but it's not super\n> interesting - it'll be moreso once there are things like keybindings hooked\n> up...\n>\n> Is there a particular sort of customization you were thinking about, that\n> wasn't easy to do without rebuilding Oni?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/610#issuecomment-322009278>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AICBCQFpUkU0MJsxbn5f545Q-tWx7TX-ks5sXiQqgaJpZM4O1gME>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322022272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335515224", "body": "@cyansprite: I don't know how familiar you are with helm, or if this is within your skillset/goal here, but do you think you could generalize the quickOpen?\r\n\r\nI could imagine this replacing wildmenu/cmdline pretty easily, all we'd have to do is have the user give us an activation action, a list of things to choose from, and a final behavior\r\n\r\njust a thought", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335515224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335515924", "body": "I haven't stayed too up to date on the codebase since classes started, but what files specifically would you suggest need edited for this?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335515924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335576403", "body": "@bryphe since I haven't been here for a while, is this a Proof Of Concept or is this something wand merged in? I'm not saying I'd be able to do it, but I could try!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335576403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335581603", "body": "Ex:\r\n\r\nOpen on colon in normal mode\r\nmatch to vim commands\r\nwhen selected,  pass to neovim", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335581603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335595982", "body": "https://tuhdo.github.io/helm-intro.html\r\n\r\nHelm is basically a fzf interface to literally anything you can do in emacs. It's *really* awesome.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335595982/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340913084", "body": "This breaks oni for me", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340913084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347422325", "body": "Also might be unrelated but I can't get typescript highlighting in oni", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347422325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347650166", "body": "@bryphe I'm usually always running latest master but I downloaded the latest release binary and it also has the bug. I disabled my init.vim and it stopped so I'm going to try and narrow it down and figure out where the conflict is", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347650166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347653103", "body": "```\r\ncall plug#begin()\r\n\r\nPlug 'scrooloose/nerdtree'\r\n\r\ncall plug#end()\r\n\r\nautocmd VimEnter * NERDTree\r\nautocmd Vimenter * wincmd p\r\nautocmd bufenter * if (winnr(\"$\") == 1 && exists(\"b:NERDTree\") && b:NERDTree.isTabTree()) | q | endif\r\n```\r\nThis is it.\r\n\r\nThis code basically just checks to see if nerdtree is the last thing open, and if it is then it auto closes it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347653103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347882648", "body": "If you could make a semi-detailed checklist of what needs done I could probably do this. I stole the changes from this and added the cases to the switch statement, I'm just not sure what to add to State.ts (if anything) and also reducers and actions and all that jazz.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347882648/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347883193", "body": "@bryphe fwiw I probably wouldn't use a builtin file explorer untless it felt like I was using it within vim, i.e. my bindings for switching windows and such would work in it.\r\n\r\nI feel like this is true for a lot (although not all) of vim users. NERDTree is pretty popular.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347883193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348310776", "body": "Alright so I think I have an idea of this:\r\n\r\n- [ ] Set up Switch Cases\r\n\r\n- [ ] Create Actions\r\n\r\n- [ ] Create Reducer\r\n\r\n- [ ]  State???\r\n\r\n- [ ] Make actual CommandLine Component (or reuse Menu...)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348310776/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348374276", "body": "```TypeScript\r\n                case \"cmdline_show\":\r\n                    const [content, pos, firstc, prompt, indent, level] = a[0]\r\n                    const commandLineShowInfo: INeovimCommandLineShowEvent = {\r\n                        content,\r\n                        pos,\r\n                        firstc,\r\n                        prompt,\r\n                        indent,\r\n                        level,\r\n                    }\r\n                    this._onCommandLineShowEvent.dispatch(commandLineShowInfo)\r\n                    break\r\n                case \"cmdline_pos\":\r\n                    const [pos, level] = a[0]\r\n                    const commandLinePositionInfo: INeovimCommandLineSetCursorPosition = {\r\n                        pos,\r\n                        level,\r\n                    }\r\n                    this._onCommandLineSetCursorPositionEvent.dispatch(commandLinePositionInfo)\r\n                    break\r\n\r\n```\r\nThis is modeled after the popupmenu switch case, but I get the error 'cannot redeclare block-scoped variable.' Which ones should be const and which shouldn't? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348374276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348743017", "body": "Alright here's where I'm stuck: \r\nI have an action and a reducer and an actioncreator defined, but I'm not sure how to get from neovimInstance.ts to actually changing the state. I see a lot of things calling dispatch, but I'm not sure what rabbit hole that goes down if that makes any sense.\r\n\r\nI could use a flowchart :)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348743017/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349090125", "body": "Sorry this is super bare in terms of commits, I very nearly deleted all of the changes I made... :man_shrugging:\r\n\r\nAlso wow, that gif is really low quality, gyazo's not that good I guess \ud83d\ude12 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349090125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349119791", "body": "@bryphe Wildmenu might or might not get done depending on how your vision of this looks. There are three ways I could see this going:\r\n\r\n1) CommandLine becomes a Menu: Neovim sends over a cmdline event and the wildmenu functionality is instead replaced by fuzzy-style completion based on some list of keywords we have. This keeps 95% of the work in Oni and only requires that we have some precomputed list of help terms.\r\n\r\n2) We keep neovim's version and have it in the usual spot, but instead it's a cool little textbox instead of a part of the actual neovim screen. Even if we don't do much, externalizing the 'static' parts of the neovim screen is a step we need to take in order to get more advanced scrolling/ externalize the actual text display.\r\n\r\n3) Some hybrid of these two. It would be pretty easy to make cases for search vs ex mode vs. whatver ? means because neovim lets us know which commandline functionality is being used\r\n\r\nPersonally, I don't want the search to be over the screen because it might be covering up text,\r\nbut I do think that a popup commandline would be cool.\r\n\r\nThis is really a design choice for you.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349119791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353478171", "body": "@bryphe this has been resolved by the latest master I built", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353478171/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353478822", "body": "Scratch that, this is still an issue. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353478822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/91819736", "body": "I didn't get any errors, guess I beat the linter!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/91819736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100214865", "body": "Allegedly it changes the ability to fullscreen the window, but I think that's only when passed as an initial parameter. I was also wanting to look into this vs. maximize(), but fullscreen is much easier to implement for now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100214865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100215633", "body": "Also worth mentioning that I can still fullscreen the window even with it set to false on OS X", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/100215633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103106698", "body": "I'll go in and fix this later, it was pretty late when I wrote this", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103106698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127454273", "body": "I'm not sure what of this I should keep in... it only receives one line, whereas the whole buffer update takes them all", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127454273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127454407", "body": "For some reason, this blocks load. It works after keypress, so I'm not sure.\r\n\r\nAlso, the extra stuff in the check for last_cursor_line and last_change_tick can go away. Those were attempts to send over the entire buffer initially", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127454407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589150", "body": "@extr0py:  So it's ok to just update lastBufferLines with just the single line that gets sent over? It seemed like that was always updated with the whole buffer, not just a single line.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589974", "body": "Yeah, the last_cursor_line business was an attempt to handle more complex things like multiline deletes and such, but It's a bit hard to make all the scripts", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/127589974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/154783403", "body": "This is an issue with how I did mapstatetoprops maybe? I kept getting an error when they weren't there and I'm not 100% sure why\r\n\r\nIf you could take a look over CommandLine.tsx and see what's up with that it would be super helpful :)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/154783403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "topaxi": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1163", "title": "Errors in normal neovim using dein since installing oni", "body": "Since I've installed oni I get these errors in my console neovim:\r\n![nvimerror](https://user-images.githubusercontent.com/213788/34204283-53fa5bae-e57e-11e7-9bfa-23cf160c7908.png)\r\n\r\nAny way to get rid of these? Does oni install plugins into my neovim plugin dir?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1068", "title": "Linux: Middleclick paste", "body": "It would be very nice to support Linux-like middleclick paste. I'm very used to middleclick paste the current clipboard contents.\r\n\r\nBehavior in Terminals and GVIM:\r\n- Command mode: Insert directly on mouse-position\r\n- Insert mode: Insert on textcursor-position", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1068/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1001", "title": "Ligature and cursorcolumn collide", "body": "When using cursorcolumn, ligatures sometimes get \"broken up\".\r\n\r\n![cursorcolumn-ligature-arrow](https://user-images.githubusercontent.com/213788/33113951-dfae98b6-cf5a-11e7-9fd8-11e3bdf3d327.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/345962245", "body": "Is there a way to disable this behavior?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345962245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346260876", "body": "Doesn't bother me much, it was a bit \"wobbly\" in the beginning, I'll open an issue if it bothers me after some more oni usage! :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346260876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346550250", "body": "Set via `init.vim` :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346550250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353105926", "body": "I'm on Ubuntu Linux 17.10\r\n\r\n`:set rtp?`\r\n```\r\nruntimepath=~/.config/nvim,/etc/xdg/xdg-openbox/nvim,/etc/xdg/nvim,~/.local/share/nvim/site,/usr/share/\r\nopenbox/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/var/lib/snapd/desktop/nvim/site,~/.loc\r\nal/share/dein/repos/github.com/Valloric/YouCompleteMe,~/.local/share/dein/repos/github.com/Shougo/vimproc\r\n.vim,~/.local/share/dein/repos/github.com/Shougo/dein.vim,~/.local/share/dein/repos/github.com/marijnh/te\r\nrn_for_vim,~/.local/share/dein/.cache/init.vim/.dein,/usr/share/nvim/runtime,~/.local/share/dein/repos/gi\r\nthub.com/marijnh/tern_for_vim/after,~/.local/share/dein/.cache/init.vim/.dein/after,/var/lib/snapd/deskto\r\np/nvim/site/after,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/usr/share/openbox/nvim/sit\r\ne/after,~/.local/share/nvim/site/after,/etc/xdg/nvim/after,/etc/xdg/xdg-openbox/nvim/after,~/.config/nvim\r\n/after,/opt/Oni/resources/app/vim/core/colors,/opt/Oni/resources/app/vim/core/oni-core-interop,/opt/Oni/r\r\nesources/app/vim/core/oni-core-statusbar,/opt/Oni/resources/app/vim/core/oni-plugin-git,/opt/Oni/resource\r\ns/app/vim/core/oni-plugin-reasonml,/opt/Oni/resources/app/vim/core/oni-plugin-typescript,/opt/Oni/resourc\r\nes/app/vim/core/typescript-vim,/opt/Oni/resources/app/extensions/css,/opt/Oni/resources/app/extensions/go\r\n,/opt/Oni/resources/app/extensions/javascript,/opt/Oni/resources/app/extensions/less,/opt/Oni/resources/a\r\npp/extensions/reason,/opt/Oni/resources/app/extensions/scss,/opt/Oni/resources/app/extensions/theme-icons\r\n-seti,/opt/Oni/resources/app/extensions/theme-onedark,/opt/Oni/resources/app/extensions/typescript,/opt/O\r\nni/resources/app/vim/core,/opt/Oni/resources/app/extensions,~/.oni/plugins,~/.config/nvim/bundle/vim-airl\r\nine,~/.opam/system/share/merlin/vim,~/.config/nvim/eclim,~/.config/nvim/eclim/after\r\n```\r\n\r\nI'm using [dein](https://github.com/Shougo/dein.vim) for plugin management:\r\n```viml\r\nset runtimepath+=/home/topaxi/.local/share/dein/repos/github.com/Shougo/dein.vim\r\nif dein#load_state('/home/topaxi/.local/share/dein')\r\n  call dein#begin('/home/topaxi/.local/share/dein')\r\n  call dein#add('/home/topaxi/.local/share/dein/repos/github.com/Shougo/dein.vim')\r\n\r\n  call dein#add('bling/vim-airline')\r\n  call dein#add('tpope/vim-fugitive')\r\n  call dein#add('Shougo/vimproc.vim', { 'build': 'make' })\r\n  call dein#add('Quramy/tsuquyomi')\r\n  call dein#add('neomake/neomake')\r\n  call dein#add('sbdchd/neoformat')\r\n  call dein#add('elzr/vim-json')\r\n  call dein#add('ap/vim-css-color')\r\n  call dein#add('godlygeek/tabular')\r\n  call dein#add('plasticboy/vim-markdown')\r\n  call dein#add('marijnh/tern_for_vim', { 'build': 'yarn' })\r\n  call dein#add('rust-lang/rust.vim')\r\n  call dein#add('mustache/vim-mustache-handlebars')\r\n  call dein#add('fholgado/minibufexpl.vim')\r\n  call dein#add('kien/ctrlp.vim')\r\n  call dein#add('hail2u/vim-css3-syntax')\r\n  call dein#add('airblade/vim-gitgutter')\r\n  call dein#add('editorconfig/editorconfig-vim')\r\n  call dein#add('elixir-lang/vim-elixir')\r\n  call dein#add('Valloric/YouCompleteMe', { 'build': 'python3 install.py --all' })\r\n  call dein#add('moll/vim-node')\r\n  call dein#add('mattn/emmet-vim')\r\n  call dein#add('scrooloose/nerdtree')\r\n  call dein#add('jistr/vim-nerdtree-tabs')\r\n  call dein#add('scrooloose/nerdcommenter')\r\n  call dein#add('pangloss/vim-javascript')\r\n  call dein#add('leafgarland/typescript-vim')\r\n  call dein#add('digitaltoad/vim-pug')\r\n  call dein#add('vim-ruby/vim-ruby')\r\n  call dein#add('kchmck/vim-coffee-script')\r\n  call dein#add('flowtype/vim-flow')\r\n  call dein#add('tpope/vim-rails')\r\n  call dein#add('Quramy/vim-js-pretty-template')\r\n  call dein#add('tikhomirov/vim-glsl')\r\n  call dein#add('mxw/vim-jsx')\r\n  call dein#add('sjl/gundo.vim')\r\n\r\n  call dein#add('reasonml-editor/vim-reason')\r\n\r\n  call dein#end()\r\n  call dein#save_state()\r\nendif\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353105926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353283188", "body": "Awesome, thanks for debugging this :heart: I've disabled `dein#save_state()` in oni now using:\r\n```viml\r\nif !exists(\"g:gui_oni\")\r\n  call dein#save_state()\r\nendif\r\n```\r\n\r\nI've also added this snippet to the wiki page.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353283188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "samvv": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1132", "title": "Suggestion: switching over to styled-components", "body": "Filing this issue as the project is still relatively young and it is still somewhat feasible to make the switch ... I was wondering if you know about [styled-components](https://styled-components.com). It takes away the burden of ensuring class names are unique across the entire application, makes it possible to embed \"skeleton\" CSS in React source files, and even [has support for theming](styled-components.com) using a specialised React component. \r\n\r\nOne reason that I'm suggesting this right now is that it will get more and more difficult to come up with unique class names for CSS styles the more plugins are added. `styled-components` generates IDs automatically that won't collide, so I personally think it is better for scaling.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1132/reactions", "total_count": 4, "+1": 1, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/1128", "title": "Add more tests", "body": "Couldn't find an issue directly addressing this, but it would be pretty nice, if not essential, that there's a good testing framework for making sure that changes do not regress the code. I understand that while the code is still in flux testing does not matter that much, but given that there is already quite a rich and working feature set, it'd be a shame if it became buggy.\r\n\r\nPersonally, I think [Jest](https://facebook.github.io/jest/) is the best testing framework in this context because of its integration with React components. Have to admit I haven't used it myself, though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1128/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/f5fee5ec10cbfcd4a38b2e6b33103f3b8286546a", "message": "[blocker] Switch to styled-components (#1134)\n\n* Add styled-components to package.json\r\n\r\n* Transform UI components to use styled-components"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/351640847", "body": "Thank you so much for the information! I'm looking forward to it as well. I have some time to look into it today, I'll keep you updated.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351640847/reactions", "total_count": 4, "+1": 1, "-1": 0, "laugh": 0, "hooray": 3, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351668053", "body": "Sounds very cool! One thing I am wondering is ... what to do with commands that accept arguments? I guess it is taking it a bridge too far to include that in the UI as well, a bit like [QuickSilver](https://qsapp.com/) does? Because I suspect there's no way to get information about the completion arguments, commands that want to integrate with the UI will have to register themselves a second time (that time with completion information for Oni). It's a bit redundant, because in theory the information is already right there. From the Neovim manual:\r\n\r\n```\r\nBy default, the arguments of user defined commands do not undergo completion.\r\nHowever, by specifying one or the other of the following attributes, argument\r\ncompletion can be enabled:\r\n\r\n-complete=augroup\tautocmd groups\r\n-complete=buffer\tbuffer names\r\n-complete=behave\t:behave suboptions\r\n-complete=color\t\tcolor schemes\r\n-complete=command\tEx command (and arguments)\r\n-complete=compiler\tcompilers\r\n-complete=cscope\t|:cscope| suboptions\r\n-complete=dir\t\tdirectory names\r\n-complete=environment\tenvironment variable names\r\n-complete=event\t\tautocommand events\r\n-complete=expression\tVim expression\r\n-complete=file\t\tfile and directory names\r\n-complete=file_in_path\tfile and directory names in |'path'|\r\n-complete=filetype\tfiletype names |'filetype'|\r\n-complete=function\tfunction name\r\n-complete=help\t\thelp subjects\r\n-complete=highlight\thighlight groups\r\n-complete=history\t:history suboptions\r\n-complete=locale\tlocale names (as output of locale -a)\r\n-complete=mapping\tmapping name\r\n-complete=menu\t\tmenus\r\n-complete=messages\t|:messages| suboptions\r\n-complete=option\toptions\r\n-complete=packadd\toptional package |pack-add| names\r\n-complete=shellcmd\tShell command\r\n-complete=sign\t\t|:sign| suboptions\r\n-complete=syntax\tsyntax file names |'syntax'|\r\n-complete=syntime\t|:syntime| suboptions\r\n-complete=tag\t\ttags\r\n-complete=tag_listfiles\ttags, file names are shown when CTRL-D is hit\r\n-complete=user\t\tuser names\r\n-complete=var\t\tuser variables\r\n-complete=custom,{func} custom completion, defined via {func}\r\n-complete=customlist,{func} custom completion, defined via {func}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351668053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351719736", "body": "Actually, since this is blocking my personal experience with Oni too, if it's OK I'd like to begin with this issue as my first of #1120.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351719736/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351743193", "body": "@CrossR Thanks for the references. I'm having an idea that might solve part the integration, but I need to performs some tests first to see if it is not too crazy. \ud83d\ude04 \r\n\r\n> One question I had about the Vim commands - would we primarily show the : ex commands, or would we want to show things like Vim: Change in word with ciw? (Or even individual motion / operators) I'm envisioning the latter would likely be the most important in terms of getting users new to vim up-to-speed and productive.\r\n\r\n@bryphe That's exactly what is bothering me right now ... perhaps both, provided that it does not clutter the list too much?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351743193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351786267", "body": "I'll try to smoothen this out so that it can be merged. First need to see I can get it working.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351786267/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351811186", "body": "> Also, perhaps as the project + our test framework mature, we might want to add test coverage as a requirement for PRs.\r\n\r\nYup, sounds like a good idea to me. And thanks for the information. Will look into it when I find some time.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351811186/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351825355", "body": "I actually quite like the idea of having all commands nicely packed in one place, so that when I forget one I can simply look it up (that's why I wanted this so badly). I actually thought of parsing the `:command` output so that one can even fuzzy find on command name (Neovim currently does not provide a means to list all available commands via RPC or `eval`, unfortunately). In that case, an exact match would get precedence over 'fuzzy found' ones, but if no exact match is available it would try to get one using fuzzy search.\r\n\r\nI think I make this scenario work if you like it. \r\n\r\n**Edit:** forgot to mention: that would imply only one pane (the command palette), as you suggested @bryphe ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351825355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351835940", "body": "> But combine them up-front in a way that is intuitive, that's great.\r\n\r\nThat's exactly my thought. \ud83d\ude04 \r\n\r\n> Would this mean we'd integrate the output from the ext_cmdline into the command palette? Or integrate the full set of commands a different way?\r\n\r\nGood question ... I'd say yes, if we really wanted to get a fluent interaction. Will not be as straightforward as it sounds, though ... on the other hand, it's almost weekend so I'll be having some time to experiment. Did you have something else in mind?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351835940/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351960812", "body": "@Bretley I've been trying out some testing frameworks and I really think the best option would be [AVA](https://github.com/avajs/ava) in combination with [Enzyme](http://airbnb.io/enzyme/), contrary to what I first said. With it, tests should complete _really_ fast as `ava` supports full parallelism. Jest is does not provide as much testing integration with React as it hoped it would, and it seems it does not support parallelism like `ava` does\r\n\r\nI can set it up and convert existing tests if you want. Also added some tests for some additional methods in `NeovimInstance` that I'm experimenting with. Like you predicted I needed to make some changes to the internal API and decouple some components so that they can be easily tested. Will keep you updated and create a pull request as soon as possible so you can see for yourself.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351960812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352036353", "body": "Above that, I just noticed that it also enables to test only select parts of the UI without `webpack`ing the source.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352036353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352052040", "body": "@Akin909  Nice \ud83d\ude04 I'd be willing to do the dirty work, given that I'd need to do it anyways if I want to continue setting up the testing platform in #1133.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352052040/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352060956", "body": "Nice \ud83d\ude04 If you want, I can convert it. Gets me acquainted with the UI and I already know _styled-components_ quite thoroughly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352060956/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352063854", "body": "> I'd prefer the unit tests (for now) to follow the directory structure. I've been experimenting with something like vim-alternates (http://www.vim.org/scripts/script.php?script_id=31), but an oni version, that lets me switch to / from the test file. My hope is we could set up something in an oni config file, like:\r\n\r\nThat's actually really cool! Yes, then it totally makes sense to keep directory structure. Will fix it ASAP.\r\n\r\n> Oh, I had one other question too - right now we use electron-mocha to debug the unit tests, via npm run debug:test:unit:browser. What's the best way to debug the AVA tests?\r\n\r\nI'll create and configure a new command in `package.json` for this. If you have it installed, it will be as simple as `ava`. Stack traces etc. should come nicely formatted in the terminal, and there's really no difference between a browser test and a regular test anymore thanks to [Spectron](https://github.com/electron/spectron). If you only want to run certain tests, it'll be something like `ava --match bar --match 'foo*'`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352063854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352110110", "body": "Thanks, I'm trying to finish it as soon as possible, as I understand this can be inconvenient.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352110110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352111686", "body": "Haha, yeah it really is funny :smile: This project is much is much more advanced, however, that's why I'm making the switch. Getting the community growing is indeed really imortant. It will also require a really good plugin architecture (perhaps for another issue?). I've broken my head in the past how to tackle that problem, which lead to some bizarre constructs such as [this one](https://github.com/GalacticJS/GalacticJS), but till this day I haven't found something of which I can really say \"that's it! that'll solve the issue!\"", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352111686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352112481", "body": "I'm going to have to call it a day, unfortunately. Will continue working on it tomorrow \ud83d\udd25 Cheers!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352112481/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352194226", "body": "No problem, I really want to see this project succeed \ud83d\ude04 It will probably take a couple of days before I'm completely done, and it will have to be thoroughly reviewed. Other than that, I don't encounter any major problem.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352194226/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352203352", "body": "I've done a quick check and it seems that the option is not supported at the moment. Couldn't find any code reading in the value in the codebase. @bryphe will have to correct me if I'm wrong.\r\n\r\n@kuglee What is it exactly you are expecting the setting will do?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352203352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352204203", "body": "@Akin909 Agreed, the `ThemeProvider` will make it so much easier for the user to define his or her own styles. \ud83c\udf89 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352204203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352207617", "body": "@kuglee Ah, thanks for pointing me to the wiki! I'm quite new to the project and it didn't occur to me to check it out.\r\n\r\nThis seems to be a bug. I'm currently occupied with #1134. I will look into it when I'm finished. If it is taking too long and there's someone else that would like to look into it just let me know \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352207617/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216488", "body": "> I think some language servers use one-based coordinates.\r\n\r\nI actually think that's not the case. I think it simply points to the location where the semicolon should be, which is beyond the line of course because it is not there.\r\n\r\nAnother solution I thought of is being able to use the mouse to hover the `~~~~~~` so that you can view the error even if you cannot get there with the cursor. But both solutions are equally good in my eyes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352216488/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352457244", "body": "@bryphe Unfortunately some other projects require all of my attention at the moment. I'd suggest merging it as it is now. I've only pushed changes of code that has been tested and should work, and that way someone else can finish the job. Perhaps @Akin909? That way, you can continue moving forward. And no worries, I'll be back \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352457244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "keforbes": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1125", "title": "Check for init.vim at startup?", "body": "I just had a thought for a feature request, not sure if it'd be helpful or annoying.  At startup, Oni could check to see if `init.vim` exists in the default location.  If it does, we could prompt \"init.vim found! Would you like to enable it?\"\r\n\r\nI was just thinking there are some Vim veterans who try out Oni but then get frustrated when their settings aren't respected (because `oni.loadInitVim` is `false` by default).  I think the default opinionated config makes perfect sense for newcomers but if `init.vim` already exists we could probably assume the user is Vim-savvy and might not want our defaults.  This should mitigate issues which led to the [FAQ](https://github.com/onivim/oni/wiki/FAQ) being created.\r\n\r\nOf course, if we add this prompt we'd probably also want to write a config `promptToEnableInit: false` or something so we don't prompt on subsequent Oni launches.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1125/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/602", "title": "Closing tabs from command-line (ex) mode", "body": "If I have multiple tabs open and I type `:q` or `:close`, the focus will change to a previous tab as if the active tab had closed but the tab itself still remains.  `gt` will correctly skip the \"closed\" tab but clicking on the tab will still display the file.  It seems the only way to close a tab is by clicking the `X` button... with your _mouse_. :scream: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/264", "title": "Prompt before closing modified buffers", "body": "When closing a buffer from the menu (`Quit`, `Close`, `Split -> Close`, `Close Other Split(s)`) Oni needs to prompt to save if the buffer is modified.  For some operations (`Close`, `Split -> Close`) we just need to check if the current buffer is dirty but for other operations (`Quit`, `Close Other Split(s)`) we need to see if *any* buffer is dirty.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/251", "title": "Make scrollbar clickable", "body": "This is one of those annoyances that I hit multiple times per day.  I keep thinking I can click and drag on the scrollbar to move it but instead this is registered as a mouse click in NeoVim and moves into Visual mode.  I know this won't be fixed anytime soon but I just wanted to file it.\r\n\r\n![scrollbar](https://cloud.githubusercontent.com/assets/817509/23273155/27c998b0-f9bb-11e6-95a1-77ecaee8e84b.gif)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/251/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/e965ebee1eb3407dce356ad8de7c747ed9aaf5d5", "message": "add link to syntax/compilation errors section of wiki (#779)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ff834042419d1d8aaa98e0f134a384153a01e986", "message": "update links to wiki (#694)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/3c7b6cffebbdf77c2483e1a4362f822a4a9c67fa", "message": "Move documentation to wiki pages (#673)\n\n* move documentation to wiki pages\r\n\r\n* add another reference to Configuration page\r\n\r\n* Update more links\r\n\r\n* add reference to Arch package"}, {"url": "https://api.github.com/repos/onivim/oni/commits/fa8a529aae30d0aa7974d74c832d68f8eeb308af", "message": "Fix #407, use editor.quickOpen.execCommand to filter files in quickOpen (#489)\n\n* use editor.quickOpen.execCommand for filtering files in quickOpen\r\n\r\n* send no input for initial case, rather than empty string\r\n\r\n* fallback to default filtering if command fails"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4597d578584261edc2bf7c21c300af1f73571744", "message": "Fix #369, replace findParentDir.sync with Promise (#477)\n\n* replace find-parent-dir with find-up, which supports promises\r\n\r\n* refactor find-up usage to be Promise, not sync\r\n\r\n* use asynchronous call to get ~/.oni/launch.json\r\n\r\n* use nested promises"}, {"url": "https://api.github.com/repos/onivim/oni/commits/5fe6de00409a2525534855bd71dc12709a08bfe5", "message": "Fix #471, enable opening a file by drag-dropping it onto Oni (#472)\n\n* enable opening a file by drag-dropping a file onto Oni\r\n\r\n* handle multiple files dropped at once and handle potential windows wackiness\r\n\r\n* keep behavior consistent regardless of if a single file or multiple files are provided"}, {"url": "https://api.github.com/repos/onivim/oni/commits/35b5c01af6c0d75c7c88bfb9627113f6f270bb0c", "message": "fix off-by-one in autocomplete substring (#468)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1aa7f4126414d33810aa9499b8dce4e190e02f86", "message": "Fix #392, 'setMenu of null' with multiple instances (#394)\n\n* ignore rebuild-menu event if this instance isn't done initializing yet\r\n\r\n* add a comment since the purpose of the 'if' statement isn't obvious"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0660ef72a6f727a9f853eed539550a2a766cb06d", "message": "change lists of else-if statements to switch statements (#390)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c2130618e19f110ab764aacdbaf5b0a385b26e30", "message": "Fix #343, install to Oni/ rather than oni/ on Windows (#363)\n\n* install to Oni/ rather than oni/ on Windows\r\n\r\n* Change case of Start Menu entry"}, {"url": "https://api.github.com/repos/onivim/oni/commits/27ee848a9e08534121bb3076a2b771692be8d1dc", "message": "Fix config live reload, pop-up config.js parse errors (#358)\n\n* popup alert to user when config.js fails to parse\r\n\r\n* fix method name so it matches the name being called"}, {"url": "https://api.github.com/repos/onivim/oni/commits/540da3205453745defe22f5ab3c0f280a073ea24", "message": "Fix #342, issue with first launch when ~/.oni doesn't exist (#347)\n\n* fix issue with first launch when ~/.oni doesn't exist\r\n\r\n* just watch for ~/.oni, not ~/.oni/config.js"}, {"url": "https://api.github.com/repos/onivim/oni/commits/26b846b4138fe5fc514095615882709365682a5e", "message": "hide 'Open Neovim Config' menu unless oni.loadInitVim is true (#336)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/ebd52e5a99bb91fac95ceff314dfc2ccc3ec7381", "message": "tweak error css (#333)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6dd9e5bebb0765100fce819d049b497059ebba02", "message": "use consistent naming convention for config options (#319)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/51bbb3f56e70f93e53bcc23feefa2cdbab482634", "message": "fix some npm warnings (#318)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/0b887f4841b2216cdfae2e44d34a9d4a52021b60", "message": "Fix #304, refactor fuzzy finder logic to use fuse.js (#306)\n\n* refactor fuzzy finder logic to use fuse.js\r\n\r\n* remove test for method which was removed\r\n\r\n* cache fuzzy searches\r\n\r\n* rather than caching, remove all entries that don't contain all search characters"}, {"url": "https://api.github.com/repos/onivim/oni/commits/16b73a045284e9615fba56e6022c18e078173ded", "message": "hide menubar if oni.hideMenu is set (#300)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/238b211dceacc240c65b556b22a7bfb2ee71f9aa", "message": "Fix #236, refresh Config object anytime config.js changes, notify any listeners (#297)\n\n* refresh Config object anytime config.js changes, notify any listeners\r\n\r\n* I only notice these things after committing\r\n\r\n* woops, accidentally deleted this\r\n\r\n* fix method name so it doesn't conflict with EventEmitter parent\r\n\r\n* log error when config.js is invalid"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1f3e65e252b2b25da81a109109872c25384f93a5", "message": "fix wrapping around first/last item in autocomplete (#285)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/4a52a2148d9ec4b5afdb34456970e60da9133617", "message": "Reduce duplication in .less files (#286)\n\n* reduce duplication in .less files\r\n\r\n* make menu hover color dimmer than selected item color"}, {"url": "https://api.github.com/repos/onivim/oni/commits/878b42da8655247898b5af099ad8ca066dda850e", "message": "fix wrapping around first/last item in menu (#280)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9b6681c4894f80a9eac6b498f7131f5ff7e182d2", "message": "add editor.exclude config for Fuzzy Finder (#278)\n\n* add editor.excludeDirs config for Fuzzy Finder\r\n\r\n* change excludeDirs to exclude since any glob pattern works"}, {"url": "https://api.github.com/repos/onivim/oni/commits/354b82b2211c733c0e407a21d273eaa488afe005", "message": "use glob rather than recursive-readdir to fetch files in Fuzzy Finder (#268)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/02100de2990bee189dd3270759581e47686d5611", "message": "create default config.js if one doesn't already exist (#266)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/27e36aa49cf0bbcf3514bce4a24c51ee0b8141a8", "message": "Fix #250, set menu per window on Windows and Linux (#262)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/e660f7b19d4aa283a827d79f94dc0ac35d11847b", "message": "Add config for debugging Oni in VSCode (#255)\n\n* add config for debugging Oni in VSCode\r\n\r\n* add statement about provided vscode launch configurations"}, {"url": "https://api.github.com/repos/onivim/oni/commits/988be73c4cc2a45cd71c5a1a454148a87761336f", "message": "move Developer Tools under Help menu (#248)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/84e1adb1dcaca52835327883f40d937f2f074429", "message": "tweak some Window menu labels (#226)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/c118ff2ef2333696831548574088126320ba7a17", "message": "handle case where open/save dialog is cancelled (#224)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/cc438134048c8b119d710fa9596d01b22bad4060", "message": "add entries to File and Window menus (#221)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/83095b5796b1045e3a8b5e1b54e0ec638a6b636c", "message": "replace edit menu with one that matches gvim (#194)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/aa210c8d81bd930dad6f1d5a40bafc7888cd39b7", "message": "add attribution for default background image (#190)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/1f1e80dd14fd9829ac1d8838a9e564072ce2d5fa", "message": "Update window title with current filename (#175)\n\n* update window title with current filename\r\n\r\n* update window title with current filename\r\n\r\n* be more consistent with conventions\r\n\r\n* forgot a space\r\n\r\n* use neovim's title rather than trying to implement my own\r\n\r\n* make sure replace won't screw up if filename contains NVIM\r\n\r\n* don't set title until we've attached listeners for the event"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d06da76f828228c6cba7b49ce6e25d3dc91f0909", "message": "Fix #156, add new default background (#169)\n\n* add new default background\r\n\r\n* put color in front of background image, opacity 0.7"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d5f7509ade9c749958744f7c9f68a8bc7ce05cb2", "message": "Fix #51, signature separator and quickinfo text overflow (#117)\n\n* fix display of method argument separator\r\n\r\n* don't highlight parameter separators (comma and space)\r\n\r\n* dynamically grow quickinfo to reach edge of window, ellipsis for anything that still doesn't fit"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8a7173b57ba2a885d037ad69baab2a4ed3d97beb", "message": "add a couple minor fixes to README.md (#116)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/265001611", "body": "Same basic reason why gvim exists in addition to vim.  Some people like launching an application in a separate window rather than within a terminal.  In fact, some projects (https://github.com/fmoralesc/neovim-gnome-terminal-wrapper and https://github.com/harish2704/neovim-konsole) are literally just wrapping a terminal session in their own application so there really is nothing else added.\r\n\r\nFor this project though, didn't you see the animated gifs on the project page?  This project is attempting to create more of an IDE rather than just neovim in a separate window.  I think the intent is to add more capabilities than neovim can provide in a terminal while still allowing you to use all your current neovim plugins.\r\n\r\nSorry, I don't have anything to do with this project but I felt I could answer your question since I'm interested in seeing where this project goes. :smile: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265001611/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265003725", "body": "FWIW, I just installed on Arch Linux with no problems.  Using the latest version of node and npm and running the Build directions on the project page.\r\n> node v7.2.0\r\n> npm v4.0.3\r\n\r\nIt looks like you're using:\r\n> node v4.2.6\r\n> npm  v3.5.2\r\n\r\nIs there a reason why you're using older versions?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265003725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265204676", "body": "Please excuse my ignorance (I don't know anything about Electron development) but isn't that fontFamily property used like a CSS property?  Can't you define multiple fonts as fallbacks?  For example, in CSS you could do:\r\n```\r\nfont-family: \"Menlo, DejaVu Sans Mono, Lucida Console, monospace\"\r\n```\r\nThis would be the order of preferred fonts, where the default `monospace` font is the final fallback if none of the other fonts are installed.\r\n\r\nI just tried changing MacConfig to:\r\n```\r\nconst MacConfig: any = {\r\n    \"editor.fontFamily\": \"Menlo, DejaVu Sans Mono, Lucida Console, monospace\",\r\n}\r\n```\r\nand it seemed to have an effect on Linux (since it's checking for `isWindows`).  Anyway, just a thought.\r\n\r\nEdit: My list of fonts was pretty much arbitrary.  I found a more comprehensive list of monospace fonts (both Windows and Mac) which is probably better if you take this route:\r\n```\r\nfont-family:\"Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New, monospace\";\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265204676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265262743", "body": "I have a similar concern (which I didn't think justified its own issue) so I'll just add on to @bert88sta's question of where you see Oni going in the future.\r\n\r\nGiven that this is an Electron app, I wonder how much time you'll spend trying to re-implement [Atom](https://github.com/atom/atom) features when you could just create an integration with Atom.  There was a [similar project](https://github.com/carlosdcastillo/vim-mode) which was trying to integrate Neovim with Atom but it looks like it has been abandoned.  Oni is further along than that Atom integration but Atom still has a lot of the features that Oni is trying to implement.  If you're trying to do something with Oni that Atom doesn't do then that's awesome but fuzzy finder, mini-map, code completion, error highlighting, and quick info popups are all implemented in Atom (or available via Atom plugins).  I'd hate for you to duplicate effort if it isn't needed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265262743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266790860", "body": "`process.argv` is the same in both instances.  I opened the `main.js` in each project.\r\n\r\nnpm install -g oni-vim\r\n```\r\n[ '/usr/lib/node_modules/oni-vim/node_modules/electron/dist/electron',\r\n  '/usr/lib/node_modules/oni-vim/main.js',\r\n  'main.js' ]\r\n```\r\n\r\nbuilt locally:\r\n```\r\n[ '/home/keforbes/Documents/oni/node_modules/electron/dist/electron',\r\n  '/home/keforbes/Documents/oni/main.js',\r\n  'main.js' ]\r\n```\r\n\r\nI also tried printing `message.args` in both scenarios but neither one had any output.  I'm guessing this method isn't running in either case.\r\n\r\nWhen launching from `npm install -g oni-vim`, the oni window is created but has no content.  There is a *red* blinking cursor in the top-left and an otherwise black screen.  If I hit `<esc>` it draws an empty file (white blinking cursor on first line, blue `~` on all other lines, bottom white line says \"main.js [RO]\"", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266790860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266798207", "body": "```\r\n$ file /usr/lib/node_modules/oni-vim/.travis.yml /home/keforbes/Documents/oni/.travis.yml \r\n/usr/lib/node_modules/oni-vim/.travis.yml: ASCII text, with CRLF line terminators\r\n/home/kforbes/Documents/oni/.travis.yml:   ASCII text\r\n```\r\nThe files built in npm have `^M`s in them (dos format).\r\n\r\nOnly certain files have `^M`s though:\r\n```\r\nFiles /usr/lib/node_modules/oni-vim/.editorconfig and /home/keforbes/Documents/oni/.editorconfig differ\r\nFiles /usr/lib/node_modules/oni-vim/.gitattributes and /home/keforbes/Documents/oni/.gitattributes differ\r\nFiles /usr/lib/node_modules/oni-vim/index.html and /home/keforbes/Documents/oni/index.html differ\r\nFiles /usr/lib/node_modules/oni-vim/LICENSE and /home/keforbes/Documents/oni/LICENSE differ\r\nFiles /usr/lib/node_modules/oni-vim/main.js and /home/keforbes/Documents/oni/main.js differ\r\nFiles /usr/lib/node_modules/oni-vim/.npmignore and /home/keforbes/Documents/oni/.npmignore differ\r\nFiles /usr/lib/node_modules/oni-vim/package.json and /home/keforbes/Documents/oni/package.json differ\r\nFiles /usr/lib/node_modules/oni-vim/README.md and /home/keforbes/Documents/oni/README.md differ\r\nFiles /usr/lib/node_modules/oni-vim/ROADMAP.md and /home/keforbes/Documents/oni/ROADMAP.md differ\r\nFiles /usr/lib/node_modules/oni-vim/TODO.md and /home/keforbes/Documents/oni/TODO.md differ\r\nFiles /usr/lib/node_modules/oni-vim/.travis.yml and /home/keforbes/Documents/oni/.travis.yml differ\r\n```\r\n\r\nEDIT: Nevermind, I think all files have dos format.  The output of the `diff` command I ran only had these files but after manually checking a couple directories, everything has dos format.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266798207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266801580", "body": "This looks to be another occurrence of #7 but it affects files outside the `bin/` directory.  @extr0py, you'll probably have to convert those files on your system since my git auto-converted the line endings (as you mentioned in #7).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266801580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266807275", "body": "Confirmed.  I ran `dos2unix` on everything installed by `npm install -g oni-vim` and oni can open files with `oni <filename>` now.\r\n\r\n```\r\n$ find . | grep -v node_modules/ | xargs file | grep CRLF | cut -d':' -f1 | sudo xargs dos2unix\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266807275/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267393173", "body": "Looking [here](https://docs.travis-ci.com/user/deployment/npm/) and [here](https://github.com/bcoe/travis-deploy-example) it looks like all you have to do is add this to the `.travis.yml` file:\r\n```\r\ndeploy:\r\n  provider: npm\r\n  api_key: $NPM_TOKEN\r\n  on:\r\n    tags: true\r\n    branch: master\r\n```\r\nAnd define an `NPM_TOKEN` environment variable in your TravisCI account so your `api_key` isn't publicly visible.\r\n\r\nOf course, I haven't tested this since I've never used TravisCI. :smile: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267393173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267431632", "body": "Still playing a bit with this... It looks like Vim has `i_<C-Left>` which can go back one word while in insert mode.  This would tell us the starting position of the word we need to replace.  Unfortunately, `i_<C-Left>` doesn't work today in Oni.  It isn't handling that key combo correctly.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267431632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269047849", "body": "I don't want to disable QuickInfo, it's very useful *when I'm interested in it*.  The problem is just that if I'm running my cursor over things I don't care to see details of the things I'm flying past.  It's only when my cursor stops that I'm interested in the nearby context.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269047849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269048596", "body": "This is on Linux.  I'm using typescript 2.1.4.  Setting `debugging: true` didn't help.  I've been looking at the console output and I don't see anything special.  No change in console output before and after modifying the file either.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269048596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269049387", "body": "Also, I think changing this could improve some responsiveness in the UI.  If we buffer the event and only send the request when the cursor stops moving then we aren't calling the \"go fetch quick info\" method with every key press (repeated or otherwise).\r\n\r\nI was playing with a prototype where I buffered the event so it only displayed after a 500ms pause but this led to the quickinfo remaining visible an additional 500ms when it should've disappeared.  So this would probably require a more architectural change which is above my pay-grade. :smile: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269049387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270432017", "body": "If airline is now working in Oni, how do you guys feel about adding it as one of the default plugins included with Oni?  It's a pretty popular plugin and I think it would help make Oni look more like an IDE and less like a simple text editor.  Just a suggestion. \ud83d\ude04", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270432017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270772170", "body": "I finally got a chance to test this out.  Works great, thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270772170/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270827343", "body": "I know we already have an icon but I had an idea that I wanted to share.  I wanted to combine the Neovim 'N' logo with a japanese oni mask.  My mockup isn't great but someone might be able to take this concept and... make it better.\r\n![oni-test](https://cloud.githubusercontent.com/assets/817509/21707206/b4a8241a-d38a-11e6-898b-663d2741e8b0.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270827343/reactions", "total_count": 3, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272016171", "body": "If I bring up the Developer Tools in Oni, I've noticed that with every keypress it dumps a bunch of neovim requests:\r\n```\r\n[PERFORMANCE] neovim.request.nvim_get_current_win.start: 7581.12\r\n[PERFORMANCE] neovim.request.nvim_get_current_win.end: 7586.42\r\n[PERFORMANCE] neovim.request.nvim_win_get_position.start: 7587.325000000001\r\n[PERFORMANCE] neovim.request.nvim_win_get_width.start: 7587.905000000001\r\n[PERFORMANCE] neovim.request.nvim_win_get_height.start: 7588.360000000001\r\n[PERFORMANCE] neovim.request.nvim_win_get_position.end: 7590.535000000001\r\n[PERFORMANCE] neovim.request.nvim_win_get_width.end: 7591.0250000000015\r\n[PERFORMANCE] neovim.request.nvim_win_get_height.end: 7591.360000000001\r\n```\r\nYou can see it took 10ms to complete all of these requests, which are repeated with every keypress.\r\n\r\nIf I comment out this one event handler (in `index.tsx`), all of those neovim requests go away with no adverse behavior that I can see.\r\n```\r\n    instance.on(\"window-display-update\", (eventContext: Oni.EventContext, lineMapping: any) => {\r\n        overlayManager.notifyWindowDimensionsChanged(eventContext, lineMapping)\r\n    })\r\n```\r\nI tried navigating around a file and re-sizing the Oni window and everything still works (or at least, behaves the same).  Now, there's probably some scenario where this `window-display-update` event is useful but I just wanted to flag it as being the cause of a flurry of activity that seems unnecessary to my ignorant mind.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272016171/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272527291", "body": "https://subtlepatterns.com/tag/dark/  \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272527291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272551162", "body": "A couple examples taken from images in my link above:\r\n\r\n![background_test_1](https://cloud.githubusercontent.com/assets/817509/21945958/72002c04-d99b-11e6-9ea5-3f4d3f09a81b.png)\r\n\r\n![background_2](https://cloud.githubusercontent.com/assets/817509/21945959/7486b68c-d99b-11e6-9516-58ad4c9d9323.png)\r\n\r\nLet me know if you want me to commit either of these.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272551162/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272604386", "body": "This is Linux, no customization to any fonts.  Are you not able to reproduce it?  Is this only me?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272604386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273230700", "body": "Just updated and things look much better.  I'm now only seeing the occasional issue where the underscore disappears when the cursor is on the line **below** the underscore.  This causes underscores to flicker as I `jjjjjj` in a file.  Test with the private variables declared at the beginning of the `NeovimInstance` class declaration.\r\n\r\n![underscore](https://cloud.githubusercontent.com/assets/817509/22030696/adeef29c-dc9b-11e6-8828-f3cab3d09553.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273230700/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273583741", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273583741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273625723", "body": "I reverted to v0.1.6.1 and it was still missing the icon so I must've broken something in my local environment.  I'll close this issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273625723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273881020", "body": "> Should this be driven by the 'titlestring' option ?\r\n\r\nWell of course there's an existing option for that. \ud83d\ude44   Yes, I should probably be using it.  However, that property won't update the window for this Electron app which is communicating with the headless neovim.  Is there an event that fires when the titlestring changes so we can propagate it to our window title?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273881020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273886359", "body": "Great, thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273886359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273905648", "body": "Thanks for your help @justinmk!  The code is much simpler now.\r\n\r\nWe still have the race condition where the event might fire before the listener is set but that's our problem.  It only happens if you open a file with `oni <filename>`.  It might be worthwhile to query the `title` property during startup but I'm not sure how to do that so I'll leave it for later.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273905648/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276723289", "body": "Update for this defect, even though no one else seems to be seeing it...\r\n\r\nIn `PluginManager.ts`, line 172 says:\r\n```\r\nif (!pluginResponse.error) {\r\n```\r\nIf there is no error, display QuickInfo.  If there is an error, hide the QuickInfo (no-op).  It seems prior to editing the file, `pluginResponse.error` exists.  Unfortunately, it's an empty object `{}` so it doesn't really help me with troubleshooting.  Also, `pluginResponse` doesn't have a `payload` object so there'd be nothing to display even if I wanted to.  After editing the file, `pluginResponse` does not have an `error` object at all and it has a `payload` object with the contents of the QuickInfo.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276723289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276724366", "body": "Here are the raw events by the way.\r\nEmpty error object:\r\n`cross-browser-ipc: {\"error\":{},\"meta\":{\"destinationId\":1,\"originEvent\":{\"bufferFullPath\":\"/home/kforbes/Documents/oni/main.js\",\"bufferNumber\":1,\"bufferTotalLines\":169,\"byte\":208,\"column\":1,\"filetype\":\"javascript\",\"line\":6,\"version\":3,\"wincol\":5,\"windowBottomLine\":33,\"windowNumber\":1,\"windowTopLine\":1,\"winline\":6},\"senderId\":5},\"type\":\"show-quick-info\"}`\r\n\r\nPayload defined:\r\n`cross-browser-ipc: {\"meta\":{\"destinationId\":1,\"originEvent\":{\"bufferFullPath\":\"/home/kforbes/Documents/oni/main.js\",\"bufferNumber\":1,\"bufferTotalLines\":170,\"byte\":214,\"column\":7,\"filetype\":\"javascript\",\"line\":6,\"version\":4,\"wincol\":11,\"windowBottomLine\":33,\"windowNumber\":1,\"windowTopLine\":1,\"winline\":6},\"senderId\":5},\"payload\":{\"documentation\":\"\",\"info\":\"const os: typeof \\\"os\\\"\"},\"type\":\"show-quick-info\"}`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/276724366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277816941", "body": "This fix broke `Cut`, `Copy`, and `Paste`.  I'm guessing it's because those options use `\"` in their command.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277816941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279443733", "body": "As far as the duplicate commits go, next time try creating a new branch and creating a Pull Request from that branch.  A Pull Request includes your full branch, not specific commits, and this Pull Request is from your `master` branch, which has all your previous commits as well.\r\n\r\nIn the future, before committing your changes, create a new branch\r\n```\r\ngit checkout -b my-new-feature\r\n```\r\nThen add your changes and commit\r\n```\r\ngit add <changed files>\r\ngit commit -m \"with a message\"\r\n```\r\nNote that when pushing changes to a new branch, your origin repo won't know about that branch yet.  So tell git to create a corresponding branch on its server along with your push.\r\n```\r\ngit push --set-upstream origin my-new-feature\r\n```\r\n\r\nNow when you login to GitHub it should tell you \"hey! you pushed to a new branch! do you want to Compare & Pull Request?\".  That compare should only show the changes pushed to this new branch.\r\n\r\nAfter the Pull Request is merged in, GitHub will give you a button saying \"Pull Request has been merged. Delete Branch?\" which allows you to keep your repo clean of all these random feature branches.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279443733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279447763", "body": "Also, since you said you couldn't get the rebase to work, here are the steps I follow to rebase.  Hopefully this will work for you next time.\r\n\r\nWhen there are changes to extr0py's main repo you'll need to pull them into your fork.\r\n```\r\ngit fetch upstream\r\n```\r\nThis will download the changes from extr0py's main repo to your disk.\r\n\r\nThen tell git to apply those changes to your local repo.\r\n```\r\ngit rebase upstream/master\r\n```\r\nThis will apply extr0py's changes to your local repo on disk.\r\n\r\nThen tell git to push those changes to your GitHub fork.\r\n```\r\ngit push\r\n```\r\nAfter that, if you login to GitHub it should tell you that your branch is \"even\" with extr0py's branch.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279447763/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279450585", "body": "While it might say there aren't any changes, the line above probably said \"your branch is ahead of origin/master by `<N>` commits\".  That's where `git push` would push the rebase without adding any new \"changes\".", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279450585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279822416", "body": "There's one thing I wanted to mention about this implementation.  GVim has a `Split File Explorer` option in the `Window` menu.  Somehow, GVim opens the file explorer in a split and forces its width to 20 columns.  If I just call `:Lexplore` it opens the file explorer in a split that takes up half the window.  So I set the menu option to `:Lexplore | vertical resize 30` to force its width to 30 columns.  I figured 20 columns was too small so I made it 30 but I'm not sure if this is the best way to implement that option.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279822416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279860975", "body": "Wouldn't it be better to prevent `Ctrl+A` from performing any action at all?  The current behavior prevents `Ctrl+A` from being mapped to anything because Electron will perform the action first.  Similarly, `Ctrl+R` will perform Electron's `Reload` action rather than NeoVim's `Redo` command.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279860975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280411061", "body": "> Which menu bar should it be under?\r\n\r\nIt's under View -> Toggle Developer Tools", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280411061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280676396", "body": "Ahh, interesting, thanks for the screenshot.  We're defining the menus by telling Electron \"generate your default menus\" (which includes the default `View` menu) and then we override `menu[3]` with our `Window` items.  It looks like on Mac, `menu[3]` is the `View` menu, not `Window`.\r\n\r\nIt looks like there's the default `Electron` menu provided by Mac and then there's the `File` menu which on your system is also labeled `Electron`, throwing off the indexing and creating an off-by-one issue.\r\n\r\nI wonder if all Mac users are seeing this behavior or if there's something screwy in your environment.  At the very least, I'd expect that second `Electron` menu to be labeled `Oni` since that's what the code is trying to do:\r\n\r\n```\r\n    let firstMenu = os.platform() == \"win32\" ? 'File' : 'Oni';\r\n    menu.unshift({\r\n         label: firstMenu,\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280676396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280767820", "body": "Maybe I'm missing something, but is there a reason why we would ever want a user's vim scripts loaded **before** Oni's default set?  It seems to me we'd always want the user's custom scripts to be last.  I can understand having the config setting of \"load init.vim or not\" but I'd assume init.vim would always be loaded **after** the default config.\r\n\r\nAgain, it's possible I'm misunderstanding something here but if we now have settings for \"scripts loaded before default set\" and \"scripts loaded after default set\" then I think we should just throw away the \"before\" setting.\r\n\r\nEDIT: Nevermind, I read @TalAmuyal's comment in #225 closer and I understand the issue now.  We may or may not launch NeoVim with init.vim and then after it launches we may or may not load Oni's default stuff.  So there's no way to load Oni's default stuff before init.vim.  Can we just tell NeoVim to load init.vim after launching rather than embedding it in the command arguments?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280767820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280788212", "body": "I'm inclined to agree.  If a user has an initi.vim defined, they want it loaded.  In my mind, the main use for the default Oni config is if a user doesn't have an initi.vim of their own.  Although, with that said, my init.vim is just a couple mappings so I still like getting Oni's \"gui stuff\" while keeping my mappings.\r\n\r\nBut @justinmk, why would that mean `.oni/config.json` should be loaded after init.vim?  Wouldn't we want init.vim to be loaded last so it has the final say on any values that are defined in both places?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280788212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281439461", "body": "Did you run `npm install` before building?  Is `nvim` still on your path?  I just did a rebase on my repo and I can still use Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281439461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281769623", "body": "I looked at the code and he's taking the color of the cursor and setting its opacity to 0.2.  That's a good idea so it keeps the cursor and cursorline looking similar despite any changes to configs but it doesn't give much transparency to work with.  It might be better to darken the cursorline using the LESS `darken()` method.  Or maybe make the visual selection brighter?  I'm not sure which one would look better.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281769623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282059723", "body": "Cool, thanks for cleaning this up!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282059723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282063431", "body": "Are there any flags/options Oni currently supports?  It seems to me the help would just be:\r\n```\r\nOni [filename]\r\n       launch Oni with or without a filename\r\n```\r\nI agree we should have some help output but what else would go in the help?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282063431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282064338", "body": "Yeah, let's just go with the `0.1` opacity for now.  I'll probably want the visual highlight to stand out more in the future but I'll play with the `0.1` opacity for a while first and see how I feel about the visual highlight.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282064338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282068183", "body": "I have a feature request about this but I'm not sure how we'd go about it...\r\n\r\nWhen selecting the `Preferences -> Edit configuration` menu from Oni, it'd be nice if we seeded the file with:\r\n```\r\nmodule.exports = {\r\n  //add custom config here, such as\r\n  //\"oni.useDefaultConfig\": false\r\n}\r\n```\r\n\r\nI don't know if it'd be better to ship with a default `~/.oni/config.js` with these contents or only add those contents when the user selects the option and the file doesn't exist.  This is similar to how Atom and VSCode behave and it helps the user understand the required format, especially since we now require the boilerplate string `module.exports`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282068183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282423544", "body": "GitHub's diff viewer is highlighting my comments in red because the json specification technically doesn't allow for comments.  VSCode handles the config just fine though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282423544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283373574", "body": "Removing the log entirely is definitely the easiest solution. \ud83d\ude04  If the log file never really provides any benefit then this is probably the right course of action.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283373574/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283407581", "body": "Fixed by #263.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283407581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283428670", "body": "@justinmk, in Vim, the standard way to see if any buffers are dirty would be to get all buffers and then iterate over them to see if the `&modified` flag is set.  Would the same process be true in NeoVim or are there any special tricks I should be aware of?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283428670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283456013", "body": "Thanks @justinmk! An event is what I'm looking for.  If I run `confirm close` right now it'll display the prompt in NeoVim but I can't capture a signal to display a dialog.  This means I can't provide a file dialog to enter a filename.  The `confirm` command doesn't return until the prompt is acknowledged.\r\n\r\n![confirm](https://cloud.githubusercontent.com/assets/817509/23478953/2c2baf0a-fe80-11e6-8b8f-6cec6c945f58.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283456013/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283772251", "body": "This is addressed in #266.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283772251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283977300", "body": "This is a duplicate of #177 and #125.  I was actually going to spend some time with this defect today to see if I can do something about it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283977300/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283991383", "body": "> Seems like the recursive-readdir library we're using at the moment will fail as soon as it hits an issue, and not return a list of files.\r\n\r\nSomeone created a [fix](https://github.com/jergason/recursive-readdir/issues/42#issuecomment-269523863) for this but the author of `recursive-readdir` [refuses](https://github.com/jergason/recursive-readdir/pull/43#issuecomment-264189392) to merge it in.  I tried following the directions for manually installing that person's `#patch-2` but my `npm` just hangs when I try installing it.\r\n\r\nI tried getting `shelljs` to work but it wouldn't connect to neovim.  I didn't have any compilation errors and everything looked like it should've worked but I would just get an empty electron window when I tried launching oni.  Looks like I was hitting an error in `bundle.js` for:\r\n```\r\nrequire('./commands.json').forEach(function (command) {\r\n```\r\nsaying \"`__webpack_require__(...).forEach is not a function`\" though I have no idea how replacing `recursive-readdir` with `shelljs` could lead to that error.\r\n\r\nSo yeah, I guess I just wanted to complain.  I'm still playing with this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283991383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284003086", "body": "#266 was merged in so we can close this issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284003086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284050445", "body": "It looks like the issue I hit with `shelljs` is a known issue in the current version.  It'll be fixed in the next version in case you're still interested in using `shelljs` in oni.\r\nhttps://github.com/shelljs/shelljs/issues/667", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284050445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284435803", "body": "I believe this defect can be closed now that #268 has been merged in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284435803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284436057", "body": "I believe this defect can be closed now that #268 has been merged in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284436057/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284480038", "body": "Can we ask the owner of https://github.com/tillarnold/oni to remove `oni` from npm or is that too.... rude?  The `oni` project hasn't changed in over a year and has 0 stars.  I don't want to hurt anyone's feelings but it doesn't sound like that project has any users.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284480038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284484368", "body": "I'm not seeing the issue in my previous comment anymore.  I don't know if it was due to upgrading Electron or some other change but that final issue is fixed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284484368/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284846933", "body": "I guess I should mention that this fix is only relevant until #166 is implemented.  If the menu was changed to display all items with a scrollbar then there wouldn't be a difference between the number of \"displayed\" items and the number of \"actual\" items.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284846933/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284848935", "body": "I believe we can close this now that #258 has been merged in.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284848935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285103948", "body": "How are the line numbers stuck behind?  Are you saying that isn't line `53` you're on?  I'm not seeing an issue in that screenshot.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285103948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285498448", "body": "Ok, one more visual change.  In the menu, make the mouse hover color slightly dimmer than the selected item color so you can tell the difference.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285498448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285968521", "body": "If the guy who owns oni on npm is willing to give it to us I'd rather keep that name.  It's good to grab onivim on things like reddit since oni has another meaning, but on software-specific sites I think we should use the name oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285968521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286531751", "body": "For whatever reason, I decided to try implementing this feature myself.  I'd just like to say that this statement is simply not true:\r\n> We'd just want to re-run that global[\"require\"].  That will get a new version of the config.\r\n\r\nRe-running that require does *not* load a new version of the config.  I have everything else working but it never actually reads in the changes from the file.  I can't find what cache it's using for me to invalidate, but trying to find a way to refresh that object is taking more time than it did to implement the change.  I just wanted to complain, thank you for listening. :smile: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286531751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286535960", "body": "I found that stackoverflow link too but it deals with `require('./a.js')` and you're doing `global[\"require\"]('./a.js')` which somehow behaves differently.  I can't find the module.exports in the require cache to delete it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286535960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286537101", "body": "Nevermind, I got it.  I just had to be consistent with that `global[\"require\"]` syntax:\r\n```\r\ndelete global[\"require\"].cache[global[\"require\"].resolve(userJsConfig)]\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286537101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286883320", "body": "Thanks for the code review!  I'll try to tackle all your suggested changes when I get a chance.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286883320/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286884284", "body": "I'm torn between either fetching all buffers and checking their `&modified` flag to do this work manually or waiting for Neovim to implement this feature so we can do it the \"right\" way.  The `confirm` option isn't a viable solution, it prompts within Neovim but doesn't notify Oni of the response so I can't pop-up a file dialog.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/286884284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287185753", "body": "I was actually thinking we would need a `getModifedBuffers()` method which would return a list with buffer reference and current filename (if applicable) of every dirty buffer.  If the resulting list is empty all is well, but if there *are* dirty buffers we wouldn't need to have follow-up method calls to fetch that information.  We'd want to know the current filename to display it in the dialog and the associated buffer reference so we could perform the selected action (save or discard).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287185753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287199825", "body": "I tried synchronizing this branch and evidently messed things up.  I'll have to cleanup this branch now...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287199825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287624974", "body": "Ok, I tried claiming the bounty.  I had to create an account with bountysource to claim it and now I guess you have to approve it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287624974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287626402", "body": "There currently isn't a way to hide the menubar but that should be a pretty straightforward config option.  I'll see what I can do.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287626402/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287651214", "body": "Makes sense to me.  Closing Pull Request.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287651214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287673246", "body": "It's an issue with the search algorithm.  It's looking at the entire path and removing a character from the search string as it finds a match.  You can see it highlighted `o`, `p`, `e` in the path and by the time it got to the filename it only had `n` left in the search string.\n\nI don't know if we need to search the filename first or allow for characters in the search string to happen multiple times.  I've been giving this some thought but I don't have a good solution yet.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287673246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287903231", "body": "Created #306 using fuse.js.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287903231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287909617", "body": "Personally, I think `fuse.js` behaves better than the old logic but there are still a couple scenarios where it's lacking.  Searching for `NeovimInstance.ts` works well but searching for `browser/src/NeovimInstance.ts` requires more extra characters than should be needed.  So I think this is an improvement but not quite perfect.  It's possible some more tweaking of fuse's options would give us better results though.  I haven't played with any of the options like `distance`, `threshold`, and `location`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287909617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287969013", "body": "@jasonszhao, I think that's a consequence of #223, due to the discussion in #216.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287969013/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288119307", "body": "Ok, I pushed a change that caches searches longer than 5 characters since the search takes more time as the search string gets longer.\r\n\r\nI'm basing the cache on `process.cwd()` so we'll reset the cache any time the current working directory changes.  Unfortunately, I tried testing this with `:cd <dir>` in neovim and it didn't update the `process.cwd()`.  I thought your `DirChanged` event would update `process.cwd()` but I didn't see it work.  Am I missing something?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288119307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288122596", "body": "It looks like I'm not even seeing the `DirChanged` event firing, so that'd explain why `process.cwd()` isn't updating...\r\n\r\nAlso, I'm seeing some weird behavior where oni launches but doesn't connect to neovim until I hit `<Enter>` so it's possible my dev environment is all screwy again and that explains the lack of `DirChanged` event.\r\n![connect](https://cloud.githubusercontent.com/assets/817509/24156184/82c85bf6-0e1b-11e7-915d-dbfa776e4434.png)\r\n\r\nI guess I'm just saying my code may work correctly even though I'm not seeing the correct behavior. :smile: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288122596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288226738", "body": "Ok, I changed it to use your suggestion.  I tweaked the logic a bit to remove all duplicate characters from the `searchString` so we're not checking them multiple times but otherwise it's the same.\r\n\r\nNo, I never figured out what's going on with the `DirChanged` event.  It's just an annoyance right now, it doesn't prevent me from doing anything.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288226738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288611309", "body": "I was thinking the same thing, a video should be pretty easy for us to help out with.  Here's the script that I've been running through my head.  Feel free to do it yourself if it makes sense.  I'm thinking this would be a youtube video since it's a bit much for a single gif.\r\n\r\n1. Start with Oni launched but no file loaded\r\n2. Use File -> Open dialog to open a Typescript file\r\n3. Move the cursor over an item to show the QuickInfo popup\r\n4. Start editing the file to show the autocompletion popup\r\n5. Hit `Ctrl+P` to open the Fuzzy Finder\r\n6. Type a couple characters to show the filter working, select another Typescript file\r\n7. Edit the file and introduce an error\r\n8. Save the file to show the error popup\r\n9. Edit the file again (somewhere else) and demo the live evaluation\r\n10. Move the cursor over one of the methods in the file\r\n11. Hit `Ctrl+Shift+P` to bring up the command palette\r\n12. Type characters (to show filtering) and select Find All References\r\n13. Select one of the references in a different file and hit `<Enter>` to jump to that file\r\n\r\nIn my mind, this progresses gradually from features you'd expect to find in a text editor to features that you'd find in an IDE.  It introduces concepts in a simple way first (Fuzzy Finder, error popup) before showing those concepts expanded into further uses (Command Palette, live evaluation) and ends with a totally IDE feature of Find All References.  And yes, I've spent too much time today thinking about this.  I think it captures all the fancy features in Oni though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288611309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288773711", "body": "Making that script more robust is definitely a good idea, but for the specific use-case, would it make more sense to release a self-contained .tar.gz or something for Linux along with the Windows .exe and MacOS .app in #312?  I don't know if a local `npm install` is the best route for users who just want to play with Oni.  If we can just .tar.gz a working directory in Linux I wonder if that would be enough.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/288773711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289252412", "body": "Why didn't you just use `Math.floor()`?\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289252412/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289548800", "body": "I think you should do a new release as soon as you get this working.  Release binaries will be really cool!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289548800/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289821054", "body": "We need to update the README.md now\r\n\r\n> For Windows, a pre-built x86 binary of NeoVim is included.\r\n> \r\n> For OSX and Linux, there is no included pre-built binary. Please Install Neovim and ensure the 'nvim' binary is available. Version 0.2.0 is required.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289821054/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289914767", "body": "Another update.  I just tried this again and now there's only a minor difference in behavior.  If I open a file with Fuzzy Finder or File -> Open, everything works fine.  If I open a file by providing the filename on the command-line, the QuickInfo works fine but the imported packages don't get syntax highlighted.  I can't find any feature that isn't working, it's just that if I open a file with Fuzzy Finder the imports turn blue yet if I provide a filename on the command-line the imports stay the normal text color.\r\n\r\n`oni browser/src/NeovimInstance.ts`\r\n![without](https://cloud.githubusercontent.com/assets/817509/24428869/0ed0f12e-13cd-11e7-82e6-ef2cb146c1f9.png)\r\n`oni` `<Ctrl-P>` `NeovimInstance.ts`\r\n![with](https://cloud.githubusercontent.com/assets/817509/24428873/116a8670-13cd-11e7-80f0-f02979dbf199.png)\r\nAs far as I can tell, this is now just a minor visual oddity.  I'll close this issue and if I find a difference in behavior I'll file a new issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289914767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289972677", "body": "You're right, I don't think this has been addressed.  I wrote that feature on Linux and I don't have a Windows box to test with so I'm sure it's my fault.  I'll have to see how Neovim expects this to work.  I'm afraid to just blindly replace `\\` with `/` since paths with spaces might be sent with `\\ ` (`<backslash><space>`).  I might be able to quote the path, though we're already quoting the whole command with `execute \":e <file>\"` under the hood and if I try quoting the path with `'` that would probably prevent variables from being expanded (if that matters).  And yes, I'm just rambling at this point.\r\n\r\nAs a potential workaround, try using the Fuzzy Finder with `<Ctrl-P>` and see if that opens files correctly.\r\n\r\nIf you're willing to look at the code to debug it, `Menu.js` is sending `\":e \" + name` to `index.ts` which executes `\"exec \\\"\" + command + \"\\\"\"`.  There's probably some combination of quotes or string replacements we can do on that string.  If Fuzzy Finder works, you an compare that with `QuickOpen.ts` which is running `\"e! \" + fullPath`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289972677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290116524", "body": "> One other issue is that the name argument from openDialog in Menu.js is actually an array of strings - so there is a chance that we could get more than one filename (although based on the current args, I don't think this is the case).\r\n\r\nhttps://github.com/electron/electron/blob/master/docs/api/dialog.md\r\nI'm not setting `multiSelections` to `true` so I believe we're guaranteed there will only be one result from the `showOpenDialog()` call.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290116524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290137877", "body": "@justinmk, I'm not sure if this is a corner case or a non-existent case, but is it possible for runtime paths to include variables like `$PATH` or `$HOME`?  If so, wouldn't single quotes prevent the variable expansion?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290137877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290262951", "body": "I've seen the same issue but couldn't reproduce it.  When you opened the file it tried opening `$MYVIMRC` rather than expanding that to `init.vim`.  Saving the file then wrote out that incorrect name.\n\nI saw the problem once but then when I selected the menu item again it opened the file correctly.  I'm not sure what steps are needed to reproduce. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290262951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290263704", "body": "When you select `Edit Neovim Config`, check to see if it says `$MYVIMRC [new file]`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290263704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290452073", "body": "> Strange - I wonder what we are sending over in browser\\src\\index.tsx:\r\n\r\nMaybe I'm misunderstanding your comment, but `$MYVIMRC` is coming from `Commands.ts`\r\n```\r\nnew CallbackCommand(\"oni.config.openInitVim\", \"Edit Neovim Config\", \"Edit configuration file ('init.vim') for Neovim\", () => neovimInstance.open(\"$MYVIMRC\")),\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290452073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290452281", "body": "For what it's worth, I see this issue on my Ubuntu system but not my Arch system. :man_shrugging: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290452281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290460128", "body": "I'll dig a bit deeper but here's the current behavior:\r\n\r\nWhen I hit `v`, I see `-- VISUAL --` in Oni but no `mode_change` event fires.  I then hit `i` (nothing happens) then `{` and suddenly I get a `mode_change` event for `cmdline` and the cursor is stuck in `|`.  When I hit `<Space>`, I get a `mode_change` for `cmdline` followed by `normal` followed by `cmdline` followed by `normal`.  `normal` is the last `mode_change` so the cursor goes back to a normal mode block.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290460128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290519150", "body": "Another update.  When I hit `{` and get the first `mode_change` for `cmdline`, the msgpack object actually has 15 entries of `normal` and 1 entry of `cmdline` which happens to be at `a[0][0]`.  The code is only expecting to find an entry at `a[0][0]` so we set our new mode to `cmdline`.\r\n\r\n![mode_change](https://cloud.githubusercontent.com/assets/817509/24522006/617e1fa8-154b-11e7-90ae-ad4870f91cf6.png)\r\n\r\nI'm not sure how Oni is supposed to handle this object but for this specific scenario, ignoring it would've been the best choice.\r\n\r\nWhen I hit `<Space>` after being in this state and get `cmdline`, `normal`, `cmdline`, `normal` they're each `mode_change` events with a single entry at `a[0][0]`.  So at least those events are following our expected format, though I don't know why Neovim is firing them back-to-back like that.\r\n\r\nAlso, the reason for this issue in Oni is because `Cursor.tsx` sets itself to `|` anytime the `mode !== 'normal'` so `cmdline` comes in and we go to `|`.  I was tempted to fix this by just changing that logic to `mode === 'insert'` but Neovim actually behaves differently from Vim in this case.  In Vim, if I go to `cmdline` mode (`:`) the cursor remains as a block.  In Neovim, if I go to `cmdline` mode the cursor goes to `|`.  So Oni changing the cursor to `|` when it sees `cmdline` is the correct behavior (for Neovim), I just don't know why the event fires when I do `vi{`.\r\n\r\nEDIT: For what it's worth, I'm seeing this behavior on `NVIM v0.2.0-989-g6fbcbebae`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290519150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290534958", "body": "I wonder if Oni is actually running some requests under the hood which are modifying the mode.  I'm seeing things like:\r\nhttps://github.com/neovim/neovim/issues/5685\r\nhttps://github.com/neovim/neovim/issues/6166\r\nwhich are probably the real root cause for the madness I'm trying to code around.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290534958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290729957", "body": "Good job @am2605!\r\n\r\n@extr0py, I like your idea with Option 2, especially if it's more aligned with your vision for the project.  I think we should hide `Open Neovim Config` if `oni.loadInitVim` is `false` but I also think we should add a comment in the default `config.js` file which says something along the lines of \r\n```\r\n\"oni.loadInitVim\": false #enabling this feature will enable 'Open Neovim Config' menu option\r\n```\r\nSo users will know why the menu item may or may not appear.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290729957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291236521", "body": "I was able to reproduce this in Linux.  Fixed in #347.  Thanks for catching it!\r\n\r\n@extr0py, since this affects a user's first impression of Oni I'd recommend rolling out a new release with the fix. :smile: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291236521/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291243448", "body": "Added a small tweak so we watch `~/.oni` if it exists, even if `config.js` doesn't yet exist.  This means the watcher won't be set for the first launch of Oni but on subsequent launches of Oni changes to `config.js` will automatically take effect, even when the file is first created.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291243448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291982883", "body": "We have a linter that checks for style errors as part of the build process.  Your commit failed for these (minor) issues:\r\n```\r\noni/browser/src/UI/Reducer.ts[30, 32]: trailing whitespace\r\noni/browser/src/UI/Reducer.ts[32, 58]: Missing trailing comma\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291982883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292563942", "body": "I was thinking earlier about this but with a different approach... would it be possible to launch electron, connect to Neovim, wait maybe 1-2 seconds and *then* load all the fancy features Oni provides?  If we can display a window with Neovim as fast as possible I think it would be fine for a small delay before loading all the quickinfo, autocomplete, fuzzy finder, command palette, etc.\r\n\r\nI guess in my mind, if I see the text of a file immediately and then 2 seconds later the syntax highlighting kicks in, that doesn't bother me.  I don't consider that a slow application.  Yet if I sit there for 2 seconds wondering if the OS registered my double-click or if something is hung and suddenly the app appears but is fully loaded, I'd still think it was slow.  Personally, I think \"get the file displayed\" should be the top priority and everything else can be secondary without sacrificing the \"feel\" of a quick startup.  It's all user perception anyway; numbers don't matter if things \"feel\" quick.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292563942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292637174", "body": "It is the `npm link` command which is adding `oni` to your `$PATH`.  The current installer is not performing an equivalent operation.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292637174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292993343", "body": "Fixed by #356.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292993343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293009862", "body": "Adding pretty pictures of this change so we can discuss.\r\n\r\nSingle-line error:\r\n![tooltip](https://cloud.githubusercontent.com/assets/817509/24872305/3ebe8dbc-1dda-11e7-9817-d78f26e20fbc.png)\r\n\r\nMulti-line error:\r\n![large](https://cloud.githubusercontent.com/assets/817509/24872317/45ec5254-1dda-11e7-8067-ed112e2687bc.png)\r\n\r\nAbove line when close to bottom of window:\r\n![above](https://cloud.githubusercontent.com/assets/817509/24872332/526e5572-1dda-11e7-843c-da2736a85223.png)\r\n\r\nFunctionally, this works beautifully, nice job!  I have some opinions about the colors though.  Is there a reason why you hardcoded that purple?  Did you take it from somewhere else in the current Oni styling?  I wonder if we could grab one of the colors from the current neovim theme to dynamically set the background color of that tooltip.  Or maybe just leave it gray as it was before.  Also, I liked how the previous implementation had a `0.8` opacity so it didn't *completely* cover the adjacent lines while still being readable.\r\n\r\nI'm perfectly happy with the functionality of this error tooltip so we could merge it in, but I'd like to have a bit of a discussion about what color we want to give the background.  That's the only thing that stands out for me.  I'm afraid purple won't look good against all possible color schemes.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293009862/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293014964", "body": "@justinmk, can you tell us what \"the remaining Windows bug in nvim core\" is so we can follow its progress?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293014964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293065053", "body": "> Getting this quasi-synced with the color scheme in vim is a must for the future.  I don't know if this is doable now.\r\n\r\nOk, I thought it'd be relatively easy since we're already pulling out `backgroundColor` and `foregroundColor` from Neovim.  I'm not sure which theme property we'd use for the error background but I thought we had a set of colors to pull from.\r\n\r\n\r\n> I'm personally not a fan of opacity, since it makes the message harder to read. I like it on the small error markers on the right since they're always visible, but this one is only visible when you're on that line.\r\n\r\nThat's fair, you can just move the cursor to a different line if you care that the error popup is covering up an adjacent line.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293065053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293394626", "body": "For what it's worth, all that command does in vscode is creates a symlink to `/usr/local/bin/code`.  And it only enables that \"Shell Command\" `if (process.platform === 'darwin') {`.  I guess we could put a similar command in our Command Palette since users don't get to answer any questions during install on a Mac.\r\n\r\nOr, on first launch (on Mac) we could pop-up a prompt to the user asking \"would you like to install 'oni' in your $PATH?\" and set a flag in `config.js` so the question is never asked again on future launches regardless of the answer.  I'm not sure which behavior Mac people would prefer; maybe we should do both, prompt at first launch and add command to palette so they can change it later.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293394626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293412977", "body": "Build succeeded.  Would anyone be willing to test the output from this build?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293412977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294049259", "body": "It looks like neovim/neovim#6359 was closed in preference to neovim/neovim#6387 which was closed in preference to neovim/neovim#6497 which was merged in two days ago.  So it's possible this issue has been resolved in the latest neovim build.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294049259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294050242", "body": "Fixed by #357.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294050242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294050388", "body": "Fixed by #360.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294050388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294080971", "body": "I changed the case of the Start Menu entry.  I'm afraid to change `\"AppName\"` to `prodName` globally though.  I know Windows isn't case-sensitive but I'm afraid it may have unintended consequences.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294080971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295284646", "body": "Don't forget to claim your bounty!\r\nhttps://www.bountysource.com/issues/39723750-microsoft-language-server-protocol", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295284646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295332416", "body": "It's my understanding that switch statements are still preferred in javascript when there are more than 3 conditions.\r\nhttp://stackoverflow.com/questions/2922948/javascript-switch-vs-if-else-if-else\r\nhttp://archive.oreilly.com/pub/a/server-administration/excerpts/even-faster-websites/writing-efficient-javascript.html\r\nhttps://www.safaribooksonline.com/library/view/high-performance-javascript/9781449382308/ch04s02.html\r\n\r\nOf course, with all that said, I really did it because I find `switch` statements easier to read. :laughing:  I doubt these methods were performance bottlenecks.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295332416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295334629", "body": "Oh definitely, object lookup would be faster than `else-if` or `switch` statements.  I don't think it's worthwhile to create an object of callback functions for this scenario though.  Like I said, I doubt this is a performance bottleneck, I just find it easier to read.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295334629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295834357", "body": "Addressed by #394.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295834357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296303178", "body": "Yep, I can reproduce this.  That's some weird behavior.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296303178/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296700019", "body": "This is currently being worked on as #299", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296700019/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297129602", "body": "This is probably related to #331.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297129602/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297186521", "body": "I've seen that error too but it doesn't actually affect the resulting build.  Seems benign.  It was introduced by #351 for the language server support.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297186521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297187012", "body": "@saibing, can you give a little more detail?  I don't know what it means to change the input method in vim.  Is there a command you're trying to run which fails in Oni?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297187012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298668198", "body": "I have mixed feelings about this.  I can understand wanting to lower the barrier to entry by having the expected key combos for copy/paste, but at the same time, this would get in the way of a Vim-savvy user who wants to use (e.g.) visual block mode.  At the very least, I think this should be configurable.  We should probably define a \"beginner mode\" and a \"true Vim experience\" which can be toggled.\r\n\r\nEDIT: @extr0py, your workaround of only setting those mappings in certain modes actually strikes a good balance.  Hopefully a Vim-savvy user wouldn't try entering visual block mode while in insert mode.  I believe some users hit `Ctrl+C` to exit back to Normal mode but if we're only modifying visual mode maybe this would be acceptable.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298668198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298670364", "body": "> @extr0py I've overwritten the neovim files (bin, share, and everything below that) with the 0.2.0 release :)\r\n\r\nDid that resolve the issue or is `$MYVIMRC` still not set for you?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298670364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303798545", "body": "I was going to work on this issue since it seemed pretty straightforward, especially since we can use vscode's implementation as a starting point.  Unfortunately, after looking a bit closer, I found this:\r\nhttps://github.com/Microsoft/vscode/blob/92ee0d1e067ae70706cddaa6feca9a7659aa4d90/src/vs/workbench/parts/cli/electron-browser/cli.contribution.ts#L101\r\n\r\nvscode is running `osascript` to prompt the user for administrator privileges to write to `/usr/local/bin`.  I thought I could just create a symlink, I didn't think about the fact that it would be to a restricted directory.  So I guess someone who actually owns a Mac would need to implement this to make sure they get that osascript right.\r\n\r\nIf anyone cares, this is what I was going to add after the `commands[]` declaration (line 67) in `Commands.ts`:\r\n```\r\n    if (Platform.isMac()) {\r\n        if (fs.existsSync(\"/usr/local/bin/oni\")) {\r\n            commands.push(new CallbackCommand(\"oni.config.removeFromPath\", \"Remove from $PATH\", \"Disable executing 'oni' from terminal or Spotlight\", () => {\r\n                fs.unlink(\"/usr/local/bin/oni\")\r\n            }))\r\n        } else {\r\n            commands.push( new CallbackCommand(\"oni.config.addToPath\", \"Add to $PATH\", \"Enable executing 'oni' from terminal or Spotlight\", () => {\r\n                # TODO: prompt for admin privileges (osascript?)\r\n                fs.symlink(\"/Applications/Oni.app/Contents/MacOS/Oni\", \"/usr/local/bin/oni\")\r\n            }))\r\n        }\r\n    }\r\n```\r\nAlso, there's probably a more clever way to determine the name of the currently running executable rather than hardcoding `/Applications/Oni.app`.  I hope this might help someone else take the feature to completion; I can't take it any further since I don't own a Mac.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303798545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304038702", "body": "@HiCodin, if you're willing to implement this yourself and submit a Pull Request here are a couple pointers.\r\n\r\nImplement it ourselves: https://github.com/electron/electron/issues/526\r\nor\r\nUse library: https://github.com/mawie81/electron-window-state (might be abandoned)\r\n\r\nNote that we already have a `config.js` (look at `Config.ts`) which we could use to persist the size/position.  Also, `main.js` (at the root of the project) is where the `closed` and `window-all-closed` events are handled, although our `Config` instance is only available from the Oni process `main.js` creates so you'd have to use events like 'rebuild-menu' to communicate with it.  You can send events to Oni with `mainWindow.webContents.send(\"<event name>\", <args>)` or send events to `main.js` with `ipcRenderer.send(\"<event name>\", <args>)`.  `Menu.js` has examples of sending to Oni, `browser/src/index.tsx` has examples of sending to `main.js`.  I'm guessing you'd want to send a `reset-size` event after the Config is done loading and send a `save-size` event during the close event.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304038702/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304932844", "body": "I'm not seeing this behavior.  Has it already been fixed or do you have to do something special to trigger it?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304932844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304952282", "body": "This should be addressed by #269.  Basically, our current implementation fetches the list of all filenames under your current directory before displaying anything.  If you have a ton of files under your current working directory it may take awhile.  We're currently excluding `node_modules` by default since that directory is typically huge but you may have other large directories.\r\n\r\nYou can use the following config option to mitigate the issue:\r\n> oni.exclude - Glob pattern of files to exclude from Fuzzy Finder (Ctrl-P). Defaults to [\"\\*\\*/node_modules/\\*\\*\"]\r\n\r\nHopefully you have a gigantic folder which you could safely exclude as a workaround.  If the `Loading Files...` truly *never* goes away then I don't know what's going wrong, that'd be something new.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304952282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304954788", "body": "It looks like the \"python dependency on windows\" portion of this issue has been addressed (Neovim fix committed, new build of Oni created) and the Rust portion of the request is tracked in #385.  @extr0py, can this issue be closed?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304954788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305631282", "body": "I don't have strong feelings about this, I'm just curious.  Would this feature prevent users from using plugins like airline and powerline?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305631282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305809593", "body": "@unclechu, now that #376 and #453 have been fixed, would you mind re-compiling from the latest commit and see if you can still reproduce this issue?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305809593/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305910668", "body": "Seems simple enough.  I've created pull request #472 to do it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305910668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305974455", "body": "Ok, assuming @extr0py agrees with the location of this code, I'm pretty happy with this functionality.  If a single file is drag/dropped, it replaces the current editor; if multiple files are drag/dropped, the first file replaces the current editor and the remaining files are opened in new tabs.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305974455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306202257", "body": "Hey @gynet, this feature has been merged in.  You could build from source (`npm run build`) or download the latest v0.2.5-rc to give it a try.  Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306202257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306203875", "body": "Interesting, this isn't a problem on Linux; it loads binary files just fine.  I tried with nvim.exe, which is 3.8MB so I don't think large file sizes are a problem.  I wonder if this issue only occurs on Windows.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306203875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306228462", "body": "Closing this defect as it was confirmed fixed in #402.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306228462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306235150", "body": "Woops, didn't mean to click that button...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306235150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306242845", "body": "@saibing, I finally got a chance to look at this.  First of all, you said:\r\n> editor.quickOpen.execCommand = \"fzf\"\r\n\r\nThe format actually needs to be in json, so the string should be:\r\n> \"editor.quickOpen.execCommand\": \"fzf\"\r\n\r\nNow, even with the correct format, this still fails:\r\n> Uncaught Error: Command failed: fzf\r\n> panic: Failed to open /dev/tty\r\n> \r\n> goroutine 1 [running]:\r\n> github.com/junegunn/fzf/src/tui.openTtyIn(0x551c20)\r\n>       /Users/jg/.vim/plugged/fzf/gopath/src/github.com/junegunn/fzf/src/tui/light.go:35 +0xb0\r\n>github.com/junegunn/fzf/src/tui.NewLightRenderer(0xc420012e40, 0x100, 0x8, 0x610101, 0x562bb8, 0x0, 0xb)\r\n>       /Users/jg/.vim/plugged/fzf/gopath/src/github.com/junegunn/fzf/src/tui/light.go:116 +0x4e\r\n>github.com/junegunn/fzf/src.NewTerminal(0xc4200ac000, 0xc42000af80, 0xc420014730)\r\n>       /Users/jg/.vim/plugged/fzf/gopath/src/github.com/junegunn/fzf/src/terminal.go:311 +0x189\r\n>github.com/junegunn/fzf/src.Run(0xc4200ac000, 0x569ab0, 0x7)\r\n>       /Users/jg/.vim/plugged/fzf/gopath/src/github.com/junegunn/fzf/src/core.go:209 +0xc58\r\n>main.main()\r\n>       /Users/jg/.vim/plugged/fzf/main.go:8 +0x47\r\n>\r\n>    at checkExecSyncError (child_process.js:502:13)\r\n\r\nIf you look closely at that stack trace, `fzf` is created by `junegunn` and apparently the code is trying to access `/Users/jg/`.  I'm not sure if that's relevant, I just find it odd.\r\n\r\nAnyway, I *can* run `fzf` from the command-line so I'm not sure if Oni is doing something wrong or if fzf is making assumptions which aren't true when run by Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306242845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306248124", "body": "@extr0py, I think the `overriddenCommand` feature is fundamentally flawed.  That external command is only used to fetch the initial set of files.  All filtering is then done in `Reducer.ts:filterMenuOptions()`.  So even if `fzf` has lightning fast filtering and clever algorithms for fuzzy matching, Oni wouldn't use them.\r\n\r\nI think if `overriddenCommand` is defined we should probably send `searchString` to it in `filterMenuOptions` and hope the `overriddenCommand` takes the string as an argument.  I'd be happy to make that change if I could get fzf working as an example.  I think we need to launch fzf in a non-interactive mode so we can send it a string (or \"\") and have it return the filter to us.  I'm just not sure if that's a feature fzf supports.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306248124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306322123", "body": "The appveyor build failed because it couldn't download a dependency:\r\n> Error: GET https://github.com/electron/electron/releases/download/v1.6.0/chromedriver-v2.21-win32-ia32.zip returned 500\r\n\r\nIf you poke the \"re-build\" button it should work but I don't have permission to click that button myself. :stuck_out_tongue_winking_eye: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306322123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306841209", "body": "Closing pull request due to Fear, Uncertainty, and Doubt.  \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306841209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306930979", "body": "What OS are you building from?  I had this problem awhile back but it went away.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306930979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306933991", "body": "Ok, I made that change to `ProjectConfig.ts`, let me know if there are any other changes needed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306933991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307239168", "body": "> see if we can use the async version of findUp in tslint\r\n\r\nI might not be understanding this.  Are you suggesting I do:\r\n```\r\n .then(() => {\r\n    findUp(\"tsconfig.json\", { cwd: currentWorkingDirectory })\r\n })\r\n.then((project) => {\r\n```\r\n\r\nGiven this call of `findUp` returns another promise, I think I'd have to nest the remaining promises like this:\r\n```\r\n .then(() => {\r\n   findUp(\"tsconfig.json\", { cwd: currentWorkingDirectory })\r\n    .then((project) => {\r\n      //all other code\r\n    }\r\n })\r\n```\r\n\r\nLet me know if I'm missing something.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307239168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307823067", "body": "Cool, thanks for explaining it @extr0py!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307823067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307896155", "body": "Looks like the logic is sound.  I can set `execCommand` to `ls` or `find` and it works correctly.  It must be something specific to `fzf` that I just can't get to work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/307896155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308181690", "body": "> One other issue I saw is that in the initial case - with fzf -f - there is an error of \"query string required\". \r\n\r\nYeah, you can see the second commit in the pull request where I removed that behavior.  I was originally sending `\"\"` as the query in the initial case so `fzf` had an argument but then I tested with `ls -a ${search}` and `find . -name \\*${search}\\*` and for those scenarios, `\"\"` would fail.  You can always set the `execCommand` to `fzf -f \"${search}\"` in the config rather than putting those quotes in the code.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308181690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308248664", "body": "> We could wrap the execSync call in a try/catch, and ignore the error code.\r\n\r\nI've committed a change where we'll fallback to our normal filtering mechanism if the `execSync` call fails.  Unfortunately, when the error fires it doesn't provide any stdout so I can't just ignore the error and use the output.\r\n\r\n> We could use an alternative to execSync. This means we'd have to restructure the code a bit, because the reducers aren't designed to work with an asychronous flow - we might want to move the asynchronous processing to QuickOpen\r\n\r\nThat's above my pay grade.  I don't know how to move the code outside of the action/reducer code since no one is calling that method directly.  I can't just update references.\r\n\r\nI'm tempted to merge in this code since it does what it sets out to do.  I think the errors with `fzf` are specific to `fzf` and we can always make the code asynchronous later.  I think it's a step in the right direction at least.  Although, if you can explain how you envision moving this code into `QuickOpen` I can certainly give it a try.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308248664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308817986", "body": "Changing difficulty to medium now that #6 is implemented.\r\n\r\nI think this will still be on hold until Clang 5.0 comes out.  It looks like Clang 5.0 will come with `clangd`, which implements the language server protocol.\r\nhttps://www.phoronix.com/scan.php?page=news_item&px=LLVM-Clang-Clangd-Server", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308817986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308818571", "body": "Moving back to 0.3 since 0.2.5 was released without this getting merged in, #488. :stuck_out_tongue: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308818571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308839951", "body": "Using the latest build of Oni and Neovim, I'm not seeing this issue anymore.  I'm guessing it was fixed in Neovim and we're probably just receiving the correct mode change events now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308839951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311828454", "body": "There isn't really a good way to open multiple files yet, although I did\nrecently add drag-n-drop support for multiple files.  So you can give that\na try in the short term.\n\nOn Wed, Jun 28, 2017, 1:25 PM Ryan C <notifications@github.com> wrote:\n\n> Hi,\n>\n> Love the project!\n> I've been messing and using this in my day to day, and its made my Windows\n> Dev experience much better, and very close to how I edit in Linux with pure\n> neovim.\n>\n> One thing I wonder is how to open multiple files?\n> I expected that I would be able to use the tab or split open from the menu\n> and select multiple files to have them all open at once, but that doesn't\n> seem to be the case.\n>\n> Normally I'd use some form of fuzzy file opener to just open up more\n> tabs/splits, but I'm also having an issue where that isn't opening the\n> current directory...I can open a separate issue for that though.\n>\n> This occurs with 0.25 and 0.26rc in Windows 10.\n>\n> I've identified the relevant bit in Menu.js that deals with this, so I\n> guess I could submit a PR?\n>\n> It looks like the dialog.showOpenDialog just needs the multiSelections\n> property added, and a bit of logic to deal with how the first file is dealt\n> with.\n> If there is no file open should a new tab be made anyway and leave an\n> empty tab, or should we open the first file in the first tab, assuming no\n> changes have been made in that tab?\n>\n> Wasn't sure if I was missing something that would let me already do this,\n> or there was a reason it didn't work as (I) expected.\n>\n> Cheers!\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/503>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAx5ZW3krizpCJWA2qKcppmkQP2M-kLVks5sIqizgaJpZM4OIaix>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/311828454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312022281", "body": "Since I like adding scope-creep to features I'm not working on \ud83d\ude06, would it be possible to configure any arbitrary language-server implementation from `config.js`?  It seems like it really only involves a command to execute and potentially args to send to that command.  If the current plugins are primarily boilerplate code it seems like we could build this on the fly with parameters provided in the config.  I mean, `config.js` is just a json object, we can add more nesting if needed.\r\n\r\n@extr0py, let me know if I'm way off-base here, I don't know what all it takes to provide each aspect of a lanuage server (goto definition, formatting, syntax highlighting, completion) so it may require more than just a nested object of flags (`goto:true`, `completion:false`) to configure.\r\n\r\nEDIT:  I guess what I'm thinking is:\r\n```\r\n\"oni.languageserver.java\" = {\r\n   \"name\": \"Java\",\r\n   \"extension\": \"*.java\",\r\n   \"provider\": \"myfunjavalanguageserver --hardcoded_args --file ${filename_placeholder}\",\r\n   \"features\": {\r\n         \"goto_def\": true,\r\n         \"syntaxHighlighting\": true,\r\n         \"formatting\": false,\r\n         \"completion\": true\r\n    }\r\n}\r\n```\r\nLet me know if I'm crazy.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/312022281/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313156688", "body": "> Incidentally, setting the \"autochdir\" flag in my init.vim made this work as I'd expect.\r\n\r\nAs a short-term solution to this issue, should we add `autochdir` to Oni's default `init.vim`?  It seems like a reasonable expectation for new users and people with complex `init.vim` files which may conflict with that setting will most likely be disabling our default `init.vim` anyway.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313156688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314502707", "body": "The compilation errors are actually https://github.com/Microsoft/TypeScript/issues/16772, which can be resolved by also updating `ts-loader`.\r\nSo `typescript: 2.4.1` and `ts-loader: 2.2.2`.  I was going to submit a Pull Request with this fix but Oni currently doesn't build due to an unrelated error:\r\n```\r\nERROR in ./browser/src/Plugins/Api/Oni.ts\r\nClass 'Oni' incorrectly implements interface 'Api'\r\n```\r\nI didn't want to submit a Pull Request with a broken build so I decided to just document the fix here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314502707/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315377448", "body": "I believe this issue was resolved with #526 so I'll go ahead and close it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315377448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315386802", "body": "Do you need to run `npm link` again?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315386802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320755334", "body": "I've only seen the gif (haven't played with it myself) so correct me if I'm wrong, but are we really only showing bookmarks when you're in your home directory?  I understand most users won't be interested in opening files in Oni's install dir but I don't think it's a safe assumption that no one will ever want to open files in their home directory.\r\n\r\nIf this is a way to mitigate the effect of scanning large directories, I'm fine with showing bookmarks *first* in the list and show them *immediately* as we fetch the directory contents asynchronously, but I don't think you should explicitly prevent getting the home directory's contents.  And again, if I'm misunderstanding something and you *are* still fetching the home directory's contents then you can ignore this rant. \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320755334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321019709", "body": "@extr0py, I actually love the new logo.  I agree you want something simple so it is still recognizable at 16x16 pixels but smooth enough that it looks good at higher resolutions.  I think the blue/green gradient *is* reminiscent of Neovim and I like how the triangle in the middle is almost like a 'v' for vim. \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321019709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321267703", "body": "Also, it looks like any files opened using the fuzzy finder follow the Open code path because those files are ignored by `gt` as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321267703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322021141", "body": "Setting `editor.showVimTabs` to `true` didn't appear to have any effect on this.  Also, even if this *could've* been handled by a config setting I'd still call it a defect since `gt` iterates through all tabs and `:q` causes `gt` to skip the tab but the tab is actually still visible.  Even if you're trying to distinguish between buffers and tabs I think we're still mixing metaphors here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322021141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322021249", "body": "This feature looks like it'll be amazing when it's all done!  Way to go!  @extr0py, are you sure you don't want to hold off on v0.2.8 until this feature is in? :laughing: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322021249/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323839193", "body": "These will be awesome enhancements, but could you add \"update README\" to your list of todo's?  We need to be sure to track all the various key combos we're introducing, especially when there isn't a (neo)vim equivalent.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323839193/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324699986", "body": "> This is awesome. One thing to consider adding is to show what will be executed, similar to what other apps show what the short cut is, but here, how to do that in vim.\r\n\r\nI had a similar idea when I wrote the first (lame) attempt at a menu.  Unfortunately, Electron forces all shortcuts to be in ALL CAPS, which is dangerously misleading when we're talking about Vim commands.  If anyone can find a way to trick Electron into showing shortcuts exactly as we define them then I completely agree we should show the equivalent Vim command.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324699986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325017555", "body": "> I'd like to help with the project. Can you (or anyone else) point me to where the file system is being scanned when the user checks the fuzzy finder?\r\n\r\nCheck `browser/src/Services/QuickOpen.ts`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325017555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325018358", "body": "Also, check https://github.com/extr0py/oni/pull/574 for a discussion on the feature since @cyansprite basically re-wrote the entire feature recently.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325018358/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325702128", "body": "Fixed by #652.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325702128/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326598406", "body": "Personally, I think the `<C-p>` fuzzy finder should only include files and the `<C-S-p>` command palette should include all operations.  Also, \"Open Folder\" is misleading to me because it's actually just changing the working directory.  I was expecting it to open all files within a folder when I first saw it.\r\n\r\nAnyway, sorry to be so negative but I think we should have a very explicit separation of duties between `<C-p>` and `<C-S-p>`.  I can understand wanting to make certain features more visible/discoverable for users but I don't think we should make the fuzzy finder a dumping ground of \"neat\" features, even if they affect the behavior of the fuzzy finder.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326598406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326600070", "body": "If snippet support would require extra dependencies, how about we make it an external plugin instead?  I know snippets aren't nearly as heavyweight or niche as C# but I like the idea of making the \"heavy\" features optional so users don't need to pull in (e.g.) python if they just want to use Oni as a text editor.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326600070/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326674774", "body": "@extr0py, that's an interesting idea, and a good way to approach the problem from a different direction.  While I think it makes perfect sense for VSCode's use case, I wonder if it'd be too confusing for a Vim user.  I guess my concern is having a `:` ex-mode on the bottom of the (neo)vim window and a `:` mode at the top for the command palette.  Also a `?` search mode on the bottom for (neo)vim and a `?` search mode for command palette.  VSCode doesn't have a problem with an existing text field activated with a specific character so their solution makes sense.\r\n\r\nThe more I think about this, the more unsure I am.  On the one hand, vim users *are* used to activating modes based on characters, I just don't like having two modes activated by the same character (even if they appear on different parts of the screen).  Of course, it's definitely preferable to add a palette at the top than to introduce new ex-mode commands specific to Oni (like Eclim did \ud83e\udd22 ).  Part of me would rather re-use the ex-mode space (bottom of the window) and fill upwards (like `:buffers`, `:marks`, or `:registers`) but use unique activation characters which aren't already tied to a vim mode.  Of course, that would invariably conflict with existing normal mode operations (`#` and `%` are already defined) so we'd end up with either horribly obscure characters or break existing vim functionality.  And at this point I'm just rambling...\r\n\r\nOk, fine, I guess VSCode's solution would work best here.  Hitting `:` will typically enter ex-mode but if you hit `<c-p>` first you'll be in \"Oni's namespace\" and can activate Oni modes like `:`, `?`, `%`, and `#`.  I wish there was a better way to separate vim functionality from oni functionality but this *would* be extensible and unambiguous.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326674774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334815945", "body": "Will you be creating an animated gif demonstrating this behavior for the README/wiki ?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334815945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341736962", "body": "Have you installed `libxkbfile-dev`?\r\n```\r\nsudo apt install libxkbfile-dev\r\n```\r\nhttps://github.com/onivim/oni/wiki/Development#install-dependencies", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341736962/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342207162", "body": "That is such a cool idea.  So the demo video will always be up-to-date with the current look & feel, neat! :thumbsup:", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342207162/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342209007", "body": "This was resolved in #823, which has been merged in.  Closing issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342209007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342942758", "body": "Personally, I think we should keep neovim as a dependency in AUR.  It seems more to be the \"linux way\" to explicitly declare your dependencies rather than bundling them in.  It makes sense to bundle binaries in Windows and Mac, just not Linux.  That's my opinion anyway.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342942758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343193699", "body": "The `oni.sh` file is only intended to be used by Mac.  I think the command to launch on Linux is in `./cli/oni`.  Regardless, if you're compiling from source it's best to just run `sudo npm link` so the `oni` command will be added to your path.\r\n\r\nhttps://github.com/onivim/oni/wiki/Development", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343193699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343194751", "body": "I hit this on my Linux system because the `.oni` directory was missing.  After I manually created `.oni` in my home directory it could save `config.js`.  You could give that a try as a workaround.  If it works, we definitely need to fix this defect so `.oni` is always created first before attempting to save that file.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343194751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343195336", "body": "Could you try following the steps in the wiki to configure the LS yourself?  I'm curious if it'll work.\r\nhttps://github.com/onivim/oni/wiki/Language-Support#configuration", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343195336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343198124", "body": "@badosu, I think we're in agreement.  I'd rather leave the neovim packaging and installing to the neovim folks and we would just declare it as a dependency.  Even .deb and .rpm can declare dependencies and all package managers today can automatically download and install those dependencies before installing a package.\r\n\r\nWith that said, I don't think Windows and Mac have good dependency resolution managers so it still makes sense to bundle the binaries on those platforms.  But I'm just repeating myself and I think we're agreeing with each other. \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343198124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343198905", "body": "I'm glad you found a workaround but I still think this issue is worth fixing.  Re-opening.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343198905/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343216921", "body": "Just set\r\n```\r\n\"oni.loadInitVim\": true\r\n```\r\nThen define all mappings as normal in your `init.vim`.  No need to use `oni.input.bind` at all.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343216921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343243845", "body": "Just to re-enforce what @sittim said, creating a directory named `.oni` is difficult to do in Windows.  I believe the current Windows convention would be to create an `oni` directory in `AppData/Roaming`.  I'm pretty sure there's some `%AppData%` type variable we should be using but I'm not a Windows guy so everything I say on the subject should be validated. \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343243845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343587461", "body": "I think everything @bryphe mentioned in his previous comment is now done.  Closing issue.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343587461/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348550461", "body": "There's also #251, related to scrollbar confusion since even you guys are referring to that gray bar as a \"grip\" when you can't actually grip it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348550461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352565900", "body": "> This first one is basically an entire feature in itself, but basically, if we notice the user uses h/j/k/l a lot and nothing else, maybe there can be some form of recommendation of \"Do you want to try the movement achievements?\", so the user knows to move on from the basic movements. Or even for an advanced user we could go \"We've noticed you've never used X feature...Did you know about it?\" This is a giant task in itself, but just a brain dump so its written down, since there is so much in vim I go \"Why on earth didn't I know about that before!\".\r\n\r\nIf we could do it, I actually like this idea of recommending the more advanced way of doing something rather than simply counting how many times a feature has been used.  While I like reinforcing the muscle memory by using a feature multiple times, that won't help me discover new features to become more efficient at my task.  I guess I'm just thinking that not every feature is applicable to all users.  For example, maybe I use vim to traverse large files but I don't write code.  I probably don't care to learn about the code-completion features.  If I could learn the features that are important to me I would be more efficient at my job and I wouldn't care what *else* Vim can do.\r\n\r\nI'm tempted to create a wiki page to see how many 'next step' recommendations we could come up with just because it'd be more collaborative than comments in an issue.  Off the top of my head, here's what I'm thinking:\r\nUse arrow keys a lot? Recommend `h/j/k/l`\r\nUse `lllllllll` a lot to move down a line? Recommend `w` for jumping by word\r\nUse `wwww` a lot to move down a line? Recommend `W` for jumping by whitespace\r\nUse `WWWW` a lot to move down a line? Recommend `$` for jumping to the end of a line\r\nUse `jjjjjjj` a lot to move down a file?  Recommend `<c-f>/<c-d>` for jumping.  Or maybe `{` to jump by paragraphs.\r\nUse `xxxxx` a lot to delete characters?  Recommend `dw` or maybe text objects like `diw` and `dt<x>`\r\n\r\nThose are all basic key inputs we could match against.  But I'm not sure how we'd recognize \"you manually typed the word you just deleted somewhere else\" to recommend copy/paste or \"you're performing the same steps repeatedly\" to recommend `.` or `:s/` or something similar.  I'm curious how many simple `<input> -> recommendation` sets we could come up with before we need something like machine learning to recognize more advanced features. \ud83d\ude1b ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352565900/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/onivim/oni/comments/25487079", "body": "This link just goes to `https://opencollective/oni`, it's missing the `.com` in `opencollective`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/comments/25487079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/99707539", "body": "@justinmk, I tried implementing this with `feedkeys` but `\\<c-r>` still doesn't get interpreted.  Any idea why I can't send a Ctrl key to `feedkeys()`?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/99707539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/102284497", "body": "Why do we have a `config.json` and a `config.js`?  Can we please come up with more unique filenames here?  I don't think the file extension should determine the difference between these two files.\r\n\r\nAlso, why is there a menu option to edit `config.js` but not one for editing `config.json`?  Maybe I'm missing something, I'm just confused.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/102284497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103000661", "body": "Just a reminder, you might want to create a new tag for this release so GitHub sees it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103000661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103494821", "body": "Can I ask why you picked `|` as the key to invoke this feature?  Is this a common key to invoke find-all-references?  I'm surprised you'd map this key directly given that `|` is already mapped by default in NeoVim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103494821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103502091", "body": "Does it have to be a single character?  I'd probably go for something like `g|` since `g` is usually used for the weird extra commands.  That probably wouldn't help you for this method though.\r\n\r\nDo we have to map it to a key now?  Could we add it to the command palette instead and then provide a config for mapping keys to Oni commands?  That'd be the more extensible solution so users could map any other commands in the palette to arbitrary keys.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103502091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "bkd705": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1121", "title": "Feature: Extend command palette to include Vim commands", "body": "### Problem\r\nThe biggest problem I think most people have when trying to learn vim (my own personal experience included) is trying to figure out all the commands ranging from the basic movement (and of course the popular \u201chow to exit vim\u201d) all the way to veterans finding new commands that make their workflow faster.\r\n\r\n### Solution\r\n\r\nOniVim has a command palette currently, but it only gives you basic menu options and plugin options. It would be awesome if we could expand this to include Vim commands and their respective keybindings. Similar to how VSCode\u2019s works as shown below, you will get a title representing what the command does, and then also a display for the shortcut to run that command, allowing you to learn it and use it for the next time!\r\n\r\n### Example\r\nSay I want to format a JavaScript document in Visual Studio Code,\r\n\r\n![Gif of command palette](https://cl.ly/0z3n1j3l311p/Screen%20Recording%202017-12-13%20at%2005.29%20PM.gif)\r\n\r\nNot only have I now run the command, but I also now know the keyboard command is `Shift + Option + F.`\r\n\r\n### Implementation Ideas\r\nOniVim already has the command palette portion, the implementation of this would be extending that to pick up Vims keybindings and their respective commands, and mapping them out into a fuzzy searchable structure that would be quick and accurate.\r\n\r\n\r\n#### Closing Comments\r\nI believe this would be an awesome addition to OniVim, I personally am not a heavy user of it, but I think this would really push me harder to try it, as my personal biggest struggle with Vim is learning and memorizing all the commands, and having a popup that would both run the command and give me the hotkey would make the curve a lot less steep, and from what I understand thats a huge part of what OniVim is all about! :D\r\n\r\nIf this was to be a popular idea, and it is possible to implement, with some guidance I would be open to trying to tackle it!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1121/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cstsunfu": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1108", "title": "Will this project  support  jupyter as the atom do?", "body": " the  features atom  provide for Python is awesome, but i love vim so much, could you please support this feature for Python user?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dpriedel": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1074", "title": "cpp language server configuration", "body": "Is there a way to pass run-time, project specific configuration options to the clangd cpp languagage server?  atom ide-cpp uses an 'unofficial' method using the .clang_complete file which seems to work.\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/349649233", "body": "Hi\n\nI tried adding this to my oni.config:\n\n \u00a0 \"language.cpp.languageServer.arguments\": [\"-std=c++17\"]\n\nbut this causes an error in starting clangd:\n\n[LANGUAGE CLIENT - STDERR]: clangd: Unknown command line argument \n'-std=c++17'.\u00a0 Try: 'clangd -help'\nclangd: Did you mean '-stats=c++17'?\n\nI believe what needs to be done is to somehow tell clangd what \ncompilation options to use but I don't see any way to do that.\n\nThe atom ide-cpp module (NOT the autocomplete-clang) extracts this \ninformation from the .clang_complete file and somehow passes it to clangd.\n\nI'll try and look some more to see how it does it.\n\nThanks !!\n\n\n\nOn 12/05/2017 02:36 PM, Bryan Phelps wrote:\n>\n> I just checked out the documentation here: \n> https://atom.io/packages/autocomplete-clang\n>\n> It looks like the entries in that file are passed as parameters to \n> |clang|. We don't look for that file per-se, but we do have a way to \n> pass arguments to the language server process, via configuration:\n>\n> https://github.com/onivim/oni/blob/45f51c59b40dab399f96f2476e9040ee75ee725e/browser/src/Services/Configuration/DefaultConfiguration.ts#L134\n>\n> Although for |clangd| looks like they'd be more in-depth. The big gap \n> we have with this approach is the 'project-specific' configuration - \n> unfortunately we don't currently have that today (that is tracked by \n> #68 <https://github.com/onivim/oni/issues/68>\n>\n> Another option is to return to having a C/C++ plugin on the Oni side, \n> which gives us more options programmatically than the default \n> configuration, and would make it easier to support scenarios like \n> this. A good place to look at is this code here, which creates the \n> language client based on the configuration:\n> https://github.com/onivim/oni/blob/45f51c59b40dab399f96f2476e9040ee75ee725e/browser/src/Services/Language/LanguageConfiguration.ts#L99\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub \n> <https://github.com/onivim/oni/issues/1074#issuecomment-349416440>, or \n> mute the thread \n> <https://github.com/notifications/unsubscribe-auth/AGjjyjXy-Ict3USOuSzYKo98E5xBwo97ks5s9ZtBgaJpZM4Q2YDX>.\n>\n\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349649233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349658915", "body": "Browsing through the clangd project, it seems there is work underway to look for a file called 'compile_flags.txt' (which seems to look like .clang_complete for syntax) and use that for 'simple' builds instead of compile_commands.json.  There are commits from early November related to this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349658915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Rafi993": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/1002", "title": "Possibility of having config as two panes similar to vscode", "body": "Oni config by default is empty now. But it would be better if it is divided into two panels similar way it is listed in vscode. This would allow users to know things that they can configure and play around with it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/1002/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/85", "title": "possibility of visual debugger like vscode", "body": "One of the killer features that I have seen many developers talk about vscode is its debugger. Is there any plans to implement such debugger in oni.  and may be possible integration with react dev tools.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/85/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/c74097db94a9adeca0d74503a7025b73df83064e", "message": "Displaying all entries in autocompletion (#164)\n\n* made to display all entries in auto completion\r\n\r\n* Set theme jekyll-theme-midnight\r\n\r\n* Delete _config.yml"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7283e05393e33ca995bf957bf88ca2a60183d358", "message": "Changed the default menu of electron (#147)\n\n* Error TS2345 fixed\r\n\r\n* Scrollbar witdh reduced\r\n\r\n* custom menu added\r\n\r\n* package.json updated with exact version\r\n\r\n* oni menu replaced with File\r\n\r\n* File in windows and Oni in mac Os and linux\r\n\r\n* TSLINT error fixed"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8ad2b9cc36bb958c7ac9b4fe44cb0450d5e2c7da", "message": "Oni as background process (#150)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/530167f21c1006874e9c3fdcf6dda5b3e3035994", "message": "Replacing switch with Object Literals (#148)\n\n* Replacing switch with Object Literals\r\n\r\n* error corrected\r\n\r\n* Aligned for tslint\r\n\r\n* tslint error fixed"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/266293761", "body": "I am using windows 10  X64 now nothing happens when  I type oni after install from cmd. Hope it gets fixed", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266293761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266327093", "body": "I tried both but the same result.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266327093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266329940", "body": "When I updated the electron version to 1.4.12 from 1.4.5 the problem was solved. Please update the package.json so that this issue wont arise in the future.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266329940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270927257", "body": "@extr0py  It is true that lodash has more users but ramda is relatively new compared to lodash or underscore. Using ramda will make the code more readable and if the UI is made more modular enough we can make  the moving parts of the editor as just compossable functions. Making it easy to maintain and more customizable.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270927257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270931348", "body": "I did replace oni menu with File but I think it could use more menu items within it than just quit.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270931348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270947458", "body": "That is good to here @extr0py ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270947458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271067412", "body": "[This](https://github.com/electron/electron/issues/2208) seemed promising", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271067412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271067597", "body": "I gave a small[ pull request ](https://github.com/extr0py/oni/pull/150)as given there hope it solves the issue", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271067597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271623597", "body": "@extr0py noticed that there was small tslint error in the pull request I gave. The new commit should fix that", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271623597/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272625498", "body": "I was able to solve this issue by removing FirstTen in Autocompletion.tsx that used _.take to get the first ten entries. now it shows scroll but for more than 10 entries but if I scroll down using ctrl+n the entries doesnt scroll up.  https://github.com/extr0py/oni/pull/164", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272625498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272628937", "body": "I tried typing _ on oni and saved it and opened it in another editor it seems to be showing up in the file.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272628937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272631377", "body": "It is mostly electron rendering issue there was a simiar issue https://github.com/atom/atom/issues/8026 some time ago", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/272631377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279231744", "body": "@extr0py I agree. The scroll in auto completion feels clunky re-writing that module would be better.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279231744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/94962593", "body": "File menu is good. May be we can add more broader menu set in the future.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/94962593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "kdheepak": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/998", "title": "Support xterm.js as terminal inside oni", "body": "If [xterm.js](https://github.com/xtermjs/xterm.js) is added, oni could be a full terminal + tmux + neovim replacement.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/998/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "daynin": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/986", "title": "Tab opens after open dir in :Vex navigation", "body": "![2017-11-19-1405-g51hnw4kc0](https://user-images.githubusercontent.com/825219/32990074-774d013c-cd33-11e7-8819-e16675badbb4.gif)\r\n\r\nWhen we open any dir in :Vex navigation tab, new tab opens and then we can close it by click on tab's name, not tab's close button.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/af12e7e847b02f6b0f702cfb055f016b2ef9ec9f", "message": "Fix a typo in README (#985)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fpn": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/970", "title": "ctrl-c in cmd kills oni - closing cmd also closes oni", "body": "Oni seems somehow to be attached to its parent process:\r\n\r\n### ctrl-c in cmd kills oni\r\nOpen cmd on windows 10\r\n\r\nStart oni:\r\n```\r\noni\r\n```\r\n\r\ndo ```dir``` or some other command.\r\n\r\ndo ctrl-c in cmd and oni will exit\r\n\r\nExpected: oni is not affected by cmd \r\n\r\n### closing cmd also closes oni\r\nOpen cmd on windows 10\r\nstart oni:\r\n```\r\noni\r\n```\r\nclose cmd window -> oni will exit\r\n\r\nExpected: oni is not affected by cmd\r\n\r\n\r\n<!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carc1n0gen": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/953", "title": "Searching not working as documented", "body": "I'm running Oni 0.2.17 and search for symbols doesn't seem to work as documented:\r\n\r\nShortcut | Description\r\n-- | --\r\nCtrl-T / \u2318-T | Search symbols in workspace.\r\nCtrl-\u21e7-T / \u21e7-\u2318-T | Search symbols in document.\r\n\r\nOn my mac, \u2318-T seems to search the document rather than the workspace, and \u21e7-\u2318-T does nothing at all, no search promp is shown", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/344930802", "body": "@bryphe JavaScript", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344930802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "IvRRimum": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/929", "title": "Changing tabstop doesnt work..", "body": "Hello,\r\n\r\nI have set tabstop=2\r\n\r\nBut whenever i press tab i get 4 spaces instead. How to fix this?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/929/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/343160977", "body": "Is there a doc somewhere with your custom key's or something? Really love the work tho!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343160977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343163311", "body": "https://vi.stackexchange.com/questions/4919/exit-from-terminal-mode-in-neovim", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343163311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343170481", "body": "Created manually. worked", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343170481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343178112", "body": "However some plugins work. Like CTRLP plugin works as intended.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343178112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344094677", "body": "@bryphe So, if i download the newest release for mac. Will it work?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344094677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344095191", "body": "@bryphe Great! Can you add the tab fix too, that would mean a lot! Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344095191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tsoernes": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/893", "title": "'NoneType' object has no attribute 'update_document' python3 with pyls", "body": "I'm getting errors trying to use Python3 with pyls in oni. Here's the config, and attached is the log.\r\n```\r\nconst activate = (oni) => {\r\n    console.log(\"config activated\")\r\n}\r\n\r\nconst deactivate = () => {\r\n    console.log(\"config deactivated\")\r\n}\r\n\r\nmodule.exports = {\r\n    activate,\r\n    deactivate,\r\n   \"oni.loadInitVim\": true,\r\n   \"neovim.global.python_host_prog\": \"/usr/local/bin/python3\"\r\n}\r\n```\r\n\r\n[-1510161973761.log](https://github.com/onivim/oni/files/1454827/-1510161973761.log)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CameronDiver": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/852", "title": "Tab bar does not work as expected", "body": "If I leave the options as the default, I get an empty tab bar. If I set `\"tabs.showVimTabs\"` to true, the current buffer is shown in the single tab that is created. \r\n\r\nTo get more than one tab to be opened, I have had to manually do `:tabnew [file]`. All I want is my open buffers to be shown in the tab bar, what am I missing?\r\n\r\nI saw this: https://github.com/bryphe/oni/issues/835 and have neovim version 0.2.1, but I don't have the `:help ui-ext-tabline` setting, although I have installed `neovim-git` which resolved that thread.\r\n\r\nIt's probably worth mentioning I use my own vim config, with https://github.com/thaerkh/vim-workspace but I've tried without that plugin running and still no luck.\r\n\r\nI also get the same behaviour if I don't use my config, leading me to believe that I'm completely misunderstanding the tab bar? The documentation states that the standard behaviour is for all open buffers to be displayed in the tab bar, but I'm not seeing this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/287625243", "body": "In addition is there currently a way to hide the menubar? I didn't see any configuration for it, and I think it'd be a good options.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287625243/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341667443", "body": "Thanks for the reply @bryphe !\r\n\r\nSure thing,\r\nDistro: arch linux \r\noni version (installed from `yaourt/aur`): 0.2.12.1\r\n\r\nApologies, github file uploading is not working for me, so I've added screenshots to imgur:\r\nhttps://imgur.com/a/1CuCY\r\n\r\nFirst image shows vim-tabs disabled, second image shows vim-tabs enabled, third image shows vim-tabs still enabled, and another buffer opened with `ctrl+p` (the single tab changes name).\r\n\r\nOutput of checkhealth:\r\n```\r\n\r\nhealth#deoplete#check\r\n========================================================================\r\n## deoplete.nvim\r\n  - OK: has(\"nvim\") was successful\r\n  - OK: has(\"python3\") was successful\r\n  - INFO: If you're still having problems, try the following commands:\r\n    $ export NVIM_PYTHON_LOG_FILE=/tmp/log\r\n    $ export NVIM_PYTHON_LOG_LEVEL=DEBUG\r\n    $ nvim\r\n    $ cat /tmp/log_{PID}\r\n    and then create an issue on github\r\n\r\nhealth#nvim#check\r\n========================================================================\r\n## Configuration\r\n  - OK: no issues found\r\n\r\n## Performance\r\n  - OK: Build type: RelWithDebInfo\r\n\r\n## Remote Plugins\r\n  - OK: Up to date\r\n\r\n## terminal\r\n  - INFO: key_backspace (kbs) terminfo entry: key_backspace=\\177\r\n  - INFO: key_dc (kdch1) terminfo entry: key_dc=\\E[3~\r\n\r\nhealth#provider#check\r\n========================================================================\r\n## Clipboard (optional)\r\n  - OK: Clipboard tool found: xsel\r\n\r\n## Python 2 provider (optional)\r\n  - INFO: `g:python_host_prog` is not set.  Searching for python2 in the environment.\r\n  - INFO: Multiple python2 executables found.  Set `g:python_host_prog` to avoid surprises.\r\n  - INFO: Executable: /bin/python2\r\n  - INFO: Other python executable: /usr/bin/python2\r\n  - INFO: Python2 version: 2.7.14\r\n  - INFO: python2-neovim version: 0.1.13\r\n  - OK: Latest python2-neovim is installed: 0.1.13\r\n\r\n## Python 3 provider (optional)\r\n  - INFO: `g:python3_host_prog` is not set.  Searching for python3 in the environment.\r\n  - INFO: Multiple python3 executables found.  Set `g:python3_host_prog` to avoid surprises.\r\n  - INFO: Executable: /bin/python3\r\n  - INFO: Other python executable: /usr/bin/python3\r\n  - INFO: Python3 version: 3.6.3\r\n  - INFO: python3-neovim version: 0.1.12 (outdated; from /usr/lib/python3.6/site-packages/neovim)\r\n  - WARNING: Latest python3-neovim is NOT installed: 0.1.13\r\n\r\n## Ruby provider (optional)\r\n  - INFO: Ruby: ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-linux]\r\n  - WARNING: Missing \"neovim\" gem.\r\n    - ADVICE:\r\n      - Run in shell: gem install neovim\r\n      - Is the gem bin directory in $PATH? Check `gem environment`.\r\n      - If you are using rvm/rbenv/chruby, try \"rehashing\".\r\n```\r\n\r\nInterestingly, running `:CheckHealth` does open a new tab :laughing: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/341667443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344932746", "body": "@bryphe Sorry for the delay, running that command also provides something similar, except without the tabs.\r\n\r\n![2017-11-16-140734_2560x1440_scrot](https://user-images.githubusercontent.com/7694128/32895309-823d9f9c-cad7-11e7-98ed-275255caaa90.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344932746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "QijianZhang": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/808", "title": "oni need the user home path with no Non-ASCII characters.", "body": "This problem I have encountered several times with some applications. The oni work well, I mean it's window, menu have no problem, but the **Editor shows nothing but just black**. So it should be the neovim's problem.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/337923738", "body": "I found the nvim.exe and ran it, it showed error in the cmd. It said it can't create certain file. This file path should located in my home page (on Windows) , but it's not the user's name, but messy code. So I knew it must be the reason that file path contains Non-ASCII chars. And when I installed it with another Windows account whose user's name contains no Non-ASCII, it did worked well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337923738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338384491", "body": "I think nvim doesn't support the local charset(Chinese on Windows). My Windows account name is in Chinese, and I have encountered similar problems before. So I decided to change my account name. After that, I installed oni again, it did work. But I didn't keep that error message. I think nvim doesn't understand the Chinese characters, and when it wants to create needed files in the user home dir, it gives the wrong file path.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338384491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "someguynamedmatt": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/675", "title": "Add \"Open Folder\" and \"Add Bookmark\" to the popup menu in all cases", "body": "Enhancement: when `<C-p>`ing it might be nice to have the \"Open folder\" and \"Add Bookmark\" selections available in the popup menu.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/675/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/9f8d4bbf8d7548792b96d2f33d96091b20a6e579", "message": "Fixed issue where null Sidebar was being returned under certain configurations which prevented quickOpen and commandMenu functionality (#1555)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a532ebdc054e5a73b632ad14b03926a4e408c1ef", "message": "[ISSUE-246]: Add --help option to command-line oni (#1509)\n\n* [ISSUE-246]: Add --help option to command-line oni\r\n\r\n* Moved flag-check to main.ts before electron process begins"}, {"url": "https://api.github.com/repos/onivim/oni/commits/a46cd20c55bfa166c16416625790791506695a1f", "message": "Added .nvmrc with node@9 (#1510)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/09a3b70e5a3dc57a053f68e9c106dba203218048", "message": "[ISSUE-1439]: Display a list of all failed tests at the bottom of the CITest output (#1474)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7a98c0c4ff99b13a793a8f85a75968f27285ffe9", "message": "[ISSUE #1300]: <space> rather than literal (#1333)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/32a6453c7a1a07a73df8bb0983e6f8059b62d9d8", "message": "preventDefault on keyCode 13 (#681)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7d6795495cf17479cfcfed84ef8e145ab1744057", "message": "Fix #662: Handle undefined files array and handle empty git directories in Quic\u2026 (#674)\n\n* Handle undefined files array and handle empty git directories in QuickOpen.ts\r\n\r\n* Added an else block"}], "pull_requests": [{"url": "https://api.github.com/repos/onivim/oni/pulls/1564", "title": "WIP: based on Issue-1562", "body": "### Allow for Oni to behave as expected when `sidebar.enabled` is set to `false`\r\n\r\n> Based on [Issue #1562](https://github.com/onivim/oni/issues/1562)\r\n\r\nWhen `sidebar.enabled` equals  `false` (i.e. the sidebar is never given a WindowManager) hitting `<s-c-f>` would throw an error\r\n\r\n- Added a new key binding `<s-c-e>` \r\n\r\n- Historically, the sidebar was never initialized if the configuration file disabled it. Now, when setting `sidebar.enabled` to `false` the sidebar is created normally, but hidden from the user\r\n    - This prevents the previously documented error and still allows for search/explorer use with the appropriate key commands: `<s-c-f>` (File search), `<s-c-e>` (Explorer), and `<s-c-b>` (open sidebar to last used option)\r\n\r\n- Removed error previously documented by @bryphe \r\n\r\n@bryphe @Akin909 This is still a work-in-progress, the one thing I can't seem to work through is opening the `Explorer`, focusing on it (your cursor is in it), and then keeping if focused while closing it. \r\n\r\nWhen you do this you find that the main editor window has lost focus and Oni seems to be unresponsive. By manually clicking in the main window everything \"goes back to normal\". Focus should be regained automatically when the sidebar is closed. This issue exists in the current code as far as I can tell (only with the `Explorer` sidebar, `Search` behaves correctly). Maybe you guys have a better solution to giving the main window its focus back?\r\n\r\nAs always, open to suggestions. Thanks!", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/1486", "title": "WIP --> [ISSUE-729]: Add auto-deploy to AUR and bump version in PKGBUILD", "body": "@badosu @bryphe I believe I've done most of what we need to do to get this going, but I'm not sure about the credentials in the `build/aur/deploy.sh`script (L19-20, marked \"Hmmm\"). I simply put the placeholders `oni` in there for now. Maybe we should create a aur user specifically for this purpose? Lemme know and we can finish this off.\r\n\r\n- Deploy script will be run on a travis build\r\n  - Auto-update the `pkgver` in `PKGBUILD` so we don't have to (based on the version in `package.json`)\r\n  - Push to the AUR automagically\r\n\r\nBased on #729 ", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/324993434", "body": "@jaywcjlove Awesome. Thanks. I'd like to help with the project. Can you (or anyone else) point me to where the file system is being scanned when the user checks the fuzzy finder?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324993434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325031411", "body": "Thanks, @keforbes ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325031411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325048935", "body": "@cyansprite I used the \"Download for Mac\" link that's present on the README. When I open it from the dock it's showing the root directory `/` in the lower-left corner. I'm using the latest release `0.2.8`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325048935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325049370", "body": "@cyansprite No problem. Thanks for the work. I wanna tear through the source and issues and try to contribute when I can.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325049370/reactions", "total_count": 4, "+1": 2, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326469052", "body": "@extr0py Changes made!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326469052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326483544", "body": "@extr0py What files should I check out to see where this issue might be coming from?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326483544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326698525", "body": "@badosu Is this issue still present for you? I'm on Arch and I don't see it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326698525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326763967", "body": "@extr0py awesome! No, I'm still figuring all of Oni's capabilities out, tbh.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326763967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/136410435", "body": "That's a good catch @extr0py . As I was messing around with that block, I never saw the case of an error being thrown if the `!files` block was entered (i.e. that `files.forEach` line never gets hit if `!files` resolves to `true`). Nonetheless, I think you're right. It would be better to be sure of that never happening with an `else` check. I'll update the PR later today (LA time) and resubmit.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/136410435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/163300099", "body": "Was this why the Linux builds were failing in Travis? (No Neovim instance?)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/163300099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167349781", "body": "@bryphe I don't think see, but I only have a cursory understanding of travis' yaml configs. I was going off of [this tectonic config file](https://github.com/tectonic-typesetting/tectonic/blob/a5fd0f700bb56c87ed9ea970d3846e0dfaa9020f/.travis.yml#L102) where they're also deploying to AUR.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167349781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167349892", "body": "Changing now", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167349892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167350034", "body": "Whoops, nvm. I see what you're saying. Changing now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167350034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167351345", "body": "@bryphe Lemme know if you want me to do anything. Don't mind owning this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167351345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167364303", "body": "Yeah, I can do that. I'll try to set it up later tonight or tomorrow.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167364303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167370331", "body": "@badosu Should be the same name `someguynamedmatt`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/167370331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "MasonAsh": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/670", "title": "Closing window leaves behind swap files", "body": "Whenever I close the Oni window all files that were being actively edited leave behind swap files. Whenever I go to edit the files again I'm greeted with a message like this:\r\n\r\n![image](https://user-images.githubusercontent.com/1817000/29761119-a0e1003c-8b95-11e7-843f-e2f5576fb2ed.png)\r\n\r\nWhen I exit using `:q` as any vim veteran would do habitually, no swap file is left behind. \r\n\r\nI'm on Windows 10 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/670/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/0b2e41201cbaee10df8ae45385d3c47bc98acaa1", "message": "Allow moving through Ctrl-P menu with arrow keys (#667)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mzummo": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/658", "title": "closing tabs does not work", "body": "closing tabs does not seem to work.\r\n\r\nTested OS: Windows 10 x64", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/658/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "azzsh": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/647", "title": "Support PHP language server", "body": "Why isn't there any support for PHP in Roadmap?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adelarsq": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/504", "title": "Integrate Java language server ", "body": "There is a support for LSP for Java on https://github.com/eclipse/eclipse.jdt.ls\r\n\r\nIt's already used on https://github.com/redhat-developer/vscode-java\r\n\r\nJust to keep a note, since when finding some time I will help with this and #385", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/504/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/284466470", "body": "Try ```npm install -g oni-vim```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284466470/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335303852", "body": "Another alternative is [elixir-ls](https://github.com/JakeBecker/elixir-ls).\r\n\r\n@bryphe any plans to support [debug protocol](https://code.visualstudio.com/docs/extensionAPI/api-debugging)?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335303852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344000943", "body": "`npm` and `node` versions:\r\n```\r\nnpm --version\r\n5.5.1\r\nnode --version\r\nv8.1.3\r\n```\r\nMore logs:\r\n```\r\n59032 verbose lifecycle oni-neovim-binaries@0.0.7~postinstall: CWD: C:\\dev\\oni\\node_modules\\oni-neovim-binaries\r\n59033 silly lifecycle oni-neovim-binaries@0.0.7~postinstall: Args: [ '/d /s /c', 'node lib/postinstall.js' ]\r\n59034 silly lifecycle oni-neovim-binaries@0.0.7~postinstall: Returned: code: 1  signal: null\r\n59035 info lifecycle oni-neovim-binaries@0.0.7~postinstall: Failed to exec postinstall script\r\n59036 verbose unlock done using C:\\Users\\my.user\\AppData\\Roaming\\npm-cache\\_locks\\staging-b80d5a986906776c.lock for C:\\dev\\oni\\node_modules\\.staging\r\n59037 verbose stack Error: oni-neovim-binaries@0.0.7 postinstall: `node lib/postinstall.js`\r\n59037 verbose stack Exit status 1\r\n59037 verbose stack     at EventEmitter.<anonymous> (C:\\Users\\my.user\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\npm-lifecycle\\index.js:280:16)\r\n59037 verbose stack     at emitTwo (events.js:125:13)\r\n59037 verbose stack     at EventEmitter.emit (events.js:213:7)\r\n59037 verbose stack     at ChildProcess.<anonymous> (C:\\Users\\my.user\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\npm-lifecycle\\lib\\spawn.js:55:14)\r\n59037 verbose stack     at emitTwo (events.js:125:13)\r\n59037 verbose stack     at ChildProcess.emit (events.js:213:7)\r\n59037 verbose stack     at maybeClose (internal/child_process.js:897:16)\r\n59037 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:208:5)\r\n59038 verbose pkgid oni-neovim-binaries@0.0.7\r\n59039 verbose cwd C:\\dev\\oni\r\n59040 verbose Windows_NT 10.0.10586\r\n59041 verbose argv \"C:\\\\dev\\\\nodejs\\\\node.exe\" \"C:\\\\Users\\\\my.user\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\r\n59042 verbose node v8.1.3\r\n59043 verbose npm  v5.5.1\r\n59044 error code ELIFECYCLE\r\n59045 error errno 1\r\n59046 error oni-neovim-binaries@0.0.7 postinstall: `node lib/postinstall.js`\r\n59046 error Exit status 1\r\n59047 error Failed at the oni-neovim-binaries@0.0.7 postinstall script.\r\n59047 error This is probably not a problem with npm. There is likely additional logging output above.\r\n59048 verbose exit [ 1, true ]\r\n```\r\nIts something related with https://github.com/dbashford/mimosa/issues/374 but cleaning the cache and removing the `node_modules` folder didn't solve.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344000943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344014474", "body": "@bryphe to sucessfully build on Windows I had to execute:\r\n```\r\nnpm clean cache --force\r\nnpm install --force rimraf\r\nnpm install --force fs-extra\r\n```\r\nRelated issues: https://github.com/npm/npm/issues/17747 https://github.com/angular/angular/issues/5343", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344014474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "timeyyy": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/448", "title": "Discussion about Roadmap", "body": "Myself as well as others in the neovim chat room have talked about the idea of having a `Plugin Manager`. \r\nWe should implement this feature as a neovim plugin (UI agnostic).\r\n\r\nWhat are the plans for the `Left Pane` Feature? If the plan is to provide expose an api for scripting the pane, we could talk about how we might generalize the solution of scriptiable UI elements. It could be feasible to make a vim plugin for building scriptable UI components. \r\n\r\ntl;dr neovim supports frontend's in any languages, we should think about introducing a culture of reuse.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/301234485", "body": "> Because Oni plugins would live across multiple Neovim process , the life cycle (timing between activation / deactivation, install / uninstall) would be different.\r\n\r\nThis could be taken into account, or we supply a simple api which can be composed to fulfill any use case.\r\n\r\n> JavaScript plugins have unique requirements (resolving npm dependencies, native dependencies)\r\n\r\nWe could have support for external plugin tools, similar how to neomake can be made to support most tools\r\n\r\n> Solving the Plugin Manager problem in a general way for Neovim is actually a much more difficult problem than it is for Oni - because it has to appease an existing Vim community and be seamless in migration across the different plugin managers that already exists.\r\n\r\nMaking things general/reusable is generally a bit more work. It is definitely worth it though. \r\n\r\n - We could start of only implementing support for `Zplug`, someone may come along and add support for `Dein`, and now your users have more flexibility about the plugin manager they can use for free.\r\n\r\n- GUI's for plugin management might pop up in `nvim qt` etc\r\n\r\nHit me up before you tackle this feature, we can discuss/pair and see what we can come up with. I also have use cases for a UI plugin manager one day.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301234485/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xelra": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/247", "title": "Add server option to connect to specific nvim session", "body": "It would be great if ONI could add a `--server` option so that I can connect to a specific, already running session of Neovim.\r\n\r\nThat would also open up the possibility of using it in combination with SSH forwarding, to connect to remote Neovim sessions.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/279168279", "body": "Just for reference, I'm also referencing the [Neovim LSP issue](https://github.com/neovim/neovim/issues/5522) here.\r\n\r\nMaybe that would be the ideal way of communicating with a syntax backend. Not just for Oni's completion, but for any completion plugin there is.\r\n\r\nThe topic came up in a discussion with one of the Neovim devs on IRC about code completion, syntax highlighting, linting, refactoring and how there's just too much fragmentation around this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279168279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282209321", "body": "You can tell Neovim to create a specific socket with `NVIM_LISTEN_ADRESS`, but the only client right now that can connect to that is Neovim-Qt with its `--server` option. It's a planned feature for Neovim too though.\r\n\r\nHow can this be moved to core functionality? Oni would always need the `--server` option or how else are you going to tell it to which socket to connect?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282209321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "metalelf0": {"issues": [{"url": "https://api.github.com/repos/onivim/oni/issues/174", "title": "Performance: improve performance of interface-heavy events", "body": "The new update (0.1.8) significantly improved performances, making oni really usable as a daily driver, but some \"interface heavy\" events (like window resizing, or search-as-you-type in FZF.vim) still feel really slow compared to terminal neovim and neovim-qt. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/174/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/270660141", "body": "Thanks a lot, it builds correctly now ;) Great work!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270660141/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282651661", "body": "Also make sure you have the following lines in your `~/.oni/config.json` file:\r\n\r\n```\r\n    \"prototype.editor.backgroundOpacity\": 1,\r\n    \"prototype.editor.backgroundImageUrl\": null,\r\n    \"prototype.editor.backgroundImageSize\": null\r\n```\r\n\r\nThis disables the default background image oni provides.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282651661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "montogeek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/18963f49c40d79c11375801354c7221fceeaeb2e", "message": "Fix GitHub brand typo (#1784)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mgbennett": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/a014ed04b776ca4a0648f187a04bb9ea2d159e7e", "message": "Dynamic file associations (#1769)\n\n* Update file association map to maintain single source of truth.\r\n\r\nRather than maintain a static map of file extensions in BuildSetupTemplate.js\r\nand another static map in package.json, consume the mappings from package.json\r\nto add the reg keys in BuildSetupTemplate.js.\r\n\r\n* Remove testing log message\r\n\r\n* Revert unintentional changes to strings as keys"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TitanSnow": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/d0f3cca0964f87efc35f6a1846d5b6b03c12756f", "message": "Add comma after \"editor.fontFamily\" in \"config.js\" (#1635)\n\nMissing comma, which makes uncomment this option\r\nresults in syntax error"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zapashcanon": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/8126e46e9fa2b3478f589b7adb7ad34f827c881e", "message": "Improve shell scripts (#1613)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TheKnarf": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/53adc252f20b0c2b980d0e79e7f463d48bd6dd4e", "message": "Fixes #1543 (#1600)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "freebroccolo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/e9bfb046d1ad6c32650c489fefa0cb5364bf9b66", "message": "Bump ocaml-language-server version to 1.0.25 (#1542)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/216f8e8cb8877afccd549732fb76a63742079402", "message": "Update ocaml-language-server dependency (#925)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/60fc26aa2ade14e1d66dbad5dc95aeac903753f3", "message": "Update .gitignore for osx, etc."}, {"url": "https://api.github.com/repos/onivim/oni/commits/63dce9af3294cc5109d74a24834520de245773a6", "message": "Update dependencies"}, {"url": "https://api.github.com/repos/onivim/oni/commits/9f0b0a02bec0efb2db880432024fea66514b6d2a", "message": "Fix tslint issues"}, {"url": "https://api.github.com/repos/onivim/oni/commits/47e79edcecc2922c642c124275dbd5ec521f63a6", "message": "Add tslint"}, {"url": "https://api.github.com/repos/onivim/oni/commits/24c977ca533881bd41b27afd348b3787c461d283", "message": "Add editorconfig"}, {"url": "https://api.github.com/repos/onivim/oni/commits/63edc53926b1059142a885b4200b9d8abb6b5654", "message": "Use stricter typescript settings for browser"}, {"url": "https://api.github.com/repos/onivim/oni/commits/8319eb5350ba1a3a77a06eedc49f950a5a6d6991", "message": "Use stricter typescript settings for plugin_api"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/308840876", "body": "Glad to see someone trying this. Please let me know if you run into any problems.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/308840876/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343846058", "body": "Strange. I'm on macOS with version `0.2.16` and it does quit on cmd+Q when I try it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343846058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sethwoodworth": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/3f2d80da32497cf961379026425fc8fccc39afc9", "message": "Fixes default config json syntax. (#1244)\n\nBefore, when uncommenting the `oni.bookmarks` option, \r\nthe next configuration line option you uncomment will cause parsing the config file to fail."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chenglou": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/36b144fc784511cb7ef5e84fa2c636c9c07ce904", "message": "Add info on macOS PATH and key repeat (#1095)\n\n* Add info on macOS PATH and key repeat\r\n\r\nNot too sure if this is the right place to put it. Feel free to close this and put the instructions in the right place! Thanks.\r\n\r\n* Update README.md"}, {"url": "https://api.github.com/repos/onivim/oni/commits/7fe3019e1a4c515b96fd04ab69aee2191ee2e03e", "message": "Fix contributors link (#1094)\n\nrelative path leads to https://github.com/onivim/oni/blob/master/graphs/contributors which 404s"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/350415953", "body": "Thanks!\r\nAdditionally, ST also allows you to refine the selection through `foo.md:10` or `foo.md@myTitle`. The former goes to that line, the latter goes to the context item (e.g. outline view's items, from language-server). No clicking around required. Still a temporary file buffer", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350415953/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350425662", "body": "Fixed for me! =D", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/350425662/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155914260", "body": "Might not be ideal. The terminal tab is occupied when oni is open, until it closes", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155914260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155920753", "body": "Done", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/155920753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "superquest": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/31248fcc3cefabe8ecc692b84d3e1f7f9b289d16", "message": "Fix broken README.md link (#984)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/345564744", "body": "I might be able to fix this if you could point me in right direction @bryphe.\r\n\r\nWhere exactly does Oni receive this info?\r\n\r\nthe `bufferUpdateEvent` in [BufferUpdates.ts](https://github.com/onivim/oni/blob/495c99dab87740db0c1f8b7b7f91016dd5b3a69b/browser/src/Editor/BufferUpdates.ts#L26) is as close as I can get.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345564744/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345583605", "body": "It's buggy for me using a Mac.\r\n\r\nFor example, I opened Oni, clicked the \"Open Folder\" menu option, and opened a Typescript project in my home directory. Then I hit Command-T, searched for the string \"import\" and the first result was in the file `/Applications/Oni.app/Content/Resources/app/node_modules/typescript/lib.dom.d.ts`. This is a completely irrelevant file ...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345583605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345908198", "body": "I've tried to produce a `highlight_set` notification with a `highlightInfo.bold` or `highlightInfo.italic` flag by editing a markdown file with content like `# this` and `_this_`. \r\n\r\nSuch content is bolded and italicized in terminal Neovim, but no `highlightInfo.bold` or `highlightInfo.italic` flags show up in the `highlight_set` notification in Oni. Strange given that `:help ui-event-highlight_set` definitely says they should be there.\r\n\r\nUsing this method I have, however, produced a `highlightInfo.underline` flag. And it was a boolean -- even though the help docs specify that it should be text.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345908198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345912672", "body": "[Neovim-qt does exactly what we're trying to do as well](https://github.com/equalsraf/neovim-qt/blob/0551ef29108ebcfad2f9bcaa8658317bf8ca886c/src/gui/shell.cpp#L249).\r\n\r\nWell I'm stuck here. \r\n\r\nI'm going to try to figure out the rendering given a bold / italic cell.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345912672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "asood123": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/5b8a2766f073b6d398e2ec834b63c954f1a04deb", "message": "Activating Open Collective (#869)\n\n* Added .github/ISSUE_TEMPLATE.md (optional)\r\n\r\n* Added CONTRIBUTING.md (optional)\r\n\r\n* Added backers and sponsors on the README\r\n\r\n* Added call to donate after npm install (optional)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/342304750", "body": "Done on both counts. Try logging in with that email now and it should let you edit your collective.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342304750/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jared-skinner": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/b64f415ce05244a9bf2063880602d813833ece8c", "message": "updated keybindings to escape from menu using c-c and c-[ (#833)\n\n* updated keybindings to escape from menu using c-c and c-[\r\n\r\n* fixed lint error"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/339857445", "body": "I added this feature in #833", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/339857445/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "cdelahousse": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/53465ef33af00e5e8af24596884bae8be22f97d7", "message": "Make notification handler be more immutable (#794)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "justjoeyuk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/074189c5a16d0df490264c2557daefca9b202712", "message": "FIXED ISSUE #642 - ADDED missing mappings (#652)\n\n* ADDED missing mappings\r\n\r\n* corrected minor typo (#648)\r\n\r\nsimiliar -> similar\r\n\r\n* Fix config file location in README (#650)\r\n\r\nSupport for `config.json` was removed in e7e14356fe6db3cd8ee2f1fd94b7ed1919cdf119.\r\n\r\n* refactor menu.js (#656)\r\n\r\nRefactor menu list like sublime/atom\r\n\r\n* ADDED missing mappings\r\n\r\n* FIXED binding for command palette\r\n\r\n* REMOVED preventDefault"}, {"url": "https://api.github.com/repos/onivim/oni/commits/bcafaf09617dc77e4693764ef5ecfb45341c2e4e", "message": "ADDED $PATH insert/remove commands. Tasks can now use await. (#646)\n\n* ADDED $PATH insert/remove commands. Tasks can now use await.\r\n\r\n* ADDED dependency, DOH!\r\n\r\n* FIXED build\r\n\r\n* RENAMED some functions and ADDED check for OSX\r\n\r\n* ADDED messages for task success/fail. Clamped sudo-prompt\r\n\r\n* REMOVED successMessage and failMessage from VIM commands\r\n\r\n* IMPROVED application path \ud83c\udf89\r\n\r\nwill now work from anywhere\r\n\r\n* FIXED darned alphabet-sorted imports\r\n\r\n* CHANGED to path.join rather than manual appending"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/323969931", "body": "Worked when I cloned again and did it from scratch. How odd.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323969931/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324055986", "body": "This pull request is for issue #346", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324055986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324064562", "body": "@extr0py It seems that the require is causing the linter to fail. `sudo-prompt` only allows require it seems and I've not much experience with TypeScript, so not sure how to proceed. I think we should use `sudo-prompt` as it's cross platform and makes it easier for other platforms in the future.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324064562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324073137", "body": "Should all be fixed now :+1:", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324073137/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324179107", "body": "Updated the pull request. Since we're trying to keep each platforms implementation separate, it checks exclusively for OSX when adding the commands at the moment, with a TODO: for when the linux/windows ones are complete.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324179107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324181704", "body": "@extr0py I don't think so. The global code for ESC is 27, which is the keycode mapping. I tried doing a German keyboard layout and testing different representation of the keycode in JS. It all printed out as ESC being pressed. Can't really see a solid solution.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324181704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324184304", "body": "References Issue #642 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324184304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324185067", "body": "Messed up the first PR. This should do it. References #642 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324185067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324185115", "body": "@volny The latest PR should solve the problem :smile:", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324185115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324185418", "body": "@extr0py Specifically, this file seems of interest: https://github.com/zeit/hyper/blob/7a08b1dc3e07ae552debfe7e62c48b0a5a028ff9/lib/utils/key-code.js", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324185418/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324254684", "body": "@extr0py Added a way for tasks to show messages once completed. It's a start, but ultimately the completion handlers should return whether or not they were successful and we can then decide what to do by the returned value.\r\n\r\nClamped the version for sudo-prompt.\r\n\r\nWill look into alternative ways to find where the executable is running from.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324254684/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324318256", "body": "@extr0py I've not got the application path at run-time so it's flexible. I've tested it and all appears to be working. Let me know if you have any problems with it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324318256/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324333157", "body": "This is kind of implemented in #646 in the sense that tasks can now have messages for success/fail. We still need to be able to implement a success/fail callback but that's a different task.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324333157/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324548820", "body": "@extr0py All done \ud83c\udf89 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324548820/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324553320", "body": "@extr0py I've had to use <S-C-P> as the mapping prepends \"S\" onto the command. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324553320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324679905", "body": "@extr0py Awesome, sorry for the ignorant attempts, this is all a learning experience for me - first time with TypeScript (and neovim, for that matter!)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324679905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325448287", "body": "@extr0py Sorry for the delay, long weekend! Done.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325448287/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325610694", "body": "Rather than show/hide maybe it should be 'toggle'? Just a thought!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325610694/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "catsAND": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/97bdffb7bc5c42196ccaf29bcec2a5abca19174c", "message": "refactor menu.js (#656)\n\nRefactor menu list like sublime/atom"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/324542262", "body": "Thanks for merge.\r\n\r\n> in the menu as hint-text\r\n\r\nI tried find how do this in electron documentation, but only found sublabel.\r\n\r\n>I wonder if they should be `>>` and `<<` instead?\r\n\r\nMaybe. I'm noob in vim. Most command i found on vim wikia.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324542262/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nfm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/1807fe2e8d9dff058074e90dd25d7c7ea4b73b27", "message": "Fix config file location in README (#650)\n\nSupport for `config.json` was removed in e7e14356fe6db3cd8ee2f1fd94b7ed1919cdf119."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "crowchirp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/2b930a305e150c354643e661e9f4cf81cbf9dd34", "message": "corrected minor typo (#648)\n\nsimiliar -> similar"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Granitosaurus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/ebeef69c481db9e84d0c089d0bc2ab44504c9b1b", "message": "make feature table more readable (#640)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cyansprite": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/81d664e9fd0d6cf953efb26f7a0626cf0537b462", "message": "Fix tabs not changedTick instead of modified/ Don't show hidden bufs/scrollbar on overflow (#626)\n\n* Fix tabs not changedTick instead of modified\r\n\r\nIf one would modify a buffer then undo it, instead of changing from\r\nisDirty to not dirty (tabline with the little circle) it would remain\r\ndirty because ticks update even when undoing...\r\n\r\nTherefore check for modified instead.\r\n\r\nThis would have caused furthur issues whenever we implement\r\nrequesting not close on dirty.\r\n\r\nIssue(s) : #624\r\n\r\n* Added back in version, change modified to boolean\r\n\r\n* Don't show hidden/unlisted buffers in tabline\r\n\r\n* Super simple scrollbar implementation for tabs\r\n\r\n* Fix linting"}, {"url": "https://api.github.com/repos/onivim/oni/commits/dd591502a633507b6a99f5d3e079485c5b0555e2", "message": "Basic Bookmark Support/Quick Open Enhancements (#574)\n\n* Whenever you open Oni from the menu or clicking on the icon, it can cause the\r\nfuzzy finder to try to find through-out the install directory or your\r\nhome directory, which made Oni unusable and have to crash it or kill it\r\nvia task manager or kill -9 on linux, etc.\r\n\r\nThis checks if you are in the install or home directory, if so then open\r\nbookmarks instead of searching through files.\r\n\r\n- Implement oni.bookmarks so user can set these.\r\n- Make sure we don't click on spinning icon or bookmark info message as\r\n  a file\r\n- Comment some sections of the code I have concerns about.\r\n- Add different icon type for bookmarks.\r\n- If bookmark change directory of vim to the bookmark\r\n  (which triggers DirChanged so also Oni.)\r\n- If user doesn't yet have bookmarks supplied open config through\r\n  command so that is the default open oni when one doesn't exist.\r\n\r\n* Fixing whitespace issues\r\n\r\n* Change to fullpath so we open the dir not the parent.\r\n\r\n* Fix for #549, async git ls-files\r\n\r\n- Remove getUntrackedFiles, getTrackedFiles, and isGitDir due to them\r\nnot being used anywhere else and this can all be accomplished with one\r\ncall rather than three.\r\n\r\n- Convert overriden method and git ls-files to async calls.\r\n\r\nTODO: Still need to have a binary or something to async load files in\r\nnormal situations, it's a bit better now but it's still not ideal.\r\n\r\nI wrote a python script which converted to binary and it takes command\r\nline options such as ignore extensions, ignore directory names, and\r\nignore hidden directories. We can use it to either list files, or\r\ndirectories async (tested locally on windows and linux (different\r\nexecutables), that way it's all the same function for show() in\r\nQuickOpen, which reduces code size, and import size.\r\n\r\n* Added new line at eof\r\n\r\n* Added quick open types and open folder option\r\n\r\n- Quick open types make it easier to check what we are supposed to be\r\ndoing rather than a string constant linked to an icon... now you change\r\none string, one place, one time...\r\n- Quick open item to make quick open tasks easier...\r\n- When home or install dir also show open folder\r\n\r\nTODO:\r\n- Check if Add quick open items to tasks? I haven't looked how they handle\r\nthose... so... we'll see?\r\n- Check recursive folder loading when nothing is open from home folder,\r\nnot install dir.\r\n\r\n* Add QuickOpen <c-s> opens in horizontal split\r\n\r\n- 0 opens normally <enter/click>\r\n- 1 opens in vert split <c-v>\r\n- 2 opens in hori split <c-s>\r\n\r\n* file should end with a newline >.>\r\n\r\n* Add QuickOpen fuzzy find for buffer lines\r\n\r\n- c-/ opens buffer fuzy find\r\n- when selected it will jump to that line\r\n- on bufEnter we cache the lines async so we don't have to wait when\r\nloading them the follow times.\r\n- if we haven't cached the lines yet and we open it, check if we have\r\nthe popup open then show them on completion.\r\n- skip blank lines\r\n\r\nTODO: Right now we do one api call and batch load; see if we can load\r\nthe buffer lines one at a time without calling nvim api several times,\r\nthis might be opening a file, I only see this being an issue with huge\r\nfiles\r\n\r\nTODO2: Also add support for c-v/c-s incase someone wants to find something and\r\nopen a split\r\n\r\n* Use whole line, don't split it...\r\n\r\n* Updated Git Q status\r\n\r\n* Recache buffer lines if something has been inserted into the buffer.\r\n\r\n* Fix Git q, Fix blines open in e,sp,or vsp!\r\n\r\n* Move open folder to top and support file bookmarks\r\n\r\n* Used BufferUpdates for lines, and add back in loading\r\n\r\n* Adding loading indicator for all cases\r\n\r\n* Init color, fixing Loading Files to just Loading for other things as well\r\n\r\n* BufUpdate on BufEnter as well, this allows caching lines before buffer-update happens"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/320148145", "body": "I suggest whenever you are in the in QuickOpen, and you call show()\r\nif you are in the install directory (is this possible to make a global var/envionrment var when installing?) instead of \r\n```\r\n        UI.Actions.showPopupMenu(\"quickOpen\", [{\r\n            icon: \"refresh fa-spin fa-fw\",\r\n            label: \"Loading Files...\",\r\n            detail: \"\",\r\n            pinned: false,\r\n        }])\r\n```\r\nshow something along the lines of bookmarks the user can set in the config file, which then will change to a directory, which will make fuzzy finding work in that new directory.\r\n\r\nI know you are working on #554 issue with async handling for large directories, but this might be a neat feature for if you start oni from a desktop icon.\r\n\r\nI don't know typescript very well but I can try hacking at it when I get some time tomorrow, I will let you know if I make any strides, assuming you like this idea.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320148145/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320345575", "body": "Perhaps when this happens we could set off an async task to gather up the files (git ignore in mind) and cache these files, I'm working on a neovim plugin for searching, replacing and destroying, I can look into how to integrate that with Oni (is there a way to integrate python and typescript? I can try converting it), and the maybe add some kind of caching system after I figure out the open folder thing. \r\nI was planning on taking some common code and make an indexing system which is closely related to \"opening a folder\" and caching.\r\n\r\nThanks for listening I will try to get some coding in tonight!\r\nOne step at a time just some ideas...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320345575/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320346176", "body": "I will look into this too since I am making a plugin and it sometimes opens very, very large files :).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320346176/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320356687", "body": "It also doesn't update the linting errors.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320356687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320365452", "body": "@extr0py Can you assign me?\r\nI don't know how assigning works, I've never worked on github with anyone.\r\n\r\nfor now I'm using this \"chain\"\r\nhttp://fontawesome.io/icon/link/\r\n\r\nI have it working but when building the exec path is pointed to electron under the oni github directory, is there a way for me to package it and download it to ensure it works?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320365452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320382012", "body": "@extr0py I submitted a pull request, let me know what you think.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320382012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320452034", "body": "@extr0py \r\nOkay the run dist:win and pack:win it's not working debugging as to why right now, will make another commit and update PR. Thank you!\r\nI will also test on Linux later. Won't be home much today but I will try  to get it done\r\nOh haha I need to add Oni :).\r\n```ts\r\n                if (path.dirname(process.execPath) === process.cwd()) {\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320452034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320453177", "body": "Also we should check if ~ because i doubt the user would ever want that as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320453177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320454735", "body": "Also i noticed that if you select loading files it tried to open loading files..\r\nGoing to fix that and also going to detect if bookmarks is empty then offer to direct to oni config.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320454735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320454937", "body": "Also with my plugin im making I've researched file types that are never to be opened so i compiled a list and I think i can write some kind of binary checker to ensure we don't open binary files or show them such as .exe", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320454937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320459707", "body": "@extropy I will definitely research this after working on the quickopen issues", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320459707/reactions", "total_count": 3, "+1": 2, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320460361", "body": "I don't think it's necessary to integrate with atom or vs code, you get some nice features but you also take all of their bugs with you and you are limited to their preferences and philosophy.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320460361/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320461167", "body": "I think cwd makes more sense as well in status bar and have tabs to show files and we might implement breadcrumbs from the cwd for the tabbar.\r\n\r\nI will look into creating a binary once done.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320461167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320461809", "body": "I will try to look into this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320461809/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320461973", "body": "I will look into this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320461973/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320462239", "body": "I will look into this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320462239/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320462512", "body": "Also I will look into converting to typescript.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320462512/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320463176", "body": "I added some comments on the issue let me go get those and yeah I will alter the files when I get home, also will pull your pull request so i can use your nvim.chdir instead if the command.\r\n\r\n'\r\nAlso i noticed that if you select loading files it tried to open loading files..\r\nGoing to fix that and also going to detect if bookmarks is empty then offer to direct to oni config.\r\nAlso with my plugin im making I've researched file types that are never to be opened so i compiled a list and I think i can write some kind of binary checker to ensure we don't open binary files or show them such as .exe\r\n'\r\nThe second should help #473", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320463176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320463202", "body": "Sorry for choppy messages I'm on my phone and lazy:p", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320463202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320477032", "body": "I updated it, it works on windows I'm not done testing yet or fixing everything... and don't ask why it's another commit on top of it... I'm in a rush >.>", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320477032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320517733", "body": "Oh hey cool, I was going to fix it but if you want to be my guest :).\r\n\r\nI will test it on linux today and also make a .gif to show it off.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320517733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320527975", "body": "Nah I just copied your file over until you merged, so now I just need to rebase. I'm going to clean up the commit probably manually.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320527975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320528739", "body": "Almost done :)...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320528739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320528933", "body": "Making a new repo and PR... I made the other on windows and me and windows terminal just... we don't like each other :P.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320528933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320530013", "body": ">> @extr0py npm run pack\r\n\r\nif on ubuntu need to run (if not already)\r\n``` \r\nsudo apt install rpm\r\n```\r\n that way you have rpmbuild", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320530013/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320539383", "body": "will submit gif later", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320539383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320668751", "body": "### Screen gif :)\r\n<a href=\"http://imgur.com/O2rilC6\"><img src=\"http://i.imgur.com/O2rilC6.gif\" title=\"source: imgur.com\" /></a>\r\n\r\n##### This would be the syntax for the Readme.md\r\n```md\r\n![basic-bookmark-support](http://i.imgur.com/O2rilC6.gifv)\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320668751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320700130", "body": "Looking into what strategy to use", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320700130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320718419", "body": ">> Can we change the text for the no-bookmarks menu option to read \"Add Bookmark\" and add detail text that reads \"Select this to open configuration and add a bookmark.\"\r\n\r\nYeah the help message string was just something random to get the point across, I was going ask for your preference. I'm thinking about how we use quickopen and about files, bookmarks, and was playing around with an idea similiar to fzf.vim where quickopen will become an interface or abstraction and we have a bookmark , file , folder, \r\nBuffer(s) lines, etc quick open. Trying to figure out if that would be a preferred strategy also adding files as they load instead of batch loading.\r\n\r\n>> Could we add a menu option, in the initial case, to also \"Open Folder\" (to hook in the functionality\")?\r\n\r\nInitial case? Do you mean open folder then select a folder and add that to bookmarks?\r\n\r\nYeah I can document it in a bit out right now.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320718419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320718877", "body": "Do we redraw on focus gain?\r\n\r\nWhenever I resize my window it shows a blank whatever background color is (test on windows of latest build)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320718877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320738432", "body": " I'm thinking about how we use quickopen and about files, bookmarks, and was playing around with an idea similiar to fzf.vim where quickopen will become an interface or abstraction and we have a bookmark , file , folder,\r\nBuffer(s) lines, etc quick open. Trying to figure out if that would be a preferred strategy also adding files as they load instead of batch loading.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320738432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320738556", "body": "And yes first and foremost ditch the batch load :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320738556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320739401", "body": "And yes the loading indicator shouldn't be a selectable item, put it on the left or right side of the text field or something and then go away or show a different icon after.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320739401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320789916", "body": "Basically yes I understand going to fix it next PR but currently this is the best I can do without breaking Oni :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320789916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320841680", "body": "Just a preview of hey, I'm getting async to work :), this is a simple example but the point is, I'm getting there :).\r\n<a href=\"http://imgur.com/bnEnhru\"><img src=\"http://i.imgur.com/bnEnhru.gif\" title=\"source: imgur.com\" /></a>", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320841680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320957172", "body": "@extr0py \r\nSorry, I meant building the latest source.\r\nI will test it in a bit and get back to you, whether to open an issue or not.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320957172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320959424", "body": "@extr0py \r\nAn idea I had instead of putting it in the oni config, what if we having a keybindings.js and we can have a menu link to open it as well?\r\n\r\nI will test in a bit and see how it flows with our code.\r\n\r\nBut reason being is for my suggestion, my init.vim has all my vim stuff, and then I source plug.vim for all my plugins, I don't like them being all in the same file, because it gets messy.\r\n\r\nKey bindings don't <i>feel</i> like a config thing to me, it feels like something separate.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320959424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320961258", "body": "@extr0py \r\nit's really pretty but I don't think neovim when I see it, I think we might need some reference to it as well... maybe something like take the big circle with the gradient in the background, overlay/burn/diff the neovim logo onto it, then place the second smaller circle on top of it so it's behind it.\r\n\r\nWhat does <i>Oni</i> mean to you?\r\n\r\nI think of yokai and brother.\r\n\r\nMaybe we could integrate some kind of horns or fangs elegantly like the triangle makes me think of that.\r\nAnd the overlay of neovim could be like the brother...\r\n\r\nBut yes, I like it :+1: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320961258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320962129", "body": ":+1: \r\nI would also like a way to select text that isn't selectable my neovim's mouse=a such as an error msg so I can copy and paste it outside of the editor, but as far as defaults go I think this is very reasonable.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320962129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320968616", "body": "I ran into this issue too onto linux, updating neovim seems to be a soft fix.\r\n> feature-existence checks\r\n:+1: ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320968616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320969358", "body": "I know neovim is having issues with the cursor color is well... in the terminal if you\r\n```vim\r\nset termguicolors\r\n```\r\ndoes it work?\r\n\r\nif your terminal such as terminator controls the cursor color try gnome or tilix", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320969358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320970283", "body": "This should be a setting...\r\nI don't like this in vscode/sublime I hated whenever I closed it it would reopen what I was doing last.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320970283/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320986121", "body": "Also I may implement <c-i> to select more than one file ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/320986121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321018078", "body": "You will be able to :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321018078/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321249967", "body": "What release would we add it?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321249967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321250719", "body": "I think I agree with your open folder idea that we don't search files unless we have a folder open.\r\n\r\nWe would kill the need for a special case scenario, since the user wouldn't mean to open those folders, and in the case someone does want to search through their home directory we could have options to ignore .files/.dir and ignore binary files, and since I'm converting it to async this should be feasible.\r\n\r\nTherefore my current plan is to\r\n- Open bookmarks on <c-0> (Is this a good key seq? I just picked something random)\r\n- Open bookmarks on <c-p> IF we  have not opened a folder yet\r\n- Whenever we open a folder save the folder name that way we can track if we have and if for some reason we need the folder name we don't have to call neovim to get it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321250719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321268570", "body": "> If I launch Oni and go to Oni(File) -> Tab Open, all files will be opened in new tabs and gt will move between tabs. If I launch Oni and go to Oni(File) -> Open, all files will be opened in new tabs but gt will not move between tabs.\r\n\r\nIf you open a tab in vanilla vim/neovim, you with a new <i>Tab</i> which you can cycle with gt\r\nIf you open a file normally, you will open up a buffer.\r\n\r\nThe oni tab bar handles both...\r\nDue to how vim handles buffers and tabs it's hard to figure out what the correct behavior <i>SHOULD</i> be", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321268570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321276716", "body": "> In terms of the Open Bookmarks - I wonder if, to keep it simple, we could just always show the bookmarks too in QuickOpen? Otherwise, I'm okay with the default key sequence.\r\n\r\nHmm... That sounds like a neat idea.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321276716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321282776", "body": "I also have this issue...\r\nWhenever I use j and move past the line it disappears, but if use k and go back up it, it reappears...\r\n\r\nIf i click past it and don't touch the line, it doesn't affect it\r\n\r\nHappens whether I use cursor line or not.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321282776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321287390", "body": "Haha, I love it.\r\n@extr0py this what you have in mind :)\r\nIf you like it, I think we should just always show files regardless if the folder is opened...\r\nAsync of course, tracking the folder is kind of weird... on startup we chdir, so we would have to add\r\nthe special case for on start up, and then what if the user opens from command line? Do we respect that as a folder or not?\r\nSo I think maybe we should alway process files, just async, and always show bookmarks.\r\nWhenever we select something, cancel the async call.\r\nIf people don't want bookmarks, then we can have an option to ignore them (i.e. don't show the help message)\r\nThis pull request will focus on the bookmarks and quickopenitems, next PR will be the async and then the keybindings.\r\n<a href=\"http://imgur.com/lYr126v\"><img src=\"http://i.imgur.com/lYr126v.gif\" title=\"source: imgur.com\" /></a>", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321287390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321288619", "body": "I am looking into this", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321288619/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321293719", "body": "Yeah same and it overrided my old way of doing it and I think this is my favorite line of feature so glad to be working on it :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321293719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321321485", "body": "> I do like it, it shows the user that the 'bookmark' feature is available. The only concern I have is that, we might continue adding items here - it won't be clear to the user what things they need here.\r\n\r\nWhat other items? The intent would be show bookmarks if available or show this. I can't think of anything else to add unless we list the directories recursively ( Not files , ) so they can choose to open what they are looking for. I don't think we should add anything else to c-p. I am working on doing buffers, buffer lines and other things, but it will be a different mapping because it's a different function.\r\n\r\n> I think it also might be a bit confusing how 'Bookmark' differs from 'Open Folder'. But I'm okay trying it out and then refining it!\r\n\r\nThe only difference between the two are that opening a Bookmark would be opening a folder they saved so they can use the fuzzy finder rather than having to find the directory they want with open folder. So essentially they are the same.\r\n\r\n> So I think in that case we'd still need the special case of the install directory - if the working directory is the install directory, treat it like there was no 'open folder' action.\r\n\r\nOn Linux the install directory, or when I open it from the menu by click on the icon, it opens from the home directory, are we going to treat this as the install directory so if we are in the home folder as well?\r\n\r\n> Another thing I'm thinking about later is having a special start screen for Oni, if there is no file opened - that would show things like opening QuickOpen, adding a bookmark, maybe starting an improved vimtutor (#430), etc.\r\n\r\nSounds wonderful, also should be an option whether to show start/welcome screen or to open a blank file.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321321485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321323928", "body": "> One thing I'd like to move away from though, is using the Node EventEmitter class - and use the typed Event/IEvent objects in the code. You get better completion with those, and it's easier to document as opposed to a bunch of strings. \r\n:+1: \r\n\r\n> I don't think this particular object makes sense to be a singleton, because we basically pass it to the plugin via the Oni instance in the activate method.\r\n\r\nSo each plugin has their own configuration?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321323928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321331438", "body": "> At least right now, there is an Oni object created for each plugin (and then each of those Oni objects creates that Configuration object, which listens to Config.ts).\r\n\r\nRight I looked through the code to see the lifecycle :P I just didn't quite understand why.\r\n\r\n> Some of it is over-complicated, because previously, all the plugins were hosted in completely isolated contexts. I moved away from that now and I'd like to move towards having a common Oni object that is shared between the plugins - this would allow a model where plugins could define shared or common functionality (kind of like the Emacs plugin model). Just haven't had a chance to clean it up completely!\r\n\r\nI think this is the best and yeah I understand, only so much you can do.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321331438/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321332431", "body": "> Oh ya, there is nothing else today - I was thinking about the future, if we decided to add more functionality, it might blur the line between what goes in QuickOpen vs the command palette. It's hypothetical now, so we don't need to do anything until it becomes an actual problem. Was just thinking out loud.\r\n\r\nSo how do you feel about loading all the folders when no folder is opened? Considering it will be async?\r\n\r\n> Good point - I guess if this is the case, we really can't get out of special casing both those directories. If the user clicks \"Open Folder\" and picks the home directory or install directory, we should let them do that. But we shouldn't open it by default, like we would for other directories. Does that sound reasonable?\r\n\r\nReasonable yes, just need to move some code around to get it to play nice :).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321332431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321346864", "body": "> My preference would be not loading the folders. I tested the same scenario out in VSCode and Atom and they don't load the folders, either. It also is a safety net from us / the user hitting issues like #177\r\n\r\nThen let's try to be a step above them?\r\nI wrote a binary that lists all the dirs recursively under my home dir, ignores all dirs starting with . (hidden directories) in .8 seconds.\r\n\r\nWould you like to try it out? (It's for linux so if you are on mac or linux you should be fine.)\r\n\r\nWe could go a step above and add a setting for what kind of file names to ignore, and if you don't want to ignore .directories we can also have a setting.\r\n\r\nHowever not ignoring .directories from my home dir it took 28 seconds.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321346864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321412562", "body": "@extr0py You asked for files, I give you files\r\nProbably should change how we load files into it... but hey it's cool :P\r\n\r\n<a href=\"http://imgur.com/wHObU5X\"><img src=\"http://i.imgur.com/wHObU5X.gif\" title=\"source: imgur.com\" /></a>", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321412562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321443960", "body": "Got rid of the scrolling, going to work on a number.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321443960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321444204", "body": "Here's a example of how it would work.\r\nThis is from my home directory, async loading folders (You can't tell because it gets done so fast...)\r\nThese are binaries I'm making for files and directory loading...\r\nI can add args so the user can pass in ignores they would like and we will have defaults so they can pick from them.\r\n\r\nLol the 5 is what will be a loading of files/files or dirs/dirs except... not there.\r\n\r\n<a href=\"http://imgur.com/byhc495\"><img src=\"http://i.imgur.com/byhc495.gif\" title=\"source: imgur.com\" /></a>\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321444204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321606612", "body": "I do something similar it's so that if I use something that switches through buffer it hides the ones that are hidden, that way I don't switch through my buffers and accidentally open my terminal instead of a file I'm trying to get to.\r\n\r\nFor example to cycle through buffers that aren't in open in a window already or that aren't hidden I use\r\n```vim\r\n    function! GetNextBuffer()\r\n        let l:curbuf = bufnr(\"\")\r\n        let l:newbuf = 0\r\n        let l:firstbuf = 0\r\n        for buf in getbufinfo({'buflisted': 1})\r\n            if !empty(buf.windows) || l:curbuf == buf.bufnr || buf.hidden\r\n                continue\r\n            endif\r\n\r\n            if l:firstbuf == 0\r\n                let l:firstbuf = buf.bufnr\r\n            endif\r\n\r\n            if l:curbuf > buf.bufnr\r\n                let l:newbuf = buf.bufnr\r\n                continue\r\n            else\r\n                exec \"buffer\". buf.bufnr\r\n                return\r\n            endif\r\n        endfor\r\n        if l:firstbuf != 0\r\n            exec \"buffer\". firstbuf\r\n        endif\r\n    endfunction\r\n\r\n    function! GetPrevBuffer()\r\n        let l:curbuf = bufnr(\"\")\r\n        let l:newbuf = 0\r\n        let l:firstbuf = 0\r\n        for buf in reverse(getbufinfo({'buflisted': 1}))\r\n            if !empty(buf.windows) || l:curbuf == buf.bufnr || buf.hidden\r\n                continue\r\n            endif\r\n\r\n            if l:firstbuf == 0\r\n                let l:firstbuf = buf.bufnr\r\n            endif\r\n\r\n            if l:curbuf < buf.bufnr\r\n                let l:newbuf = buf.bufnr\r\n                continue\r\n            else\r\n                exec \"buffer\". buf.bufnr\r\n                return\r\n            endif\r\n        endfor\r\n        if l:firstbuf != 0\r\n            exec \"buffer\". firstbuf\r\n        endif\r\n    endfunction\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321606612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321914888", "body": "Pretty much done with this... just making some minor changes then I will push my commit to my PR and then you can let me know what you think.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321914888/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321915117", "body": "Number will be in a later PR I've never used React -.-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321915117/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321959027", "body": "Open Folder support\r\n<a href=\"http://imgur.com/Alxfh0I\"><img src=\"http://i.imgur.com/Alxfh0I.gif\" title=\"source: imgur.com\" /></a>", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321959027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321962425", "body": "C:/Users/brand/Desktop/oni/browser/src/Services/QuickOpen.ts[216, 1]: File should end in newline\r\n\\>.> \r\nC:/Users/brand/Desktop/oni/browser/src/Services/QuickOpen.ts[218, 1]: Consecutive blank lines are forbidden\r\n\\>.> \r\nFile is 217 lines long, I give up on the formatting :P.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321962425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321989250", "body": "I use c# heavily with Unity, I will see if I can fix this at some point...\r\nAssuming I get time :P.\r\nAlso might add on to your plugin, great idea to have it as a plugin!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321989250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321989284", "body": "Awesome :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321989284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321989469", "body": "Yeah, I agree it should be a separate file...\r\nI'm not sure if it should be a .js or .tmTheme, or .json, or .less...\r\nHowever, abstracting Config.ts would be the best option for .js file, it would match the current format of the Config.\r\n\r\nOf course we could change this altogether, json is super light weight to parse.\r\n.less could be implemented natively and so we don't have to parse it really.\r\n.tmTheme I've never really looked at.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321989469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321990264", "body": "Next thing to do...\r\n@extr0py can you test out my binary, see if it's suitable.\r\n\r\nAdd buffer lines support, I'm thinking <c-/> for like I'm doing a search, except do it with the fuzzy finder in QuickOpen, then this will jump to the line.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321990264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321997449", "body": "Buffer lines fuzzy finding, complete :)\r\n\r\n<a href=\"http://imgur.com/1U99reW\"><img src=\"http://i.imgur.com/1U99reW.gif\" title=\"source: imgur.com\" /></a>", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321997449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004724", "body": "An idea...\r\nit's not a fix but more of a hack, but if we get the keys pressed to do with scrolling, we can catch those keys, then send them to vim (like we do with all the other keys) and then after wards, redraw the screen.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322004724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322005876", "body": "> Nice \ud83d\ude04 Do you have any games in the app store or anything?\r\n\r\nNot yet currently working on one, got a bit distracted with Oni :P.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322005876/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322006156", "body": "> Oh and I'll try out the binary in a bit. I'm interested as to how it compares to something like ag or RipGrep. I've been toying with pulling ripgrep in as the default non-git search strategy for fuzzy finding.\r\n\r\nWellll the binary I'm talking about it specifically for listing files and directories.\r\nI don't know much about ripgrep but I didn't know ag could list files without searching through them.\r\n\r\n> Looks like one of my recent changes caused your AppVeyor build failure - I removed the 'Q' library and it looks like there is a conflict in Git.ts. So you might need to port over the changes had to convert that to use ES6 Promises instead of Q.\r\n\r\nOkay I will merge the two.\r\n\r\n> Oh wow, the buffer search is a cool idea - neat!\r\n\r\nThanks I really liked the idea so I just went for it :).\r\n\r\n> I'm thinking about some other sorts of searching too (searching in files). I like Sublime / VSCode / Atom much better than the vim experience for doing things like find & replace.\r\n\r\nDefinitely. the search and replace and destroy plugin (sarada for short) is a vim remote plugin and WIP, I can make a stand alone binary that would do what we want, give me some time and I will put it together :P, the algo is sound.\r\n\r\nWith excluding files it's faster than ag in bigger directories on linux, but it's still a WIP... I think I can make a binary hell of a lot faster because the plugin actually lets you select lines you can ignore to replace and destroy the entire line if you want. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322006156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322009481", "body": "> I tried out your binary on a VM, seems like it works well - it'd be interesting to compare the performance though to ag/ripgrep. There are some other features they have, like respecting the .gitignore functionality, search-in-files, etc.\r\n\r\nListing files git ls-files will always be faster than rg or ag because it already has the list with .gitignore in mind.\r\n\r\nListing files if it's NOT in a git repo not having to take .gitignore in my mind because it doesn't exist then. I was considering writing an ignore parser anyways that way the user could specify and 'global' ignore file along with options.\r\n\r\nWith open folder and bookmarks do you want an option to list all the folders ( standard exclusions will apply then the user can add them) that way it shows them their directories that aren't flagged directories and they can fuzzy find it.\r\n\r\nSearching through files I think it would be easiest to just use ripgrep, it's trusted by a lot of people and I think my plugin is going in a different direction. Mine starts up with vim, when started it creates 16 p-threads, then it ignores .gitignore (i use git ls-files too :P) and then it caches those, as long as you don't change your dir it keeps them ( then it recaches), then it pushes to the process daemon and then writes to a file and then loads it (vim doesn't have a good way to handle live streams... trying to find a work-around )\r\n\r\nThat being said check out issues ripgrep have and make sure it conceivable and easy to get around...\r\nWriting a simple search algorithm might be more beneficial than relying on someone else.\r\n\r\nThat being said how do you plan on implementing the search window?\r\nStandard left side popup like vscode, or bottom/top popup like atom/sublime?\r\nOr something entirely new.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322009481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322011904", "body": "I will implement something like this and let you know how it flows with a branch and PR of course :P.\r\n```{\r\n   \"oni.colors\": {\r\n           \"statusbar.background\": \"black\",\r\n           \"statusbar.mode.normal.background\": \"red\",\r\n           \"quickInfo.background\": \"#000000\",\r\n          // ...etc\r\n     } \r\n}\r\n```\r\nI will also work on a menu item and picking a color scheme... maybe we can make the vim-colorscheme plugin something we can use ( Do we support term colors? )\r\nIf not the actual plugin we could wrap it into a js plugin :P.\r\n\r\n> - vim themes\r\n\r\nWe should sync the vim colo with a oni config value.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322011904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322012461", "body": "Notice something while testing buffer lines, the text is too small >.>", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322012461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322013847", "body": "> @cyansprite , shoot, well keep me posted if you ever need a beta tester \ud83d\ude04\r\n\r\nDo you have an android phone?\r\n\r\n> And as an aside, I'm thinking about some ways to gamify Oni - like an improved vimtutor experience / game, as well as just the act of editing and becoming proficient at Vim more enjoyable. #430 tracks some of those ideas - I imagine you might have some ideas around there too, given your background in games!\r\n\r\nI was actually thinking about that, like making an adventure game where you move with hjkl and you can use f and t to jump to enemies or something like dta will jump to kill enemy before a, and dfa would jump to kill enemy a... just a thought I never pieced it altogether, I will take a look in a bit :).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322013847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322041016", "body": "@keforbes thanks :)\r\n\r\n@extr0py do we have a show error popup?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322041016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322041126", "body": "- Open in splits now (vertical and horizontal)\r\n- Shows off you can type in the line number and it previews the line before having to jump to it\r\n\r\n<a href=\"http://imgur.com/QXrWKzI\"><img src=\"http://i.imgur.com/QXrWKzI.gif\" title=\"source: imgur.com\" /></a>", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322041126/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322047495", "body": "in ./browser/src/UI/components/Tabs.tsx\r\n```ts\r\n<div className=\"corner\" onClick={props.onClickName}></div>\r\n```\r\n\r\nthat way you don't have to click directly on the name but you can click the corner without an X.\r\nThis is an issue I ran into with things with short names.\r\n\r\nin browser/src/neovim/Buffer.ts\r\n```ts\r\npublic getOption(optionName: string): Promise<any> {\r\n     return this._session.request<any>(\"nvim_buf_get_option\", [this._bufferReference, optionName])\r\n}\r\n```\r\n\r\nthat way we can check buffer var of hidden/listed.\r\nI think hidden might be fine to leave in the tabs since I jump from buffers a lot and don't use tabs, but don't show listed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322047495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322048239", "body": "Also a feauture I would want to add is cursorline changing color in insertmode, its a feature I like.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322048239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322076891", "body": "@extr0py \r\n> What's the scenario / case you want to show it?\r\n\r\nI was thinking, when we close a tab if it's modified we don't close it this is because bw is not bw! but that's preferable in some cases because the user might not realize its modified which is hard to do but anyways... When we try to quickopen we do e!/vsp!/sp!, if it's modified and we use e, then that buffers changed will be lost, so I was thinking showing some kind of dialog saying are you sure modified blah blah.\r\n\r\n>One feature I do want - though - and this is common for pretty much all the new pieces of UI (like file explorer, git integration, find files, errors, etc) - is that I can navigate using the same paradigms and functionality I use in VIM - in other words, I should be able to use h/j/k/l and all the other tools I'm comfortable with. This is a part of the reason I wanted to build a new editor - most editors that expose extensive functionality like that, even if they have some vim bindings, don't have it set up in a holistic way.\r\n\r\nHELL yes, reason why I quit vscode, because some places I couldn't JUST use the keyboard and I couldn't use hjkl.\r\n\r\n> I haven't 100% figured this out yet, so if you have any thoughts, that would be great! I know that I don't like the implementation in VSCode though - because when you get your search results, they are always clipped by the left pane. For my workflows, I'd prefer the flexibility to either have them on the bottom, or on the side. But not sure exactly how it should look like yet - might be worth creating an issue to start thinking about ideas!\r\n\r\nI see the issue I will look at it there!\r\nthanks!\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322076891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322077467", "body": "> For my workflows, I'd prefer the flexibility to either have search results on the bottom, or on the side. But not sure exactly how it should look like yet!\r\n\r\nRight... I'm not sure how it would work either, I've been thinking about this a lot (especially where I was making a plug in) and I got a really good feel for what I like and what I don't.\r\n\r\nI've discovered that as far as typing in the search I would want it to be at the bottom of the screen.\r\n\r\nThen to open in a vsp, or a new tab (we can make our own dialog even? my plugin just made a scratch buffer with a few options) with the results updating as they find them, I want to preview, split it, vsp it, or tab it with a command (p,s,v,t something like that)\r\n\r\nFold the regions so I can navigate with zj, zk.\r\n\r\nThere are a few more things... but those are the main things.\r\n\r\nSometime I will demo my plugin and show you how it works, and then see if we can create something similar but of course better with nice graphics and what not.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322077467/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322077479", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322077479/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322083380", "body": "Next up is quick open buffers so you can easily cycle through opened buffers with ease :).\r\n\r\nIf you think if any ideas feel free to let me know :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322083380/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322085075", "body": "Oh. Color schemes would be cool!!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322085075/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322268560", "body": "> This would be excellent to have! I think this will be a major pain point for users - being able to warn when we navigate away from an unsaved buffer would be very helpful. In addition, it would be nice to have this check on quitting too - it's too easy to quit Oni when you have unsaved changes. It might be worth tracking this in another issue / PR\r\n\r\nI agree, and I don't know if it's still an issue but whenever I would switch a buffer it would wipe by undo history. I will check again when I get time.\r\n\r\n> '`' - show available vim marks\r\n\r\nI've never used this are marks useful?\r\n\r\n>: - vim command mode for current window\r\n/ - buffer search (integrate with the buffer search you added)\r\n! - oni command mode (same commands shown in Ctrl+Shift+P)\r\n& - show available buffers\r\n\r\nI haven't looked how are are matching typing yet but I can imagine it shouldn't be too hard.\r\n\r\n> I think Nuclide also had some cool ideas with their enhanced quick open experience. They basically showed a few tabs with these sorts of pivots, underneath the text - that might be a good way to enhance discoverability and let users know the sort of things they can do with QuickOpen.\r\n\r\nYou will have to explain a bit I'm slightly confused :P.\r\n\r\n> Might make sense again to have this a a separate issue / PR - I don't want you to feel like you have to save the world with this PR! Let me know when you're ready to merge it and I'll test it out.\r\n\r\nLol am I doing too much?\r\nI think it would be beneficial for you and me both to go ahead and merge this for testing and merge conflicts in the future. The only reason I would hold of is for the listing of files NOT in a git repo but...\r\nA PR can fix that later :P.\r\n\r\n> Oh, and regarding colorschemes, a good starting point might be to use state.backgroundColor and state.foregroundColor (and darken the background a bit). I tried it on onedark and vim8solarized_light and it looked pretty good... much improved from what we had before. On top of that, we could have customized colors like oni.colors.menu.foreground/background/accent, or something.\r\n\r\nGoing to start with vim colorschemes and buffers, then add in the oni colors, since vim colorschemes will be done just by modifying QuickOpen.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322268560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322367480", "body": "I need to clean this up -.-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322367480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322372201", "body": "Last gif showing what was accomplished.\r\nYou can tell I don't use my mouse much when it comes time to open a folder lol...\r\n\r\n<a href=\"http://imgur.com/lsnUVrs\"><img src=\"http://i.imgur.com/lsnUVrs.gif\" title=\"source: imgur.com\" /></a>", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322372201/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322478620", "body": "> The finding for non-git folders seems to have regressed. On master, if I use QuickOpen on a folder that has a bunch of stuff (like 'Documents' or 'Downloads'), I immediately see a loading spinner:\r\n\r\nRight I will add that back in, we didn't finish on figuring out if we were using ripgrep so I was waiting until then but for now I will go ahead and add it back in.\r\n\r\n> Reading the whole set of lines the way we're doing right now is expensive - there's actually already a BufferUpdates object that keeps track of changes, and caches the last set of buffer lines. We should just use that object, instead of querying Neovim for the current buffer. For large files, this will be slow / expensive, especially if we're doing it every time we leave insert mode.\r\n\r\nwill do, I need a better overview of the code -.-, or at least a way to ask, is this implemented yet?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322478620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322479650", "body": "> Ideally, this whole block could be replaced by something like:\r\n```ts const keyboard = new Keyboard()\r\nkeyboard.on(\"keydown\", (key: string) => {\r\n    const wasKeyHandled = inputManager.handleKey(key)\r\n\r\n    // If the key couldn't be handled in the Oni layer, pass it to Neovim\r\n    if (!wasKeyHandled) {\r\n         this._neovimInstance.input(key);\r\n    }\r\n})\r\n```\r\n\r\nI like the above example.\r\n\r\n> Generalize all the special-casing in NeovimEditor.tsx - Some commands will have different behavior depending on the edit mode (normal, insert, visual, etc), or based on UI that is available (like, 'is a menu visible'). We should have a way to handle those cases. If we address that, than the key handling in NeovimEditor can just defer that to the input manager to resolve. This will guarantee that our key-handling is flexible enough to support new and novel elements.\r\n\r\n```ts\r\n// temp solution\r\n\"keybindings.openedMenu.nextMenuItem\"\r\n// more specific solution\r\n{\r\n   \"keybindings.openedMenu\": {\r\n         \"nextMenuItem\": [\"C-n\", \"c-j\", \"<down>\"]\r\n     } \r\n}\r\n```\r\n\r\nAlso noticed i used c-j instead of C-n, we need to convert all c to C so we can still handle them because if it's c we ignore, and the user doesn't care about case or at least I don't want to.\r\n\r\n> The concern I have is that, if these 4 bullet points aren't meant, and we introduce a short-term paradigm, it will actually incur complexity / debt - because now we have to maintain backwards compatibility and also help our users to figure out two different paradigms. So my preference would be to have a holistic solution, as opposed to a short-term solution. The proposed solution solves the first bullet point, but not the subsequent 3.\r\n\r\nThere is no way I would want to merge this right now, I just wanted to put a base review so we could discuss it much like you did :).\r\n\r\nI'm kind of new to github and I'm not sure exactly how we should discuss things... so I open prs and issues... is there a better way of doing it?\r\n\r\n> keyboard story\r\nI'll try and see if I can get time this weekend to put something more concrete together in terms of what I'm thinking, since some of the thoughts above might be too vague to be actionable. I know the lack-of-configurability with the input is a huge pain point right now, so I'm definitely on-board with solving it!\r\n\r\nIf you could outline the specifics of what we need and build tasks off of a story that way you could define exactly what to complete would be great. I have a general idea and your bullets are a GREAT start.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322479650/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322494062", "body": "I decided to leave blank lines in buffer search for quickopen, I think it works better because sometimes i think it's odd if some numbers are missing :P.\r\n\r\nAnyways, almost done :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322494062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322502223", "body": "I think the next PR to do with QuickOpen will be colors, buffers, and caching each until an autocmd happens...\r\n\r\nSo if \r\n- dirchanged recache loaded files\r\n- Sourced file recache colors\r\n- Buffers are monitored already just need a way to pull them into quickinfo, suggestion easiest way to do this? I can figure it out but it you have a suggestion to make my life easier that'd be great so I don't reinvent the wheel like with buffer lines :P.\r\n\r\nAlso was thinking for colors, could we maybe on hover over go ahead and load the colorscheme?\r\nMaybe add an option for buffer lines and files to open a botright preview window?\r\n\r\nMy concern with loaded files is that what happens if a person makes a new file but doesn't change directories outside of vim?\r\nWe could use fs to watch them but that might be computation intensive... I've haven't looked much into it honestly.\r\n\r\nAnd then the next will do with the \r\nOne thing I was thinking about, and this is something similiar to VSCode and other editors, is having symbol prefixes mean special things in QuickOpen. For example, if you type the following prefixes:\r\n\r\n: - vim command mode for current window\r\n/ - buffer search (integrate with the buffer search you added)\r\n! - oni command mode (same commands shown in Ctrl+Shift+P)\r\n'`' - show available vim marks\r\n& - show available buffers\r\n\r\nYou mentioned stories in keybindings, do you have a program you use to track it? because this be wonderful to have a layout of tasks, I mean I know what needs to be done... but getting confirmation from you and others would be nice as well as making sure I implement it correctly with functionality already existing.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322502223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322504482", "body": "Or we could do plugin the actual command or lambda", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322504482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322516334", "body": "> Sorry if it came across as negative / critical - didn't mean it like that at all. I appreciate the time, thought, and energy you put in (after all, you're taking time out of your day to contribute!). So I try and get concerns out early, out of respect for your time! But ya I still feel relatively new to this too, so lots of learning for me - I'm still finding the right balance there.  :smile: Thanks for being open to the considerations!\r\n\r\nIt wasn't negative at all, thanks for the feedback, I just want to make sure I'm doing the best I can.\r\nThe quick feedback is always appreciated, I would love to help Oni get to release 1.0 as quick, but as good/correct as possible. Not only for my own editing but I want to make an text editor/IDE I believe in.\r\n\r\n> Sounds good! I know it's vague right now but I wanted to at least set up what the \"north star\" looks like with those bullet points. I'll post up some more concrete ideas soon.\r\n\r\nLess that it's vague more of I want to manage it properly, maybe a check list?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322516334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322550980", "body": "@extropy \r\nissue with the bufferupdates, it doesn't load on bufenter, it loads on buffer-update, or am I doing something wrong?\r\n\r\nI think it's only when I am on the same line... so if it is the lastline === args.line && buffernum? I'll try it out...\r\n\r\nbut it still doesn't work? hmm.....\r\n\r\nSo we get buffer-update whenever we open a new buffer AND we are on a different line, otherwise we don't get it... as far as opening buffers are concerned so unless we have something we need to do to the buffer like move the cursor or whatever... it doesn't receive this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322550980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322590179", "body": "So i think adding checking for buf num as well as line and send the event onbufenter might be an easy fix.\r\nI will test it when I get time.\r\n\r\nCheck latest commit :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322590179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322810115", "body": ":) I try.\r\n\r\nNo reason from me to hold off. Fire at wil:).\r\nWill try to get some more enhancements done today working on a yankring plugin right now as well because I think vim needs a better tracking system clipboard history and I don't like other plugins", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322810115/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322810824", "body": "> Ah ya, github has a check list feature, I just always forget to use it.. That's a good idea - I'll work on breaking down the thoughts I have into an actionable list.\r\n\r\nThat would be nice but also thinking of something like trello.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322810824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322842189", "body": "right because b:changedtick will change even if you type and then undo like wise undo redo (assuming you saved after a change)\r\n```\r\nb:changedtick\tThe total number of changes to the current buffer.  It is\r\n\t\tincremented for each change.  An undo command is also a change\r\n\t\tin this case.  This can be used to perform an action only when\r\n\t\tthe buffer has changed. \r\n```\r\nso checking &modified <i>should</i> give us the correct answer each time, I just tested it and it and seems correct\r\n```\r\n'modified' 'mod'\tboolean\t(default off)\r\n\t\t\tlocal to buffer\r\n\tWhen on, the buffer is considered to be modified.  This option is set\r\n\twhen:\r\n\t1. A change was made to the text since it was last written.  Using the\r\n\t   |undo| command to go back to the original text will reset the\r\n\t   option.  But undoing changes that were made before writing the\r\n\t   buffer will set the option again, since the text is different from\r\n\t   when it was written.\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322842189/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322895021", "body": "> Visual Mode\r\n<Control/Command + c> - copy the selected text to the clipboard\r\n\r\nI've used c-c to copy in visual mode, as long as you exit visual mode at the same time, it doesn't interfere with my workflow (yes I'm one of those people who use c-c as escape because I learned the `bad` way); As long as you make it direct to \"+ and make sure \"\" stays in tack to what it was originally, it works fine. (I only ever use \"+/(\"* linux only) unless I'm doing something OUT of vim)\r\n\r\n> Insert Mode\r\n<Control/Command + v> - paste the clipboard text\r\n\r\nI use c-v in insert mode for \"\"p, as paste from black hole, I would recommend c-s-v from oni's command paletter because you can put in the menu (some people like this), you can use c-s-v which in vim you can not, and because it's what many people are use to from terminal pasting on Linux.\r\n\r\nOf course it'll be configurable when we get to that point with keybindings and what we are working on right now, but as far as the `default` I think that would be the easiest.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322895021/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322896428", "body": "> Excellent! I just merged it in. Congrats @cyansprite on getting your first PR in - great work and thank you for the contribution!\r\n\r\nThanks.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322896428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322897283", "body": "How about a fuzzy find Quickopen for clipboard history? \r\n\r\nAs well as an autocompletion for clipboard, my plugin I was playing around with I was using s after pasting, it worked really nice, especially since I don't think I have EVER used s in vim...\r\nHowever I know a lot of people use s for sneak and easymotion.\r\n\r\n(Could choose which registers, would this be native or a plugin.)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322897283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322953520", "body": "> Cool ideas! Time seems like a really easy one to enable - we could even include that in our default statusbar in oni-core-statusbar and enable it via a setting. It would be useful.\r\n\r\nTime would be nice, weather and e-mail extra/optional, it's not something I really want to see in my editor :P. Great idea all the same, one tmux thing I really enjoyed on the status line was cpu stats.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322953520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322961481", "body": "-.- why does it take all the commits? I need to learn better git things...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322961481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322961921", "body": "I figured it out -.-", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322961921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322967414", "body": "This is really interesting...\r\nI was thinking about this a lot today, I think something that would be helpful would be template.json files... you can create?\r\n\r\nExample for Unity I always want to look for .cs usually and sometimes shaders, so if I have a template I can find just .cs files, and so when I make a new projcet, open in Oni I can do a task generate .oni from template or something, and bam.\r\n\r\nIt would pretty much be a specialized version of what normally would happen just with those standards already in place.\r\n\r\nAlso, it would be nice if ```.oni/*``` was added automatically to my .gitignore when I ran this template task ( at least have an option to do so in the general case? )\r\n\r\nNext, how do we know when to generate these .oni workspaces... and do we tie these into bookmarks? So when we open oni, and look at bookmarks, should we append workspaces we already made and treat them as bookmarks but with a workspace icon?\r\n\r\nWith this, also, would be a good point to cache files, as well as having this we could figure out how we should implement includes and excludes, which would lead to faster searching for files, lines, and find and replacing across files.\r\n\r\nAlso just looked at projectionist, I think we could include and or take a lot of those ideas into this.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322967414/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322967485", "body": "TextDocumentItem worries me because I'm not really sure where it comes from, I didn't get to look into it that much.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/322967485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323111593", "body": "> Sounds like a cool idea! It'd be interesting to see the set of registers too. I always forgot what are in my registers so I end up using just registers a and b \ud83d\ude04\r\n\r\nI will try to make some progress today on colors buffers and registers for QO.\r\n\r\nAlso do you care to test out my yank cycler plugin when its done? I can send a github link on here to the repo when I'm done.\r\n\r\nAnd yes I know... It's a bit mind boggling sometimes:p.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323111593/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323357271", "body": "I agree with all your suggestions, I implemented this way for convenience and rapid prototyping, plus I was sleepy.\r\n\r\nFixing now", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323357271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323360401", "body": "So we use b:changeTicks, why don't we use \r\n```vim\r\nchangenr()\t\t\t\t\t\t*changenr()*\r\n\t\tReturn the number of the most recent change.  This is the same\r\n\t\tnumber as what is displayed with |:undolist| and can be used\r\n\t\twith the |:undo| command.\r\n\t\tWhen a change was made it is the number of that change.  After\r\n\t\tredo it is the number of the redone change.  After undo it is\r\n\t\tone less than the number of the undone change.\r\n\r\n```\r\n\r\nThis way the language server will only update IF we actually changed, not if we change then undo", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323360401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323365555", "body": "> - so as long as the version is incrementing as the user types - it seems like it would be fine.\r\n\r\nchangenr doesn't do this on their own, it's not until they leave insert mode for the change to actually tick.\r\nI see changetick actually does while in insert mode automatically.\r\nWe actually don't send buffer updates until on save is this the design we want?\r\nWell for the syntax, completions of course work.\r\n\r\nWe can remedy changenr() by altering the undo time line with ctrl+g u, however hardcore vimmers might not like this, a mapping I use which I really like is\r\n```vim\r\ninoremap <CR> <C-]><C-G>u<CR>\r\n```\r\nthat way I can undo each new line even after leaving insert mode, and I don't have to loose an entire paragraph or code block.\r\n\r\nhowever, I don't think that's for everyone so changed tick would be better left untouched in this case. I think it's more hassle and just better to use changed tick, because then we would have to keep track or undo levels and changed tick, and then we would need to check what mode it's in to tell which we should check against.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323365555/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323494059", "body": "> Unfortunately this doesn't work for me on Windows - I've tried a few different settings for set clipboard in my init.vim. Is there anything special you had to set to enable this?\r\n\r\n@extr0py Use\r\n\u00b4\u00b4\u00b4:CheckHealth\u00b4\u00b4\u00b4\r\nAnd make sure the clipboard provider is set.\r\nYou need xsel on linux and I'm not sure what the one is for windows... I remember reading the docs a long time ago when I first downloaded it, we can always provide it WITH neovim binary.\r\n\r\n\r\nOr optionally and a more complex solution...\r\nWe can bypass the neovim clipboard provider assuming the user doesn't want to try fix the issue, we can save a register override it with the contents of oni clipboard (if it contains more than one line use V, if one line use character wise v and we wont use c-v because we can't copy like that outside of vim.)\r\n\r\n> With \"oni.useDefaultConfig\": true, and \"oni.loadInitVim\": false, using :norm! \"+p worked for me at least, and without any newlines.\r\n\r\nThanks for the feedback.  @CrossR!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323494059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323498469", "body": "> Sounds reasonable to me. The latest changes look great!\r\n\r\nUnless there is something else to add I think I'm done :).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323498469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323499917", "body": "Fixing #591 while I'm here since it's right in line with modified", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323499917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323502133", "body": "Also small quick fix for #564\r\nIf user navigates to buffer that isn't scrolled to it doesn't focus this, going to see if there is an easy way to do this as well as the flex thing.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323502133/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323550625", "body": "Thanks:) I will fix the errors when I get home.\r\n\r\n> Also, I put a small bounty on this issue as a thank you: https://www.bountysource.com/issues/48329508-tabline-says-dirty-after-undolevels-0\r\nSo make sure to claim that once this is in \ud83d\ude04\r\n\r\nWhat's a bounty and it's not big deal I like to help and I love Oni:).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323550625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323554658", "body": "All fixed :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323554658/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323561298", "body": "Putting this on hold until #633 is processed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323561298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323591124", "body": "Perhaps we could handle if we get a folder as a parameter, we should open it to that directory, we don't need flags really, just\r\n\r\n```\r\noni ~/Documents/oni\r\n```\r\n\r\nWe can check was the argument a directory, if so then chdir to it, otherwise use the current working directory.\r\n\r\nRight now whatever directory you are in on the command line will open that directory, we should have a more robust approach.\r\n\r\nIf we get multiple parameters say\r\n\r\n```\r\noni ~/Documents/oni/ ~/.config/nvim/init.vim\r\n```\r\nwe should open both, and change to the one that is a directory.\r\n\r\nIn the case of\r\n\r\n```\r\noni ~/Documents/oni ~/Documents\r\n```\r\n\r\nWe should honor the first option and ignore the second.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323591124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323591302", "body": "> So if there is issues around it not working it may affect there too.\r\n\r\nI think we should assume the user will have clipboard support, if not that is a neovim issue not an oni issue.\r\n\r\n```click: (item, focusedWindow) => executeVimCommand('\\\\\"+gP')```\r\n\r\nwe already handle it this way here, so we should handle it the same way else where.\r\n\r\n@extr0py what are your thoughts on this?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323591302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323594106", "body": "That is an excellent point, I'm use to using \"+y/p/d on linux, and it's pretty fast.\r\n\r\n> call set paste prior to pasting (this turns off autoindent and speeds up the insertion)\r\n    prune the /r/n newlines on windows, since those are causing duplicate newlines\r\n\r\nThis sounds good.\r\n\r\n> images\r\n\r\nSounds pretty awesome, future ways to be more extensible should be factored in and I haven't thought about that.\r\nI can do some more research on the topic to see how pasting might be even quicker.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323594106/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323594144", "body": "> Thanks again for your contribution! \ud83d\ude04\r\n\r\nNo problem!\r\nAnd wow I had no idea this was a thing, this is amazing thank you!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323594144/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323608080", "body": "> It seems like if we had something similiar - like an environment variable called ONI_CWD - and gave details about updating the bash profile in our installation steps, that could be a good shorter-term resolution.\r\n\r\nAs a short-term resolution I could see this working, but for the long term we shouldn't trust environment variables, it's better to have some kind of initial value support. Adding to the path would probably be the best solution, I'm not sure how to mac so sadly that's all I have to offer.\r\n\r\nSorry for the confusion.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323608080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323608734", "body": ">And cool list - it's neat to see the progress indication on the PR.\r\n\r\nDidn't realized it did progress I just wanted a nice list :).\r\n\r\n> But for all these cases, it'd be nice to have a the full set of neovim key bindings I have configured (, , etc). I was thinking, potentially, of having these textboxes essentially be tiny neovim windows - so that we could use neovim to process the keybindings.\r\nThat would be a bigger chunk of work, and depend on some of the initial multiplexing changes, so it might make sense to defer that piece (if that approach makes sense).\r\n\r\nIf we use the single neovim instance strategy we could use a temporary hidden buffer that the user doesn't have to know about (i.e. we don't show hidden buffers and unless they open it with buffers! they won't ever know, if they close it we can just open it again...) and so we can use this temporary buffer, use setline()/getline() and that will be our input field, this way we don't have to wait for a new spin each and every time, we can just edit the buffer as the text field tied to it, and then we can edit just like any other neovim buffer... it's a bit complex but it's a wildy awesome idea and I would enjoy this a lot, but I don't even know how it's hooked up to begin with but, yeah.\r\nOptionally we can have an entire nvim instance to itself... and other things we might want nvim to use but the user never interact directly, that might be an even better plan.\r\nWe could have nvim multiplexing or a neovim singleton, and then a nvim singleton for temporary operations like text inputs.\r\nThis kind of goes inline with #633 \r\n\r\n>We might be able to remove the '10-item' limit and use something like https://github.com/bvaughn/react-virtualized to only render a subset.\r\n\r\nI will look into that.\r\n\r\n>    Having the Menu use the current color schemes background / foreground colors - I noticed I had to darken up the background fade a bit, but it looked really nice - and might look even cooler with your colorscheme switcher!\r\n\r\nI plan on adding a bg/fg color to the state by using &bg/&fg, if these are null then use default (i'm not sure what this is in nvim I've never looked at it honestly without a color for normal...)\r\nOn source/color scheme loaded recache these values, that way we can use them for our menus.\r\n\r\n>    Have an incremental-loading experience. Like right now, if there is a big folder, we show \"Loading...\" but then don't show any results until everything is available. Most fuzzy-finders start showing files/results as soon as they can - that would be a huge experience improvement.\r\n\r\nWe need a solution, I can use my binary to do this but there is not a good way in typescript without writing an algorithm or porting a library and their dependencies, however I think a solution implemented in typescript may not be the best solution but using something like ag/ripgrep/etc that way we can stream async and we don't use a scripting language that can't optimize as other coding bases.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323608734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323764825", "body": "https://github.com/gjtorikian/nak", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323764825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323791794", "body": "currently writing a manual find, it's working pretty nice, almost done.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323791794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323791833", "body": "typescript, only dependency is fs and ignore\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323791833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323792409", "body": "going to add support for a config ignore and config use global ignore ~/.gitignore", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323792409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323844346", "body": "> These will be awesome enhancements, but could you add \"update README\" to your list of todo's? We need to be sure to track all the various key combos we're introducing, especially when there isn't a (neo)vim equivalent.\r\n\r\nOnce I have a concrete list :) This is more of a guide really.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/323844346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324331769", "body": "Working on fixing the algorithm right now... If someone wants to enable the ability to use ctrlp or fzf that would be welcome but it's not in my current plan.\n\n_Sent from my Lge RS988 using [FastHub](https://play.google.com/store/apps/details?id=com.fastaccess.github)_", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324331769/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324332509", "body": "It's a work in progrsss for keybindings we are fixing atm. Look at the PR by @extr0py\n\nIf you want you can manually add it with a custom build of your own while we hash it out.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324332509/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324480597", "body": "I think another issue that the search command doesn't address while I'm fixing quickopen is that fuse is very slow...\nIf you have a lot of files it updates really laggy and very unresponsive, this is something I hope to fix in my PR but I'm really busy this week, I will do my best to address it soon. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324480597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324510227", "body": "Can you verify that :tabs show both tabs or is it the buffer tab line?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324510227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324516518", "body": "> Vim seems to treat ```<C-P>```,``` <C-S-p>```, and ```<C-S-P>``` the same as far as I can tell, but Oni sees them as different currently.\r\n\r\nAs far as I know neovim itself doesn't know the difference between ```<c-p>``` and ```<c-P>```,``` <c-s-p>``` doesn't work either, if it has c- it just looks at the letter not the case, m-p and m-P ARE case sensitive though.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324516518/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324535369", "body": "Btw, my latest change in #635 has sped our fuzzy finder up a lot, it has a default walking method if git ls-files doesn't work now, and it's fast, and it caches on directory change and it loads files as you type that way it doesn't wait for them to all load before you can do stuff.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324535369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324535618", "body": "> Sorry I'm a bit late to the party here! Was (finally) reading through the comments \ud83d\ude04\r\n\r\nYou're good, I've been super busy so sorry about the late commits.\r\n\r\n> Sounds like we're exactly on the same page here! That's exactly how I was thinking of using it. I forgot to call out one use case I want to pursue also - I'd like to have an embedded browser in Oni (which is basically free, because Electron), and then use Neovim to manipulate text inputs. I think it'd be really helpful, at least for me, to be able to pop open github and use the keyboard to navigate around (#361) and use all the neovim-power I have to write text in the issues. Lots of cool possibilities!\r\n\r\nAnd I would LOVE to be able to do normal day to day things with the power of neovim, sounds revolutionary in a way :P.\r\nI wonder what would best to start implementing this, probably your change you are making would be a good start, then when I'm done with this PR I can try and get it to work for the input field, then that should make a pretty clear pathway for the rest.\r\n\r\nIf you don't care test it out, it works great for me, however like my commit says the overridden command doesn't seem to work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324535618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324624144", "body": "> I think it'd be reasonable to use :tabnew for this scenario in QuickOpen, if there is already an opened file - that would help alleviate some of the confusion here.\n\nYes if they have the show vim tabs this is reasonable otherwise have a c-t that will open a new tab much like c-s and c-v open splits, does this sound reasonable?\nI can handle this easily in my PR", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324624144/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324624863", "body": "Also there seems to be so much confusion around this I was thinking of styling the tabs differently for buffers that way people would know if it was a tab versus a buffer. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324624863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324751369", "body": "@extr0py \r\nAlso, this is the plugin I've been working on.\r\nIt might be buggy, if you find anything please let me know!\r\nhttps://github.com/cyansprite/Extract", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324751369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325032693", "body": "Fixing the slow sync strategy with PR #635 \nPlus a few more things, you can try pulling the fork and branch to see if it helps.\n\nMay I ask what dir it opens when you open it from dock? We should fall back to the bookmark/open folder strategy if you are in install or home dir. \n\nAlso was it the latest release or did you build from source? Idk if it's in the latest release that's a question for@extr0py", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325032693/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325049269", "body": "Root dir huh... I will add a case for that thankb you. \nI'm going to make a robust way of this never happening even with the new method. ( filtering can still be laggy with a large list)\n\nThanks for the reply!!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325049269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325134418", "body": "Nice gif for progress being made\r\n\r\n<a href=\"http://imgur.com/FAEwMU2\"><img src=\"http://i.imgur.com/FAEwMU2.gif\" title=\"source: imgur.com\" /></a>", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325134418/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325258604", "body": ">Which platform is this on? Windows?\r\n\r\nYes\r\n\r\n> What kind of file is it? Is it large?\r\n\r\nJust a typescript file in our repo, probably between 40~400 lines.\r\n\r\n> Is it a different file everytime? Or does it happen consistently for certain files?\r\n\r\nAs far as I can tell it's random, it's just whenever I'm testing my changes or coding in our repo.\r\n\r\n> How often does it occur?\r\n\r\nIntermittently, around 1/3 times I use Oni.\r\n\r\n> Is it something you just started seeing recently, or has it been happening since you started using Oni?\r\n\r\nI would say it's something I've always seen, before it would crash I think? Now it hangs.\r\n\r\n> Another issue that could be happening, is if the file is large, it might be spending a lot of time sending us the buffer-update event, or Oni might be choking on receiving it.\r\n\r\nHmm... I'm not sure, I only think it has ever happened with TypeScript files.\r\n\r\n> I need to have a better way to disable the Oni-side plugins as well as the buffer-updates so that we can better rule these out (or identify them as problematic).\r\n\r\nI think perhaps this may help, I think it may be the language server protocol, but that's just conjecture. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325258604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325258735", "body": "> Wow, that's awesome! Can't wait to have that integrated. It's so cool to see the changes to setting & configuration made real-time\r\n\r\nYeah I was super happy with the color-scheme outcome.\r\n\r\n> And thanks for linking the plugin, I'll check it out in a bit! I read through the README and it sounds interesting. I need to test it out / see how to map in my workflow. Yanking into a list and being able to grab from the list in a convenient manner sounds interesting, especially when you are juggling multiple items you want to store.\r\n\r\nThanks, from when I use it it's pretty useful, I haven't found any bugs since the initial commits ( I think 14 while demoing? )\r\nHowever, there are a few improvements I can think of, let me know how it goes!\r\nAs far as I can tell it works with Oni, as it should since it works in vanilla neovim as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325258735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325258961", "body": "Would love to help but unfortunately I don't have a Mac and Linux and Windows works perfect for me.\r\nDoes this happen when opening a folder from the menu as well? I think I used the same exact logic with QuickOpen.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325258961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326599839", "body": "I agree with keforbes, I separated them for a reason.\r\n\r\nYou can make a key command to ALWAYS show the open folder/bookmark menu, but don't link it with c-p.\r\n\r\nIn my PR you can see the forcebookmark parameter allows this.\r\n\r\nI haven't had a lot of time to work on it...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326599839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326600224", "body": "Honestly with the way things are going, maybe we should just integrate the changes I have made for #635\r\nI don't have time to do the rest of the things right now, but it should make things like this available.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326600224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327185773", "body": "> Regarding the PR - @cyansprite - do you think it would be possible to split out the colorscheme / performance enhancements as separate items? Seems like they would be orthogonal to the changes I'm describing above. Then we could start to pursue this \"prefix-based modal switcher\" that could tackle these issues holistically.\r\n\r\nIt wouldn't be difficult but currently I just don't have the time I'm sorry I've been so busy, if you want to take over my PR that would be great but it looks like I will be busy for awhile now, if I get some time I will try to fix it but I haven't even been able to use oni I've been using terminal nvim because I've been working on a computer that can't run much of anything. ( a very old laptop running xubuntu )", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327185773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335527118", "body": "@Bretley Feel free to take it over, I'm not working on this anymore, it's more of just staying here until @bryphe decides it's no longer necessary, I don't have time to work on Oni anymore fortunately.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/335527118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132792313", "body": "sure thing", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132792313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132792426", "body": "oh I forgot to add that, I did on my other commit but I abandoned it because I started going in a different direction. \r\n\r\nAnd I will add an open folder option as well.\r\n\r\nAlso, do you want to test out my binary? I don't know how to add it to the install or where, I' would assume in bin...", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132792426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132799939", "body": "https://github.com/cyansprite/ListFiles", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/132799939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133563516", "body": "should we make sure they have the config enabled first?\r\nThis would override my mapping I have in vim even if I say\r\n```ts\r\n\"editor.clipboard.enabled\": false,\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133563516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133961077", "body": "Oooooooh that's what that was when I was doing this I couldn't find where we made TextDocumentItem and it makes sense because it's language-server-protocol.\r\n\r\nOkay yeah I have a plan to fix that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133961077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133961085", "body": "yeah, I didn't realize the thing about the text document item, it seems weird to me that they check the version and not if it's modified, but either way, I will fix it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133961085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133961487", "body": "Yeah I was going to do that, but I left it as is because I know some vimmers are hard core numbers because c, but yeah I was thinking about changing it to bool too, so will do :).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133961487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134103188", "body": "I will look into this, I have a few things I want to implement with the menu that isn't supported such as selecting multiple files (c-i i.e. tab, (increment)) and opening things silently (i.e. open a file but leave the menu where it's open (whatever + shift so, c-S to split horizontal silent)), and to use c-w to delete word back and c-u to delete entire line of input field (linux standards I love)\r\n\r\nThe bindings will hook up to quickOpen which will be nice, I'm really liking this commit!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134103188/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134103206", "body": "need a way to hook in register complete when I get to it. I haven't looked much into auto completion yet though.\r\nI'm thinking the register name, followed by the first line\r\nextra lines will show in what autocomplete uses for \"documentation help\" right now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134103206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134103231", "body": "so happy.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134103231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134103241", "body": "can you change this to \r\n```ts \r\npublic get inputManager(): Oni.InputManager {\r\n```\r\n?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134103241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134103257", "body": "What do you mean add to existing binding?\r\nAre you saying if I bind c-j to next menu item also except c-n? perhaps have two methods, bind to override and bindMore to add them", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134103257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134125049", "body": "ahhhhh good point.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134125049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134125564", "body": "You can simplify this to\r\n```ts\r\nconst prefix = Platform.isLinux() || Platform.isWindows() ? \"C\" : \"M\"\r\nif (this.getValue(\"editor.clipboard.enabled\")) {\r\n    oni.input.bind(\"<\"+prefix+\"-c>\", \"editor.clipboard.yank\", () => oni.editors.activeEditor.mode === \"visual\")\r\n    oni.input.bind(\"<\"+prefix+\"-v>\", \"editor.clipboard.paste\", () => oni.editors.activeEditor.mode === \"insert\")\r\n}\r\n```\r\nthis can also serve as example for users who use both mac and windows, if they want one config file they can use this syntax so they don't have to have different config files.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134125564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133610084", "body": "I would prefer our own...\r\nnetrw is also hard to use", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133610084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133610192", "body": "?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133610192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133610320", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133610320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133610519", "body": "which part?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133610519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133610735", "body": "Will the lightweight/simple editor always be used for widgets?\r\n\r\nWe could perhaps have the folder explorer not even be a neovim instance, if we make our own plugin we can have it draw the elements with react and use keyboard to \"emulate\" vim commands just as hjkl, the only problem I could see would be vim mappings and those discrete mappings people use... but the pro would be a fresh interface that didn't have to rely on neovim rendering.\r\n\r\nHowever the lightweight editors along with oni editors is a VERY powerful idea.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133610735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133611294", "body": "I'm assuming when you say extract keyboard you mean have detached from an editor and whichever editor has focus will receive the events right?\r\n\r\nSounds like a nice polymorphic opportunity for editors.\r\n\r\nThe difference would be instead of an interface have an abstract, and then have a static instance/private instance for _currentEditor, and that way you don't have to change who keyboard is sending to because it can just be _currentEditor.sendKeys() and then _currentEditor can process it based on it's overrided method but can also pull common code from AbstractEditor, thoughts?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133611294/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133972382", "body": "I agree with you, if I open a folder inside of the folder pane, I don't want it to open in the folder pane, that would be a pain.\r\n\r\nI would want it to open in the \"active editor\", or split if I use c-v/c-s starting from the most far right/far bottom (some users like left and top, in fact vim's standard is left and and top which I never understood but... we could check this value)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133972382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133974037", "body": "This all sounds wonderful.\r\nYou say keep the keybindings from vim, which is a great idea.\r\n\r\nAnd the mappings we could dynamically set the light weight windows to the mappings one would expect.\r\nIf I open a browser window, I want to use hjkl to navigate inside of them, if someone has mapped those to jkl;, then it should work for them as well, but do I expect other functionality like splits will open a new browser below?\r\nTo what extent will we handle vims mappings? Same with file explorers, it wouldn't be hard if you are saying use autocmds, just where do we draw the line?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133974037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133975049", "body": "having our own events that plugins can listen to sound great.\r\nabove with the other editors, we can have on load event with what kind of editor abstraction it is.\r\n\r\nAlso if we change the filetype of it to be something specific, we can have autocmds in vim for users to interact as well if they have something they would like to do in vim when a folder opens.\r\n\r\nAlso I know a lot of people have the need/want to open the folder pane on load to whichever side they want on open, this is something we need to think about as well.\r\n\r\nThanks for listening to my ideas, Oni just keeps more and more in line with what I was thinking for an editor.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/133975049/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134105972", "body": "Yeah I agree, there a few ways to deal with it... I wonder. Do we want separate neovim instances per multiplex? We could have just one and manage it that way, this might be cleaner and since there are a lot of functions already provided by neovim, we wouldn't have to make our own logic there.\r\n\r\nFurthering this idea, we wouldn't need a ```FolderEditor``` to have a neoviminstance at all, since we technically wouldn't even <i>need</i> to ever contact neovim through the folder interface (assuming we implement our own.)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/134105972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "josemarluedke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/b6ca2870f5ad720da84b5d008ad84c209b5db8c1", "message": "Use pre for white-space in quickinfo (#563)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/318564046", "body": "I'm also having this problem. Took me a while to find this issue here to see what the problem was. Looking forward to have this fixed. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/318564046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324697122", "body": "This is awesome. One thing to consider adding is to show what will be executed, similar to what other apps show what the short cut is, but here, how to do that in vim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324697122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324710126", "body": "I have been using this feature for a while now, it works mostly great (just same issue described in #628). Thank you for working on this. \r\n\r\nOne thing that I think is missing and it very important for me personally is be able to paste in the command line. I usually have stuff to search in my projects from text coming from the browser or other sources, so I type: `:Ag ` and then I paste it. Currently it does not work. (Ag is my search mechanism). Adding support for this, would be a great addition. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324710126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336952458", "body": "@bryphe Thank you for working on this. I appreciate it. I'm using this color scheme: https://github.com/tomasiser/vim-code-dark", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336952458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348748978", "body": "Inside of Oni:\r\n\r\n```\r\nbash-3.2$ echo $PATH\r\n/Users/josemarluedke/.nodenv/shims:/Users/josemarluedke/.rvm/gems/ruby-2.4.2/bin:/Users/josemarluedke/.rvm/gems/ruby-2.4.2@global/bin:/Users/josem\r\narluedke/.rvm/rubies/ruby-2.4.2/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/josemarluedke/.rvm/bin:/Users/josemarluedke/.rvm/bin:/User\r\ns/josemarluedke/code/go/bin :/usr/bin:/usr/local/bin::/Users/josemarluedke/.fzf/bin:/Users/josemarluedke/.rvm/bin\r\nbash-3.2$\r\n```\r\n```\r\nbash-3.2$ which go-langserver\r\nbash-3.2$\r\n```\r\n\r\nOutside of Oni:\r\n\r\n\r\n```\r\n$ echo $PATH\r\n/Users/josemarluedke/.nodenv/shims:/Users/josemarluedke/.rvm/gems/ruby-2.4.2/bin:/Users/josemarluedke/.rvm/gems/ruby-2.4.2@global/bin:/Users/josemarluedke/.rvm/rubies/ruby-2.4.2/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/josemarluedke/.rvm/bin:/Users/josemarluedke/.rvm/bin:/Users/josemarluedke/code/go/bin\r\n```\r\n\r\n```\r\n$ which go-langserver\r\n/Users/josemarluedke/code/go/bin/go-langserver\r\n```\r\n\r\nYou are probably right, that PR seems to be the cause of it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348748978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348850119", "body": "Thanks for working on this @Akin909.\r\n\r\nI can confirm that this solves the problem reported in #1061.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348850119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349834675", "body": "I recommend using https://github.com/fatih/vim-go which has integration with auto complete using deoplete (with `deoplete-go`, which uses gocode). I have been using that and works great.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349834675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Galbar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/ea7b8adbb409940513518ebf0208a3724f0735cf", "message": "#486 - Add git branch to statusbar (#540)\n\n*  #486 - Initial implementation\r\n\r\n*  #486 - Expose UI Icon and use it in the git branch module\r\n\r\n*  #486 - Expose Git services through Oni. Handle the case when buffer path is a directory\r\n\r\n*  #486 fix oni version required"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/313845569", "body": "Hi! a week ago or so I started working on this as a way to get to know the code base. This is what I got:\r\n```js\r\nconst childProcess = require(\"child_process\");\r\n\r\nconst activate = (Oni) => {\r\n\r\n    const gitBranchIndicator = Oni.statusBar.createItem(1, -3);\r\n\r\n    const getBaseDir = (filePath) => {\r\n        return filePath.substr(0, filePath.lastIndexOf('/') + 1)\r\n    }\r\n\r\n    const displayBranch = (error, stdout, stderr) => {\r\n        if (error && error.code) {\r\n            // Branch not available\r\n            gitBranchIndicator.hide();\r\n        }\r\n        else {\r\n            const React = Oni.dependencies.React;\r\n            const gitBranch  = React.createElement(\"div\", null, stdout);\r\n            gitBranchIndicator.setContents(gitBranch);\r\n            gitBranchIndicator.show();\r\n        }\r\n    };\r\n\r\n    Oni.on(\"buffer-enter\", (evt) => {\r\n        childProcess.exec(\"cd \" + getBaseDir(evt.bufferFullPath) + \" && git rev-parse --abbrev-ref HEAD\", displayBranch);\r\n    })\r\n\r\n};\r\n\r\nmodule.exports = {\r\n    activate,\r\n};\r\n```\r\nIt does branch per buffer, instead of per folder where oni was executed and it allows the branch to change on the fly.\r\n\r\nThe issue I found is that `gitBranchIndicator.hide()` does not hide the item.\r\n\r\nPS: Note that `cd` and `getBaseDir()` are probably not cross-platform.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313845569/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313937937", "body": "Glad you liked my approach, @extr0py!\r\nI tested it on Linux.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313937937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313941942", "body": "Looking at this PR I see that the integration of git inside the Oni object is done in the new file ` browser/src/Plugins/Api/Git.ts`. Looking throughout the project I found the file ` browser/src/Plugins/Api/Git.ts` which also contains git functionality. To avoid duplication I think they should be bundled together for both internal and external Oni usage. What do you think, @bert88sta and @extr0py ?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/313941942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315529263", "body": "I opened a merge request with the git status bar indicator #540 ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315529263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315545647", "body": "@bert88sta: How do you mean?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315545647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315629623", "body": "Adding feedback here to for visibility: https://github.com/extr0py/oni/pull/540#issuecomment-315550296\r\n\r\n>@extr0py:\r\n>* @bert88sta 's feedback regarding additional status info (ie, files modified/uncomitted/etc) . We might be able to get some of this info from the output of the git\r\n>* Detecting when the branch has changed, since currently we only update on entering a buffer (for example, a user changed branch in the terminal). We could potentially add an event on the Git shared object like branch-changed that the plugin could subscribe to.\r\n>* A configuration option to enable / disable the statusbar (ie, git.statusBar.enabled)\r\n\r\nRegarding the aditional status. I think it is a good idea but I would make it optional with a config (I don't really need that information there and it would take space in the status bar) and/or maybe make it a hover popup thing on the status bar item.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315629623/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315631525", "body": "Is this a duplicate of #485 ?\r\n\r\nedit: turns out that \"duplicate of #issue\" marks it automatically :man_facepalming: don't know how to undo it", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/315631525/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "FrigoEU": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/0b860a778e8a6eb7039f258bdc2dbf55524cd26b", "message": "Notifications (#365)\n\n* First version of notifications log\r\n\r\n* Adds showing and hiding of notifications panel\r\n\r\n* Refactored logs in NeovimInstance and alert in Config to notifications\r\n\r\n* Rename notifications to logs\r\n\r\n* Improves styling of long stack traces and extracts variables to common.less\r\n\r\n* Removes example logs"}, {"url": "https://api.github.com/repos/onivim/oni/commits/31940427b90ce7a1a5b58baf584c7937711235c8", "message": "Refactor InstallHelp into redux + RootComponent (#313) (#360)\n\n* Refactor InstallHelp into redux + RootComponent\r\n\r\n* Change NeovimInstall action name for consistency"}, {"url": "https://api.github.com/repos/onivim/oni/commits/52dff59c69dcdbe766ba84fd0c6ad6a66adf0541", "message": "Improve type safety of ActionCreators (#359)"}, {"url": "https://api.github.com/repos/onivim/oni/commits/283576bf353f48f7df9ceab64270bbd705bf4731", "message": "Redesigns the error text component (#335) (#357)\n\n* Redesigns the error text component\r\n\r\n* Makes error text styling more consistent"}, {"url": "https://api.github.com/repos/onivim/oni/commits/55143a9909d9a5d4f0469b0249591e0cb49df51b", "message": "Move config options to Redux store (#353) (#356)\n\n* Improves Config type safety\r\n\r\n* Add configuration to IState and defaultState\r\n\r\n* Adds setConfigValue action and applies it on config change\r\n\r\n* Moves config instance out of redux-using components\r\n\r\n* Fix lint error\r\n\r\n* Splits actions up in two unions to simplify reducer signatures"}, {"url": "https://api.github.com/repos/onivim/oni/commits/d01234c7ea1715afccee37554cba9611f9a6871d", "message": "Move background to React component (#314) (#352)\n\n* Move background to React component (#314)\r\n\r\n* Fix linter errors"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/291230038", "body": "I'm on OSX 10.11.4. \r\n\r\nI started out building from source, got that error. Then I used the Mac dmg, same thing. I built from source a few more times, still the same thing. Then I started up the hot reload build, and immediately got the error in the dev tools so I finally found it like that.\r\n\r\nI'm on a fairly ordinary system and don't think I have anything special set up anywhere. Really wish I could pinpoint the problem, sorry!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291230038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291816943", "body": "Hey, I'd like to do this, but was wondering what should be in the redux store and what shouldn't. I guess the backgroundColor should be in the store, and the use of the config singleton will stay like that? Or should/will the config object also migrate to the store at some point?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291816943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292055937", "body": "Oops, I missed that. Fixed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292055937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292707702", "body": "Ok, I split them up as you asked. I'm not 100% satisfied but couldn't find any other solution. If I ever come up with anything else I'll make another PR.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/292707702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293031824", "body": "Oh yeah I'm definitely open to changing the background. I think I got the color from somewhere in the UI, I think from the line numbers, but I suppose it's something that should be themed. I tried to look around a bit, but I couldn't immediately figure out how the css/color structure and theming support works or would work, so I just tried to make the first iteration of something and build on that.\r\n\r\nI'm personally not a fan of opacity, since it makes the message harder to read. I like it on the small error markers on the right since they're always visible, but this one is only visible when you're on that line. It's your call though, I'll change it if you want to. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293031824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293148948", "body": "Ajajaj that's my bad. I've been thinking this cast is really annoying: \r\n\r\n```\r\nexport const Actions = bindActionCreators(ActionCreators as any, store.dispatch)\r\n```\r\nAnd my first commit PR I already get bitten by it... I'll think about how we can keep this typesafe.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293148948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293149785", "body": "I made the changes to use the @background-color variable and the dropshadow as mentioned above. I think it's not a bad idea to try it out for a bit and then see what everybody thinks about it. There are still issue with the errors, like when you have two on one line they go over/under eachother, so this is definitely not the end. \r\n\r\nJust wanted to say thanks for the enthousiasm and encouragement I've been getting on all my PR's, it makes all the difference.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293149785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293174230", "body": "One thing that I noticed and that is really annoying is that autocompletions are positioned under the error messages. I can fix this with some z-index magic, but I think that's a pretty bad idea. As I can see, the completions get rendered inside the \"overlay-ui\" container which is present in the index.html so I think that's quite good, easy to find. The errors however get positioned inside the DOM by the OverlayManager, which just appends itself to the document on startup and then renders all its overlays inside, so it's always later in the DOM than the containers that are initially present in the index.html.\r\n\r\nIt hurts my head a little bit trying to figure out the proper structure to handle the correct level positioning of all these overlay elements. As I can see we have these \"kinds\" of overlays:\r\n\r\n* QuickOpen / Ctrl-P\r\n* QuickInfo\r\n* Autocompletions\r\n* Error markers / Errors\r\n* Live Evaluation\r\n* Scrollbar\r\n\r\nHonestly, I don't think we'll have that many more overlay kinds popping up over time so maybe it's not that big a deal, but it is a bit annoying that some are managed by the OverlayManager (the bottom 3), and others are just rendered directly in the RootComponent (top 3). I'm more of a fan of keeping everything in the RootComponent hierarchy, but that's just me. I'd love some guidance on the direction we want to take here, if any.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293174230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293482253", "body": "I'm unsure if this is related, but I'm getting one really annoying behavior. When I just type :vsplit + Enter, I make a vsplit, move to it, everything's good. However I have a keybinding (leader-v) that does the exact same thing but silently\r\n\r\n```\r\nnnoremap <silent> <leader>v :vsplit<CR>\r\n```\r\n\r\nThe split opens, my cursor moves there, but also it looks like it's in insert mode but I actually can't insert and am in this weird limbo until I eg. go into insert mode and go back out. The silent thing definitely has something to do with it, because without it it works fine. Also in terminal neovim (NVIM v0.2.0-1175-g210b013) this also works (the silent variation). It doesn't bother me so much anymore now since I know that it's because of silent, but I thought I'd let you know.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/293482253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294106166", "body": "I renamed it all to Log/Logs, it fits better indeed. I cleaned up some of the CSS + corrected display of long stack traces. \r\n\r\nI don't have a windows PC at my disposal right now, so I didn't do the scrollbars yet.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294106166/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294195685", "body": "Oki, I removed the examples. \r\n\r\nYes, it would be nice to track the scrollbars in a different issue. Thanks for any help you can give, otherwise I'll find some windows machine to run Oni on later.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294195685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294733757", "body": "Just a heads up, I'm trying out some new design ideas for the errors since I'm not satisified with how it is currently. I'll make sure I bring in your request for mentioning from which plugin the errors are coming. Do you want this mostly when there are errors from multiple sources on the same line? Or just always?\r\n\r\nSecondly this weekend I've been working on a PureScript plugin for Oni. Some stuff works really well, other things I don't know how to do. I'll let you work on the omnisharp plugin first before I bombard you with questions though :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/294733757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295258177", "body": "I agree a language server for purescript would be really nice, but that would take me much longer than a weekend to get running :). I talked about it with the maintainer of the ide engine of purescript and he's all for it, so maybe one day we can pool our efforts and get it running. In the meantime, maybe an in-between layer that translates psc-ide's protocol to LSP might be possible... We'll see! :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295258177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295261435", "body": "For me, this issue is super important, but also still very vague. I love Vim's editing experience but hate its extensibility story. Now most extensions that I'm interested in (and spacemacs is my biggest influencer here) are a git interface, keybinds explorer, compilation feedback, search, etc. These are all panels that are being drawn over/around the editor. \r\n\r\nI don't know how you see this, and I don't know how I think it should be, but I think if we could present a nice API to plugins (and I think React can help here) next to the \"internal\" panels, it would mean the world.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295261435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295623585", "body": "To pile on the brainstorm, one thing that I was thinking is:\r\n\r\n1. some functionality lives in editor windows/splits. One example of that is magit in spacemacs, which just always opens in a split next to the file that you're editing. If you already have a split open, it overtakes one split. I like your idea of reusing neovim for that to keep all the bindings working. A custom renderer also sounds like a good idea, maybe some kind of read-only attribute can be specified somewhere? ie; you don't want to be able to start typing in your git log overview.\r\n\r\n2. Second is panels that \"steal space\" from editor windows. The new messages log is one example for that. It's nice that it shows up on the bottom, but it shouldn't render over the existing windows. Now that I think about it, this should be just a vertical split, right? Again with neovim handling key binds. One thing that I don't know how this would fit though, is when I search in spacemacs, this \"vertical split\" kind of thing comes up where you have at the top a search bar, and at the bottom your results. I'm unsure how this fits in the << let's \"just\" make new neovim instances for every window >>.\r\n\r\n3. As you said, overlays. Here we just need a clear \"system\" (could we just do simple z-indexing?) so that the intuitive order of overlays gets respected.\r\n\r\nBtw, these \"Additional renderer types\" is I think where Oni will start shining :). All the other stuff is kinda things that other editors already figured out. For example I love magit, but I kinda fear having to implement the whole thing in Oni again...\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295623585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jasonszhao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/111fab41fb0ecdb3dcebc1c34bd85c6f76228130", "message": "add documentation about Command Palette (#317)\n\n* add documentation about Command Palette\r\n\r\npartially addresses #185\r\n\r\n* Fix doc typo"}, {"url": "https://api.github.com/repos/onivim/oni/commits/f281a1babfbc9a6644e429042c1964eb9293a11c", "message": "remove unused dependency (#307)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/287965174", "body": "Another consequence of the current architecture is that the `accelerator` option in [Electron menus](https://github.com/electron/electron/blob/master/docs/api/menu-item.md) doesn't work. \r\n\r\nI was playing with the source, and I was disappointed that adding the `accelerator` line doesn't do anything (this is modified from [`Menu.js`](https://github.com/extr0py/oni/blob/d99f2a54e0a9d81ad063f0470f946f446e8b4351/Menu.js#L113-L114)):\r\n\r\n```javascript\r\n{\r\n    label: 'Undo',\r\n    accelerator: 'CmdOrCtrl+Z',\r\n    click: (item, focusedWindow) => executeVimCommand(\"u\")\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/287965174/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "multikatt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/27b350d2f7d5db2e65208fc50ca7ec1c831929ac", "message": "Update typescript plugin path (#151)\n\nIt's been moved"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kybaeus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/77d1fb55ae68b66fd47968807d989055c5e4ffc1", "message": "now respects font information in config file (#131)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/269897518", "body": "No problem.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269897518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270018416", "body": "@bert88sta Try with the latest version of Oni.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270018416/reactions", "total_count": 5, "+1": 2, "-1": 0, "laugh": 1, "hooray": 1, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270049751", "body": "This is awesome! I'll give it a go shortly.\r\n\r\nEDIT: @extr0py Looks good other than the performance regression. Personally, I haven't noticed any issues with syntax highlighting but I do get rendering artifacts in files before I scroll through them and force a re-render.\r\n\r\nWhat steps would be needed to implement delta rendering? I noticed that you're using react but using a lot of manual dom manupulation (e.g, the `document.create` portions). Do you intend to refactor to utilize the v-dom or are you going to keep the performance-sensitive portions direct?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270049751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "kforbesarkin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/4e8b7a1e45aad4a6a33f8dc1f5da71cbf8547d28", "message": "Fix #91, autocompletion after returning to insert mode"}, {"url": "https://api.github.com/repos/onivim/oni/commits/6c7f8b6b25d5f50d770acb2d8a931bf64597b71b", "message": "modify icons to have transparent background"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sitedyno": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/7ab7e94cd3548dda36524041fb978247fd770ed9", "message": "Fix URL anchors in README.md\n\nIt seems that the markdown parser will lowercase headers before writing the URL anchors hence before this commit https://github.com/extr0py/oni#Introduction will not work. After this commit it will be https://github.com/extr0py/oni#introduction and the anchors will work properly."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hsheth2": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/5721cc17987aa3c3e8c893a03949519be1247a20", "message": "fixed a typo\n\nbatteries"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JakubJecminek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/e780f07c6bec4ff94321649f13d26e9fb95bddb5", "message": "Fixed issue #34 with alt+tab switch."}, {"url": "https://api.github.com/repos/onivim/oni/commits/96a6b4f4e4080abb68a74427cd4e83fbcdc269ce", "message": "Added default font configuration for Linux."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/265390674", "body": "If it's ok I would take this bug. I will have time this week so I can work on it. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265390674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265417567", "body": "Are you looking for any help on the project? Oni seems to me like great project and I would like to help in my spare time. Do you have some backlog of features you need to implement? ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265417567/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "darkwater": {"issues": [], "commits": [{"url": "https://api.github.com/repos/onivim/oni/commits/b1b5f95b6d70a178994dccb1d213ab59ee9dd1d1", "message": "Flip platform check in cli/oni"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264674525", "body": "Cool, but you forgot the check in cli/oni. After #15 I can successfully build and run on Linux.\r\n\r\nNo issues running, though the default font seems unavailable. Not sure how to go about this correctly since available fonts vary wildly between distributions.\r\n\r\nOn another note, how do I configure the Neovim part? It doesn't seem to use my existing Neovim configuration.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264674525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264676115", "body": "Couldn't the extra runtimepaths be added through a command line option? `--cmd <command>` is executed before processing any vimrc, so this looks like a good way to set rtp.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264676115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264676166", "body": "Bundling a default font would probably the most robust method. Alternatively, is a list of fonts possible? ONI could try a couple of common fonts which should cover pretty much every user.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264676166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264676480", "body": "Applying http://novaember.com/s/8f9453/ig79Ko.txt will append ONI's runtimepaths to the standard, but I haven't tested for any side-effects. (And of course the code is ugly because I just changed some things to make it work.)\r\n\r\n I also noticed a rather long startup time, not sure what that's caused by.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264676480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265351618", "body": "> For some reason I thought that you couldn't have font fallbacks in the canvas font, but I could very well be mistaken.\r\n\r\nYeah, you can set ctx.font to a comma-separated list of fonts of which the first available will be used, just like in CSS. ([demo](https://jsfiddle.net/Lskx4tb4/1/))", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265351618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265635674", "body": "Aren't you drawing on quarter resolution? This looks too blurry to be the difference between pixel anti-aliasing and sub-pixel anti-aliasing. I think macOS renders applications at \"normal\" resolution by default, unless they explicitly intend to work correctly on retina screens. A way to test this would be to check the resolution of the canvas and see if it's how it'd be on a low-resolution screen or a retina screen (which should be double in both dimensions)\r\n\r\nEither way it doesn't seem like the text is rendering with sub-pixel anti-aliasing anyway, but I believe that's a separate issue.\r\n\r\n![](http://novaember.com/s/8f9453/9N6oYU.png)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265635674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tjdevries": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264578807", "body": "Also, just in case you haven't seen it: https://github.com/neovim/neovim/pull/5686 This is pretty cool.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264578807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264670221", "body": "So one thing I'm working on that might help you a lot is making an api to handle responses for the language server protocol. The idea would be something like this:\r\n\r\n1. User initiates some LSP (language server protocol) request\r\n2. You do all the communication to some language server to get the information\r\n3. You now have the response from the LSP. You have to decide what to do with it. This is where I think the nvim api would be useful. You would...\r\n4. `call langserver#api#textDocument#definition(response_dictionary, options)`\r\n5. The language server shim would handle the response and do all the neovim required items (managing a buffer, go to line, etc.)\r\n\r\nThis way you don't have to worry about keeping track of what happens in response to certain items and people don't have to duplicate work (because we would have to do the same thing, in essense.)\r\n\r\nDoes that make sense?\r\n\r\nAnother thing I want to add is the ability to make a request, and then have a custom callback attached to it. So you might want to initiate a request for a hover (https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md#textDocument_hover). Well I already have a function for doing that (https://github.com/tjdevries/nvim-langserver-shim/blob/master/autoload/langserver/hover.vim#L19, although I would add this to the API with easily discoverable names... just haven't yet :smile: ). So you could call that function and add a callback for you to handle the response (since you'd do hover differently than regular neovim would, since you have fancy and pretty gui features). \r\n\r\nLet me know if you have any questions about this. Most of these thoughts are still bouncing around in my head. The main goal would be that lots of GUIs / plugins would like to make use of the LSP within Neovim, so it'd be good if we could centralize all the knowledge and solve the difficult problems in just one place, instead of everyone having to do it over and over.\r\n\r\nTHanks for your time. :smile:\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264670221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264731919", "body": "Thanks for the reply.\r\n\r\nI think I understand your concerns. The main reason I suggest using a VimL layer to people is to manage many of the built-in features that neovim already has. For example, in a `goto` situation, you would want to manage the jump-list (or tag-list, depending on how you want to view it) well so that you can do either a `<c-i>` or `<c-t>` to move back to the original place before the movement. I think VimL is good at managing these items and having a place where it's managed centrally would reduce a lot of work.\r\n\r\nBut I definitely understand the distaste for VimL, it certainly has some interesting quirks haha :smile:. \r\n\r\nMy thinking would be to just use the VimL for places where the VimL is suited and do everything else in Javascript. In fact, I would recommend definitely using the vscode's javascript language server protocol client / server (https://github.com/Microsoft/vscode-languageserver-node) because it will most likely be faster and easier to use. It seems you are already interfacing a lot with VimL (you have several \"built-in\" vim plugin), so I think considering using the langserver-shim as another vim plugin to handle some of the more internal Neovim actions, rather than the GUI side items.\r\n\r\nSo in case I wasn't clear, steps 1 through 4 would be in javascript.  The only thing that would happen in Viml is the handling of the response received from the server.\r\n\r\nAnyways, I'm obviously just being selfish as well, cause I want people to use my project ;) Thanks for the convo, it's giving me some new ideas to implement. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264731919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "TomatoMus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264639703", "body": "I can solve it in the following way.\r\n```\r\n$vim /your/oni/path/oni\r\n\r\n:set ff=unix\r\n:w\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264639703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pacuna": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264642282", "body": "I solved it by building it myself.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264642282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "olleharstedt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264678787", "body": "I get this error when running `npm install -g oni-vim`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264678787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264812478", "body": "Yes, I could build it manually.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264812478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "langolf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264692012", "body": "I see the same. Here screenshot for comparison\r\n<img width=\"351\" alt=\"screen shot 2016-12-04 at 11 50 49\" src=\"https://cloud.githubusercontent.com/assets/1225205/20865057/142e4c66-ba18-11e6-89db-c5bb5043f23c.png\">\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264692012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "firedev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264772236", "body": "Indeed, I have it set to `development` maybe that was a bad idea. I'll clean it up. Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264772236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gglanzani": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264896769", "body": "@extr0py Thanks!\r\n\r\nI still have to build a neovim for Windows. I'll probably download it from the AppVeyor CI then.\r\n\r\nI'll try to let you know (maybe tonight).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264896769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265129460", "body": "@extr0py It seems that even with the latest binaries there's no Python luck.\r\n\r\nSee https://github.com/neovim/neovim/issues/5360 (in particular this bit https://github.com/neovim/neovim/issues/5360#issuecomment-249855604 ) and the PR that should fix it is still open https://github.com/neovim/neovim/pull/5280\r\n\r\nI guess I'll patiently wait ;)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265129460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265380335", "body": "I would wait first for Python support for nvim on Windows. It's a target for 0.2 anyway, and work is underway.\n\nThis could save us lots of time. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265380335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298623151", "body": "@extr0py That is set :)\r\n\r\nAnd when that is set, and I click on Edit Neovim config, it opens `~\\oni\\$MYVIMRC` instead of `~\\oni\\init.vim`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298623151/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298638668", "body": "@extr0py I've overwritten the neovim files (bin, share, and everything below that) with the 0.2.0 release :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298638668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298769275", "body": "@keforbes Yes, that worked (apparently)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298769275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "erahhal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264901237", "body": "I get the same problem on Ubuntu 16.04, but even using sudo:\r\n\r\n`sudo npm install -g oni-vim`\r\n\r\nFor some reason a global install is trying to write to ~/.npm in my home folder, with the following error:\r\n\r\n`npm ERR! Error: EACCES: permission denied, mkdir '/home/erahhal/.npm/oni-plugin-typescript'`\r\n \r\nThere's definitely something wrong here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264901237/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267505225", "body": "verified that this fix worked.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267505225/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "define-private-public": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264914784", "body": "I was trying to install this on Linux and I got this error at the \"npm install...\" level:\r\n\r\n```\r\n\r\nsh: 1: node: not found\r\n/usr/local/lib\r\n\u2514\u2500\u2500 (empty)\r\n\r\nnpm ERR! Linux 4.4.0-51-generic\r\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\" \"-g\" \"oni-vim\"\r\nnpm ERR! node v4.2.6\r\nnpm ERR! npm  v3.5.2\r\nnpm ERR! file sh\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno ENOENT\r\nnpm ERR! syscall spawn\r\n\r\nnpm ERR! electron@1.4.10 postinstall: `node install.js`\r\nnpm ERR! spawn ENOENT\r\nnpm ERR! \r\nnpm ERR! Failed at the electron@1.4.10 postinstall script 'node install.js'.\r\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\r\nnpm ERR! If you do, this is most likely a problem with the electron package,\r\nnpm ERR! not with npm itself.\r\nnpm ERR! Tell the author that this fails on your system:\r\nnpm ERR!     node install.js\r\nnpm ERR! You can get information on how to open an issue for this project with:\r\nnpm ERR!     npm bugs electron\r\nnpm ERR! Or if that isn't available, you can get their info via:\r\nnpm ERR!     npm owner ls electron\r\nnpm ERR! There is likely additional logging output above.\r\n```\r\n\r\nI'm not familiar at all with node or npm.  Is is trying to look for a fil in /usr/local/lib that doesn't exist?\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264914784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264934405", "body": "Okay, I got a little farther by install Node from a different repo, now I'm getting this error:\r\n\r\nI find those permission errors odd as I'm running the `npm install` as sudo.\r\n\r\n```\r\nnpm ERR! addLocal Could not install /usr/local/lib/node_modules/oni-vim/vim/vimfiles/bundle/oni-plugin-typescript\r\nnpm ERR! Linux 4.4.0-51-generic\r\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\"\r\nnpm ERR! node v4.2.6\r\nnpm ERR! npm  v3.5.2\r\nnpm ERR! path /home/ben/.npm/oni-plugin-typescript/0.0.1/package\r\nnpm ERR! code EACCES\r\nnpm ERR! errno -13\r\nnpm ERR! syscall mkdir\r\n\r\nnpm ERR! Error: EACCES: permission denied, mkdir '/home/ben/.npm/oni-plugin-typescript/0.0.1/package'\r\nnpm ERR!     at Error (native)\r\nnpm ERR!  { [Error: EACCES: permission denied, mkdir '/home/ben/.npm/oni-plugin-typescript/0.0.1/package']\r\nnpm ERR!   errno: -13,\r\nnpm ERR!   code: 'EACCES',\r\nnpm ERR!   syscall: 'mkdir',\r\nnpm ERR!   path: '/home/ben/.npm/oni-plugin-typescript/0.0.1/package' }\r\nnpm ERR! \r\nnpm ERR! Please try running this command again as root/Administrator.\r\n\r\nnpm ERR! Please include the following file with any support request:\r\nnpm ERR!     /usr/local/lib/node_modules/oni-vim/vim/vimfiles/bundle/oni-plugin-typescript/npm-debug.log\r\n\r\nnpm ERR! Linux 4.4.0-51-generic\r\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"run\" \"install:oni-plugin-typescript\"\r\nnpm ERR! node v4.2.6\r\nnpm ERR! npm  v3.5.2\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! oni-vim@0.1.1 install:oni-plugin-typescript: `cd vim/vimfiles/bundle/oni-plugin-typescript && npm install`\r\nnpm ERR! Exit status 243\r\nnpm ERR! \r\nnpm ERR! Failed at the oni-vim@0.1.1 install:oni-plugin-typescript script 'cd vim/vimfiles/bundle/oni-plugin-typescript && npm install'.\r\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\r\nnpm ERR! If you do, this is most likely a problem with the oni-vim package,\r\nnpm ERR! not with npm itself.\r\nnpm ERR! Tell the author that this fails on your system:\r\nnpm ERR!     cd vim/vimfiles/bundle/oni-plugin-typescript && npm install\r\nnpm ERR! You can get information on how to open an issue for this project with:\r\nnpm ERR!     npm bugs oni-vim\r\nnpm ERR! Or if that isn't available, you can get their info via:\r\nnpm ERR!     npm owner ls oni-vim\r\nnpm ERR! There is likely additional logging output above.\r\n\r\nnpm ERR! Please include the following file with any support request:\r\nnpm ERR!     /usr/local/lib/node_modules/oni-vim/npm-debug.log\r\nnpm ERR! Linux 4.4.0-51-generic\r\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\" \"-g\" \"oni-vim\"\r\nnpm ERR! node v4.2.6\r\nnpm ERR! npm  v3.5.2\r\nnpm ERR! code ELIFECYCLE\r\n\r\nnpm ERR! oni-vim@0.1.1 postinstall: `npm run install:oni-plugin-typescript`\r\nnpm ERR! Exit status 1\r\nnpm ERR! \r\nnpm ERR! Failed at the oni-vim@0.1.1 postinstall script 'npm run install:oni-plugin-typescript'.\r\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\r\nnpm ERR! If you do, this is most likely a problem with the oni-vim package,\r\nnpm ERR! not with npm itself.\r\nnpm ERR! Tell the author that this fails on your system:\r\nnpm ERR!     npm run install:oni-plugin-typescript\r\nnpm ERR! You can get information on how to open an issue for this project with:\r\nnpm ERR!     npm bugs oni-vim\r\nnpm ERR! Or if that isn't available, you can get their info via:\r\nnpm ERR!     npm owner ls oni-vim\r\nnpm ERR! There is likely additional logging output above.\r\n\r\nnpm ERR! Please include the following file with any support request:\r\nnpm ERR!     /home/ben/Desktop/npm-debug.log\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264934405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265035144", "body": "@keforbes It must have been from the repo that I pulled it from  (I guess they weren't keeping things up to day).  I'll try it again and see what happens.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265035144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hxegon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/264969938", "body": "Getting the same error as @erahhal. A little more info: it's trying to open $HOME/package.json when I try and run ```sudo npm run install:oni-plugin-typescript```.\r\n\r\nEDIT: Also ubuntu 16.04", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/264969938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267391799", "body": "Works for me :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/267391799/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "CrashyBang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/265010882", "body": "Hey @keforbes,\r\n\r\nCheers for the response, yes I did see the animated gifs but most of that I can achieve in a terminal like environment so I am just trying to get a really solid understanding of what separates a front end from something like a terminal. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265010882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265297365", "body": "Hey @extr0py cheers for the respons.\r\n\r\nThat has helped to clear things up.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265297365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kdurant": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/265023059", "body": "I download zip file, and `cd` oni-0.1.1 directory. But can't run `oni` or `oni-vim` at the command line\r\nI don't installed npm, because I can't develop Web.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265023059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265338981", "body": "@extr0py \r\n![qq 20161207103720](https://cloud.githubusercontent.com/assets/2704364/20952696/355949ce-bc69-11e6-83a8-5a7c974e2cd0.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265338981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265340156", "body": "@extr0py \r\n![qq 20161207103720](https://cloud.githubusercontent.com/assets/2704364/20952881/8068ec34-bc6a-11e6-8fec-83a7eb4a8d5d.png)\r\n\r\n`npm run install` also can't run \r\n\r\nI am sorry to bother you\uff01", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265340156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jetz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/265055595", "body": "Same problem on Ubuntu 16.04. ` Missing write access to /usr/local/lib/node_modules ...`\r\n\r\nI found when install by `sudo npm install -g oni-vim`, the `oni-plugin-typescript` dir's owner in $HOME/.npm is nobody, does it matter?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265055595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tbodt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/265224860", "body": "I've run into the fact that the oni executable has Windows (CRLF) line endings, which screws up the shebang line and gives the error `env: node\\r: no such file or directory`. I opened it in Neovim, did `:set fileformat=unix` and saved, and that was fixed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265224860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284467412", "body": "dammit", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284467412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284467419", "body": "dammit", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/284467419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Greg-Johns": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/265340631", "body": "I'm having similar problems, the install looks like it's erroring out at \r\n> npm run install:oni-plugin-typescript.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265340631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265503902", "body": "Ok I was able to npm install now but when Oni starts up it just gives a blank screen. Console errors with a Failed to load resources on\r\n> file:///usr/local/lib/node_modules/oni-vim/dist/browser/bundle.js Failed to load resource: net::ERR_FILE_NOT_FOUND", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265503902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Dequisitor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/265801518", "body": "Hi, @extr0py \r\n\r\nThanks for the quick answer. \r\n1. My node version was 4.4.5 when I submitted the bug report. Updated it to 6.9.2, still the same situation.\r\n2. 64-bit windows.\r\n\r\nAfter reading bug report you referenced (thanks for that too) I realized I should have mentioned this is a workstation at my company, which means there can be a couple of programs keeping oni from running. Although electron starts without issues. Will try 32bit electron tomorrow.\r\n\r\nNever tried electron, so this might be stupid: cd-d into oni directory, issued `electron .`\r\n\r\n```\r\n$ electron .\r\n\r\nApp threw an error during load\r\nReferenceError: document is not defined\r\n    at C:\\blabla\\AppData\\Roaming\\npm\\node_modules\\oni\\node_modules\\screenfull\\dist\\screenfull.js:69:25\r\n    at C:\\blabla\\AppData\\Roaming\\npm\\node_modules\\oni\\node_modules\\screenfull\\dist\\screenfull.js:78:4\r\n    at Object.<anonymous> (C:\\blabla\\AppData\\Roaming\\npm\\node_modules\\oni\\node_modules\\screenfull\\dist\\screenfull.js:155:3)\r\n    at Module._compile (module.js:556:32)\r\n    at Object.Module._extensions..js (module.js:565:10)\r\n    at Module.load (module.js:473:32)\r\n    at tryModuleLoad (module.js:432:12)\r\n    at Function.Module._load (module.js:424:3)\r\n    at Module.require (module.js:483:17)\r\n    at require (internal/module.js:20:19)\r\n\r\nThanks for you help.\r\n\r\nHave a nice day,\r\ndequisitor\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/265801518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266380320", "body": "Hi @extr0py - sorry for the late response, I was out for the weekend. \r\n\r\nThanks for sorting out the issue with @Rafi993. Sadly, after an update (just sheer `npm install -g oni oni-vim`) oni and oni-vim commands still seem to do nothing. So I checked the versions, installed electron manually, and tried `electron .` in the oni and oni-vim directories: `oni/electron .` resulted in the previously copy/pasted error, and `oni-vim/electron .` resulted in 'not an electron app' error. (again I'd like to mention I know almost nothing about electron) \r\n\r\n**Solution:** So I checked the main.js which is definitely an electron file, I issued `electron main.js` and that worked just fine. \r\n\r\n99% sure my setup is the one to blame for not being able to run oni and oni-vim, but I thought I'd mention this just in case anyone has the same problem.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266380320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mdxprograms": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174417", "body": "I should also note after opening developer tools, the console is outputting\r\n```Failed to load resource .nvm/versions/node/v7.2.0/lib/node_modules/oni-vim/dist/browser/bundle.js```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174474", "body": "Correct. I ran `npm install -g oni-vim`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174801", "body": "Excellent! Thank you so much! Look forward to messing with it \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266174801/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266175942", "body": "it's up and running now! thanks again", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266175942/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pmurias": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/266249689", "body": ":-1: :-1: :-1:\r\n:poop:  :poop: :poop:\r\nGet rid of the background ASAP, I literally thought it was a rendering bug and made a screenshot to report it and saw this ticket browsing through the issue tracker avoid duplicates.\r\nHave a plain black background as a default.\r\nFor me text on text SUCKS HARD.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266249689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266250416", "body": "In terms of suggestions, having an option for a plain white background makes sense.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266250416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266251446", "body": "Sorry for being rude.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266251446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266300835", "body": "Debian Linux\n\nOn 11 December 2016 at 19:40, extr0py <notifications@github.com> wrote:\n\n> @pmurias <https://github.com/pmurias> - Hmm, which OS are you on?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/84#issuecomment-266298974>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAGXpoYrkyWzyTYOkB3iqfVViPe7lSwkks5rHEOcgaJpZM4LJ_bJ>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266300835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266301735", "body": "Works in the HEAD revision, only seems to be broken in the version on npm.\n\nOn 11 December 2016 at 20:12, Pawe\u0142 Murias <pawelmurias@gmail.com> wrote:\n\n> Debian Linux\n>\n> On 11 December 2016 at 19:40, extr0py <notifications@github.com> wrote:\n>\n>> @pmurias <https://github.com/pmurias> - Hmm, which OS are you on?\n>>\n>> \u2014\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/extr0py/oni/issues/84#issuecomment-266298974>, or mute\n>> the thread\n>> <https://github.com/notifications/unsubscribe-auth/AAGXpoYrkyWzyTYOkB3iqfVViPe7lSwkks5rHEOcgaJpZM4LJ_bJ>\n>> .\n>>\n>\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266301735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kopischke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/266277254", "body": ">I think it'd also be good to declare a general global variable like g:is_oni so that users could differentiate in their init.vim if they needed to.\r\n\r\nGood idea, but the convention seems to be to respond to `has('gui_<name>')`: MacVim has `gui_macvim`, VimR has `gui_vimr` (see https://github.com/qvacua/vimr/wiki/VimR-MacVim, \u201cDistinguishing VimR and MacVim in vimrc\u201d section).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/266277254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/onivim/oni/comments/20283924", "body": "Uh, sorry to snipe from the cheap seats here, but that solution is suboptimal: the way it is done in other (Neo)Vim GUIs is to add a _feature_, i.e. something that is tested with `has()`, not a global variable. The problem with variables is that they can be modified or deleted (and `:lock` is but a bandaid), so relying on them is brittle, while features are immutable and thus robust. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/comments/20283924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/comments/20292130", "body": "[VimR modifies Neovim\u2019s `eval.c` to bake the feature in](https://github.com/qvacua/neovim/compare/b69de6dcd6640afbf3a4af7f8b1ad8ca28b1e25a...f0b9c99c6395f770b1341f8b4270da1e3691143b#diff-deb695d507653839019814f54242d47b); I\u2019m not sure how MacVim does it (a straight up code search doesn\u2019t show anything obvious, and I\u2019m a bit out of my depth here).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/comments/20292130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/comments/27761019", "body": "There are languages with string interpolation features allowing for nesting code into strings, notably Ruby (and that little known oddity JS ES6, if I\u2019m not mistaken \ud83d\ude0b). I am not sure how these are identified in the scoping system, but it would be annoying if completion was missing in interpolated code\u2026", "reactions": {"url": "https://api.github.com/repos/onivim/oni/comments/27761019/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/95057562", "body": "Unrelated to this PR, but: this comment cannot possibly be correct. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/95057562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103104565", "body": "If you target API version 0.1.6 or above, shouldn't this be `< 2`?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103104565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103104691", "body": "\u2026 also, thinking about it, shouldn't this be able to handle the case the Neovim API hits a major version > 0? I.e.\r\n```javascript\r\nif (apiVersion.major < 1 && apiVersion.minor < 2 && apiVersion.patch < 6) {\r\n  // handle incompatible version\r\n} ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103104691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103105373", "body": "@justinmk sorry, I didn't follow the whole API level versioning discussion closely : the version numbers are not semantic? Then my comments are academic, if course: true as to pure code logic but irrelevant to the issue at hand ;).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/103105373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Ilphrin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/268040926", "body": "You're welcome! When i'll have time, i'll try to give some help on Oni, this really deserves more hands =D\r\n\r\nBTW, when i run Ctrl+L it is refreshing the page and the glitch doesn't appear anymore, as my NERDTree is has a plugin to be launched in every tab and on startup, maybe it is because the browsers draws too soon the content? (Just suppositions, I don't know a thing about what's is happening!)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/268040926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wbs0829": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/269723535", "body": "I'm glad to get your response, @extr0py  ! I try the fixed version. The new version makes great efforts for multibyte support, but there are still something wrong.\r\n\r\nAt firtst, I open oni. The text `\u5168\u90e8` at the bottom right corner doesn't display correctly:\r\n![2016-12-30 09-27-28](https://cloud.githubusercontent.com/assets/1736988/21558347/6859db1a-ce73-11e6-92a6-15d634a831f9.png)\r\n Moreover, I repeatly test, and then I find that the text in the status line isn't correctly displayed  with a certain probability.\r\n\r\nThen I open a Chinese file. It seems OK:\r\n![2016-12-30 09-27-50](https://cloud.githubusercontent.com/assets/1736988/21558350/70412b6c-ce73-11e6-8fc8-7f3176b80ef0.png)\r\n\r\nBut after I key `Ctrl-E`, the display is chaotic:\r\n![2016-12-30 09-28-09](https://cloud.githubusercontent.com/assets/1736988/21558351/74351c74-ce73-11e6-89ae-7c255d76023a.png)\r\nIn line 2, the text should be blank, but there are some afterimages of line 1. The context after the last line is the same. Some Chinese characters are still not display correctly.\r\n\r\nAfter I edit another file, I open the test file again and key `Ctrl-E`. There are some afterimages of the previous file:\r\n![2016-12-30 09-31-14](https://cloud.githubusercontent.com/assets/1736988/21558353/77e02562-ce73-11e6-91b9-d41dfdc7f2bd.png)\r\n\r\n\r\nFor the test, I use the following text:\r\n```markdown\r\n# \u5a01\u5ec9\u00b7\u6c49\u7eb3\r\n\r\n\u5a01\u5ec9\u00b7\u9093\u6bd4\u00b7\u201c\u6bd4\u5c14\u201d\u00b7\u6c49\u7eb3\u662f\u7f8e\u56fd\u52a8\u753b\u5e08\u3001\u5bfc\u6f14\u3001\u5236\u7247\u4eba\u3001\u914d\u97f3\u6f14\u5458\u548c\u5361\u901a\u753b\u5e08\uff0c\u4ed6\u521b\u4f5c\u7684\u7535\u5f71\u548c\u7535\u89c6\u52a8\u753b\u89d2\u8272\u66fe\u572820\u4e16\u7eaa\u5927\u90e8\u5206\u65f6\u95f4\u91cc\u5a31\u4e50\u5168\u4e16\u754c\u6570\u4ee5\u4ebf\u8ba1\u7684\u89c2\u4f17\u3002\r\n\r\n\u6c49\u7eb3\u4e8e1910\u5e74\u5728\u65b0\u58a8\u897f\u54e5\u5dde\u5bc7\u91cc\u53bf\u51fa\u751f\uff0c\u5e74\u5e7c\u65f6\u7ecf\u5e38\u968f\u5bb6\u4eba\u642c\u5bb6\u30021919\u5e74\u5b9a\u5c45\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u5eb7\u666e\u987f\u540e\uff0c\u6c49\u7eb3\u6210\u4e3a\u9e70\u7ea7\u7ae5\u519b\u30021928\u5e74\u5728\u5eb7\u666e\u987f\u9ad8\u4e2d\u6bd5\u4e1a\u540e\uff0c\u4ed6\u66fe\u77ed\u6682\u5c31\u8bfb\u5eb7\u666e\u987f\u5e02\u7acb\u5b66\u9662\uff0c\u540e\u56e0\u7ecf\u6d4e\u5927\u8427\u6761\u9000\u5b66\u3002\u63a5\u4e0b\u6765\u51e0\u4e2a\u6708\u6c49\u7eb3\u5230\u5904\u6253\u96f6\u5de5\uff0c\u4e8e1930\u5e74\u52a0\u5165\u54c8\u66fc\u4e0e\u4f0a\u8f9b\u52a8\u753b\u5de5\u4f5c\u5ba4\u300220\u4e16\u7eaa30\u5e74\u4ee3\u671f\u95f4\uff0c\u6c49\u7eb3\u66fe\u53c2\u4e0e\u5236\u4f5c\u5305\u62ec\u300a\u8239\u957f\u4e0e\u5b69\u5b50\u4eec\u300b\u5728\u5185\u7684\u591a\u90e8\u52a8\u753b\u7247\uff0c\u5de5\u4f5c\u80fd\u529b\u548c\u77e5\u540d\u5ea6\u90fd\u65e5\u76ca\u589e\u957f1937\u5e74\uff0c\u6b63\u5728\u7c73\u9ad8\u6885\u5de5\u4f5c\u7684\u6c49\u7eb3\u7ed3\u8bc6\u7ea6\u745f\u592b\u00b7\u5df4\u4f2f\u62c9\uff0c\u4e24\u4eba\u5f00\u59cb\u957f\u8fbe60\u4f59\u5e74\u7684\u5408\u4f5c\uff0c\u5f88\u5feb\u5c31\u56e0\u5236\u4f5c\u300a\u732b\u548c\u8001\u9f20\u300b\u548c\u771f\u4eba\u4e0e\u52a8\u753b\u89d2\u8272\u5171\u540c\u6f14\u51fa\u7684\u7535\u5f71\u6253\u54cd\u540d\u6c14\u3002\u7c73\u9ad8\u6885\u89e3\u6563\u52a8\u753b\u90e8\u95e8\u540e\uff0c\u5df4\u4f2f\u62c9\u548c\u6c49\u7eb3\u4e8e1957\u5e74\u5171\u540c\u521b\u7acb\u6c49\u7eb3\u5df4\u4f2f\u62c9\u52a8\u753b\uff0c\u6210\u4e3a\u4e1a\u754c\u6700\u6210\u529f\u7684\u7535\u89c6\u52a8\u753b\u5236\u7247\u5546\uff0c\u63a8\u51fa\u7684\u52a8\u753b\u7247\u5305\u62ec\u300a\u6469\u767b\u539f\u59cb\u4eba\u300b\u3001\u300a\u745c\u4f3d\u718a\u79c0\u300b\u3001\u300a\u53f2\u9177\u6bd4\u300b\u3001\u300a\u65e0\u654c\u795e\u732b\u300b\u3001\u300a\u84dd\u7cbe\u7075\u300b\u3001\u300a\u54c8\u514b\u72d7\u300b\u548c\u300a\u6770\u68ee\u4e00\u5bb6\u300b\u30021967\u5e74\uff0c\u5854\u592b\u8131\u5e7f\u64ad\u516c\u53f8\u4ee51200\u4e07\u7f8e\u5143\u4ef7\u683c\u6536\u8d2d\u6c49\u7eb3\u5df4\u4f2f\u62c9\u52a8\u753b\uff0c\u4f46\u4e24\u540d\u521b\u59cb\u4eba\u7ee7\u7eed\u62c5\u4efb\u516c\u53f8\u9996\u8111\uff0c\u76f4\u81f31991\u5e74\u5854\u592b\u8131\u5e7f\u64ad\u53c8\u5c06\u4ed6\u4eec\u7684\u516c\u53f8\u8f6c\u5356\u7ed9\u900f\u7eb3\u5e7f\u64ad\u516c\u53f8\u65f6\u6b62\u30021996\u5e74\uff0c\u900f\u7eb3\u5e7f\u64ad\u516c\u53f8\u540c\u534e\u7eb3\u5144\u5f1f\u6bcd\u516c\u53f8\u65f6\u4ee3\u534e\u7eb3\u5408\u5e76\uff0c\u5df4\u4f2f\u62c9\u548c\u6c49\u7eb3\u6b64\u540e\u7ee7\u7eed\u5728\u65b0\u516c\u53f8\u62c5\u4efb\u987e\u95ee\u3002\r\n\r\n\u5df4\u4f2f\u62c9\u548c\u6c49\u7eb3\u5148\u540e\u4e03\u6b21\u83b7\u5965\u65af\u5361\u91d1\u50cf\u5956\uff0c\u516b\u6b21\u83b7\u827e\u7f8e\u5956\u3002\u4ed6\u4eec\u7684\u52a8\u753b\u7247\u5df2\u6210\u4e3a\u6587\u5316\u7b26\u53f7\uff0c\u521b\u4f5c\u7684\u52a8\u753b\u89d2\u8272\u4e5f\u51fa\u73b0\u5728\u5305\u62ec\u7535\u5f71\u3001\u4e66\u7c4d\u548c\u73a9\u5177\u5728\u5185\u7684\u591a\u79cd\u5a92\u4f53\u6216\u5546\u54c1\u4e0a\u3002\u6c49\u7eb3\u5df4\u4f2f\u62c9\u52a8\u753b\u7684\u8282\u76ee\u572820\u4e16\u7eaa60\u5e74\u4ee3\u8fbe\u5230\u9f0e\u76db\uff0c\u5728\u5168\u4e16\u754c\u62e5\u6709\u8d85\u8fc7\u4e09\u4ebf\u89c2\u4f17\uff0c\u5e76\u4e14\u5df2\u88ab\u7ffb\u8bd1\u621020\u591a\u79cd\u8bed\u8a00\u3002\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/269723535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gaving": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/270079342", "body": "you shouldn't need to do anything special, `npm install -g oni-vim` then just run the `oni` command and that should take care of the nvim spawning for you", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270079342/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sharksforarms": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/270816617", "body": "```\r\nhttps://github.com/extr0py/oni.git\r\ncd oni/\r\nsudo npm install\r\nsudo npm run build\r\nsudo npm link\r\noni\r\n```\r\n\r\nI have tried running your suggested commands to no avail, it still doesn't start", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/270816617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271050239", "body": "Added some console.log() to see the actually command being run:\r\n```\r\n[sharks@localhost oni]$ /home/sharks/oni/node_modules/.bin/electron /home/sharks/oni/main.js\r\n/home/sharks/oni/node_modules/electron/dist/electron: error while loading shared libraries: libXss.so.1: cannot open shared object file: No such file or directory\r\n````\r\n\r\n```\r\nsudo dnf whatprovides libXss.so.1\r\n...\r\n...libXScrnSaver...\r\n...\r\n```\r\n\r\nAfter installing libXScrnSaver, oni now starts up.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/271050239/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xangelux": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/273567341", "body": "I was trying to use Molokai but I see it doesn't take it, it flickers when I open oni and then back to the default one", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/273567341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "v3ss0n": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/277046210", "body": "Node  6.2.1 \r\nOs Linux Sabayon (gentoo Variant)\r\n\r\nBuild : success but fails at startup.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277046210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277283786", "body": "- tried both , i got that error on both NPM install and Git.\r\n- I will take screenshot later on mobile now. Basically just blank Electron shell , with menus and that error.\r\n- No , an alert dialog.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277283786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277466625", "body": "ok  i will test it out later.\n\nOn Sat, Feb 4, 2017 at 9:41 PM extr0py <notifications@github.com> wrote:\n\n> Interesting, thanks for the update. That helps to know it is when the app\n> has started and created the window.\n>\n> After you dismiss the alert, can you try the following:\n>\n>    1. Open up the Developer Tools (from the command menu)\n>    2. Type 'window.location.reload()' in the developer console\n>\n> The error should pop up there with a callstack - that would help\n> significantly in troubleshooting.\n>\n> I'm wondering also if it is related to how we look for config files -\n> maybe the directory we are looking for the config files is not correct on\n> that Linux distro.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/extr0py/oni/issues/191#issuecomment-277451988>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAZnFtg4-tAQsHglZNsC6tUWCKV31lwhks5rZJUegaJpZM4L1eYh>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277466625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279857217", "body": "```\r\nNevoimInstance: Neovim started\r\nbundle.js:1033 Attach success\r\nbundle.js:26695 cross-browser-ipc: {\"meta\":{\"destinationId\":1,\"originEvent\":null,\"senderId\":8},\"payload\":{\"command\":\"npm run build\"},\"type\":\"execute-shell-command\"}\r\n```\r\nNo other message .", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279857217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279873466", "body": "```\r\nnvim --version\r\nNVIM 0.1.4\r\nBuild type: RelWithDebInfo\r\nCompilation: /usr/bin/x86_64-pc-linux-gnu-gcc -O2 -march=x86-64 -pipe -Wno-error -Wconversion -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -O2 -g -DDISABLE_LOG -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wvla -fstack-protector-strong -fdiagnostics-color=auto -DINCLUDE_GENERATED_DECLARATIONS -DHAVE_CONFIG_H -D_GNU_SOURCE -I/var/tmp/portage/app-editors/neovim-0.1.4/work/neovim-0.1.4_build/config -I/var/tmp/portage/app-editors/neovim-0.1.4/work/neovim-0.1.4/src -I/usr/include -I/usr/include -I/usr/include/luajit-2.0 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -I/usr/include -I/var/tmp/portage/app-editors/neovim-0.1.4/work/neovim-0.1.4_build/src/nvim/auto -I/var/tmp/portage/app-editors/neovim-0.1.4/work/neovim-0.1.4_build/include\r\nCompiled by portage@andromeda.sabayon.org\r\n\r\nOptional features included (+) or not (-): +acl   +iconv    +jemalloc \r\nFor differences from Vim, see :help vim-differences\r\n\r\n   system vimrc file: \"/etc/vim/sysinit.vim\"\r\n  fall-back for $VIM: \"/usr/share/nvim\"\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279873466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280148834", "body": "thank you i will update nvim and test", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280148834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280317650", "body": "Tested using latest nvim stable , working well , thanks a lot!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/280317650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285162584", "body": "5,4,3,2,1,53,1,2,3,4,5 . Is that working as intended? how it works ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/285162584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301401521", "body": "i wonder if it is best for 0ni to fork and base upon VSCode/Atom's Code Base. They have done all the Git / Mercurial integration works and you guys can just tap into it.\r\nIt will save alot of work and 0ni's  focus will mainly only be to build perfect neovim-on-electron app. \r\nRight now 0ni's line rendering is alot slower than those editors.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/301401521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303931952", "body": "@jonaspm , good news on VSCode , VSCodeVim developers are switching to nvim. the branch have all ex commands available now . \r\nBut still , tight total integration still needs a dedicated vim editor , which the way 0ni doing is awesome.\r\nBut i really think , reusing already avaliable editors is a good idea , since Atom/Vscode have full plugin systems , themeing , extensions/package management ,  and most important of all , VSCode and Atom upcoming rendering system are very high performance.\r\n\r\nAnd recently announce Git Integration for atom is superb! http://blog.atom.io/2017/05/16/git-and-github-integration-comes-to-atom.html , which will be a lot of work redoing in 0ni ..", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303931952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "HiCodin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/277455400", "body": "I am on El Capitan and yes, i'd like to have oni default to maximize on startup or at least be able to specify the size. I thought it's already in the config and i just can't find it. :D ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/277455400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279125143", "body": "@bert88sta @extr0py Thanks for the hard work. the fullscreen option is working perfectly. \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279125143/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/302611648", "body": "@extr0py ah I failed to properly specify my requirement. `editor.fullScreenOnStart` is working as intended. But What I meant for this request is that instead of choosing `Maximize Window` from the Command Palette every time I open Oni, is there a way to set it default or have Oni remembered the last opened window size ?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/302611648/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303924976", "body": "@extr0py Thanks ! is there anyway I can help you with ? Really liking this. :) ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303924976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304624065", "body": "@keforbes alright. I'll take a look at the things you mentioned. Thanks ! ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/304624065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "balta2ar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/279406892", "body": "> That might be 6 months away though\r\n\r\n@justinmk Wow, that sounds promising! Are you going to implement it yourself or assign to someone else? What's the best place to track progress? https://github.com/neovim/neovim/issues/3845 or https://github.com/neovim/neovim/issues/211?\r\n\r\nSorry if I say something trivial, but maybe it's worth taking a look https://github.com/terryma/vim-multiple-cursors/issues to get an idea of typical issues and user requests that already took place in the past. To name a few off the top of my head: mouse support, yank/paste behavior, completion support, interaction with other plugins (hooks to disable certain plugins when multiple cursors are active).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/279406892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jonaspm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/281522310", "body": "I agree with you @keforbes ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281522310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281791591", "body": "I think that making both cursor & cursorline darker / more transparent would work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/281791591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303224756", "body": "How about making it a plugin?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/303224756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Dark-Passenger": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/282540027", "body": "@TalAmuyal awesome. But does it seem native ? like look and feel ? thats why we use this right :D ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/282540027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lasypig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/283543946", "body": "How is this PR going?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/283543946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "am2605": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/289994277", "body": "Thank you for the reply.  Fuzzy Finder does work so that's a good \nworkaround.\n\nI have made a change to QuickOpen.tsx which has made it work, but I\"m \nnot sure if there's any other conseqences of this.  The change is:\n\nLine 358: change from\n\ninstance.command(\"exec \\\"\" + message + \"\\\"\")\n\nto\n\ninstance.command(\"exec \" + JSON.stringify(message) + \"\")\n\n\nOn 29/03/2017 2:38 PM, keforbes wrote:\n>\n> You're right, I don't think this has been addressed. I wrote that \n> feature on Linux and I don't have a Windows box to test with so I'm \n> sure it's my fault. I'll have to see how Neovim expects this to work. \n> I'm afraid to just blindly replace |\\| with |/| since paths with \n> spaces might be sent with |\\| (|<backslash><space>|). I might be able \n> to quote the path, though we're already quoting the whole command with \n> |execute \":e <file>\"| under the hood and if I try quoting the path \n> with |'| that would probably prevent variables from being expanded (if \n> that matters). And yes, I'm just rambling at this point.\n>\n> As a potential workaround, try using the Fuzzy Finder with |<Ctrl-P>| \n> and see if that opens files correctly.\n>\n> If you're willing to look at the code to debug it, |Menu.js| is \n> sending |\":e \" + name| to |index.ts| which executes |\"exec \\\"\" + \n> command + \"\\\"\"|. There's probably some combination of quotes or string \n> replacements we can do on that string. If Fuzzy Finder works, you an \n> compare that with |QuickOpen.ts| which is running |\"e! \" + fullPath|.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub \n> <https://github.com/extr0py/oni/issues/327#issuecomment-289972677>, or \n> mute the thread \n> <https://github.com/notifications/unsubscribe-auth/AAHUqcCc3ZwHEKkoRamMOfG4-wlH8P6Uks5rqdIdgaJpZM4MsWQ6>.\n>\n\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/289994277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290246545", "body": "Thank you so much for your quick fix.  I have just checked out the branch with #328 and it has resolved the issue.\r\n\r\nThis is an awesome project - kudos to all involved.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290246545/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290270624", "body": "Yes, I can confirm it says `$MYVIMRC [new file]`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290270624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290580192", "body": "> Also, if you start Oni, and then type :e $MYVIMRC, do you get a different result?\r\n\r\nI am getting the same result.  \r\n\r\n`:echo $MYVIMRC` is blank, it seems to me like the variable does not get set at all.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290580192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290580956", "body": "> And if I run nvim from terminal, I get the same issue - so this might be an issue with neovim itself as opposed to Oni.\r\n\r\nIf I launch nvim-qt.exe from oni\\bin\\x86\\Neovim\\bin, `:echo $MYVIMRC` gives me `~\\AppData\\Local\\nvim\\init.vim` which is what I would expect.\r\n\r\nI wonder if nvim-qt.exe is doing anything to set this value that doesn't happen when nvim.exe is called directly?  When I launch nvim.exe I get:\r\n\r\n```\r\nNvim headless-mode started.\r\nListening on:\r\n        \\\\.\\pipe\\nvim-11216-0\r\nPress CTRL+C to exit.\r\n```\r\n\r\nSo I don't know how to see what's set in there - is there any way I can tell?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290580956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290619492", "body": "From nvim/runtime/doc/starting.txt:\r\n\r\n> If Vim was started with \"-u filename\", the file \"filename\" is used.\r\n> \tAll following initializations until 4. are skipped. $MYVIMRC is not\r\n> \tset.\r\n\r\nIs this perhaps relevant?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290619492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290620931", "body": "Yes, it's definitely to do with the above.\r\n\r\nIf I change  `\"oni.useDefaultConfig\": false`, the file now loads.   \r\n\r\nSo I think because when useDefaultConfig is true, oni passes through the '-u' argument to nvim, I think it is actually perfectly correct that we can't open $MYVIMRC?\r\n\r\nI think this one might be okay to close?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/290620931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "teto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/291004167", "body": "Related to palette you might be interested in https://github.com/neovim/neovim/pull/6288 (just need a US native to fix the descriptions with better English skills than I)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291004167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/318527685", "body": "A PR that can be of interest regarding this issue https://github.com/neovim/neovim/pull/7082", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/318527685/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mixedCase": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/291213383", "body": "I can reproduce this on Arch Linux. Had to create a ~ /.oni directory for it to work.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/291213383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "corelon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/295741971", "body": "Hi @extr0py ,\r\n\r\nThank you very much for that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/295741971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ohle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/296402591", "body": "Have you tried setting `\"oni.loadInitVim\"` to `true` in `~/.oni/config.js` (or preferences -> edit ONI config from the main menu) instead of sourcing?\r\n\r\nSee [readme](https://github.com/extr0py/oni#configuration).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296402591/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296485620", "body": "I'm not really sure, but there are some subtle ways in which `init.vim` loading is special. Probably load order and the construction of the runtimepath has something to do with it.\r\n\r\nI'd guess that if you start regular neovim with `-u NONE` to skip your `init.vim` and then `:source` it later, you'd run into the same problems.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296485620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296667324", "body": "Same here (Ubuntu 14.04)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296667324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "unclechu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/296453542", "body": "@ohle this way it's working, thanks. I wonder why it doesn't work by sourcing?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296453542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296490767", "body": "@ohle you're right, it's true, I have the same situation with `nvim` TUI, so this isn't connected to the Oni. Thank you again for clarifying it for me, I'm closing this issue because it solved by setting `oni.loadInitVim` option to `true`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/296490767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297096599", "body": "I just realized that it doesn't act like this for everything, only when cursor is positioned after some unicode symbol. May be it counting columns by bytes and misses that not every symbol presented by same amount of bytes?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297096599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297341948", "body": "I have another issues with unicode symbols, I don't need to open new issue for that because as I see it's unicode issue in general, am I right?\r\n\r\n`nvim` TUI:\r\n![neovim-oni-gui-unicode-issue-1-should-be](https://cloud.githubusercontent.com/assets/799353/25430085/c12bfd36-2a94-11e7-9734-f5986fb4cac4.png)\r\n![neovim-oni-gui-unicode-issue-2-should-be](https://cloud.githubusercontent.com/assets/799353/25430084/c12a3d52-2a94-11e7-90a0-a439cfefddc4.png)\r\nOni:\r\n![neovim-oni-gui-unicode-issue-1-bug](https://cloud.githubusercontent.com/assets/799353/25430100/cb783e26-2a94-11e7-825d-8d3f46e8eef7.png)\r\n![neovim-oni-gui-unicode-issue-2-bug](https://cloud.githubusercontent.com/assets/799353/25430101/cb78569a-2a94-11e7-8d07-5727145d0465.png)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297341948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297487682", "body": "@extr0py you could look at help info for `getcurpos()` vim function:\r\n```\r\ngetcurpos()\tGet the position of the cursor.  This is like getpos('.'), but\r\n\t\tincludes an extra item in the list:\r\n\t\t    [bufnum, lnum, col, off, curswant] ~\r\n\t\tThe \"curswant\" number is the preferred column when moving the\r\n\t\tcursor vertically.\r\n\t\tThis can be used to save and restore the cursor position: >\r\n\t\t\tlet save_cursor = getcurpos()\r\n\t\t\tMoveTheCursorAround\r\n\t\t\tcall setpos('.', save_cursor)\r\n```\r\nMay be the Oni uses this function to get cursor position data and uses `col` to get cursor column position but it should use `curswant` instead of.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297487682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297834285", "body": "@extr0py \r\n\r\n> I'm assuming you're running on Fedora25, is that correct?\r\n\r\nThat is correct. *Fedora 25 Workstation*\r\n\r\n> Would you mind posting the init.vim with the xnoremap line that is problematic? I'm not able to repro these wrapping issues on Windows, but I'm wondering if it is specific to a font.\r\n\r\n[My config](https://github.com/unclechu/neovimrc/). But I didn't get which `xnoremap` matters? Are you about autocompletion? But it's default Oni's mapping (^N/^P/Enter).\r\n\r\n> Are you using the default font with Oni or have you overridden it with editor.fontFamily?\r\n\r\nI'm using **Fira Code** for ligatures, here is source of my `~/.oni/config.js`:\r\n```javascript\r\nmodule.exports = {\r\n        \"oni.useDefaultConfig\": true,\r\n        \"oni.loadInitVim\": true,\r\n        \"editor.fontSize\": \"12px\",\r\n        \"editor.fontFamily\": \"Fira Code\",\r\n        \"editor.completions.enabled\": true,\r\n        \"editor.fontLigatures\": true,\r\n        \"oni.hideMenu\": true,\r\n}\r\n```\r\n\r\n> Do you have a document I can reproduce the completion behavior on? Unfortunately the youtube video did not work for me.\r\n\r\nYou could use minimal config that I put in topic to reproduce it. Just use this example:\r\n```text\r\nfoo \u2192 + bar\r\n```\r\nWhere `+` is your cursor position, type `f` and in autocompletion menu choose `foo` and then press *Enter*. I can reproduce it this way.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297834285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298873431", "body": "I built Neovim 0.2.0 release (without updating Oni) and now current line is highlighted after I leave CtrlSpace window but cursor is still thin line in *normal-mode* until I reset it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298873431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305851490", "body": "@keforbes okay, will try soon.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305851490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305908250", "body": "@keforbes I still can reproduce it: https://youtu.be/jcHkspllgvE\r\nCommit: b5ea293321e525e5d91035409d9634435bae3b2a", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305908250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305908951", "body": "@keforbes except text rendering, it looks like it's fixed.\r\n\r\nThis I **cannot** reproduce (fixed):\r\n![unicode issue screenshot](https://cloud.githubusercontent.com/assets/799353/25430101/cb78569a-2a94-11e7-8d07-5727145d0465.png)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305908951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "LER0ever": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/297801375", "body": "I can reproduce this too. I have scrolloff 3 in my vimrc and oni just moves the content at every 5 j scrolldown.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297801375/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297809577", "body": "Actually, if scrolloff is not zero, another weird scrolling occurs when you scroll from the bottom of the file up using mousewheel. The content just keeps glitching while going up. @ohle Can you reproduce this one? or it's just my configuration problem?\r\nI've temporarily [disabled scrolloff](https://github.com/LER0ever/EverVim/commit/d51c89814d3da74af9f79ca0f0f1449cb9f9cf56) if Oni is detected.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/297809577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Waqar144": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/298234443", "body": "Gif:\r\n![Imgur](http://i.imgur.com/S9Auu0l.gif)\r\n\r\n`:set completeopt` returns `menuone`\r\n\r\n**How many entries are shown?**\r\nThe num of max entries are 10. It can be less but I haven't seen more. This is opposed to normal Vim/Nvim behavior.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/298234443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/299298388", "body": "![bildschirmfoto-20170504215811-1108x628](https://cloud.githubusercontent.com/assets/7671649/25723445/51b53cf8-3118-11e7-895c-277ee08eb61f.png)\r\n\r\nhttps://github.com/fasa123/oni\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299298388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299668184", "body": "For autocompletion https://github.com/nsf/gocode is used It is pretty much the default autocomplete provider (honestly I haven't seen any other). Due to the nature of Golang you will find multiple tools for those \"IDE-Tasks\" (refactor, reference counting, autocomplete etc.). \r\n\r\nThe keyword highlighting is pretty irrelevant since Golang only has like 16 keywords. Obviously it's a nice thing to have but manually specifying the keywords shouldn't be the problem with only 16.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/299668184/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "djwashburn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/300245384", "body": "I am still having this problem - I cannot figure out how to get oni to use my .vimrc/init.vim on Windows. I have tried copying it as init.vim AND as the literal filename $VIMRC into ~/.oni/, as well as to C:\\Program Files (x86)\\Oni, which is where Oni.exe lives and where the default installer put it. I have oni.loadInitVim set to true and have tried with oni.useDefaultConfig set to both true and false. Nothing works. When I click \"Edit Neovim Config\", it tries to edit C:\\Program Files (x86)\\Oni\\$VIMRC, where $VIMRC is not evaluated but is a literal filename, but if I put my full .vimrc into that file, it still does not get loaded when oni starts.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/300245384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "beatscode": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/305527097", "body": "- I'm on MacBook pro Sierra 10.12.5\r\n- Your reply made me check the readme again. I initially just downloaded the mac build. I just now ran the build instructions to try again. And that yielded the correct results when running Ctrl+p.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305527097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gynet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/305986788", "body": "Yes, I am using Windows 10", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/305986788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "roflcopter4": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/306637154", "body": "I do have a recommendation for a font. My favorite font in the world at the moment is one called Dina, which can be obtained [here](https://www.donationcoder.com/Software/Jibz/Dina/) for Windows. There is no \"official\" version compatible with Linux, but it is fairly easy to convert, and someone made a very good conversion for download in [this thread](http://www.donationcoder.com/forum/?topic=7857.0), which I have tested and works flawlessly. \r\n\r\nI love this font because it is compact, easy to read, the characters are all distinct (esp O and 0), and unlike most bitmapped fonts it comes with very good bold, italic, and bold-italic versions. Most bitmapped fonts have to fallback on either terrible bold conversions that blur letters, or automatically generated ones that are even worse, and the same for italic. Dina does not. I even unnecessarily took some [comparison screenshots here](http://imgur.com/a/G8nTK) (you have to open the images full screen to see the difference clearly). The anti-aliasing issue is perhaps not as dramatic as I make it seem, but to me the blurriness is very clearly evident in the non-bitmapped ones and bothers me quite a lot.\r\n\r\nAnyway, that's all not particularly relevant. I agree that the solution from stackoverflow is not really applicable here, and also agree that it's fairly unlikely that Chromium would up and decide to support bitmapped fonts. I wish I could offer support for your second suggestion, but I don't feel that my 200 level computer science + \"read a few programming books and write scripts for video games\" level of skill is likely up to the task here.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306637154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319894700", "body": "I just wanted to post here, for the record, that there already seems to be a miraculous and bizarre partial solution to this problem. A series of unfortunate circumstances compelled me to use Microsoft's VS, which I quickly found also did not support raster fonts. I nonetheless vainly googled around for a while to see if there were a way around, and to some shock I found that there apparently is. [This guy wrote an article](http://www.electronicdissonance.com/2010/01/raster-fonts-in-visual-studio-2010.html) on it several years ago, in which he basically discovered that for whatever reason Microsoft decided to support raster fonts in certain East Asian language fonts, while dropping support for the rest. Why they did this is quite unfathomable, but it does allow a rather monstrous hack. Through a long and specific process, a font can be modified to appear to be an East Asian Truetype font with embedded bitmaps which allows it to be displayed.\r\n\r\nI tried the font he included in the article, and it didn't work. However, after some more googling, I found that someone had already converted my [aforementioned favorite font, Dina, to this format.](http://chrisrickard.blogspot.ca/2010/03/dina-font-for-visual-studio-2010.html) It did work in Visual Studio, so long as the correct point size is chosen. Despite there being no connection I know of between that editor and this project, I decided to try the font in Oni too. To my great astonishment, it actually works. I have no idea why. Again, so long as the correct size is chosen, the font simply works (Dina supports 11px (8 point), 12px (9 point), and 13px (10 point)).\r\n\r\nI don't know whether or not it was worth pointing this out, since it barely qualifies as a solution and comes with an overly long and irrelevant story, but I found the fact that it's even possible quite interesting. How can it be properly displaying the fonts when it apparently really should just not be able to? Can that fact be exploited?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319894700/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "esparkman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/306941330", "body": "macOS Sierra. I'd love to get the Binary package so that I can call it from command line. That is crucial for me in my current workflow.\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306941330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306972435", "body": "Excellent information. Do you have a suggestion executing from the command line by calling just oni? I tried symlinking but that gave me some unwanted results.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306972435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306979697", "body": "The issue I have when symlinking in that manner is Oni pipes all commands into the terminal. As in the screenshot below.\r\n\r\n![screenshot 2017-06-07 22 22 14](https://user-images.githubusercontent.com/217422/26909626-f41bbaea-4bcf-11e7-8523-54ad07768d29.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/306979697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Congee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/310201408", "body": "I still have the issue with `\"oni.useDefaultConfig\": false, \"oni.loadInitVim\": true`\r\nBTW, I use the latest v0.2.5 release, with the binary installer `Oni-0.2.5-ia32-win.exe`.\r\n:/", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310201408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310222302", "body": "@extr0py Or make the path customizable. \ud83e\udd14", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/310222302/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kornabert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/314010688", "body": "A further interesting effect of note (slightly different but I found it while messing around with this issue at hand) is that if in init.vim you set it to automatically cd to a directory you desire then even though the pwd suggests you are at that directory the fuzzy search still works from the oni directory as if no cd happened. However you are actually at the new directory and if you cd up or down 1 directory then fuzzy search starts to work properly. So essentially I assume Oni needs a check on startup to have the fuzzy search's current directory updated if it gets changed in the init.vim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/314010688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zQueal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/319736072", "body": "> But it is certainly a goal for Oni to be ligher than it is today.\r\n\r\nSounds good to me! Great work, by the way. I didn't necessarily mean to criticize, just was wondering what the mentality was there.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/319736072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "benjamin-rood": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/321153724", "body": "I'm getting some (tolerable) keyboard input lag on very big files from this issue in Oni, and monstrously large input lag in VS Code using the VSCodeVim extension. Hopefully the `LiveUpdate` PR will help with that too.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/321153724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346705594", "body": "Would also be worthwhile cf. how VS Code / Atom are implementing it.\r\nIs this a feature anyone can fix via PR?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/346705594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347972696", "body": "Merci Beaucoup!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347972696/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351506670", "body": "I'd been interested in pitching in to this if possible? Regular vim colour styles are fugly in general, and make Oni look bad. I find dark colour schemes much harder to read than light ones.\r\nIt's clear that the functional direction for Oni is to have all the decorative customisation of an \"electron\" text editor but with (Neo) Vim tooling.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351506670/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lukeberry99": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/324008039", "body": "The first time you open the Oni preferences it will create a new buffer and set the lines to be the default config, at this point it is an unsaved file and exists entirely in memory. You will notice that the 'x' at the top of the screen is in fact a circle, indicating that there are unsaved changes. If you save the file you will then be able to press the 'x' and the file will close, as expected.\r\n\r\nPerhaps there should be a confirmation dialog when attempting to close a file with unsaved changes, in the same vein as `:q!`, just more visual.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324008039/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lbebber": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/324130854", "body": "If I may suggest, you could look into what https://github.com/zeit/hyper does for text input\u2014if I'm not mistaken it had the same problem once, and it's also an Electron app. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324130854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333852619", "body": "They also do not work for normal commands, e.g. `'` to move to a mark, `\"` to use a register, `^` to go to the start of the line, `~` to switch the case of a letter.\r\n\r\nPerhaps this should be a different issue, but I do not know how to name this issue hahah. \"Dead keys do not work for commands\"?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333852619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333853667", "body": "The vim/nvim behaviour in this last case, by the way, is to treat the dead key input as usual, i.e., `'`+`i` runs a nonexistent `\u00ed` command\u2014to move to the `i` mark I need to type `'`+`<space>`+`i`. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333853667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333935514", "body": "Thanks @bryphe\u2014as far as I know this is the only issue that prevents me from using Oni, and I'm really looking forward to it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/333935514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "daenney": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/324233189", "body": "I'm on macOS High Sierra (developer beta 7) running on top of NeoVim 0.2.0 from Homebrew.\r\n\r\n```\r\nNVIM v0.2.0\r\nBuild type: Release\r\nCompilation: /Users/daenney/homebrew/Library/Homebrew/shims/super/clang -Wconversion -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -DNVIM_MSGPACK_HAS_FLOAT32 -DNDEBUG -DDISABLE_LOG -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wvla -fstack-protector-strong -fdiagnostics-color=auto -DINCLUDE_GENERATED_DECLARATIONS -I/tmp/neovim-20170730-70348-1ucpbic/neovim-0.2.0/build/config -I/tmp/neovim-20170730-70348-1ucpbic/neovim-0.2.0/src -I/Users/daenney/homebrew/include -I/Users/daenney/homebrew/include -I/Users/daenney/homebrew/include -I/Users/daenney/homebrew/include -I/Users/daenney/homebrew/include -I/Users/daenney/homebrew/include -I/Users/daenney/homebrew/opt/gettext/include -I/usr/include -I/tmp/neovim-20170730-70348-1ucpbic/neovim-0.2.0/build/src/nvim/auto -I/tmp/neovim-20170730-70348-1ucpbic/neovim-0.2.0/build/include\r\nCompiled by daenney@chell.ext.4096.se\r\n\r\nOptional features included (+) or not (-): +acl   +iconv    +jemalloc +tui\r\nFor differences from Vim, see :help vim-differences\r\n\r\n   system vimrc file: \"$VIM/sysinit.vim\"\r\n  fall-back for $VIM: \"/Users/daenney/homebrew/Cellar/neovim/0.2.0_1/share/nvim\r\n\"\r\n```\r\n\r\nIf Oni doesn't require Python, any idea why this shows up?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324233189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324857425", "body": "Making the change you suggested to `init.vim` fixes it, so it does seem that it needs to at least be able to find a Python executable.\r\n\r\n```\r\nhealth#nvim#check\r\n========================================================================\r\n## Configuration\r\n  - SUCCESS: no issues found\r\n\r\n## Performance\r\n  - SUCCESS: Build type: RelWithDebInfo\r\n\r\n## Remote Plugins\r\n  - SUCCESS: Up to date\r\n\r\n## terminal\r\n  - ERROR: command failed: infocmp -L\r\n    infocmp: environment variable TERM not set\r\n\r\nhealth#provider#check\r\n========================================================================\r\n## Clipboard (optional)\r\n  - SUCCESS: Clipboard tool found: pbcopy\r\n\r\n## Python 2 provider (optional)\r\n  - INFO: Using: g:python_host_prog = \"/Users/daenney/.virtualenv/neovim-python2/bin/python2\"\r\n  - INFO: Executable: /Users/daenney/.virtualenv/neovim-python2/bin/python2\r\n  - INFO: Python2 version: 2.7.13\r\n  - INFO: python2-neovim version: 0.1.13\r\n  - SUCCESS: Latest python2-neovim is installed: 0.1.13\r\n\r\n## Python 3 provider (optional)\r\n  - INFO: Using: g:python3_host_prog = \"/Users/daenney/.virtualenv/neovim-python3/bin/python3\"\r\n  - INFO: Executable: /Users/daenney/.virtualenv/neovim-python3/bin/python3\r\n  - INFO: Python3 version: 3.6.1\r\n  - INFO: python3-neovim version: 0.1.13\r\n  - SUCCESS: Latest python3-neovim is installed: 0.1.13\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324857425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324966346", "body": "That would be awesome. Thanks for looking into it. In the mean time, I can now try Oni \ud83d\ude00", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324966346/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "terlar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/324268583", "body": "@badosu I updated to the latest version, I have also added you as co-maintainer and could disown the package (if that is possible) as I am not actively using oni at the moment.\r\n\r\n@extr0py It is definitely possible to automate this since this is just updating those files and pushing to the aur git repo, as long as we have a key associated with a maintainer on that package in AUR. Let me know if I can help.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324268583/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332127388", "body": "@badosu the reasoning behind the `oni.sh` is a pattern I saw from some other packages (e.g. https://aur.archlinux.org/packages/franz-bin), it is because the binary is in `/opt/oni/oni` and that is not in users `PATH`. Another alternative would be to symlink it instead.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/332127388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joereynolds": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/324280934", "body": "Agreed, I'm not sure I'm a fan of the 'batteries included' philosophy. The built-in fuzzy finder is significantly slower than fzf with ag.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324280934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324566426", "body": "Hey @extr0py to be honest it's mainly the fuzzy finder which I know you're addressing.\r\n\r\nMy thoughts are, if you're forcing us to use something, we should be able to swap it out :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324566426/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jaywcjlove": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/324992549", "body": "@someguynamedmatt  Select a folder. \r\n\r\n\r\n![image](https://user-images.githubusercontent.com/1680273/29726080-03b90e0c-8a01-11e7-8edc-712d1f6f0fe2.png)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/324992549/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ioncodes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/325191888", "body": "I'm expiriencing this too. Same problem happens when I paste text while in Insert mode. Maybe it doesn't handle CRLF/LF correctly?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325191888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Kcrong": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/325255726", "body": "@extr0py Thanks you for the response!\r\n\r\nI have one more question.\r\nIf I use [command-palette](https://github.com/extr0py/oni#command-palette), \r\nit just keep showing me `Loading ...` Like:\r\n![image](https://user-images.githubusercontent.com/13450715/29758912-53fd20ea-8bf2-11e7-896f-f71cc96ccb05.png)\r\n\r\nI entered command palette with `Ctrl + p`. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325255726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325258439", "body": "Thanks! it works very well :)\r\nAlso, it is really cool\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325258439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325274483", "body": "@extr0py FYI, you can close this issue :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325274483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "destinyd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/325265511", "body": "I need it too.\r\nWorking on macos.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325265511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Gahen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/325423808", "body": "Hi! I'm having the same issue with a spanish layout. It happens with several special characters (I first noticed it with `~` as `right-alt + \u00a1`), they are not written after pressing the same keys that work in the rest of my OS.\r\n\r\nI'm using an updated Arch and kde.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/325423808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329036404", "body": "Just for the laughs: a few hours ago oni was ignoring my caps lock key. It gets the prize to the most weird bug I ever seen. Latam or spanish keyboard layout.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329036404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329243262", "body": "@extr0py Thanks for the kind answer and the good work!\r\n\r\nThe caps lock bug was on my working machine, it's running Arch and using the compiled git version ( master branch from last week I think). If you can tell me how I can fetch more info for you I'll gladly do it and post it here tomorrow. \r\n\r\nI work developing for web so I can easily check the dev tools if there is something that can be tested there.\r\n\r\nThanks again! This project rocks =)\r\n\r\nPD: On my home machine the same OS / layout doesn't seem to have that bug. I think I checked and wasn't happening on NeoVim only, but I'll check that again tomorrow. The version is different though, I have the OS package version (aur/oni 0.2.8-1) and not the one from git.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329243262/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "timhughes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/326914910", "body": "Just making the \"Open Folder\" menu item start from the current open folder would be good. \r\n\r\nBTW, very impressed with the work so far and is the first thing that i have seen that has the potential to get me off cli based vim", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/326914910/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "AntJanus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/327234912", "body": "Yeah, I'm still having issues with this. I gutted my `.vimrc` so that it only includes stuff like keyboard shortcuts and tab width. Has anyone resolved this? `$MYVIMRC` doesn't seem to expand for me either on Windows.\r\n\r\nThis is an awesome editor and I'm pretty psyched to get some of my shortcuts/settings in so I can use it full time :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/327234912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Alok": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/329353373", "body": "One way around this is to use Ukelele and unmap all unicode dead keys. i did that and it works now. but that's such a nuisance.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/329353373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "riedel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/331665567", "body": "I do not quite get the root of the problem. On the german keyboard  `{[]}\\` are AltGr combinations of `7890`. Interestingly `{}` work (!), but not `[]\\` which all emit the '^\\' escape sequence of ESC, so what is the difference here? BTW also `|` and '~' work, but not `\u00b2\u00b3`. Trying to type e.g. latex without `[]\\` on a German keyboard is pretty much a show stopper.  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/331665567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gruhn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/331985706", "body": "You're right. This file is in a git repo. I quickly checked in a regular folder and fuzzy-finding the file was not a problem. This is what I experienced on my laptop running  __Linux Mint 18.1__ with  __Oni 0.2.9__ installed. \r\n\r\nBut now that you mentioned it, I also tested Oni on another machine of mine running __Linux Mint 17.2__ and __Oni 0.2.8__. Now checkout this:\r\n\r\n![out-1-1-1](https://user-images.githubusercontent.com/26570572/30826014-2ef33826-a235-11e7-9eba-ca79c0c022ff.gif)\r\n\r\nLower-case characters aren't an issue here either. `\u00dc\u00d6` is replaced with `UO` but only in the first line. In the second line and below, all of them work but the dots are still visible, even when the character and the hole line is deleted. They disappear when I delete the last character of the first line though.\r\n\r\nI then upgraded to 0.2.9 on this computer and as far as I can tell, it's the same behavior now as on my laptop, so I can't type `\u00dc\u00c4\u00d6` at all anymore.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/331985706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "BenDoan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/334215780", "body": "Was the wrong issue linked in 33c0350? It doesn't look like that commit is related to java language servers (or language servers at all).", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334215780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334244668", "body": "Cool, sorry for the false alarm :hushed:. \r\n\r\n--\r\n\r\nI'm really liking Oni. Actual vim inside an IDE is a killer feature, and java support would be awesome.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334244668/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "soratobukuroneko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/334375676", "body": "Hi, I just tried right now with the v0.2.11 release on a laptop with windows 10 and a spanish keyword. I can't type the opening square bracket ([), but I can type the closing one normaly.\r\n\r\nHow could I help, get the key code or so?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334375676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336716964", "body": "I tried the v0.2.12 release and the \"1.0.256\" build from appveyor but the opening bracket keep getting resolved to  `<c-a-[>` instead of  `BracketLeft`", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336716964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tobiaskohlbau": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/334587698", "body": "Looks like a bug within Neovim as `:e $MYVIMRC` results in similar behavior.\r\n\r\n### Workaround\r\nExecute the following within Powershell, restart Oni and use `File->Preferences->Edit Neovim config`.\r\n```Powershell\r\nNew-Item $env:USERPROFILE\\AppData\\Local\\nvim\\init.vim -type file\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334587698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Metamist": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/334771642", "body": "I've been checking this issue out on my end and it also happens for me.\r\nIn order to support specifying commands with arguments, `spawn` needs to be given the `shell: true` property at [L150](https://github.com/bryphe/oni/blob/master/browser/src/Services/QuickOpen.ts#L150), but that doesn't solve the issue entirely:\r\nIt seems that node will return `Command failed` when you `childprocess.execSync` it with `fzf -f 'anything'`, and executing it with `exec` just hangs node completely. This happens in the `Reducer.ts` at [L325](https://github.com/bryphe/oni/blob/master/browser/src/UI/Reducer.ts#L325).\r\nThis may be related to https://github.com/nodejs/node-v0.x-archive/issues/4590", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334771642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334780295", "body": "If you figure out what is causing the issue that I linked from the node archive, that would pretty much solve the issue completely. But rewriting this to be completely asynchronous would provide a much better user experience.\r\nSeparating the arguments before using spawn sounds like a decent idea, but seems redundant while we can simply use `exec` or `spawn` (however, `spawn` is more efficient than `exec` without the `shell: true` flag, so opting to separate the arguments may be more beneficial)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/334780295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338233554", "body": "@bryphe, try running this in `node` REPL instead:\r\n```javascript\r\nrequire(\"child_process\").spawnSync(\"fzf -f 'a'\", [], { stdio: ['inherit', 'pipe', 'pipe'], shell:true }).output[1].toString()\r\n```\r\nIt only returns empty (or hangs when using `spawn`) if stdin is not set to `inherit`.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/338233554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342640139", "body": "It was `vim-polyglot` that opened my `.js` files as `javascript.jsx`. Removing that fixed that issue, but the actual problem is *not* that it is using `javascript.jsx`. Without this plugin, `.js` and `.jsx` files are opened as filetype `javascript`.\r\n\r\n**However**\r\n`vim-jsx` is another plugin that vastly improves indents and highlighting for jsx files, and it does this by setting all `.jsx` files to `javascript.jsx` which is the indented feature. The **problem** is that Oni does not detect `javascript.jsx` as `javascript`, thus no autocomplete.\r\n\r\nA simple fix would be, like you said, to simply add `javascript.jsx` to the autocompletion list, since I doubt there's a common pattern.\r\n\r\nAlso, am on the latest version and did try it on the master branch as well.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342640139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345444196", "body": "In my developer tools, I am getting this error:\r\n```\r\nError: No content available.\r\n    at TypeScriptServerHost._parseResponse (/home/metamist/apps/oni/resources/app/vim/core/oni-plugin-typescript/lib/TypeScriptServerHost.js:239:49)\r\n    at Interface.<anonymous> (/home/metamist/apps/oni/resources/app/vim/core/oni-plugin-typescript/lib/TypeScriptServerHost.js:60:23)\r\n    at emitOne (events.js:115:13)\r\n    at Interface.emit (events.js:210:7)\r\n    at Interface._onLine (readline.js:278:10)\r\n    at Interface._normalWrite (readline.js:420:12)\r\n    at Socket.ondata (readline.js:138:10)\r\n    at emitOne (events.js:115:13)\r\n    at Socket.emit (events.js:210:7)\r\n    at addChunk (_stream_readable.js:252:12)\r\n```\r\nIs it trying to use typescript inside `javascript.jsx` files?\r\nIt would be great if `javascript.jsx` just defaulted to `javascript` language server, because they are practically identical except for React specific code.\r\n\r\n----\r\nEdit: Seems like it is working now. Didn't change anything, just noticed it started working. If it happens again I'll try to find out what causes it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345444196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347013561", "body": "I don't like the built in ripgrep because it doesn't provide the same fuzzy search as CtrlP (order of letters doesn't matter in the default one, but does in CtrlP)\r\nThat's why I want to switch it out for fzf or something else, since I absolutely can't use the default one.\r\nCurrently I've just unbound the ctrl+p command to use vim-ctrlp instead, which works but I would like the actual gui.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347013561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347021629", "body": "This image demonstrates my issue with the default implementation:\r\n![](https://i.imgur.com/Sw4hSsp.png)\r\nIt makes no sense to me, at all. Why is it matching the letters unordered?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347021629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hassec": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/336741037", "body": "Hi @bryphe, has there been any more thought about adding this feature?  \r\nI saw #299 attempted this but was closed.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336741037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336878018", "body": "Hi guys,\r\n\r\nI would actually like expand on this remote nvim  idea. I think that this is a really great opportunity to enable true remote development.  \r\n\r\nImagine the scenario which many of us probably share, where you mostly work/compile code on a powerful remote server/cluster. \r\n\r\nTo really have nice c++ autocompletion you editor will have to know about all the dependencies and the whole stack. Having all of this locally on my computer just isn't efficient and a huge burden.\r\n\r\nAs far as I know, there is not a single truly effective solution for an effortless workflow. \r\nI currently just run neovim with plugins serverside, which is great, but I would love to have a more modern UI (e.g tooltips, hover, peak to definition....).\r\n\r\nAllowing oni to connect to a remote neovim would be a first step in the right direction of allowing you to edit your code from any computer no matter how powerful. \r\nOnce that works, one would need to think about plugins...  Like I said before the autocompletion should probably run on the host since that's where the code and CPU performance lies. But there might be extensions that make more sense locally. \r\n\r\nSo allowing a plugin to run either on the client or server would probably be the best.\r\n\r\nSorry for the long rambling, just figured I would leave this here.\r\nIf this is something you guys would be open to investigate I would, of course, love to help!\r\n\r\nCheers \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/336878018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337511284", "body": "Hi @bryphe, thanks for getting back to me :)\r\n\r\nHave to admit that the idea of:\r\n> This also would open up some interesting concurrency or pairing scenarios - like maybe I want to invite you to work on a file with me, and I could share out a transient link where you could edit with me in the browser.\r\n\r\nis something that I actually didn't really think about yet, but I love it. \r\nOf course like you stated this would mean having something like an oni-client and oni-server. Intuitively this seems like it would be quite a big change, no?\r\n\r\nI would definitely be interested in trying something along these lines but want to be honest upfront that I would most certainly need some guidance. :D \r\nI tried to get a feel of how everything in oni works from an architectural and data flow kind of way but haven't been too successful.\r\nIs there maybe any hidden doc that I missed?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/337511284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "FredChores": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/340227064", "body": "That did it, thanks.  I'll leave this open since it's an improvement than can be made.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/340227064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "meain": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/342561177", "body": "@bryphe Python part of `:CheckHealth`, seems fine to me. `Nvim` finds it even without seting.\r\n```\r\n## Python 2 provider (optional)\r\n  - INFO: `g:python_host_prog` is not set.  Searching for python2 in the environment.\r\n  - SUCCESS: pyenv found: \"/usr/local/Cellar/pyenv/1.1.5/libexec/pyenv\"\r\n  - WARNING: pyenv is not set up optimally.\r\n    - SUGGESTIONS:\r\n      - Create a virtualenv specifically for Neovim using pyenv, and set `g:python_host_prog`.  This will avoid the need to install Neovim's Python module in each version/virtualenv.\r\n  - INFO: Executable: /Library/Frameworks/Python.framework/Versions/2.7/bin/python2\r\n  - INFO: Python2 version: 2.7.13\r\n  - INFO: python2-neovim version: 0.1.13\r\n  - SUCCESS: Latest python2-neovim is installed: 0.1.13\r\n\r\n## Python 3 provider (optional)\r\n  - INFO: `g:python3_host_prog` is not set.  Searching for python3 in the environment.\r\n  - SUCCESS: pyenv found: \"/usr/local/Cellar/pyenv/1.1.5/libexec/pyenv\"\r\n  - WARNING: pyenv is not set up optimally.\r\n    - SUGGESTIONS:\r\n      - Create a virtualenv specifically for Neovim using pyenv, and set `g:python3_host_prog`.  This will avoid the need to install Neovim's Python module in each version/virtualenv.\r\n  - INFO: Executable: /usr/local/bin/python3\r\n  - INFO: Python3 version: 3.6.3\r\n  - INFO: python3-neovim version: 0.1.13\r\n  - SUCCESS: Latest python3-neovim is installed: 0.1.13\r\n\r\n```\n\nI had this issue even when I had no config.js", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342561177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343887825", "body": "@juancampa @hkrutzer Cool, both works for me! Thanks \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343887825/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345174368", "body": "Thank you.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345174368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dimascyriaco": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/342866695", "body": "`Ctrl+Shift+P` don't do anything. But there is some erros in the console:\r\n\r\n```\r\n/home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:26 Starting Neovim - process: 2030\r\n/home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:1 NeovimInstance: Neovim started\r\n/home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44 Neovim version reported as 0.1.7\r\n/home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44 Uncaught (in promise) TypeError: Cannot read property 'parentElement' of undefined\r\n    at _neovimInstance.on (file:///home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44:33392)\r\n    at emitOne (events.js:115:13)\r\n    at _.emit (events.js:210:7)\r\n    at _attachUI.then (file:///home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44:54835)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:188:7)\r\n/home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44 Uncaught (in promise) TypeError: Cannot read property 'parentElement' of undefined\r\n    at _neovimInstance.on (file:///home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44:33392)\r\n    at emitOne (events.js:115:13)\r\n    at _.emit (events.js:210:7)\r\n    at _attachUI.then (file:///home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44:54835)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:188:7)\r\n/home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44 Uncaught (in promise) TypeError: Cannot read property 'parentElement' of undefined\r\n    at _neovimInstance.on (file:///home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44:33392)\r\n    at emitOne (events.js:115:13)\r\n    at _.emit (events.js:210:7)\r\n    at _attachUI.then (file:///home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:44:54835)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:188:7)\r\n/home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:1 No supported language\r\nt.error @ /home/dimas/Downloads/Oni-0.2.14-linux/resources/app/lib/browser/bundle.js:1\r\nindex.html:1 Uncaught (in promise) TypeError: Cannot read property 'parentElement' of undefined\r\n    at _neovimInstance.on (bundle.js:44)\r\n    at emitOne (events.js:115)\r\n    at _.emit (events.js:210)\r\n    at _attachUI.then (bundle.js:44)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:188)\r\n```\r\n\r\nI'll try to change the options and build it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342866695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342878372", "body": "I've build from source (with, and without changing Accelerated2dCanvas) and in both cases it appears to render everything except the text:\r\n\r\n![oni-black-screen](https://user-images.githubusercontent.com/65256/32561524-8e89d9cc-c493-11e7-9280-ccb140baea63.png)\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342878372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342885949", "body": "That was it. I've updated neovim and it's working fine now!\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/342885949/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "topher96": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/343039486", "body": "Thanks!", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343039486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sittim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/343196641", "body": "OK, so the ~ directory is in `C:\\Users\\\"your user name\\\"`  this is confusing in Windows.  Once `.oni` directory is created under the home folder, it works fine.  Furthermore, in windows, you cannot create a dotfile in the explorer.  ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343196641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343247284", "body": "Understand, but it does not need to support sequenced input, why not just pass the actual command to neovim?  This may require some though on how the mappings fit together, but maybe build a dedicated configuration such as `oni.input.nvimbind` that would trigger passing the command to neovim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343247284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343258297", "body": "OK, makes sense, no I do not need the functionality today and temporary solutions usually spell trouble, so lets close it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343258297/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dasosjt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/343845343", "body": "Could be configured by a little config file with other bindings/shortcuts\n\nOn Nov 12, 2017 11:25 PM, \"Ahmed Eid\" <notifications@github.com> wrote:\n\n> Most if not all macOS applications terminate with [Command + Q].\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/onivim/oni/issues/928>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AMm5x19DcJcqmOSPxnAKsGV3qvi0S5IUks5s19K2gaJpZM4QbQl3>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343845343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "juancampa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/343859602", "body": "I'm also getting the same error. It seems to happen whenever the cursor moves (hjkl, o, O, etc). FWIW I managed to run HealthCheck in Oni and this is what I got:\r\n\r\n```\r\nhealth#nvim#check\r\n========================================================================\r\n## Configuration\r\n  - OK: no issues found\r\n\r\n## Performance\r\n  - OK: Build type: Release\r\n\r\n## Remote Plugins\r\n  - OK: Up to date\r\n\r\n## terminal\r\n  - ERROR: command failed: infocmp -L\r\n    infocmp: environment variable TERM not set\r\n  - INFO: $XTERM_VERSION=''\r\n  - INFO: $VTE_VERSION=''\r\n  - INFO: $TERM_PROGRAM=''\r\n  - INFO: $COLORTERM=''\r\n  - INFO: $SSH_TTY=''\r\n\r\nhealth#provider#check\r\n========================================================================\r\n## Clipboard (optional)\r\n  - OK: Clipboard tool found: pbcopy\r\n\r\n## Python 2 provider (optional)\r\n  - WARNING: No Python interpreter was found with the neovim module.  Using the first available for diagnostics.\r\n  - WARNING: provider/pythonx: Could not load Python 2:\r\n    python2 not found in search path or not executable.\r\n    /usr/bin/python2.7 does not have the \"neovim\" module. :help |provider-python|\r\n    /usr/bin/python2.6 does not have the \"neovim\" module. :help |provider-python|\r\n    /usr/bin/python does not have the \"neovim\" module. :help |provider-python|\r\n  - ERROR: Python provider error\r\n    - ADVICE:\r\n      - provider/pythonx: Could not load Python 2:\r\n          python2 not found in search path or not executable.\r\n          /usr/bin/python2.7 does not have the \"neovim\" module. :help |provider-python|\r\n          /usr/bin/python2.6 does not have the \"neovim\" module. :help |provider-python|\r\n          /usr/bin/python does not have the \"neovim\" module. :help |provider-python|\r\n  - INFO: Executable: Not found\r\n\r\n## Python 3 provider (optional)\r\n  - INFO: Disabled. g:loaded_python3_provider=1\r\n\r\n## Ruby provider (optional)\r\n  - INFO: Ruby: ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\r\n  - WARNING: Missing \"neovim\" gem.\r\n    - ADVICE:\r\n      - Run in shell: gem install neovim\r\n      - Is the gem bin directory in $PATH? Check `gem environment`.\r\n      - If you are using rvm/rbenv/chruby, try \"rehashing\".\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343859602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343864161", "body": "I found a work-around. Seems like a problem with the `PATH` environment variable so Neovim can't find `python3`. Oni is executed with this value for `PATH`:\r\n\r\n```\r\n:echo $PATH\r\n/usr/bin:/bin:/usr/sbin/sbin\r\n```\r\n\r\nso if you change it to include the path to `python3` the problem goes away. In my case I just used this command from a terminal:\r\n\r\n```\r\nlaunchctl setenv PATH $PATH\r\n```\r\n\r\nAnd problem solved. Not sure what the long term solution should be though", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343864161/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "i-am-cjc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/343871239", "body": "Thanks for the response to this. Apologies for being silent I was away from the internet for a while. Just installed the latest build and I am getting no reports from Sophos now. ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343871239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hkrutzer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/343882953", "body": "Setting my env with launchctl did not work for me. I launched Oni from my shell with `open -a \"Oni\"` which worked.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/343882953/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ErickChacon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/344196297", "body": "Great, thank you so much for the fix.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344196297/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Shou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/344538847", "body": "You can also make the tabs shrink Chrome-style with Flexbox as a first measure before scrolling kicks in. I'd be glad to submit a PR if you're happy with the idea.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344538847/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tphecca": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/344995949", "body": "The purpose of `teletype-client` is for cross-editor support for Teletype portals (only implemented in Atom as of yet). This is an easy and secure alternative to services like Cloud9 or Floobits, both of them requiring payment for private collaboration, and repositories might not be stored securely. Being similar to those services, Teletype allows multiple people working on different files or different cursors in the same file at once. As far as I know, SSH would only allow a single cursor working on one file at once. This would also require all participants to be using Oni/Nvim specifically, while Teletype can work across different editors.\r\n\r\nI've been searching for a long time for alternatives to those paid services which I can self-host, or use in some other decentralized manner. Teletype seems to be the best solution, and it was only released very recently. I'd personally like to see `teletype-client` implemented as a plugin for upstream Neovim so that all GUI frontends (or those who prefer no GUI frontend) can use it.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/344995949/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bpierce1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/345111681", "body": "Yes that was an example, but I see it on all filetypes. But you're right - I currently don't have a language server. Is there a way to disable the need for the language server so that the CPU utilization isn't so high?\r\n\r\nBy the way, I noticed the spinning began in 0.2.15, and isn't there in 0.2.14.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345111681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hkupty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/345285924", "body": "Please refrain from adding any kind of remap, specially directly in VimL.\r\n\r\nEditor options should be toggleable. Specially this one, which is very intrusive.\r\n\r\n`<esc>` can be a valid key for terminal applications (and this is precisely why it wasn't adopted as a default by the neovim team).\r\n\r\nI strongly advise you to implement such bindings as options toggleable through oni config. Now, to circumvent this undesired behavior I (and probably other people) must undo what this PR does in my config.\r\n\r\nWhile it is pretty simple for me to do, it is not desirable that I must edit my `init.vim` in order to properly use the gui.\r\n\r\nDon't get me wrong, I enjoy using oni. It is a beautiful and fast GUI, but there must be a clean separation of concerns.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345285924/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345755540", "body": "This is great!\r\n\r\nThanks for opening this issue and the discussion. I truly value software that is community-driven. You're doing I good job. I feared that my comments could be misinterpreted.\r\n\r\nHaving that said, I agree with @badosu's lists. I'd add that core settings should probably overwrite user config (unless explicitly disabled), while the 'sensible' config should be set unless explicitly set by the user (probably 'if different from default').\r\n\r\nWhile that seems difficult to identify and set, a simpler approach would be:\r\n* core is on by default and has a flag to disable;\r\n* sensible is on by default and has a different flag to manage it.\r\n\r\nAs for the other features, here are my two cents:\r\n* When defining keybindings, there should be only one way to do it, regardless of setting a GUI or a neovim behavior:\r\n  * The reason for that is one will only remap keys through oni for things that matter on a GUI-oriented workflow;\r\n  * Setting a mapping on `init.vim` would be a global mapping while through `oni` would be GUI-only.\r\n* Every `oni` feature should be individually toggleable:\r\n  * Language server protocol, for instance, that can be  managed both via oni and init.vim;\r\n  * Most features, however, should be on by default.\r\n* Ideally, every `init.vim` config/command could be set through oni:\r\n  * A nice DSL would make things saner than tinkering with `VimL`;\r\n    * A DSL would also embrace the first bullet, making translation to `VimL` transparent.\r\n  * This could potentially lower the initial complexity one faces when starting to use vim/neovim.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345755540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349633398", "body": "Just a tip: https://statuscode.ch/2017/11/from-markdown-to-rce-in-atom/", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349633398/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "allyraza": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/345530828", "body": "that works I think I can close this", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345530828/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345530881", "body": "also when you try and delete a buffer the tab anchor does not go away", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345530881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345530974", "body": "I am sorry about this I think it partially fixes the problem", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/345530974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "felmab": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/347046583", "body": "I installed felixfbecker/php-language-server and added this configuration:\r\n<pre>\r\n`\"language.php.languageServer\": {\r\n        \"command\": \"php\",\r\n        \"arguments\": [\"/path/to/home/.composer/vendor/felixfbecker/language-server/bin/php-language-server.php\"],`\r\n</pre>\r\nWhen I open a PHP file with oni, there's a lightning sign in the status bar, and a language server process is launched, however nothing seems to happen: no completion, impossible to go to definition... What went wrong?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/347046583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348458720", "body": "Actually, I could not make it work with the string form. Apparently it does make requests to the language server, either there is no answer or Oni cannot deal with it... I do not know how one is supposed to debug a  language server, though.\r\n\r\n[1512123026383.log](https://github.com/onivim/oni/files/1521210/1512123026383.log)\r\n[1512123494432.log](https://github.com/onivim/oni/files/1521211/1512123494432.log)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348458720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Sydney-o9": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/348130670", "body": "@bryphe Awesome IDE(a) and we cannot wait to have PHP running with it. How can we help, what can we do to get `php` language support? Currently using just neovim but the features provided by oni is exactly what one wants.. Beautiful GUI with the power of vim/neovim..\r\n\r\nWhen do you think we will have the chance to run php lang with it?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348130670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ShaneDelmore": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/348671210", "body": "Isn\u2019t chorded jk and jj repeated?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348671210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "stroiman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/348800879", "body": "Hi @bryphe \r\n\r\nI'm running on OS-X - and yes, that is the version of Fira Code I have installed.\r\n\r\nHowever, I managed to find a workaround. I used the filename for the specific typeface, so, e.g. \"Fira Code Light\" is in the file \"FiraCode-Light.ttf\". So I got it to work by changing the setting to:\r\n\r\n```\r\n\"editor.fontFamily\": \"FiraCode-Light\"\r\n```", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/348800879/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351321412", "body": "I tried updating the wiki, don't know if it is clearer :)", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351321412/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "duanjun": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/349188465", "body": "yes\uff0c I want a fullscreen just likes terminal does  \uff0cso i think title should be configurable ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349188465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "muream": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/349459869", "body": "I was opening Oni from the Applications menu, I just tried from the command line (no arguments) and it didn't work either.\r\n\r\nHere's what nvim --version gives me:\r\n```\r\nNVIM v0.2.2\r\nBuild type: Release\r\nLuaJIT 2.0.5\r\nCompilation: /usr/bin/cc -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt -Wconversion -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -O2 -DNDEBUG -DMIN_LOG_LEVEL=3 -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wimplicit-fallthrough -Wvla -fstack-protector-strong -fdiagnostics-color=auto -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -I/build/neovim/src/build/config -I/build/neovim/src/neovim-0.2.2/src -I/usr/include -I/usr/include -I/usr/include -I/usr/include -I/usr/include -I/usr/include -I/usr/include -I/build/neovim/src/build/src/nvim/auto -I/build/neovim/src/build/include\r\nCompiled by builduser\r\n\r\nFeatures: +acl +iconv +jemalloc +tui \r\nSee \":help feature-compile\"\r\n\r\n   system vimrc file: \"$VIM/sysinit.vim\"\r\n  fall-back for $VIM: \"/usr/share/nvim\"\r\n\r\nRun :checkhealth for more info\r\n```\r\n\r\nWould it help you if I tried to build oni from source?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349459869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349591749", "body": "Okay, I'll try tomorrow evening! I can't before that.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349591749/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DemonCloud": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/349837945", "body": "@badosu  Thanks~ ", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349837945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "vbauerster": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/349883542", "body": "I used latest release (0.2.18). Thanks for recommendations.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/349883542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mxstbr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/351663584", "body": "Is there any update on Flow support?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/351663584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nyronium": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/352173830", "body": "Just for completeness (as this is not a oni related problem):\r\nI took a quick look at how node.js and other languages do JIT.\r\nIt somehow makes sense that NX is disabled, but it can be done with NX enabled.\r\n\r\nJava for example has the NX bit set and also uses a JIT compiler. They solve it differently by representing the java byte code as an internal structure. When JIT is needed, these pointers get replaced and point to structures which do not hold java bytecode but the corresponding machine code.\r\n\r\nAnother way i stumbled across was to `mmap` a memory region just for the JIT executables and calling `mprotect` on it to allow writing and execution. This way the rest of the code is still NX, which is great. In theory one could even alternate between `R-X` and `RW-` modes but I haven't found any resources on it.\r\n\r\nNevertheless this is not an oni problem.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352173830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bruchmann": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/352229408", "body": "There\u2019s also [electron-link](https://www.npmjs.com/package/electron-link) that might help with [improving startup time](http://blog.atom.io/2017/04/18/improving-startup-time.html).\r\n\r\n> electron-link is a node module that takes a JavaScript file (typically the entry point of an application) and a list of modules that need to be required lazily (see Atom's build scripts for an example). Then, starting from that file, it traverses the entire require graph and replaces all the forbidden require calls in each file with a function that will be called at runtime. The output is a single script containing the code for all the modules reachable from the entry point. This file can be then supplied to mksnapshot to generate a snapshot blob.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/352229408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MaskRay": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/onivim/oni/issues/comments/353264618", "body": "FYI\r\nSee https://github.com/autozimu/LanguageClient-neovim/wiki/cquery \r\n`\"resourceDirectory\"` is auto detected and can be removed now.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/issues/comments/353264618/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "steveukx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166388996", "body": "Following up from your issue https://github.com/steveukx/git-js/issues/241 - this block should be equivalent of using:\r\n\r\n```\r\nstatus = await project.diffSummary();\r\n```\r\n\r\nDo you find that the `status` is an instance of the `simple-git` object rather than an instance of `DiffSummary` when run this way?", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166388996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166549316", "body": "That is strange - is it certain that the library is included as `require('simple-git/promise')` ? if it's included as `require('simple-git')` you would get the `simple-git` object back to chain it on to additional commands.", "reactions": {"url": "https://api.github.com/repos/onivim/oni/pulls/comments/166549316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}