{"_default": {"1": {"laanwj": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12219", "title": "More granular net logging", "body": "#11583 moved many network logging messages to the `net` category, including the version messages for new connections.\r\n\r\nI think this was a good idea in itself, however this means that the only way to get information about connections and abnormal things happening is to enable *all* network logging. This includes every single message and transaction, bogs down performance and fills up the disk quickly.\r\n\r\nI'd like a category for just low-traffic network logging.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898f560b55aba2070f188b0223ef2beefcdede8b", "message": "Merge #12206: qa: Sync with validationinterface queue in sync_mempools\n\nfa1e69e qa: Sync with validationinterface queue in sync_mempools (MarcoFalke)\n\nPull request description:\n\n  Commit e545dedf72bff2bd41c93c93eb576929fce37112 moved `TransactionAddedToMempool` to the background scheduler thread. Thus, adding a transaction to the mempool will no longer add it to the wallet immediately. Functional tests, that `sync_mempools` and then call into wallet rpcs will race against the scheduler thread.\n\n  Fix that race by flushing the scheduler queue.\n\n  Fixes #12205; Fixes #12171;\n  References #9584;\n\nTree-SHA512: 14d99cff9c4756de9fad412f04e6d8e25bb9a0938f24ed8348de79df5b4ee67763dac5214b1a69e77e60787d81ee642976d1482b1b5637edfc4892a238ed22af"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17180fa608100ce1aab3df74c9db17c342c0380d", "message": "Merge #12210: wallet: Deprecate addwitnessaddress\n\ncdf3e03 wallet: Deprecate addwitnessaddress (Wladimir J. van der Laan)\n\nPull request description:\n\n  Now that segwit is natively supported by the wallet, deprecate the hack `addwitnessaddress`.\n\nTree-SHA512: f33b1c33d200fa8f1a0fba424b30e9c2a78147cde8bb0a3fd41194b77980454cddfb23da256cd6fe78726e87161deaa23357d0764e74c3eb83177cc518afa49c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdf3e03a723b1a0242199672878caf1543ba8124", "message": "wallet: Deprecate addwitnessaddress\n\nNow that segwit is natively supported by the wallet, deprecate the hack `addwitnessaddress`."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7978be899646194b6abc5b34a7f6a3311490033", "message": "Merge #12101: Clamp walletpassphrase timeout to 2^30 seconds and check its bounds\n\n134cdc7 Test walletpassphrase timeout bounds and clamping (Andrew Chow)\n0b63e3c Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds (Andrew Chow)\n\nPull request description:\n\n  Fixes #12100\n\n  Makes the timeout be clamped to 2^30 seconds to avoid the issue with sign flipping with large timeout values and thus relocking the wallet instantly. Unlocking for at most ~34 years should be sufficient.\n\n  Also checks that the timeout is not negative to avoid instant relocks.\n\nTree-SHA512: 426922f08c54e323d259e25dcdbebc2cd560708a65111ce6051493a7e7c61e79d9da1ea4026cc0d68807d728f5d7c0d7c58168c6ef4167b94cf6c2877af88794"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adce1de9a6ce5b41c4117b62f705bca53bf97216", "message": "Merge #12198: rpc: Add deprecation error for `getinfo`\n\n49e5f3f rpc: Add deprecation error for `getinfo` (Wladimir J. van der Laan)\n\nPull request description:\n\n  Add a short informative deprecation message when users use `getinfo`, that points them to the new calls\n   here to get the different information fields.\n  This is meant to be temporary, for one release only.\n\nTree-SHA512: 4fccd8853762d0740d051d9e74cdea5ad6f8d5c0ba67d69e8dd2ac8a1538d8270c1a1fab755d9f052ff3b3677753b09138c8c5ca0bc92d156de90413cd5c1814"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e5f3ff7e940b8da7d9e7252d2b1e27bd192ae4", "message": "rpc: Add deprecation error for `getinfo`\n\nAdd a short informative deprecation message when users use `getinfo`,\nthat points them to the new calls where to get the different information fields."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66e3af709dd444b2d85e15c56f4608c700ff82ee", "message": "Merge #11904: Add a lock to the wallet directory\n\n2f3bd47 Abstract directory locking into util.cpp (MeshCollider)\n5260a4a Make .walletlock distinct from .lock (MeshCollider)\n64226de Generalise walletdir lock error message for correctness (MeshCollider)\nc9ed4bd Add a test for wallet directory locking (MeshCollider)\ne60cb99 Add a lock to the wallet directory (MeshCollider)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/11888, needs a 0.16 milestone\n\n  Also adds a test that the lock works.\n\n  https://github.com/bitcoin/bitcoin/pull/11687 will probably rework this to a per-wallet lock instead of just the walletdir, but this fixes the current issue\n\nTree-SHA512: 98e52d67f820e3b8f919cf361ffbb7d928f1bd67603e0ed26c5076ea02d9b3a90c3535ddf7329f3b88171396fa28dd3c87adab3577a8a217bd1e4247bda99138"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc91b7699732efc20ac1526383515c944b66d70", "message": "Merge #12173: [Qt] Use flexible font size for QRCode image address\n\n59f9e2a Use flexible font size for QRCode image address (Jonas Schnelli)\n\nPull request description:\n\n  Bech32 addresses are currently cut off in the QRCode image in the GUI receive tab.\n  This adds a simple font size calculation logic that \"must\" (down to 4pt) fix into the given image width.\n\n  Examples OSX HiDPI:\n  <img width=\"332\" alt=\"bildschirmfoto 2018-01-12 um 11 25 40\" src=\"https://user-images.githubusercontent.com/178464/34896144-c0c65d76-f78c-11e7-93e1-94dc8e203269.png\">\n  <img width=\"322\" alt=\"bildschirmfoto 2018-01-12 um 11 25 46\" src=\"https://user-images.githubusercontent.com/178464/34896145-c0edfe1c-f78c-11e7-8c09-c15155e2160e.png\">\n\n  Examples Ubuntu non HIDPI:\n  <img width=\"314\" alt=\"bildschirmfoto 2018-01-12 um 11 27 51\" src=\"https://user-images.githubusercontent.com/178464/34896151-c88347f4-f78c-11e7-8a03-df8049dcfed6.png\">\n  <img width=\"322\" alt=\"bildschirmfoto 2018-01-12 um 11 27 42\" src=\"https://user-images.githubusercontent.com/178464/34896152-c8bb881c-f78c-11e7-89d2-6f04ec608a19.png\">\n\nTree-SHA512: d749763fb748b146f77fd8d88fb7d29b07a46cde0b0f303a4006ae9cc3521b3c2e8ab43b828e243514109379898b198552e17b8f316c5a869b0cc8246b054b86"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44080a90a29292df96e92f22242785c5040000a1", "message": "Merge #12118: Sort mempool by min(feerate, ancestor_feerate)\n\n0a22a52 Use mempool's ancestor sort in transaction selection (Suhas Daftuar)\n7abfa53 Add test for new ancestor feerate sort behavior (Suhas Daftuar)\n9a51319 Sort mempool by min(feerate, ancestor_feerate) (Suhas Daftuar)\n6773f92 Refactor CompareTxMemPoolEntryByDescendantScore (Suhas Daftuar)\n\nPull request description:\n\n  This more closely approximates the desirability of a given transaction for\n  mining, and should result in less re-sorting when transactions get removed from\n  the mempool after being mined.\n\n  I measured this as approximately a 5% speedup in removeForBlock.\n\nTree-SHA512: ffa36b567c5dfe3e8908c545a459b6a5ec0de26e7dc81b1050dd235cac9046564b4409a3f8c5ba97bd8b30526e8fec8f78480a912e317979467f32305c3dd37b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db16ec82793beb941a7db2750e774246d7fbc21", "message": "Merge #11796: [tests] Functional test naming convention\n\n5fecd84 [tests] Remove redundant import in blocktools.py test (Anthony Towns)\n9b20bb4 [tests] Check tests conform to naming convention (Anthony Towns)\n7250b4e [tests] README.md nit fixes (Anthony Towns)\n82b2712 [tests] move witness util functions to blocktools.py (John Newbery)\n1e10854 [tests] [docs] update README for new test naming scheme (John Newbery)\n\nPull request description:\n\n  Splitting #11774 into two parts -- this part updates the README with the proposed naming convention, and adds some checks to test_runner.py that the number of tests violating the naming convention doesn't increase too much. Idea is this part of the change should not introduce merge conflicts or require much rebasing, so reviews of the complicated bits won't become invalidated too often; while the second part will just be file renames, which will require regular rebasing and will introduce merge conflicts with pending PRs, but can be merged later, and should also be much easier to review, since it will only include relatively trivial changes.\n\nTree-SHA512: b96557d41714addbbfe2aed62fb5a48639eaeb1eb3aba30ac1b3a86bb3cb8d796c6247f9c414c4695c4bf54c0ec9968ac88e2f88fb62483bc1a2f89368f7fc80"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9501dc27b336fc20adb0c367e0904b57bd507f51", "message": "Merge #12127: Remove unused mempool index\n\n8e617e3 Remove unused mempool index (Suhas Daftuar)\n\nPull request description:\n\n  We haven't used the \"mining_score\" index since 0.12, so remove it.\n\nTree-SHA512: ae37b8663194986eaeecfc2bbeca7ecb4ae6f0d8384515fa218cbc939a580d4b9f7f997c5297c3f1b3c3a0651edb092f373ac9a4808aaec30d38cb99d5f3ed70"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12218", "title": "net: Move misbehaving logging to net logging category", "body": "This moves the error messages for misbehavior (when available) into the line that reports the misbehavior, as well as moves the logging to the `net` category.\r\n\r\nThis is a continuation of #11583 and avoids serious-looking errors due to misbehaving peers. As it is impossible to correlate the `peer=X` numbers to specific incoming connections now without enabling the `net` category, it doesn't really help to see these messages by default.\r\n\r\nTo do this, Misbehaving() gains an optional `message` argument.\r\n\r\nE.g. change:\r\n\r\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED\r\n    2018-01-18 16:02:27 ERROR: non-continuous headers sequence\r\n\r\nto\r\n\r\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED: non-continuous headers sequence\r\n\r\nWhen there is a category for \"important\" net messages (see #12219 ), we should move it there.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12197", "title": "Log debug build status and warn when running benchmarks", "body": "Log whether the starting instance of bitcoin core is a debug or release build (--enable-debug).\r\n\r\nAlso warn when running the benchmarks with a debug build, to prevent mistakes comparing debug to non-debug results.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81895028", "body": "maybe add 'or a distribution package such as PPA'\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81895028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87372615", "body": "Indeed. The discussion belongs there, and so does the documentation. Maybe refer to the instructions for reporting security issues on the contact page: https://bitcoincore.org/en/contact/ instead of mentioning the address directly?\nIf we then happen to have GPG set up, it can be mentioned there without having to put everything into this template.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87372615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87394637", "body": "\"I wanted to do so first, but the URLs are fragile and can change\" so are email addresses.\nIt's not impossible to update this again, it just should be rare.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87394637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/10507536", "body": "Please remove this from the patch.\nYou can define your own local git ignores in `.git/info/exclude` within the repository.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/10507536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42482626", "body": "> I'm very open to removing it (or other parts), but the precedence was basically the ignore of the Qt Creator project files.\n\nYes, those should go too (also as we haven't supported qt creator builds since 0.9).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42482626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851409", "body": "In closed-source environments in which everyone uses the same IDE that is common. In open source software, where everyone uses their own editors/IDE/tools, it is less common. Only you know what files your editor produces and this may change from version to version.\nThe canonical way to do this is thus to create your local gitignore. Add this to `~/.gitconfig`:\n\n```\n[core]\n    excludesfile = /home/.../.gitignore_global\n```\n\nThen put your favourite tool's excrement filenames in that file :-)\nAnother option is to use per-project `.git/info/exclude`. These are not committed either.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851979", "body": "See #6878\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "nQuantPlatforms": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12215", "title": "Installation and data directory lock issues", "body": "I'm using Raspbian Stretch and just installed the bitcoin to setup full node using following command\r\nsudo apt-get install bitcoin-qt bitcoind\r\n\r\n1. First I was not displayed with start screen to choose location for data directory as mentioned here \r\nhttps://bitcoin.org/en/full-node#ubuntu-1610\r\n2. I have mounted FTP drive folder where I want my data directory to be pointed. \r\n3. So I always have to start bitcoin from terminal with datadir option otherwise it starts downloading into default location and I cant download entire blockchain on my pi sdcard.\r\n4. Unfortunately that doesn't work either. it always errors out saying can not obtain lock may be this and that using it.\r\n\r\nIssues:\r\n1. I assume its permission issue, but I can manually create, delete update file in that mounted location so why bitcoin app can not? is there special command it need to start with ? And no there is no other program using it or running that has it locked.\r\n\r\n2. What option is requires it to start with to show data directory location screen at start \r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Linrono": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12209", "title": "RPCAUTH doesn's seem to be recognized by the client.", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nI was trying to set up a Lightning node and ran into issues with user authentication with cookies. So, as a work around, I ended up setting up a rpcuser and rpcpassword. Looking at my debug.log, I saw the line saying that those options have been superseded by rpcauth since 2015. I looked up how to do this and found and downloaded the rpcuser.py script and ran it and I got a line to put into my config file. It looked like this.\r\n\r\n`rpcauth=linrono:8512a641e39573384c5c321d5d1527a$ab5536ee2244c70ad2efe8d68bd50e3495a7a48656794a094f5b1a2a5a874a4d`\r\n\r\nThis is not what I am using, but what I have was generated the same way. After saving this to my config file and restarting my client, I checked my debug log file and found this line. \r\n\r\n`No rpcpassword set - using random cookie authentication`\r\n\r\nI double checked and there was, indeed, a cookie file generated. \r\n<!--- What behavior did you expect? -->\r\nI thought the rpcauth was replacing the rpcuser and rpcpassword authentication.\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nNo matter what I do, I cannot seem to get the node to accept the rpcauth line in my config file. I did try to run the client with the rpcauth as a command line option. This also did not work.\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\nI am using the v0.15.1.0-g7b57bc998f33 client. It is the most up to date version provided by the ArchLinux repositories.\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nI am running ArchLinux and am using a Corei7.\r\n\r\nI'm sorry if this is a known issue or I'm doing something wrong. I did try to search for more information and found comments on this bitcoin Stack Exchange question with the same issue but no resolution. \r\n\r\n`https://bitcoin.stackexchange.com/questions/46782/rpc-cookie-authentication`\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sjors": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12191", "title": "bech32-optimized QR codes", "body": "@sipa said in #11991:\r\n\r\n> I haven't looked at the code, but inside QR codes it's advantageous to use uppercase Bech32 (it will result in a smaller QR encoding).\r\n\r\nIs that still the case when rendered as URI?\r\n\r\nShould amounts be added in a different way?\r\n\r\nWould that involve amending BIP-21?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ac8907ce6ab095b37858d6e96946b59ce1c13f", "message": "[qt] receive tab: bech32 address opt-in checkbox\n\nWhen launched with -adresstype=legacy the checkbox will be hidden."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12216", "title": "scripted-diff: prefix [address|change]type parameters with 'default'", "body": "Making it clear that these parameters can be overridden by individual wallet commands.\r\n\r\nRequesting 0.16 tag, as it's probably not worth changing otherwise.\r\n\r\nThis makes grateful use of the fact that @sipa used an underscore for `address_type` and `change_type` RPC arguments.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12200", "title": "Bind functional test nodes to 127.0.0.1", "body": "Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\r\n\r\nTo test, make an arbitrary whitespace change to `src/bitcoind.cpp` and recompile. This normally resets the firewall's memory.\r\n\r\nEasiest way to reproduce a popup without running the test suite:\r\n\r\n```sh\r\nsrc/bitcoind -regtest -bind=127.0.0.1 # No popup\r\nsrc/bitcoind -regtest # Popup\r\n```\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12152", "title": "[WIP] misc. backwards compatibility tests", "body": "Builds on top of #12134.\r\n\r\nTests:\r\n- [x] v0.16 generated wallets don't work on older versions\r\n- [x] the five SegWit wallet scenario's (including bech32 address)  \r\n\r\nTest framework changes (or: things I'm doing wrong):\r\n- [ ] method to copy wallet\r\n- [ ] method to push and pop wallet backups\r\n- [ ] remember network topology between start and restart\r\n\r\nSuggestions for additional tests welcome. I'll make individual PR's later.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dukeh3": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12186", "title": "Debian folder is for 1.4x and does not work for 15.1", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nThe debian file in contrib does not work with latest build. Also if you try to use the latest in debian stable ( build around 15.1 ) fails too. \r\n\r\n\r\n<!--- What behavior did you expect? -->\r\nBuilding a nice debian package\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\nThe build fails with lost of errors\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nEvery time\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\n15.1 Tag\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nx86 Debian stable\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dooglus": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12179", "title": "\"abandon transaction\" only removed tx from display until client restart", "body": "commit 45cf8a03cb57b8639a8d47323bde46ba22d9eeaf\r\n\r\nI recently made a transaction with too-low fees. I was in a hurry to get it confirmed, so I clicked \"increase transaction fee\" a bunch of times. Each time I clicked it, it added an extra transaction to the transactions tab.\r\n\r\nEventually one of the transactions confirmed, and all the others were marked as \"conflicted\". I right-clicked each of the conflicted transactions in turn and selected \"abandon transaction\". That caused them to disappear from the transactions tab.\r\n\r\nWhen I restarted the client, all the conflicted transactions reappeared. I was hoping they would be gone permanently.\r\n\r\nAm I misunderstanding what \"abandon transaction\" should do, or is it not working correctly?\r\n\r\nEdit: two related points from this experience:\r\n\r\n1) I wanted to double the fee, but \"increase transaction fee\" didn't give me any way to say how much to increase it by, so I had to click it maybe 20 times to get to the fee I wanted.\r\n\r\n2) I was able to select all the conflicted transactions at once, and right-click the group. When I selected \"abandon transaction\" on the group, it only deleted one transaction from the display, not all of them. Why let me select multiple transactions if the right-click menu only operates on one of them anyway?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DrakonAlpha": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12176", "title": "Application crashes when the connected hard disk drive gets disconnected", "body": "Application crashes when the connected hard disk drive gets disconnected. Error message would be ok, but crash ist inacceptable.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jappiecr": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12170", "title": "Bitcoin core doens't respond", "body": "Hi,\r\n\r\nBitcoin core 0.15.1 get's stuck when I try to open program. Most of the time it goes through the update startup rocess oke and then wehen it starts loading it get's stuck.\r\nI looked in the error.log and this is what it says something like:\r\n2018-01-12 12:08:05 LevelDB read failure: IO error: E:\\BT\\chainstate\\101461.ldb: Can't execute because of an error in I/O-device.\r\n\r\n\r\n2018-01-12 12:08:05 IO error: E:\\BT\\chainstate\\101461.ldb: Can't execute because of an error in I/O-device.\r\n\r\nI have the bitcoin folder on external harddrive. It worked fine a couple of weeks ago when I went to update after a couple of months of not connecting. Everything was updated fine and working properly. Then  I wanted to do a little test and opend an online account on Blockchain and transfered a minimal amount as a test. Test went fine but after that I was no longer able to open my Bitcoin Core wallet because of above descibed error.\r\n\r\nCan anybody help?\r\nThanks in advance!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarcoFalke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1e69e52bf8de08b1ce7a774416aa7a8d20068b", "message": "qa: Sync with validationinterface queue in sync_mempools"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad504bf4c302f7a72e0a0e191f3fdbafda7340f", "message": "Merge #12177: trivial: fix address_type help text of getnewaddress and getrawchangeaddress\n\n5f911c5cc2 trivial: fix address_type help text of getnewaddress and getrawchangeaddress (mruddy)\n\nPull request description:\n\n  \"p2sh\" in the help messages should have been \"p2sh-segwit\".\n\n  The messages before this patch:\n\n  `help getnewaddress`\n  \"address_type\"   (string, optional) The address type to use. Options are \"legacy\", \"**p2sh**\", and \"bech32\". Default is set by -addresstype.\n\n  `help getrawchangeaddress`\n  \"address_type\"           (string, optional) The address type to use. Options are \"legacy\", \"**p2sh**\", and \"bech32\". Default is set by -changetype.\n\nTree-SHA512: 6dfc0bebe577995f5521b83a12854045ac3eda4e65c9b92fc581da4ee68ab1218e05af82f2154bb2640a0813c5f79e010cd9e5ada449494c8831b3757bda854c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cf8a03cb57b8639a8d47323bde46ba22d9eeaf", "message": "Merge #12168: Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/)\n\n648bdc8cc0 Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/) (Jan Sarenik)\n\nPull request description:\n\n  http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html\n  http://man7.org/linux/man-pages/man2/fcntl.2.html\n\nTree-SHA512: 82c7e0aba55f34a6fec60bdecb712b65c84422461454f0ae9eed5e1bb31bf585c5a65f49bbdd5a89feb59140a998ad6fcd5573ede123a12b2ba2ff677d95cc2b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7450cdbd89a1c862f4d4d8bf093f8a0b5448f9c", "message": "Merge #11970: Add test coverage for bitcoin-cli multiwallet calls\n\na14dbff39e Allow multiwallet.py to be used with --usecli (Russell Yanofsky)\nf6ade9ce1a [tests] allow tests to be run with --usecli (John Newbery)\nff9a363ff7 TestNodeCLI batch emulation (Russell Yanofsky)\nca9085afc5 Prevent TestNodeCLI.args mixups (Russell Yanofsky)\nfcfb952bca Improve TestNodeCLI output parsing (Russell Yanofsky)\n\nPull request description:\n\n  Lack of test coverage was pointed out by @jnewbery in https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158133900\n\nTree-SHA512: 5f10e31abad11a5edab0da4e2515e39547adb6ab9e55e50427ab2eb7ec9a43d6b896b579b15863e5edc9beee7d8bf1c84d9dabd247be0760a1b9ae39e1e8ee02"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0910cbe4ef31eb95fd76c7c2f820419fe64a3150", "message": "Merge #12082: Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json\n\n18be3ab139 Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json (Chris Stewart)\n\nPull request description:\n\n  We are missing a test vector for SINGLE|ANYONECANPAY inside of tx_valid.json. This addresses the issue #12060\n\nTree-SHA512: e3526113477dbf575c4a844cf489dcfa2c037c6d928af6f97413edc1a8d29cdf2143da96471cdfd3de08bf5ed178117ed67926fd70fd42ca391ac0bb0d08f3fd"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12217", "title": "qa: Add missing syncwithvalidationinterfacequeue to tests", "body": "Fixes intermittent travis failures with those tests caused by a missing flush of mempool txes to the wallet.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12193", "title": "RPC: Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d)", "body": "Rebased version of  #11386 by karel-3d.\r\n\r\nCloses:  #11386", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81920315", "body": "Maybe comment the comments out, so it is not required to delete them?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81920315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87377352", "body": "I think https://bitcoincore.org/en/contact/ will always be the page for contact, even if there is a subsection with a list of gpg keys.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87377352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/150910060", "body": "```vim\r\ns/and are/are/", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/150910060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jonasschnelli": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/062c8b69f4ccae323d675685da8cbfcb7ccd0c55", "message": "Merge #11991: [qt] Receive: checkbox for bech32 address\n\n63ac8907c [qt] receive tab: bech32 address opt-in checkbox (Sjors Provoost)\n\nPull request description:\n\n  <img width=\"647\" alt=\"schermafbeelding 2018-01-12 om 18 34 48\" src=\"https://user-images.githubusercontent.com/10217/34887691-a6a796fe-f7c7-11e7-8b89-87ce07c61ce3.png\">\n\n  Checkbox does what you would expect. Press tab from the amount field to get there.\n\n  It's unchecked by default.\n\n  When launched with `-addresstype=bech32` it's checked by default. When launched with `-addresstype=legacy` it unchecked and disabled.\n\n  The change in `receivecoinsdialog.ui` is smaller than it looks, due to the way git handles XML diffs. I had to add a horizontal spacer to make it look decent, see https://github.com/bitcoin/bitcoin/issues/11950#issuecomment-352870909. This causes column numbers to change in the rest of the grid.\n\n  I recommend testing on at least one other OS than OSX to be on the safe side.\n\nTree-SHA512: ec4b733b796d9a94278a5d8040a69d9574ef50021e68f94f61f2da75d1bb57f39272cbc9f1f7d34f733a19640daf666a23844fcd132f83bfdaf327d9d1d6f105"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59f9e2aaf3fe73961cc02042f929b430fee59f9c", "message": "Use flexible font size for QRCode image address"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196", "title": "Add scantxoutset RPC method", "body": "Alternative to #9152.\r\n\r\nThis takes `<n>` pubkeys and optionally  `<n>` xpubs (together with a definable lookup windows where the default is 0-1000) and looks up common scripts in the UTXO set of all given or derived keys.\r\n\r\nThe output will be an array similar to `listunspent`. That array is compatible with `createrawtransaction` as well as with `signrawtransaction`.\r\n\r\nThis makes it possible to prepare sweeps and have them signed in a secure (cold) space.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MeshCollider": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f3bd47d44634cfc0a4261e64af178407ce2869c", "message": "Abstract directory locking into util.cpp"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5260a4aca1e6c11e1dbca9d3390c0dc739e81204", "message": "Make .walletlock distinct from .lock"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64226de908c76997fadf147342c494ad0662fa43", "message": "Generalise walletdir lock error message for correctness"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ed4bd58cac05b355ab103476ff29ecd10ce263", "message": "Add a test for wallet directory locking"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60cb99c580a602a83856769ad2ac882d3cdfcb5", "message": "Add a lock to the wallet directory"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sdaftuar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a22a52918ad5af6d105b4f5ae9dd6c52199f0e8", "message": "Use mempool's ancestor sort in transaction selection\n\nTransaction selection for mining tracks ancestor feerates that are\nmodified based on transactions that have already been selected.  This\ncommit de-duplicates the code so that the ancestor feerate sorting used\nby the mempool can also be directly applied to the miner."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abfa538b5a4508e0cf0589ae3ac0620b2188912", "message": "Add test for new ancestor feerate sort behavior"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mruddy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f911c5cc2f60859cf3d5553d35c1160bd264cc0", "message": "trivial: fix address_type help text of getnewaddress and getrawchangeaddress"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsarenik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/648bdc8cc09c85748967b86347bbc7825e339d5f", "message": "Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/)\n\nhttp://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html\nhttp://man7.org/linux/man-pages/man2/fcntl.2.html"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "achow101": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/134cdc7cee3da7c554e40ad947a9cdcbb3069f13", "message": "Test walletpassphrase timeout bounds and clamping"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b63e3c7b20ea54930de3ec3955406e4d4737e3c", "message": "Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds\n\nClamps the timeout of walletpassphrase to 2^(30) seconds, which is\n~34 years. Any number greater than that will be forced to be\n2^(30). This avoids the sign flipping problem with large values which\ncan result in a negative time used.\n\nAlso perform bounds checks to ensure that the timeout is positive\nto avoid immediate relocking of the wallet."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12180", "title": "scripted-diff: change kB to kvB, kilobyte to kilovbyte for transaction fee rate things", "body": "Renames kB and kilobyte to kvB and kilovbyte respectively in order to make clear the fee rates are in virtual bytes rather than actual bytes.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "promag": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12213", "title": "Add address type option to addmultisigaddress", "body": "Adds the option `address_type` to `addmultisigaddress` RPC so that `addwitnessaddress` can be avoided to obtain an `p2sh-segwit` or `bech32` multsig address.\r\n\r\nRelated to #12210 as this reduces `addwitnessaddress` usage.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12194", "title": "Add change type option to fundrawtransaction", "body": "Adds a new option `change_type` to `fundrawtransaction` RPC. This is useful to override the node `-changetype` argument.\r\n\r\nThe new option is exclusive to `changeAddress` option, setting both raises a RPC error.\r\n\r\nSee also #11403, #12119.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12153", "title": "Avoid permanent cs_main lock in getblockheader", "body": "Based on #12151, this pull reduces the lock scope in `getblockheader` RPC.\r\n\r\nNote, review last commit only.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12151", "title": "Remove cs_main lock from blockToJSON and blockheaderToJSON", "body": "Motivated by https://github.com/bitcoin/bitcoin/pull/11913#discussion_r157798157, this pull makes `blockToJSON` and `blockheaderToJSON` free of `cs_main` locks.\r\n\r\nLocking `cs_main` was required to access `chainActive` in order to check if the block was in the chain and to retrieve the next block index.\r\n\r\nWith the this approach, `CBlockIndex::GetAncestor()` is used in a way to check if the block belongs to the specified chain tip and, at the same time, get the next block index.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084101", "body": "All of these notes can be inside a comment block:\r\n```\r\n<!---\r\nRemove sections that do not apply.\r\n\r\nThis issue tracker is only ...\r\n\r\nGeneral bitcoin questions ...\r\n\r\n...\r\n--->\r\n```\r\nSo that the user can see it when writing but it won't show. ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084411", "body": "uh, I guess it's what @laanwj suggests above.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084411/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bitspill": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12212", "title": "Trivial: Fix spelling in zapwallettxes test description", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanofsky": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12211", "title": "Avoid potential null dereference in ReceiveCoinsDialog constructor", "body": "Not a bug in practice because current `WalletModel::getDefaultAddressType()` implementation does not dereference its `this` pointer.\r\n\r\nEncountered issue while rebasing #10244 after #11991 was merged.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luke-jr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12208", "title": "GUI: Rephrase Bech32 checkbox texts, and enable it with legacy address default", "body": "- \"Bech32\" isn't very user-friendly; used \"native segwit\" as in #11937.\r\n- You don't spend from addresses.\r\n- No reason to block off Bech32 access with legacy address default.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847047", "body": "My directory is so cluttered that I use \"git status -uno\" ;)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "morcos": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12204", "title": "Fix overly eager BIP30 bypass", "body": "In #6931 we introduced a possible consensus breaking change by misunderstanding how completely BIP 34 obviated the need for BIP 30.  Unfixed, this could break consensus after block height about 1.9M.  Explained in code comment.\r\n\r\nh/t @sdaftuar ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fwolfst": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12192", "title": "Trivial: Update http URL of MIT license to use https", "body": "In two steps, update the links as described in the issue.\r\n\r\nFirst commit: `sed` everything.\r\nSecond commit: Fix whitespace syntactic sugar that got bitter due to different length of URLs.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ericallam": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12189", "title": "[Qt] Display transaction fee with sat/vbyte value in SendCoinsDialog", "body": "Related to issue #11564, this PR designed to provide feedback to the user about their relative transaction fee before they finish broadcasting their tx to the bitcoin network. \r\n\r\nDisplaying the sat/vbyte is useful for knowing how likely their tx will be included in an upcoming block when using public fee estimation tools like https://jochen-hoenicke.de/queue/#24h, https://estimatefee.com, and https://bitcoinfees.earn.com.\r\n\r\nThis updates the SendCoinsDialog to look like this:\r\n\r\n<img width=\"838\" alt=\"screen shot 2018-01-15 at 12 46 14\" src=\"https://user-images.githubusercontent.com/534/34943625-4f0037a6-f9f4-11e7-8a77-49d35df34c76.png\">", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeffrade": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12187", "title": "[Docs] Updating benchmarkmarking.md with an updated sample output", "body": "This PR is just a documentation update for someone (or myself) that looks into finishing up #7883 in the future.\r\n\r\nLooked through #7883 and appears [ryanofsky's PR](https://github.com/bitcoin/bitcoin/pull/8873) setup the benchmarks, but there are `FIXME` comments to pull in data from `test/` to get a larger data set (assuming reason why 7883 is still open).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kekimusmaximus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12184", "title": "[TRIVIAL] Drop C headers in favour of C++-compatibility headers.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12183", "title": "Make use of emplace in nonassociative containers.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12182", "title": "[TRIVIAL] Remove useless string initialization.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12169", "title": "Avoid temporary copies in C++11 ranged-based for loops.", "body": "The ::value_type of the std::map/std::unordered_map containers is\r\nstd::pair<const Key, T>.\r\n\r\nCurrently a lot of loops drop the const from the iterator which forces\r\nthe compiler to create a copy, this should be avoided by using the auto\r\nkeyword.\r\n\r\nA better explanation can be found in Meyer's Effective Modern C++.\r\n\r\nhttps://books.google.de/books?id=rjhIBQAAQBAJ&lpg=PA41&ots=FmZL15vynY&pg=PA41#v=onepage&q&f=false", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12159", "title": "Use the character based overload for std::string::find.", "body": "std::string::find has a character based overload as can be seen here\r\n(4th oveload): http://www.cplusplus.com/reference/string/string/find/\r\n\r\nUse that instead of constantly allocating temporary strings.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12158", "title": "Avoid unnecessary copy of objects.", "body": "* removed unnecessary value arguments.\r\n* removed unnecessary copy initialization.\r\n* removed unnecessary for range copy.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jtimon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12172", "title": "Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished", "body": "Fixes https://github.com/bitcoin/bitcoin/issues/12142\r\n\r\nThe tests are a little bit slow, mempool_persist.py goes from about 20 s to about 120 s in my hardware.\r\nPerhaps there's a better way to test this.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maaku": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12167", "title": "Make segwit failure due to CLEANSTACK violation return a SCRIPT_ERR_CLEANSTACK error code", "body": "If a segwit script terminates with a stack size not equal to one, the current error code is EVAL_FALSE. This is semantically wrong, and prevents explicitly checking CLEANSTACK violations in the unit tests. This PR changes the error code (and affected unit tests) to use SCRIPT_ERROR_CLEANSTACK instead of SCRIPT_ERROR_EVAL_FALSE.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnewbery": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12166", "title": "[docs] Clarify -walletdir usage", "body": "After discussion with @ryanofsky around #11687 , I think this documentation is a bit clearer for how the new `-walletdir` argument works.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kashyap2690": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12149", "title": "Unlock Wallet Implemented.", "body": "For frequent operation which requires an unlocked wallet, use Unlock Wallet menu option for keeping the wallet unlocked till the application is running.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cdecker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624388", "body": "We already have generic keystores on Linux machines, why not adapt Bitcoin to use them and provide a really simple one for systems that do not provide their own?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624421", "body": "Just delete all the block data and redownload the block chain.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641454", "body": "Seems to me as trying to fix an intermediate problem, I'd much rather see a patch adding the ability to specify a listen port. But the patch to disable IRC bootstrapping seems nice.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gavinandresen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624408", "body": "See my python bitcointools for code that can read and write the key/value pairs in wallet.dat (fixwallet.py reads the wallet and writes out a new wallet, leaving out any keys that seem to be mis-formatted).\n\nMerging wallets is hard because you have to teach bitcoin to re-scan the block chain for transactions to or from keys you just imported.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624435", "body": "Is this useful at all if there is no matching import?\n(export is pretty easy, the import is what is hard...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625002", "body": "See the blockheaders feature branch here for initial work on this.  Notes from Satoshi:\n\nCBlockIndex contains all the information of the block header, so to operate with headers only, I just maintain the CBlockIndex structure as usual.  The nFile/nBlockPos are null, since the full block is not recorded on disk.\n\nThe code to gracefully switch between client-mode on/off without deleting blk*.dat in between is not implemented yet.  It would mostly be a matter of having non-client LoadBlockIndex ignore block index entries with null block pos.  That would make it re-download those as full blocks.  Switching back to client-mode is no problem, it doesn't mind if the full blocks are there.\n\nIf the initial block download becomes too long, we'll want client mode as an option so new users can get running quickly.  With graceful switch-off of client mode, they can later turn off client mode and have it download the full blocks if they want to start generating.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035", "body": "Small, correct, if it breaks on Windows I'll be extremely surprised (and will back it out).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629871", "body": "Could you post a [PULL REQUEST] about this on the Dev&Tech forum: http://www.bitcoin.org/smf/index.php?board=6.0\n\nUntil we figure out where we want to discuss pull requests (on the forum or maybe directly here), I figure it is best to do both.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632251", "body": "I'm a little worried that if this feature gets popular the IRC channel and the 'addr' messages flying across the network might be overwhelmed with the IP addresses of clients that aren't listening.  New nodes joining might then spend a long time trying and failing to connect.\n\nI'd be more comfortable if the patch also taught the client NOT to advertise its own IP:port on the IRC channel or via 'addr' broadcasts.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644279", "body": "minconf=N only credits coins received that have N or more confirmations.\n\nIt still debits all sent coins, regardless of how many confirmations they have.\n\nThe reasoning is:  you can't be 100% sure that coins you are receiving are single-spent.  But you CAN be 100% sure that YOU are not trying to double-spend coins.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650074", "body": "What happened:\n\nSend 50.006... was rounded to 50.01 (amounts get rounded to two decimals).  Causing insufficient funds message.\n\nSend 50  ran into special-case code for micropayments; if making change would result in less than 0.01 coins (which would trigger the you-must-pay-a-0.01-fee transaction spam prevention code), then the sub-cent amount is sent along as a transaction fee.\n\nAt the very least, the RPC code should put the amount being sent in the insufficient funds message.\n\nDoing something more with sub-cent transactions needs more careful thought...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658512", "body": "Discussion here: http://www.bitcoin.org/smf/index.php?topic=2647.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658519", "body": "I'm proposing a simpler api; see http://www.bitcoin.org/smf/index.php?topic=2647.0\n\nI believe you can build what you want on top of the lower-level \"tell me when there are new blocks and transactions\".\n\nFor example, note the transaction ID when you get notified of a new transaction.  Then when you get notified of new blocks, call gettransaction <txid> to get the status of transactions that had fewer than $minconf confirmations.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659336", "body": "You could replace polling every N minutes with a monitorblocks callback that did what you are doing now-- because you know that transactions won't get more confirmations unless new blocks have been received.  You should end up with more accurate results (you'll update as soon as bitcoind sees a new block) with less polling.\n\nYou would probably ignore the transactions in the block, unless you want to do something with 1-confirmation transactions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661975", "body": "I submitted a pull request today to add \"details\" to gettransaction output.  You'll get one or more objects that give category (send or receive), account, and address.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665439", "body": "Before I lose them:\n  http://pastebin.com/evGiRVw2\nand\n  http://pastebin.com/wxCnw5SF\n... are listaccounts and gettransactions '*' output.  getbalance returns 850.05, sum(accounts) is 853.05...  I'll be debugging this more tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/367326", "body": "That'll teach me to pull without sanity-check compiling first...\nThis breaks the GUI build:  CMainFrame::OnMenuOptionsGenerate(wxCommandEvent&)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/367326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562179", "body": "I think the right place for a CRITICAL_BLOCK is SetCrypted()...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563002", "body": "See line 2163 of rpc.cpp.  The cs_main and cs_wallet mutex are grabbed before making RPC calls.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563024", "body": "Yes, it is overkill, but until we have a sane locking scheme I'm not\ngoing to spend the time required analyzing every new RPC method (or\nevery change to the existing RPC methods) to figure out whether\nthey're locking the right stuff in the right order. And I don't trust\nthat anybody else will, either.\n## \n## \n\nGavin Andresen\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564265", "body": "I commented in the issue Matt opened:\n\nCan somebody double-check to see if I'm reading the code correctly?\n\nLooks like both BitcoinMiner and getwork() call IncrementExtraNonce()\nto create unique coinbase transactions, so I don't think this is an\nissue.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578381", "body": "Could... although as 0.4 rolls out there will be more and more non-0.3 nodes to talk to.\nThis change is because downloading from a 0.3.20-0.0.23 client is broken (you'll get disconnected repeatedly).\n\nIf it becomes a big problem, we could ask the broken versions to upgrade using the alert mechanism.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "davout": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624966", "body": "Deletion is not necessary,\ndoesn't it already happen anyway when wallet is replaced ?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624969", "body": "Yes, I forgot that\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625250", "body": "File should be human-readable\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625251", "body": "Duplicate of #2\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647117", "body": "Wow, I just sent 50 BTC, and now the client is reporting zero balance...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633521", "body": "I had originally made a forum post, with the patch attached, but the forum decided to eat it due to (invalid attachment type .patch). Then I found out about this feature :) But I'll make a new post and simply link here.\n\nValid issue about the IRC channel. I had considered that, and was under the impression that this if clause in net.cpp handled it (as in case of proxy or -connect, also no IRC connection should be made):\n\n```\nif (fUseProxy || mapArgs.count(\"-connect\") || fNoListen)\n```\n\nSeems I was wrong.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633522", "body": "Ah, I see the new commit (don't connect to IRC on -nolisten) was automatically added here.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mikegogulski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654419", "body": "Forum references for URI scheme discussion:\n- http://www.bitcoin.org/smf/index.php?topic=1877.0\n- http://www.bitcoin.org/smf/index.php?topic=1840.msg24927#msg24927\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658540", "body": "Hey Gavin,\n\nI can see there would be applications for what you're doing with that API.\n\nSeems like it would be painful to work with for e-commerce, though. Right now I can just poll an account/label linked to an open purchase order to check the balance and confirmations. Using this API would require (I think) responding to the JSON-RPC callback POST by sending a flurry of RPC calls to check on the each of the transactions in the new block. Given the complexity and traffic involved in that, I'd probably just continue to use periodic polling.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659367", "body": "I see how it could work, sure. But the sample JSON output you provided on the forum post showed the callback passing some general block info and then simply a list of transaction IDs.\n\nFor each transaction ID, I would have to determine if it's relevant to my open orders, then check each relevant transaction for the number of confirmations and the balance on the associated account/address in the wallet. Right now that would mean one RPC method call per transaction in the block. \n\nUnless monitorblocks is going to cough up some per-transaction data correlating transactions with accounts/addresses, I can't see an advantage to using it over polling.\n\nActually, maybe I'm totally missing something. The current implementation of gettransaction returns something like:\n\n```\n$ bitcoind gettransaction 270d70635927aac5ec9b42fda27e539ae50a7a06bc3bb2fb98e086e11446a3e6\n{\n\"amount\" : -0.02000000,\n\"fee\" : 0.00000000,\n\"confirmations\" : 248,\n\"txid\" : \"270d70635927aac5ec9b42fda27e539ae50a7a06bc3bb2fb98e086e11446a3e6\",\n\"message\" : \"comment\",\n\"to\" : \"comment-to\"\n}\n```\n\nHow do I associate this with an account or address?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659395", "body": "There's definitely something to this.\n\nI think the spam potential of your first use case is too nasty to contemplate. I'd be satisfied with commerce systems including a business rule which says \"if you want further notifications, attach an email address to your order\". The spam problem is already addressed broadly in the email domain, and email addresses can be rather anonymous.\n\nSigning an email with the bitcoin key is a neat idea, but there's a lack of symmetry in the typical commerce application. Customer learns a bitcoin address for vendor, so vendor can later sign messages back to customer using that address's private key. Not so in the reverse, unless the customer provides an address of their own as part of the exchange.\n\nWhat I would like to see is the ability to attach a small, optional data field to a transaction. For example, here in Slovakia, the banking system provides for the attachment of several fields to an electronic payment: constant symbol (4), variable symbol (10), specific symbol (16?), note (32?). The constant symbol is used for tax accounting purposes, and the rest are used to correlate payments with accounts, similar to \"please be sure to include your account/invoice number on your check\".\n\nI'm guessing this is already provided for in the protocol, though I'm not familiar with that part of the implementation. Also, it's arguable that it's not necessary if a merchant generates a new bitcoin address for each payment. Not a big priority, really.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307", "body": "Hooray!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665433", "body": "Eek!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665453", "body": "txid 22c1af3bc7f21a1ee74fbe63fcc58d0433ce2c574cf042a8f9129f989ebac68d has two entries associated with it, one of which is for BTC 3, and this is the only BTC 3 transaction in what you pastebinned. Maybe a place to look.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sipa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/346324", "body": "This seems strange to me. If a single dependency of an own transaction is in the block chain, the transaction as a whole will be considered confirmed?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/346324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/474782", "body": "Why not return enum DBErrors?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/474782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564402", "body": "They both call IncrementExtraNonce... which resets the extra nonce every second after overflowing. This guarantees unique block candidates, but not unique coinbase transactions. When an infinite supply of pubkeys are available, this isn't a problem, because after creating a block, the previous default pubkey will be in use, and a new one will be used.\n\nMy suggestion: add the current timestamp to the coinbase when no fresh pubkeys are available.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812418", "body": "That doesn't seem very necessary.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16333558", "body": "gen.cpp?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16333558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "hbons": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398363", "body": "typo: 'antwoord'\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398365", "body": "Portefeuille isn't capitalised elsewhere...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "andyparkins": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475010", "body": "Does the key memory allocated in key.h by OpenSSL in EC_KEY_generate_key() need mlock()ing too?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475050", "body": "I'll have a go.  I'm not entirely clear on which call triggers the memory allocation though.  Is it in MakeNewKey() or CKey(); does EC_regenerate_key() allocate new memory?  The OpenSSL documentation is seemingly non-existent for EC_xxx functions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475093", "body": "I wasn't thinking of altering OpenSSL; more like calling mlock() in a CKey member.\n\n```\nCKey()\n{\n    pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n    if (pkey == NULL)\n        throw key_error(\"CKey::CKey() : EC_KEY_new_by_curve_name failed\");\n    mlock( pkey, sizeof( *pkey ) );\n    fSet = false;\n}\n```\n\nBut that's not going to work because EC_KEY isn't an exported structure, so sizeof() won't work; nor is there any way to see what internal memory structures in EC_KEY have been allocated.\n\nBah.\n\nSomeone else must have solved this already.  I'll have a search.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475142", "body": "A bit of poking and I've found `CRYPTO_malloc_locked()` in `crypto/mem.c`. It looks like its only called for RSA though.\n\nChanging plain `malloc()` for the whole of OpenSSL seems like a mistake as it would make every single byte of memory allocated by OpenSSL locked.  That doesn't seem wise.  It looks like the EC allocation is done in `EC_GROUP_new()` with `OPENSSL_malloc()`.  I have no idea what part of that structure even holds the private key.\n\nOkay; I'm giving up now.  OpenSSL is making my brain hurt.\n\nThe private key will have to be swappable, through no fault of bitcoin's.\n\nSorry to have wasted your time.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "TheBlueMatt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475036", "body": "Yes, care to write it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475061", "body": "OpenSSL allocates the memory itself, so you have to hack up openssl to make it mlock.  (for some reason the entire openssl source code has no references to mlock()).  There are functions in openssl that allow you to override malloc, though I can't remember what they were and they aren't documented, well unless you count nondescriptive comments.  \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475084", "body": "You never know what other issues might have gotten in the way, this way it captures more errors than just the return value of TopUpKeyPool will.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475117", "body": "In the small amount of research I did when I was looking at doing this, it looked overriding malloc for openssl was the only safe way (note that yours isnt much safer than not because its in the memory un-mlocked during the creation of the key, which probably takes longer than anything using that key.  Its not a matter of modifying openssl, it provides publicly-accessible functions to make it override malloc, so you can use those, but you have to figure out how it works first.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475222", "body": "I was under the impression that there was a function to override malloc for only keying material, but I might be wrong, I didnt do enough research as its not documented and seems too much like a hack for my taste.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562138", "body": "To be safe, it might be a good idea to lock this.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562481", "body": "To be honest, I hadnt thought that through...shouldnt be hard to fix though: #482\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562983", "body": "No way this doesnt need a cs.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562984", "body": "Shouldnt this have a cs?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563007", "body": "Isnt that a bit...overkill?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578510", "body": "60% of listening nodes are 0.3.23 only because 0.3.24 doesnt disconnect you all the time.\nThere are way more 0.3.24 nodes, but they have their connection slots full all the time.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sgimenez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475074", "body": "I think this GetArg is not appropriate here, the return value from TopUpKeyPool() should be used instead.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475113", "body": "Then, add this test at the end of TopUpKeyPool.\nIntruding CWallet internals from rpc.cpp is just bad, IMHO.\n\nPublic interfaces between pieces of code are so blurry in bitcoin code...\nThis is just one more example.\n(But maybe C++ is the one to blame here)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "casascius": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562434", "body": "This edit states that the \"default key\" will be used as the target for payouts for mining.  If this is correct, then it might be problematic and could result in a loss of funds to miners.  When miners mine more than one block using the same payout address, the coinbase transactions in each block are identical, which results in them having an identical sha256 hash, which results in all but the first one being unidentifiable and hence unspendable.  I suppose you might be aware of that, but wanted to point this out just to prevent the possibility of it being an expensive consequence for somebody else.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "n1bor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578270", "body": "Careful with this one as 60% of listening servers are 3.23 - http://bitcoinstatus.rowit.co.uk/versionsDay.png, so could overload others?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "fanquake": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81896071", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81896071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82111720", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82111720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41837480", "body": "Ideally this should be ignored on the dev machine.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41837480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "paveljanik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82020848", "body": "micro-nit: DBL space\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82020848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87373853", "body": "I wanted to do so first, but the URLs are fragile and can change. And when the separate \"Report security issues\" page happens at bitcoincore.org, we will have to change URL here. Mail will probably be the same.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87373853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87382621", "body": "How can you predict it will be a subsection? What if en-GB speakers will ask for en-GB and en-US page?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87382621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rebroad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812420", "body": "it's not.. I've removed this and made a new fixup commit now. Just need to squash(?) the commits together now.. @sipa, can you remind me the git command please?\n\n(the /build/ line is needed though, right? without it, git status reports on the contents of the build directory...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/818160", "body": "out of interest, how come I needed to add this line, but no one else seems to need it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/818160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839004", "body": "If i don't add this line, git complains. How do you manage without git wanting this directory added or ignored?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839081", "body": "Strangely, i can't add .gitignore to .gitignore. It ignores that line! \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Diapolo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/838976", "body": "That should not be here I guess.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/838976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839063", "body": "Sorry, I'm no GIT master :-/. But I never had a pull or commit, where I needed to include .gitignore.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jgarzik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16335943", "body": "No, gen.cpp is not a generated file to be ignored.  It definitely should be checked into git.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16335943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dexX7": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41850244", "body": "I'm very open to removing it (or other parts), but the precedence was basically the ignore of the Qt Creator project files.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41850244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42734779", "body": "I'm currently not at home, but later I can edit and remove the lines. But just for my understanding: isn't it pretty common to ignore project/editor specific files via the `.gitignore`?\n\nAs for the change:\n\n``` diff\n- # Qt creator\n- *.pro.user\n- \n- # NetBeans\n- nbproject/\n- \n```\n\nAnything else?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42734779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "2": {"laanwj": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12219", "title": "More granular net logging", "body": "#11583 moved many network logging messages to the `net` category, including the version messages for new connections.\r\n\r\nI think this was a good idea in itself, however this means that the only way to get information about connections and abnormal things happening is to enable *all* network logging. This includes every single message and transaction, bogs down performance and fills up the disk quickly.\r\n\r\nI'd like a category for just low-traffic network logging.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898f560b55aba2070f188b0223ef2beefcdede8b", "message": "Merge #12206: qa: Sync with validationinterface queue in sync_mempools\n\nfa1e69e qa: Sync with validationinterface queue in sync_mempools (MarcoFalke)\n\nPull request description:\n\n  Commit e545dedf72bff2bd41c93c93eb576929fce37112 moved `TransactionAddedToMempool` to the background scheduler thread. Thus, adding a transaction to the mempool will no longer add it to the wallet immediately. Functional tests, that `sync_mempools` and then call into wallet rpcs will race against the scheduler thread.\n\n  Fix that race by flushing the scheduler queue.\n\n  Fixes #12205; Fixes #12171;\n  References #9584;\n\nTree-SHA512: 14d99cff9c4756de9fad412f04e6d8e25bb9a0938f24ed8348de79df5b4ee67763dac5214b1a69e77e60787d81ee642976d1482b1b5637edfc4892a238ed22af"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17180fa608100ce1aab3df74c9db17c342c0380d", "message": "Merge #12210: wallet: Deprecate addwitnessaddress\n\ncdf3e03 wallet: Deprecate addwitnessaddress (Wladimir J. van der Laan)\n\nPull request description:\n\n  Now that segwit is natively supported by the wallet, deprecate the hack `addwitnessaddress`.\n\nTree-SHA512: f33b1c33d200fa8f1a0fba424b30e9c2a78147cde8bb0a3fd41194b77980454cddfb23da256cd6fe78726e87161deaa23357d0764e74c3eb83177cc518afa49c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdf3e03a723b1a0242199672878caf1543ba8124", "message": "wallet: Deprecate addwitnessaddress\n\nNow that segwit is natively supported by the wallet, deprecate the hack `addwitnessaddress`."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7978be899646194b6abc5b34a7f6a3311490033", "message": "Merge #12101: Clamp walletpassphrase timeout to 2^30 seconds and check its bounds\n\n134cdc7 Test walletpassphrase timeout bounds and clamping (Andrew Chow)\n0b63e3c Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds (Andrew Chow)\n\nPull request description:\n\n  Fixes #12100\n\n  Makes the timeout be clamped to 2^30 seconds to avoid the issue with sign flipping with large timeout values and thus relocking the wallet instantly. Unlocking for at most ~34 years should be sufficient.\n\n  Also checks that the timeout is not negative to avoid instant relocks.\n\nTree-SHA512: 426922f08c54e323d259e25dcdbebc2cd560708a65111ce6051493a7e7c61e79d9da1ea4026cc0d68807d728f5d7c0d7c58168c6ef4167b94cf6c2877af88794"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adce1de9a6ce5b41c4117b62f705bca53bf97216", "message": "Merge #12198: rpc: Add deprecation error for `getinfo`\n\n49e5f3f rpc: Add deprecation error for `getinfo` (Wladimir J. van der Laan)\n\nPull request description:\n\n  Add a short informative deprecation message when users use `getinfo`, that points them to the new calls\n   here to get the different information fields.\n  This is meant to be temporary, for one release only.\n\nTree-SHA512: 4fccd8853762d0740d051d9e74cdea5ad6f8d5c0ba67d69e8dd2ac8a1538d8270c1a1fab755d9f052ff3b3677753b09138c8c5ca0bc92d156de90413cd5c1814"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e5f3ff7e940b8da7d9e7252d2b1e27bd192ae4", "message": "rpc: Add deprecation error for `getinfo`\n\nAdd a short informative deprecation message when users use `getinfo`,\nthat points them to the new calls where to get the different information fields."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66e3af709dd444b2d85e15c56f4608c700ff82ee", "message": "Merge #11904: Add a lock to the wallet directory\n\n2f3bd47 Abstract directory locking into util.cpp (MeshCollider)\n5260a4a Make .walletlock distinct from .lock (MeshCollider)\n64226de Generalise walletdir lock error message for correctness (MeshCollider)\nc9ed4bd Add a test for wallet directory locking (MeshCollider)\ne60cb99 Add a lock to the wallet directory (MeshCollider)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/11888, needs a 0.16 milestone\n\n  Also adds a test that the lock works.\n\n  https://github.com/bitcoin/bitcoin/pull/11687 will probably rework this to a per-wallet lock instead of just the walletdir, but this fixes the current issue\n\nTree-SHA512: 98e52d67f820e3b8f919cf361ffbb7d928f1bd67603e0ed26c5076ea02d9b3a90c3535ddf7329f3b88171396fa28dd3c87adab3577a8a217bd1e4247bda99138"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc91b7699732efc20ac1526383515c944b66d70", "message": "Merge #12173: [Qt] Use flexible font size for QRCode image address\n\n59f9e2a Use flexible font size for QRCode image address (Jonas Schnelli)\n\nPull request description:\n\n  Bech32 addresses are currently cut off in the QRCode image in the GUI receive tab.\n  This adds a simple font size calculation logic that \"must\" (down to 4pt) fix into the given image width.\n\n  Examples OSX HiDPI:\n  <img width=\"332\" alt=\"bildschirmfoto 2018-01-12 um 11 25 40\" src=\"https://user-images.githubusercontent.com/178464/34896144-c0c65d76-f78c-11e7-93e1-94dc8e203269.png\">\n  <img width=\"322\" alt=\"bildschirmfoto 2018-01-12 um 11 25 46\" src=\"https://user-images.githubusercontent.com/178464/34896145-c0edfe1c-f78c-11e7-8c09-c15155e2160e.png\">\n\n  Examples Ubuntu non HIDPI:\n  <img width=\"314\" alt=\"bildschirmfoto 2018-01-12 um 11 27 51\" src=\"https://user-images.githubusercontent.com/178464/34896151-c88347f4-f78c-11e7-8a03-df8049dcfed6.png\">\n  <img width=\"322\" alt=\"bildschirmfoto 2018-01-12 um 11 27 42\" src=\"https://user-images.githubusercontent.com/178464/34896152-c8bb881c-f78c-11e7-89d2-6f04ec608a19.png\">\n\nTree-SHA512: d749763fb748b146f77fd8d88fb7d29b07a46cde0b0f303a4006ae9cc3521b3c2e8ab43b828e243514109379898b198552e17b8f316c5a869b0cc8246b054b86"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44080a90a29292df96e92f22242785c5040000a1", "message": "Merge #12118: Sort mempool by min(feerate, ancestor_feerate)\n\n0a22a52 Use mempool's ancestor sort in transaction selection (Suhas Daftuar)\n7abfa53 Add test for new ancestor feerate sort behavior (Suhas Daftuar)\n9a51319 Sort mempool by min(feerate, ancestor_feerate) (Suhas Daftuar)\n6773f92 Refactor CompareTxMemPoolEntryByDescendantScore (Suhas Daftuar)\n\nPull request description:\n\n  This more closely approximates the desirability of a given transaction for\n  mining, and should result in less re-sorting when transactions get removed from\n  the mempool after being mined.\n\n  I measured this as approximately a 5% speedup in removeForBlock.\n\nTree-SHA512: ffa36b567c5dfe3e8908c545a459b6a5ec0de26e7dc81b1050dd235cac9046564b4409a3f8c5ba97bd8b30526e8fec8f78480a912e317979467f32305c3dd37b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db16ec82793beb941a7db2750e774246d7fbc21", "message": "Merge #11796: [tests] Functional test naming convention\n\n5fecd84 [tests] Remove redundant import in blocktools.py test (Anthony Towns)\n9b20bb4 [tests] Check tests conform to naming convention (Anthony Towns)\n7250b4e [tests] README.md nit fixes (Anthony Towns)\n82b2712 [tests] move witness util functions to blocktools.py (John Newbery)\n1e10854 [tests] [docs] update README for new test naming scheme (John Newbery)\n\nPull request description:\n\n  Splitting #11774 into two parts -- this part updates the README with the proposed naming convention, and adds some checks to test_runner.py that the number of tests violating the naming convention doesn't increase too much. Idea is this part of the change should not introduce merge conflicts or require much rebasing, so reviews of the complicated bits won't become invalidated too often; while the second part will just be file renames, which will require regular rebasing and will introduce merge conflicts with pending PRs, but can be merged later, and should also be much easier to review, since it will only include relatively trivial changes.\n\nTree-SHA512: b96557d41714addbbfe2aed62fb5a48639eaeb1eb3aba30ac1b3a86bb3cb8d796c6247f9c414c4695c4bf54c0ec9968ac88e2f88fb62483bc1a2f89368f7fc80"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9501dc27b336fc20adb0c367e0904b57bd507f51", "message": "Merge #12127: Remove unused mempool index\n\n8e617e3 Remove unused mempool index (Suhas Daftuar)\n\nPull request description:\n\n  We haven't used the \"mining_score\" index since 0.12, so remove it.\n\nTree-SHA512: ae37b8663194986eaeecfc2bbeca7ecb4ae6f0d8384515fa218cbc939a580d4b9f7f997c5297c3f1b3c3a0651edb092f373ac9a4808aaec30d38cb99d5f3ed70"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12218", "title": "net: Move misbehaving logging to net logging category", "body": "This moves the error messages for misbehavior (when available) into the line that reports the misbehavior, as well as moves the logging to the `net` category.\r\n\r\nThis is a continuation of #11583 and avoids serious-looking errors due to misbehaving peers. As it is impossible to correlate the `peer=X` numbers to specific incoming connections now without enabling the `net` category, it doesn't really help to see these messages by default.\r\n\r\nTo do this, Misbehaving() gains an optional `message` argument.\r\n\r\nE.g. change:\r\n\r\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED\r\n    2018-01-18 16:02:27 ERROR: non-continuous headers sequence\r\n\r\nto\r\n\r\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED: non-continuous headers sequence\r\n\r\nWhen there is a category for \"important\" net messages (see #12219 ), we should move it there.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12197", "title": "Log debug build status and warn when running benchmarks", "body": "Log whether the starting instance of bitcoin core is a debug or release build (--enable-debug).\r\n\r\nAlso warn when running the benchmarks with a debug build, to prevent mistakes comparing debug to non-debug results.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81895028", "body": "maybe add 'or a distribution package such as PPA'\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81895028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87372615", "body": "Indeed. The discussion belongs there, and so does the documentation. Maybe refer to the instructions for reporting security issues on the contact page: https://bitcoincore.org/en/contact/ instead of mentioning the address directly?\nIf we then happen to have GPG set up, it can be mentioned there without having to put everything into this template.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87372615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87394637", "body": "\"I wanted to do so first, but the URLs are fragile and can change\" so are email addresses.\nIt's not impossible to update this again, it just should be rare.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87394637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/10507536", "body": "Please remove this from the patch.\nYou can define your own local git ignores in `.git/info/exclude` within the repository.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/10507536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42482626", "body": "> I'm very open to removing it (or other parts), but the precedence was basically the ignore of the Qt Creator project files.\n\nYes, those should go too (also as we haven't supported qt creator builds since 0.9).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42482626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851409", "body": "In closed-source environments in which everyone uses the same IDE that is common. In open source software, where everyone uses their own editors/IDE/tools, it is less common. Only you know what files your editor produces and this may change from version to version.\nThe canonical way to do this is thus to create your local gitignore. Add this to `~/.gitconfig`:\n\n```\n[core]\n    excludesfile = /home/.../.gitignore_global\n```\n\nThen put your favourite tool's excrement filenames in that file :-)\nAnother option is to use per-project `.git/info/exclude`. These are not committed either.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851979", "body": "See #6878\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "nQuantPlatforms": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12215", "title": "Installation and data directory lock issues", "body": "I'm using Raspbian Stretch and just installed the bitcoin to setup full node using following command\r\nsudo apt-get install bitcoin-qt bitcoind\r\n\r\n1. First I was not displayed with start screen to choose location for data directory as mentioned here \r\nhttps://bitcoin.org/en/full-node#ubuntu-1610\r\n2. I have mounted FTP drive folder where I want my data directory to be pointed. \r\n3. So I always have to start bitcoin from terminal with datadir option otherwise it starts downloading into default location and I cant download entire blockchain on my pi sdcard.\r\n4. Unfortunately that doesn't work either. it always errors out saying can not obtain lock may be this and that using it.\r\n\r\nIssues:\r\n1. I assume its permission issue, but I can manually create, delete update file in that mounted location so why bitcoin app can not? is there special command it need to start with ? And no there is no other program using it or running that has it locked.\r\n\r\n2. What option is requires it to start with to show data directory location screen at start \r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Linrono": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12209", "title": "RPCAUTH doesn's seem to be recognized by the client.", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nI was trying to set up a Lightning node and ran into issues with user authentication with cookies. So, as a work around, I ended up setting up a rpcuser and rpcpassword. Looking at my debug.log, I saw the line saying that those options have been superseded by rpcauth since 2015. I looked up how to do this and found and downloaded the rpcuser.py script and ran it and I got a line to put into my config file. It looked like this.\r\n\r\n`rpcauth=linrono:8512a641e39573384c5c321d5d1527a$ab5536ee2244c70ad2efe8d68bd50e3495a7a48656794a094f5b1a2a5a874a4d`\r\n\r\nThis is not what I am using, but what I have was generated the same way. After saving this to my config file and restarting my client, I checked my debug log file and found this line. \r\n\r\n`No rpcpassword set - using random cookie authentication`\r\n\r\nI double checked and there was, indeed, a cookie file generated. \r\n<!--- What behavior did you expect? -->\r\nI thought the rpcauth was replacing the rpcuser and rpcpassword authentication.\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nNo matter what I do, I cannot seem to get the node to accept the rpcauth line in my config file. I did try to run the client with the rpcauth as a command line option. This also did not work.\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\nI am using the v0.15.1.0-g7b57bc998f33 client. It is the most up to date version provided by the ArchLinux repositories.\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nI am running ArchLinux and am using a Corei7.\r\n\r\nI'm sorry if this is a known issue or I'm doing something wrong. I did try to search for more information and found comments on this bitcoin Stack Exchange question with the same issue but no resolution. \r\n\r\n`https://bitcoin.stackexchange.com/questions/46782/rpc-cookie-authentication`\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sjors": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12191", "title": "bech32-optimized QR codes", "body": "@sipa said in #11991:\r\n\r\n> I haven't looked at the code, but inside QR codes it's advantageous to use uppercase Bech32 (it will result in a smaller QR encoding).\r\n\r\nIs that still the case when rendered as URI?\r\n\r\nShould amounts be added in a different way?\r\n\r\nWould that involve amending BIP-21?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ac8907ce6ab095b37858d6e96946b59ce1c13f", "message": "[qt] receive tab: bech32 address opt-in checkbox\n\nWhen launched with -adresstype=legacy the checkbox will be hidden."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12216", "title": "scripted-diff: prefix [address|change]type parameters with 'default'", "body": "Making it clear that these parameters can be overridden by individual wallet commands.\r\n\r\nRequesting 0.16 tag, as it's probably not worth changing otherwise.\r\n\r\nThis makes grateful use of the fact that @sipa used an underscore for `address_type` and `change_type` RPC arguments.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12200", "title": "Bind functional test nodes to 127.0.0.1", "body": "Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\r\n\r\nTo test, make an arbitrary whitespace change to `src/bitcoind.cpp` and recompile. This normally resets the firewall's memory.\r\n\r\nEasiest way to reproduce a popup without running the test suite:\r\n\r\n```sh\r\nsrc/bitcoind -regtest -bind=127.0.0.1 # No popup\r\nsrc/bitcoind -regtest # Popup\r\n```\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12152", "title": "[WIP] misc. backwards compatibility tests", "body": "Builds on top of #12134.\r\n\r\nTests:\r\n- [x] v0.16 generated wallets don't work on older versions\r\n- [x] the five SegWit wallet scenario's (including bech32 address)  \r\n\r\nTest framework changes (or: things I'm doing wrong):\r\n- [ ] method to copy wallet\r\n- [ ] method to push and pop wallet backups\r\n- [ ] remember network topology between start and restart\r\n\r\nSuggestions for additional tests welcome. I'll make individual PR's later.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dukeh3": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12186", "title": "Debian folder is for 1.4x and does not work for 15.1", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nThe debian file in contrib does not work with latest build. Also if you try to use the latest in debian stable ( build around 15.1 ) fails too. \r\n\r\n\r\n<!--- What behavior did you expect? -->\r\nBuilding a nice debian package\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\nThe build fails with lost of errors\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nEvery time\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\n15.1 Tag\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nx86 Debian stable\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dooglus": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12179", "title": "\"abandon transaction\" only removed tx from display until client restart", "body": "commit 45cf8a03cb57b8639a8d47323bde46ba22d9eeaf\r\n\r\nI recently made a transaction with too-low fees. I was in a hurry to get it confirmed, so I clicked \"increase transaction fee\" a bunch of times. Each time I clicked it, it added an extra transaction to the transactions tab.\r\n\r\nEventually one of the transactions confirmed, and all the others were marked as \"conflicted\". I right-clicked each of the conflicted transactions in turn and selected \"abandon transaction\". That caused them to disappear from the transactions tab.\r\n\r\nWhen I restarted the client, all the conflicted transactions reappeared. I was hoping they would be gone permanently.\r\n\r\nAm I misunderstanding what \"abandon transaction\" should do, or is it not working correctly?\r\n\r\nEdit: two related points from this experience:\r\n\r\n1) I wanted to double the fee, but \"increase transaction fee\" didn't give me any way to say how much to increase it by, so I had to click it maybe 20 times to get to the fee I wanted.\r\n\r\n2) I was able to select all the conflicted transactions at once, and right-click the group. When I selected \"abandon transaction\" on the group, it only deleted one transaction from the display, not all of them. Why let me select multiple transactions if the right-click menu only operates on one of them anyway?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DrakonAlpha": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12176", "title": "Application crashes when the connected hard disk drive gets disconnected", "body": "Application crashes when the connected hard disk drive gets disconnected. Error message would be ok, but crash ist inacceptable.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jappiecr": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12170", "title": "Bitcoin core doens't respond", "body": "Hi,\r\n\r\nBitcoin core 0.15.1 get's stuck when I try to open program. Most of the time it goes through the update startup rocess oke and then wehen it starts loading it get's stuck.\r\nI looked in the error.log and this is what it says something like:\r\n2018-01-12 12:08:05 LevelDB read failure: IO error: E:\\BT\\chainstate\\101461.ldb: Can't execute because of an error in I/O-device.\r\n\r\n\r\n2018-01-12 12:08:05 IO error: E:\\BT\\chainstate\\101461.ldb: Can't execute because of an error in I/O-device.\r\n\r\nI have the bitcoin folder on external harddrive. It worked fine a couple of weeks ago when I went to update after a couple of months of not connecting. Everything was updated fine and working properly. Then  I wanted to do a little test and opend an online account on Blockchain and transfered a minimal amount as a test. Test went fine but after that I was no longer able to open my Bitcoin Core wallet because of above descibed error.\r\n\r\nCan anybody help?\r\nThanks in advance!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarcoFalke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1e69e52bf8de08b1ce7a774416aa7a8d20068b", "message": "qa: Sync with validationinterface queue in sync_mempools"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad504bf4c302f7a72e0a0e191f3fdbafda7340f", "message": "Merge #12177: trivial: fix address_type help text of getnewaddress and getrawchangeaddress\n\n5f911c5cc2 trivial: fix address_type help text of getnewaddress and getrawchangeaddress (mruddy)\n\nPull request description:\n\n  \"p2sh\" in the help messages should have been \"p2sh-segwit\".\n\n  The messages before this patch:\n\n  `help getnewaddress`\n  \"address_type\"   (string, optional) The address type to use. Options are \"legacy\", \"**p2sh**\", and \"bech32\". Default is set by -addresstype.\n\n  `help getrawchangeaddress`\n  \"address_type\"           (string, optional) The address type to use. Options are \"legacy\", \"**p2sh**\", and \"bech32\". Default is set by -changetype.\n\nTree-SHA512: 6dfc0bebe577995f5521b83a12854045ac3eda4e65c9b92fc581da4ee68ab1218e05af82f2154bb2640a0813c5f79e010cd9e5ada449494c8831b3757bda854c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cf8a03cb57b8639a8d47323bde46ba22d9eeaf", "message": "Merge #12168: Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/)\n\n648bdc8cc0 Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/) (Jan Sarenik)\n\nPull request description:\n\n  http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html\n  http://man7.org/linux/man-pages/man2/fcntl.2.html\n\nTree-SHA512: 82c7e0aba55f34a6fec60bdecb712b65c84422461454f0ae9eed5e1bb31bf585c5a65f49bbdd5a89feb59140a998ad6fcd5573ede123a12b2ba2ff677d95cc2b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7450cdbd89a1c862f4d4d8bf093f8a0b5448f9c", "message": "Merge #11970: Add test coverage for bitcoin-cli multiwallet calls\n\na14dbff39e Allow multiwallet.py to be used with --usecli (Russell Yanofsky)\nf6ade9ce1a [tests] allow tests to be run with --usecli (John Newbery)\nff9a363ff7 TestNodeCLI batch emulation (Russell Yanofsky)\nca9085afc5 Prevent TestNodeCLI.args mixups (Russell Yanofsky)\nfcfb952bca Improve TestNodeCLI output parsing (Russell Yanofsky)\n\nPull request description:\n\n  Lack of test coverage was pointed out by @jnewbery in https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158133900\n\nTree-SHA512: 5f10e31abad11a5edab0da4e2515e39547adb6ab9e55e50427ab2eb7ec9a43d6b896b579b15863e5edc9beee7d8bf1c84d9dabd247be0760a1b9ae39e1e8ee02"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0910cbe4ef31eb95fd76c7c2f820419fe64a3150", "message": "Merge #12082: Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json\n\n18be3ab139 Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json (Chris Stewart)\n\nPull request description:\n\n  We are missing a test vector for SINGLE|ANYONECANPAY inside of tx_valid.json. This addresses the issue #12060\n\nTree-SHA512: e3526113477dbf575c4a844cf489dcfa2c037c6d928af6f97413edc1a8d29cdf2143da96471cdfd3de08bf5ed178117ed67926fd70fd42ca391ac0bb0d08f3fd"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12217", "title": "qa: Add missing syncwithvalidationinterfacequeue to tests", "body": "Fixes intermittent travis failures with those tests caused by a missing flush of mempool txes to the wallet.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12193", "title": "RPC: Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d)", "body": "Rebased version of  #11386 by karel-3d.\r\n\r\nCloses:  #11386", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81920315", "body": "Maybe comment the comments out, so it is not required to delete them?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81920315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87377352", "body": "I think https://bitcoincore.org/en/contact/ will always be the page for contact, even if there is a subsection with a list of gpg keys.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87377352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/150910060", "body": "```vim\r\ns/and are/are/", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/150910060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jonasschnelli": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/062c8b69f4ccae323d675685da8cbfcb7ccd0c55", "message": "Merge #11991: [qt] Receive: checkbox for bech32 address\n\n63ac8907c [qt] receive tab: bech32 address opt-in checkbox (Sjors Provoost)\n\nPull request description:\n\n  <img width=\"647\" alt=\"schermafbeelding 2018-01-12 om 18 34 48\" src=\"https://user-images.githubusercontent.com/10217/34887691-a6a796fe-f7c7-11e7-8b89-87ce07c61ce3.png\">\n\n  Checkbox does what you would expect. Press tab from the amount field to get there.\n\n  It's unchecked by default.\n\n  When launched with `-addresstype=bech32` it's checked by default. When launched with `-addresstype=legacy` it unchecked and disabled.\n\n  The change in `receivecoinsdialog.ui` is smaller than it looks, due to the way git handles XML diffs. I had to add a horizontal spacer to make it look decent, see https://github.com/bitcoin/bitcoin/issues/11950#issuecomment-352870909. This causes column numbers to change in the rest of the grid.\n\n  I recommend testing on at least one other OS than OSX to be on the safe side.\n\nTree-SHA512: ec4b733b796d9a94278a5d8040a69d9574ef50021e68f94f61f2da75d1bb57f39272cbc9f1f7d34f733a19640daf666a23844fcd132f83bfdaf327d9d1d6f105"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59f9e2aaf3fe73961cc02042f929b430fee59f9c", "message": "Use flexible font size for QRCode image address"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196", "title": "Add scantxoutset RPC method", "body": "Alternative to #9152.\r\n\r\nThis takes `<n>` pubkeys and optionally  `<n>` xpubs (together with a definable lookup windows where the default is 0-1000) and looks up common scripts in the UTXO set of all given or derived keys.\r\n\r\nThe output will be an array similar to `listunspent`. That array is compatible with `createrawtransaction` as well as with `signrawtransaction`.\r\n\r\nThis makes it possible to prepare sweeps and have them signed in a secure (cold) space.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MeshCollider": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f3bd47d44634cfc0a4261e64af178407ce2869c", "message": "Abstract directory locking into util.cpp"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5260a4aca1e6c11e1dbca9d3390c0dc739e81204", "message": "Make .walletlock distinct from .lock"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64226de908c76997fadf147342c494ad0662fa43", "message": "Generalise walletdir lock error message for correctness"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ed4bd58cac05b355ab103476ff29ecd10ce263", "message": "Add a test for wallet directory locking"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60cb99c580a602a83856769ad2ac882d3cdfcb5", "message": "Add a lock to the wallet directory"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sdaftuar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a22a52918ad5af6d105b4f5ae9dd6c52199f0e8", "message": "Use mempool's ancestor sort in transaction selection\n\nTransaction selection for mining tracks ancestor feerates that are\nmodified based on transactions that have already been selected.  This\ncommit de-duplicates the code so that the ancestor feerate sorting used\nby the mempool can also be directly applied to the miner."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abfa538b5a4508e0cf0589ae3ac0620b2188912", "message": "Add test for new ancestor feerate sort behavior"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mruddy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f911c5cc2f60859cf3d5553d35c1160bd264cc0", "message": "trivial: fix address_type help text of getnewaddress and getrawchangeaddress"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsarenik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/648bdc8cc09c85748967b86347bbc7825e339d5f", "message": "Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/)\n\nhttp://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html\nhttp://man7.org/linux/man-pages/man2/fcntl.2.html"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "achow101": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/134cdc7cee3da7c554e40ad947a9cdcbb3069f13", "message": "Test walletpassphrase timeout bounds and clamping"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b63e3c7b20ea54930de3ec3955406e4d4737e3c", "message": "Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds\n\nClamps the timeout of walletpassphrase to 2^(30) seconds, which is\n~34 years. Any number greater than that will be forced to be\n2^(30). This avoids the sign flipping problem with large values which\ncan result in a negative time used.\n\nAlso perform bounds checks to ensure that the timeout is positive\nto avoid immediate relocking of the wallet."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12180", "title": "scripted-diff: change kB to kvB, kilobyte to kilovbyte for transaction fee rate things", "body": "Renames kB and kilobyte to kvB and kilovbyte respectively in order to make clear the fee rates are in virtual bytes rather than actual bytes.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "promag": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12213", "title": "Add address type option to addmultisigaddress", "body": "Adds the option `address_type` to `addmultisigaddress` RPC so that `addwitnessaddress` can be avoided to obtain an `p2sh-segwit` or `bech32` multsig address.\r\n\r\nRelated to #12210 as this reduces `addwitnessaddress` usage.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12194", "title": "Add change type option to fundrawtransaction", "body": "Adds a new option `change_type` to `fundrawtransaction` RPC. This is useful to override the node `-changetype` argument.\r\n\r\nThe new option is exclusive to `changeAddress` option, setting both raises a RPC error.\r\n\r\nSee also #11403, #12119.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12153", "title": "Avoid permanent cs_main lock in getblockheader", "body": "Based on #12151, this pull reduces the lock scope in `getblockheader` RPC.\r\n\r\nNote, review last commit only.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12151", "title": "Remove cs_main lock from blockToJSON and blockheaderToJSON", "body": "Motivated by https://github.com/bitcoin/bitcoin/pull/11913#discussion_r157798157, this pull makes `blockToJSON` and `blockheaderToJSON` free of `cs_main` locks.\r\n\r\nLocking `cs_main` was required to access `chainActive` in order to check if the block was in the chain and to retrieve the next block index.\r\n\r\nWith the this approach, `CBlockIndex::GetAncestor()` is used in a way to check if the block belongs to the specified chain tip and, at the same time, get the next block index.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084101", "body": "All of these notes can be inside a comment block:\r\n```\r\n<!---\r\nRemove sections that do not apply.\r\n\r\nThis issue tracker is only ...\r\n\r\nGeneral bitcoin questions ...\r\n\r\n...\r\n--->\r\n```\r\nSo that the user can see it when writing but it won't show. ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084411", "body": "uh, I guess it's what @laanwj suggests above.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084411/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bitspill": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12212", "title": "Trivial: Fix spelling in zapwallettxes test description", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanofsky": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12211", "title": "Avoid potential null dereference in ReceiveCoinsDialog constructor", "body": "Not a bug in practice because current `WalletModel::getDefaultAddressType()` implementation does not dereference its `this` pointer.\r\n\r\nEncountered issue while rebasing #10244 after #11991 was merged.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luke-jr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12208", "title": "GUI: Rephrase Bech32 checkbox texts, and enable it with legacy address default", "body": "- \"Bech32\" isn't very user-friendly; used \"native segwit\" as in #11937.\r\n- You don't spend from addresses.\r\n- No reason to block off Bech32 access with legacy address default.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847047", "body": "My directory is so cluttered that I use \"git status -uno\" ;)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "morcos": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12204", "title": "Fix overly eager BIP30 bypass", "body": "In #6931 we introduced a possible consensus breaking change by misunderstanding how completely BIP 34 obviated the need for BIP 30.  Unfixed, this could break consensus after block height about 1.9M.  Explained in code comment.\r\n\r\nh/t @sdaftuar ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fwolfst": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12192", "title": "Trivial: Update http URL of MIT license to use https", "body": "In two steps, update the links as described in the issue.\r\n\r\nFirst commit: `sed` everything.\r\nSecond commit: Fix whitespace syntactic sugar that got bitter due to different length of URLs.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ericallam": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12189", "title": "[Qt] Display transaction fee with sat/vbyte value in SendCoinsDialog", "body": "Related to issue #11564, this PR designed to provide feedback to the user about their relative transaction fee before they finish broadcasting their tx to the bitcoin network. \r\n\r\nDisplaying the sat/vbyte is useful for knowing how likely their tx will be included in an upcoming block when using public fee estimation tools like https://jochen-hoenicke.de/queue/#24h, https://estimatefee.com, and https://bitcoinfees.earn.com.\r\n\r\nThis updates the SendCoinsDialog to look like this:\r\n\r\n<img width=\"838\" alt=\"screen shot 2018-01-15 at 12 46 14\" src=\"https://user-images.githubusercontent.com/534/34943625-4f0037a6-f9f4-11e7-8a77-49d35df34c76.png\">", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeffrade": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12187", "title": "[Docs] Updating benchmarkmarking.md with an updated sample output", "body": "This PR is just a documentation update for someone (or myself) that looks into finishing up #7883 in the future.\r\n\r\nLooked through #7883 and appears [ryanofsky's PR](https://github.com/bitcoin/bitcoin/pull/8873) setup the benchmarks, but there are `FIXME` comments to pull in data from `test/` to get a larger data set (assuming reason why 7883 is still open).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kekimusmaximus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12184", "title": "[TRIVIAL] Drop C headers in favour of C++-compatibility headers.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12183", "title": "Make use of emplace in nonassociative containers.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12182", "title": "[TRIVIAL] Remove useless string initialization.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12169", "title": "Avoid temporary copies in C++11 ranged-based for loops.", "body": "The ::value_type of the std::map/std::unordered_map containers is\r\nstd::pair<const Key, T>.\r\n\r\nCurrently a lot of loops drop the const from the iterator which forces\r\nthe compiler to create a copy, this should be avoided by using the auto\r\nkeyword.\r\n\r\nA better explanation can be found in Meyer's Effective Modern C++.\r\n\r\nhttps://books.google.de/books?id=rjhIBQAAQBAJ&lpg=PA41&ots=FmZL15vynY&pg=PA41#v=onepage&q&f=false", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12159", "title": "Use the character based overload for std::string::find.", "body": "std::string::find has a character based overload as can be seen here\r\n(4th oveload): http://www.cplusplus.com/reference/string/string/find/\r\n\r\nUse that instead of constantly allocating temporary strings.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12158", "title": "Avoid unnecessary copy of objects.", "body": "* removed unnecessary value arguments.\r\n* removed unnecessary copy initialization.\r\n* removed unnecessary for range copy.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jtimon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12172", "title": "Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished", "body": "Fixes https://github.com/bitcoin/bitcoin/issues/12142\r\n\r\nThe tests are a little bit slow, mempool_persist.py goes from about 20 s to about 120 s in my hardware.\r\nPerhaps there's a better way to test this.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maaku": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12167", "title": "Make segwit failure due to CLEANSTACK violation return a SCRIPT_ERR_CLEANSTACK error code", "body": "If a segwit script terminates with a stack size not equal to one, the current error code is EVAL_FALSE. This is semantically wrong, and prevents explicitly checking CLEANSTACK violations in the unit tests. This PR changes the error code (and affected unit tests) to use SCRIPT_ERROR_CLEANSTACK instead of SCRIPT_ERROR_EVAL_FALSE.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnewbery": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12166", "title": "[docs] Clarify -walletdir usage", "body": "After discussion with @ryanofsky around #11687 , I think this documentation is a bit clearer for how the new `-walletdir` argument works.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kashyap2690": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12149", "title": "Unlock Wallet Implemented.", "body": "For frequent operation which requires an unlocked wallet, use Unlock Wallet menu option for keeping the wallet unlocked till the application is running.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cdecker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624388", "body": "We already have generic keystores on Linux machines, why not adapt Bitcoin to use them and provide a really simple one for systems that do not provide their own?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624421", "body": "Just delete all the block data and redownload the block chain.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641454", "body": "Seems to me as trying to fix an intermediate problem, I'd much rather see a patch adding the ability to specify a listen port. But the patch to disable IRC bootstrapping seems nice.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gavinandresen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624408", "body": "See my python bitcointools for code that can read and write the key/value pairs in wallet.dat (fixwallet.py reads the wallet and writes out a new wallet, leaving out any keys that seem to be mis-formatted).\n\nMerging wallets is hard because you have to teach bitcoin to re-scan the block chain for transactions to or from keys you just imported.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624435", "body": "Is this useful at all if there is no matching import?\n(export is pretty easy, the import is what is hard...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625002", "body": "See the blockheaders feature branch here for initial work on this.  Notes from Satoshi:\n\nCBlockIndex contains all the information of the block header, so to operate with headers only, I just maintain the CBlockIndex structure as usual.  The nFile/nBlockPos are null, since the full block is not recorded on disk.\n\nThe code to gracefully switch between client-mode on/off without deleting blk*.dat in between is not implemented yet.  It would mostly be a matter of having non-client LoadBlockIndex ignore block index entries with null block pos.  That would make it re-download those as full blocks.  Switching back to client-mode is no problem, it doesn't mind if the full blocks are there.\n\nIf the initial block download becomes too long, we'll want client mode as an option so new users can get running quickly.  With graceful switch-off of client mode, they can later turn off client mode and have it download the full blocks if they want to start generating.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035", "body": "Small, correct, if it breaks on Windows I'll be extremely surprised (and will back it out).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629871", "body": "Could you post a [PULL REQUEST] about this on the Dev&Tech forum: http://www.bitcoin.org/smf/index.php?board=6.0\n\nUntil we figure out where we want to discuss pull requests (on the forum or maybe directly here), I figure it is best to do both.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632251", "body": "I'm a little worried that if this feature gets popular the IRC channel and the 'addr' messages flying across the network might be overwhelmed with the IP addresses of clients that aren't listening.  New nodes joining might then spend a long time trying and failing to connect.\n\nI'd be more comfortable if the patch also taught the client NOT to advertise its own IP:port on the IRC channel or via 'addr' broadcasts.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644279", "body": "minconf=N only credits coins received that have N or more confirmations.\n\nIt still debits all sent coins, regardless of how many confirmations they have.\n\nThe reasoning is:  you can't be 100% sure that coins you are receiving are single-spent.  But you CAN be 100% sure that YOU are not trying to double-spend coins.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650074", "body": "What happened:\n\nSend 50.006... was rounded to 50.01 (amounts get rounded to two decimals).  Causing insufficient funds message.\n\nSend 50  ran into special-case code for micropayments; if making change would result in less than 0.01 coins (which would trigger the you-must-pay-a-0.01-fee transaction spam prevention code), then the sub-cent amount is sent along as a transaction fee.\n\nAt the very least, the RPC code should put the amount being sent in the insufficient funds message.\n\nDoing something more with sub-cent transactions needs more careful thought...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658512", "body": "Discussion here: http://www.bitcoin.org/smf/index.php?topic=2647.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658519", "body": "I'm proposing a simpler api; see http://www.bitcoin.org/smf/index.php?topic=2647.0\n\nI believe you can build what you want on top of the lower-level \"tell me when there are new blocks and transactions\".\n\nFor example, note the transaction ID when you get notified of a new transaction.  Then when you get notified of new blocks, call gettransaction <txid> to get the status of transactions that had fewer than $minconf confirmations.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659336", "body": "You could replace polling every N minutes with a monitorblocks callback that did what you are doing now-- because you know that transactions won't get more confirmations unless new blocks have been received.  You should end up with more accurate results (you'll update as soon as bitcoind sees a new block) with less polling.\n\nYou would probably ignore the transactions in the block, unless you want to do something with 1-confirmation transactions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661975", "body": "I submitted a pull request today to add \"details\" to gettransaction output.  You'll get one or more objects that give category (send or receive), account, and address.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665439", "body": "Before I lose them:\n  http://pastebin.com/evGiRVw2\nand\n  http://pastebin.com/wxCnw5SF\n... are listaccounts and gettransactions '*' output.  getbalance returns 850.05, sum(accounts) is 853.05...  I'll be debugging this more tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/367326", "body": "That'll teach me to pull without sanity-check compiling first...\nThis breaks the GUI build:  CMainFrame::OnMenuOptionsGenerate(wxCommandEvent&)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/367326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562179", "body": "I think the right place for a CRITICAL_BLOCK is SetCrypted()...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563002", "body": "See line 2163 of rpc.cpp.  The cs_main and cs_wallet mutex are grabbed before making RPC calls.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563024", "body": "Yes, it is overkill, but until we have a sane locking scheme I'm not\ngoing to spend the time required analyzing every new RPC method (or\nevery change to the existing RPC methods) to figure out whether\nthey're locking the right stuff in the right order. And I don't trust\nthat anybody else will, either.\n## \n## \n\nGavin Andresen\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564265", "body": "I commented in the issue Matt opened:\n\nCan somebody double-check to see if I'm reading the code correctly?\n\nLooks like both BitcoinMiner and getwork() call IncrementExtraNonce()\nto create unique coinbase transactions, so I don't think this is an\nissue.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578381", "body": "Could... although as 0.4 rolls out there will be more and more non-0.3 nodes to talk to.\nThis change is because downloading from a 0.3.20-0.0.23 client is broken (you'll get disconnected repeatedly).\n\nIf it becomes a big problem, we could ask the broken versions to upgrade using the alert mechanism.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "davout": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624966", "body": "Deletion is not necessary,\ndoesn't it already happen anyway when wallet is replaced ?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624969", "body": "Yes, I forgot that\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625250", "body": "File should be human-readable\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625251", "body": "Duplicate of #2\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647117", "body": "Wow, I just sent 50 BTC, and now the client is reporting zero balance...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633521", "body": "I had originally made a forum post, with the patch attached, but the forum decided to eat it due to (invalid attachment type .patch). Then I found out about this feature :) But I'll make a new post and simply link here.\n\nValid issue about the IRC channel. I had considered that, and was under the impression that this if clause in net.cpp handled it (as in case of proxy or -connect, also no IRC connection should be made):\n\n```\nif (fUseProxy || mapArgs.count(\"-connect\") || fNoListen)\n```\n\nSeems I was wrong.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633522", "body": "Ah, I see the new commit (don't connect to IRC on -nolisten) was automatically added here.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mikegogulski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654419", "body": "Forum references for URI scheme discussion:\n- http://www.bitcoin.org/smf/index.php?topic=1877.0\n- http://www.bitcoin.org/smf/index.php?topic=1840.msg24927#msg24927\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658540", "body": "Hey Gavin,\n\nI can see there would be applications for what you're doing with that API.\n\nSeems like it would be painful to work with for e-commerce, though. Right now I can just poll an account/label linked to an open purchase order to check the balance and confirmations. Using this API would require (I think) responding to the JSON-RPC callback POST by sending a flurry of RPC calls to check on the each of the transactions in the new block. Given the complexity and traffic involved in that, I'd probably just continue to use periodic polling.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659367", "body": "I see how it could work, sure. But the sample JSON output you provided on the forum post showed the callback passing some general block info and then simply a list of transaction IDs.\n\nFor each transaction ID, I would have to determine if it's relevant to my open orders, then check each relevant transaction for the number of confirmations and the balance on the associated account/address in the wallet. Right now that would mean one RPC method call per transaction in the block. \n\nUnless monitorblocks is going to cough up some per-transaction data correlating transactions with accounts/addresses, I can't see an advantage to using it over polling.\n\nActually, maybe I'm totally missing something. The current implementation of gettransaction returns something like:\n\n```\n$ bitcoind gettransaction 270d70635927aac5ec9b42fda27e539ae50a7a06bc3bb2fb98e086e11446a3e6\n{\n\"amount\" : -0.02000000,\n\"fee\" : 0.00000000,\n\"confirmations\" : 248,\n\"txid\" : \"270d70635927aac5ec9b42fda27e539ae50a7a06bc3bb2fb98e086e11446a3e6\",\n\"message\" : \"comment\",\n\"to\" : \"comment-to\"\n}\n```\n\nHow do I associate this with an account or address?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659395", "body": "There's definitely something to this.\n\nI think the spam potential of your first use case is too nasty to contemplate. I'd be satisfied with commerce systems including a business rule which says \"if you want further notifications, attach an email address to your order\". The spam problem is already addressed broadly in the email domain, and email addresses can be rather anonymous.\n\nSigning an email with the bitcoin key is a neat idea, but there's a lack of symmetry in the typical commerce application. Customer learns a bitcoin address for vendor, so vendor can later sign messages back to customer using that address's private key. Not so in the reverse, unless the customer provides an address of their own as part of the exchange.\n\nWhat I would like to see is the ability to attach a small, optional data field to a transaction. For example, here in Slovakia, the banking system provides for the attachment of several fields to an electronic payment: constant symbol (4), variable symbol (10), specific symbol (16?), note (32?). The constant symbol is used for tax accounting purposes, and the rest are used to correlate payments with accounts, similar to \"please be sure to include your account/invoice number on your check\".\n\nI'm guessing this is already provided for in the protocol, though I'm not familiar with that part of the implementation. Also, it's arguable that it's not necessary if a merchant generates a new bitcoin address for each payment. Not a big priority, really.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307", "body": "Hooray!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665433", "body": "Eek!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665453", "body": "txid 22c1af3bc7f21a1ee74fbe63fcc58d0433ce2c574cf042a8f9129f989ebac68d has two entries associated with it, one of which is for BTC 3, and this is the only BTC 3 transaction in what you pastebinned. Maybe a place to look.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sipa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/346324", "body": "This seems strange to me. If a single dependency of an own transaction is in the block chain, the transaction as a whole will be considered confirmed?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/346324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/474782", "body": "Why not return enum DBErrors?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/474782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564402", "body": "They both call IncrementExtraNonce... which resets the extra nonce every second after overflowing. This guarantees unique block candidates, but not unique coinbase transactions. When an infinite supply of pubkeys are available, this isn't a problem, because after creating a block, the previous default pubkey will be in use, and a new one will be used.\n\nMy suggestion: add the current timestamp to the coinbase when no fresh pubkeys are available.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812418", "body": "That doesn't seem very necessary.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16333558", "body": "gen.cpp?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16333558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "hbons": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398363", "body": "typo: 'antwoord'\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398365", "body": "Portefeuille isn't capitalised elsewhere...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "andyparkins": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475010", "body": "Does the key memory allocated in key.h by OpenSSL in EC_KEY_generate_key() need mlock()ing too?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475050", "body": "I'll have a go.  I'm not entirely clear on which call triggers the memory allocation though.  Is it in MakeNewKey() or CKey(); does EC_regenerate_key() allocate new memory?  The OpenSSL documentation is seemingly non-existent for EC_xxx functions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475093", "body": "I wasn't thinking of altering OpenSSL; more like calling mlock() in a CKey member.\n\n```\nCKey()\n{\n    pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n    if (pkey == NULL)\n        throw key_error(\"CKey::CKey() : EC_KEY_new_by_curve_name failed\");\n    mlock( pkey, sizeof( *pkey ) );\n    fSet = false;\n}\n```\n\nBut that's not going to work because EC_KEY isn't an exported structure, so sizeof() won't work; nor is there any way to see what internal memory structures in EC_KEY have been allocated.\n\nBah.\n\nSomeone else must have solved this already.  I'll have a search.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475142", "body": "A bit of poking and I've found `CRYPTO_malloc_locked()` in `crypto/mem.c`. It looks like its only called for RSA though.\n\nChanging plain `malloc()` for the whole of OpenSSL seems like a mistake as it would make every single byte of memory allocated by OpenSSL locked.  That doesn't seem wise.  It looks like the EC allocation is done in `EC_GROUP_new()` with `OPENSSL_malloc()`.  I have no idea what part of that structure even holds the private key.\n\nOkay; I'm giving up now.  OpenSSL is making my brain hurt.\n\nThe private key will have to be swappable, through no fault of bitcoin's.\n\nSorry to have wasted your time.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "TheBlueMatt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475036", "body": "Yes, care to write it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475061", "body": "OpenSSL allocates the memory itself, so you have to hack up openssl to make it mlock.  (for some reason the entire openssl source code has no references to mlock()).  There are functions in openssl that allow you to override malloc, though I can't remember what they were and they aren't documented, well unless you count nondescriptive comments.  \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475084", "body": "You never know what other issues might have gotten in the way, this way it captures more errors than just the return value of TopUpKeyPool will.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475117", "body": "In the small amount of research I did when I was looking at doing this, it looked overriding malloc for openssl was the only safe way (note that yours isnt much safer than not because its in the memory un-mlocked during the creation of the key, which probably takes longer than anything using that key.  Its not a matter of modifying openssl, it provides publicly-accessible functions to make it override malloc, so you can use those, but you have to figure out how it works first.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475222", "body": "I was under the impression that there was a function to override malloc for only keying material, but I might be wrong, I didnt do enough research as its not documented and seems too much like a hack for my taste.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562138", "body": "To be safe, it might be a good idea to lock this.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562481", "body": "To be honest, I hadnt thought that through...shouldnt be hard to fix though: #482\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562983", "body": "No way this doesnt need a cs.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562984", "body": "Shouldnt this have a cs?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563007", "body": "Isnt that a bit...overkill?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578510", "body": "60% of listening nodes are 0.3.23 only because 0.3.24 doesnt disconnect you all the time.\nThere are way more 0.3.24 nodes, but they have their connection slots full all the time.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sgimenez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475074", "body": "I think this GetArg is not appropriate here, the return value from TopUpKeyPool() should be used instead.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475113", "body": "Then, add this test at the end of TopUpKeyPool.\nIntruding CWallet internals from rpc.cpp is just bad, IMHO.\n\nPublic interfaces between pieces of code are so blurry in bitcoin code...\nThis is just one more example.\n(But maybe C++ is the one to blame here)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "casascius": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562434", "body": "This edit states that the \"default key\" will be used as the target for payouts for mining.  If this is correct, then it might be problematic and could result in a loss of funds to miners.  When miners mine more than one block using the same payout address, the coinbase transactions in each block are identical, which results in them having an identical sha256 hash, which results in all but the first one being unidentifiable and hence unspendable.  I suppose you might be aware of that, but wanted to point this out just to prevent the possibility of it being an expensive consequence for somebody else.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "n1bor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578270", "body": "Careful with this one as 60% of listening servers are 3.23 - http://bitcoinstatus.rowit.co.uk/versionsDay.png, so could overload others?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "fanquake": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81896071", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81896071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82111720", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82111720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41837480", "body": "Ideally this should be ignored on the dev machine.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41837480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "paveljanik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82020848", "body": "micro-nit: DBL space\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82020848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87373853", "body": "I wanted to do so first, but the URLs are fragile and can change. And when the separate \"Report security issues\" page happens at bitcoincore.org, we will have to change URL here. Mail will probably be the same.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87373853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87382621", "body": "How can you predict it will be a subsection? What if en-GB speakers will ask for en-GB and en-US page?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87382621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rebroad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812420", "body": "it's not.. I've removed this and made a new fixup commit now. Just need to squash(?) the commits together now.. @sipa, can you remind me the git command please?\n\n(the /build/ line is needed though, right? without it, git status reports on the contents of the build directory...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/818160", "body": "out of interest, how come I needed to add this line, but no one else seems to need it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/818160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839004", "body": "If i don't add this line, git complains. How do you manage without git wanting this directory added or ignored?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839081", "body": "Strangely, i can't add .gitignore to .gitignore. It ignores that line! \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Diapolo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/838976", "body": "That should not be here I guess.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/838976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839063", "body": "Sorry, I'm no GIT master :-/. But I never had a pull or commit, where I needed to include .gitignore.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jgarzik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16335943", "body": "No, gen.cpp is not a generated file to be ignored.  It definitely should be checked into git.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16335943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dexX7": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41850244", "body": "I'm very open to removing it (or other parts), but the precedence was basically the ignore of the Qt Creator project files.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41850244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42734779", "body": "I'm currently not at home, but later I can edit and remove the lines. But just for my understanding: isn't it pretty common to ignore project/editor specific files via the `.gitignore`?\n\nAs for the change:\n\n``` diff\n- # Qt creator\n- *.pro.user\n- \n- # NetBeans\n- nbproject/\n- \n```\n\nAnything else?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42734779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "3": {"laanwj": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12219", "title": "More granular net logging", "body": "#11583 moved many network logging messages to the `net` category, including the version messages for new connections.\r\n\r\nI think this was a good idea in itself, however this means that the only way to get information about connections and abnormal things happening is to enable *all* network logging. This includes every single message and transaction, bogs down performance and fills up the disk quickly.\r\n\r\nI'd like a category for just low-traffic network logging.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898f560b55aba2070f188b0223ef2beefcdede8b", "message": "Merge #12206: qa: Sync with validationinterface queue in sync_mempools\n\nfa1e69e qa: Sync with validationinterface queue in sync_mempools (MarcoFalke)\n\nPull request description:\n\n  Commit e545dedf72bff2bd41c93c93eb576929fce37112 moved `TransactionAddedToMempool` to the background scheduler thread. Thus, adding a transaction to the mempool will no longer add it to the wallet immediately. Functional tests, that `sync_mempools` and then call into wallet rpcs will race against the scheduler thread.\n\n  Fix that race by flushing the scheduler queue.\n\n  Fixes #12205; Fixes #12171;\n  References #9584;\n\nTree-SHA512: 14d99cff9c4756de9fad412f04e6d8e25bb9a0938f24ed8348de79df5b4ee67763dac5214b1a69e77e60787d81ee642976d1482b1b5637edfc4892a238ed22af"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17180fa608100ce1aab3df74c9db17c342c0380d", "message": "Merge #12210: wallet: Deprecate addwitnessaddress\n\ncdf3e03 wallet: Deprecate addwitnessaddress (Wladimir J. van der Laan)\n\nPull request description:\n\n  Now that segwit is natively supported by the wallet, deprecate the hack `addwitnessaddress`.\n\nTree-SHA512: f33b1c33d200fa8f1a0fba424b30e9c2a78147cde8bb0a3fd41194b77980454cddfb23da256cd6fe78726e87161deaa23357d0764e74c3eb83177cc518afa49c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdf3e03a723b1a0242199672878caf1543ba8124", "message": "wallet: Deprecate addwitnessaddress\n\nNow that segwit is natively supported by the wallet, deprecate the hack `addwitnessaddress`."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7978be899646194b6abc5b34a7f6a3311490033", "message": "Merge #12101: Clamp walletpassphrase timeout to 2^30 seconds and check its bounds\n\n134cdc7 Test walletpassphrase timeout bounds and clamping (Andrew Chow)\n0b63e3c Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds (Andrew Chow)\n\nPull request description:\n\n  Fixes #12100\n\n  Makes the timeout be clamped to 2^30 seconds to avoid the issue with sign flipping with large timeout values and thus relocking the wallet instantly. Unlocking for at most ~34 years should be sufficient.\n\n  Also checks that the timeout is not negative to avoid instant relocks.\n\nTree-SHA512: 426922f08c54e323d259e25dcdbebc2cd560708a65111ce6051493a7e7c61e79d9da1ea4026cc0d68807d728f5d7c0d7c58168c6ef4167b94cf6c2877af88794"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adce1de9a6ce5b41c4117b62f705bca53bf97216", "message": "Merge #12198: rpc: Add deprecation error for `getinfo`\n\n49e5f3f rpc: Add deprecation error for `getinfo` (Wladimir J. van der Laan)\n\nPull request description:\n\n  Add a short informative deprecation message when users use `getinfo`, that points them to the new calls\n   here to get the different information fields.\n  This is meant to be temporary, for one release only.\n\nTree-SHA512: 4fccd8853762d0740d051d9e74cdea5ad6f8d5c0ba67d69e8dd2ac8a1538d8270c1a1fab755d9f052ff3b3677753b09138c8c5ca0bc92d156de90413cd5c1814"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e5f3ff7e940b8da7d9e7252d2b1e27bd192ae4", "message": "rpc: Add deprecation error for `getinfo`\n\nAdd a short informative deprecation message when users use `getinfo`,\nthat points them to the new calls where to get the different information fields."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66e3af709dd444b2d85e15c56f4608c700ff82ee", "message": "Merge #11904: Add a lock to the wallet directory\n\n2f3bd47 Abstract directory locking into util.cpp (MeshCollider)\n5260a4a Make .walletlock distinct from .lock (MeshCollider)\n64226de Generalise walletdir lock error message for correctness (MeshCollider)\nc9ed4bd Add a test for wallet directory locking (MeshCollider)\ne60cb99 Add a lock to the wallet directory (MeshCollider)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/11888, needs a 0.16 milestone\n\n  Also adds a test that the lock works.\n\n  https://github.com/bitcoin/bitcoin/pull/11687 will probably rework this to a per-wallet lock instead of just the walletdir, but this fixes the current issue\n\nTree-SHA512: 98e52d67f820e3b8f919cf361ffbb7d928f1bd67603e0ed26c5076ea02d9b3a90c3535ddf7329f3b88171396fa28dd3c87adab3577a8a217bd1e4247bda99138"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc91b7699732efc20ac1526383515c944b66d70", "message": "Merge #12173: [Qt] Use flexible font size for QRCode image address\n\n59f9e2a Use flexible font size for QRCode image address (Jonas Schnelli)\n\nPull request description:\n\n  Bech32 addresses are currently cut off in the QRCode image in the GUI receive tab.\n  This adds a simple font size calculation logic that \"must\" (down to 4pt) fix into the given image width.\n\n  Examples OSX HiDPI:\n  <img width=\"332\" alt=\"bildschirmfoto 2018-01-12 um 11 25 40\" src=\"https://user-images.githubusercontent.com/178464/34896144-c0c65d76-f78c-11e7-93e1-94dc8e203269.png\">\n  <img width=\"322\" alt=\"bildschirmfoto 2018-01-12 um 11 25 46\" src=\"https://user-images.githubusercontent.com/178464/34896145-c0edfe1c-f78c-11e7-8c09-c15155e2160e.png\">\n\n  Examples Ubuntu non HIDPI:\n  <img width=\"314\" alt=\"bildschirmfoto 2018-01-12 um 11 27 51\" src=\"https://user-images.githubusercontent.com/178464/34896151-c88347f4-f78c-11e7-8a03-df8049dcfed6.png\">\n  <img width=\"322\" alt=\"bildschirmfoto 2018-01-12 um 11 27 42\" src=\"https://user-images.githubusercontent.com/178464/34896152-c8bb881c-f78c-11e7-89d2-6f04ec608a19.png\">\n\nTree-SHA512: d749763fb748b146f77fd8d88fb7d29b07a46cde0b0f303a4006ae9cc3521b3c2e8ab43b828e243514109379898b198552e17b8f316c5a869b0cc8246b054b86"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44080a90a29292df96e92f22242785c5040000a1", "message": "Merge #12118: Sort mempool by min(feerate, ancestor_feerate)\n\n0a22a52 Use mempool's ancestor sort in transaction selection (Suhas Daftuar)\n7abfa53 Add test for new ancestor feerate sort behavior (Suhas Daftuar)\n9a51319 Sort mempool by min(feerate, ancestor_feerate) (Suhas Daftuar)\n6773f92 Refactor CompareTxMemPoolEntryByDescendantScore (Suhas Daftuar)\n\nPull request description:\n\n  This more closely approximates the desirability of a given transaction for\n  mining, and should result in less re-sorting when transactions get removed from\n  the mempool after being mined.\n\n  I measured this as approximately a 5% speedup in removeForBlock.\n\nTree-SHA512: ffa36b567c5dfe3e8908c545a459b6a5ec0de26e7dc81b1050dd235cac9046564b4409a3f8c5ba97bd8b30526e8fec8f78480a912e317979467f32305c3dd37b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db16ec82793beb941a7db2750e774246d7fbc21", "message": "Merge #11796: [tests] Functional test naming convention\n\n5fecd84 [tests] Remove redundant import in blocktools.py test (Anthony Towns)\n9b20bb4 [tests] Check tests conform to naming convention (Anthony Towns)\n7250b4e [tests] README.md nit fixes (Anthony Towns)\n82b2712 [tests] move witness util functions to blocktools.py (John Newbery)\n1e10854 [tests] [docs] update README for new test naming scheme (John Newbery)\n\nPull request description:\n\n  Splitting #11774 into two parts -- this part updates the README with the proposed naming convention, and adds some checks to test_runner.py that the number of tests violating the naming convention doesn't increase too much. Idea is this part of the change should not introduce merge conflicts or require much rebasing, so reviews of the complicated bits won't become invalidated too often; while the second part will just be file renames, which will require regular rebasing and will introduce merge conflicts with pending PRs, but can be merged later, and should also be much easier to review, since it will only include relatively trivial changes.\n\nTree-SHA512: b96557d41714addbbfe2aed62fb5a48639eaeb1eb3aba30ac1b3a86bb3cb8d796c6247f9c414c4695c4bf54c0ec9968ac88e2f88fb62483bc1a2f89368f7fc80"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9501dc27b336fc20adb0c367e0904b57bd507f51", "message": "Merge #12127: Remove unused mempool index\n\n8e617e3 Remove unused mempool index (Suhas Daftuar)\n\nPull request description:\n\n  We haven't used the \"mining_score\" index since 0.12, so remove it.\n\nTree-SHA512: ae37b8663194986eaeecfc2bbeca7ecb4ae6f0d8384515fa218cbc939a580d4b9f7f997c5297c3f1b3c3a0651edb092f373ac9a4808aaec30d38cb99d5f3ed70"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12218", "title": "net: Move misbehaving logging to net logging category", "body": "This moves the error messages for misbehavior (when available) into the line that reports the misbehavior, as well as moves the logging to the `net` category.\r\n\r\nThis is a continuation of #11583 and avoids serious-looking errors due to misbehaving peers. As it is impossible to correlate the `peer=X` numbers to specific incoming connections now without enabling the `net` category, it doesn't really help to see these messages by default.\r\n\r\nTo do this, Misbehaving() gains an optional `message` argument.\r\n\r\nE.g. change:\r\n\r\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED\r\n    2018-01-18 16:02:27 ERROR: non-continuous headers sequence\r\n\r\nto\r\n\r\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED: non-continuous headers sequence\r\n\r\nWhen there is a category for \"important\" net messages (see #12219 ), we should move it there.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12197", "title": "Log debug build status and warn when running benchmarks", "body": "Log whether the starting instance of bitcoin core is a debug or release build (--enable-debug).\r\n\r\nAlso warn when running the benchmarks with a debug build, to prevent mistakes comparing debug to non-debug results.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81895028", "body": "maybe add 'or a distribution package such as PPA'\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81895028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87372615", "body": "Indeed. The discussion belongs there, and so does the documentation. Maybe refer to the instructions for reporting security issues on the contact page: https://bitcoincore.org/en/contact/ instead of mentioning the address directly?\nIf we then happen to have GPG set up, it can be mentioned there without having to put everything into this template.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87372615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87394637", "body": "\"I wanted to do so first, but the URLs are fragile and can change\" so are email addresses.\nIt's not impossible to update this again, it just should be rare.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87394637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/10507536", "body": "Please remove this from the patch.\nYou can define your own local git ignores in `.git/info/exclude` within the repository.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/10507536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42482626", "body": "> I'm very open to removing it (or other parts), but the precedence was basically the ignore of the Qt Creator project files.\n\nYes, those should go too (also as we haven't supported qt creator builds since 0.9).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42482626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851409", "body": "In closed-source environments in which everyone uses the same IDE that is common. In open source software, where everyone uses their own editors/IDE/tools, it is less common. Only you know what files your editor produces and this may change from version to version.\nThe canonical way to do this is thus to create your local gitignore. Add this to `~/.gitconfig`:\n\n```\n[core]\n    excludesfile = /home/.../.gitignore_global\n```\n\nThen put your favourite tool's excrement filenames in that file :-)\nAnother option is to use per-project `.git/info/exclude`. These are not committed either.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851979", "body": "See #6878\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "nQuantPlatforms": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12215", "title": "Installation and data directory lock issues", "body": "I'm using Raspbian Stretch and just installed the bitcoin to setup full node using following command\r\nsudo apt-get install bitcoin-qt bitcoind\r\n\r\n1. First I was not displayed with start screen to choose location for data directory as mentioned here \r\nhttps://bitcoin.org/en/full-node#ubuntu-1610\r\n2. I have mounted FTP drive folder where I want my data directory to be pointed. \r\n3. So I always have to start bitcoin from terminal with datadir option otherwise it starts downloading into default location and I cant download entire blockchain on my pi sdcard.\r\n4. Unfortunately that doesn't work either. it always errors out saying can not obtain lock may be this and that using it.\r\n\r\nIssues:\r\n1. I assume its permission issue, but I can manually create, delete update file in that mounted location so why bitcoin app can not? is there special command it need to start with ? And no there is no other program using it or running that has it locked.\r\n\r\n2. What option is requires it to start with to show data directory location screen at start \r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Linrono": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12209", "title": "RPCAUTH doesn's seem to be recognized by the client.", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nI was trying to set up a Lightning node and ran into issues with user authentication with cookies. So, as a work around, I ended up setting up a rpcuser and rpcpassword. Looking at my debug.log, I saw the line saying that those options have been superseded by rpcauth since 2015. I looked up how to do this and found and downloaded the rpcuser.py script and ran it and I got a line to put into my config file. It looked like this.\r\n\r\n`rpcauth=linrono:8512a641e39573384c5c321d5d1527a$ab5536ee2244c70ad2efe8d68bd50e3495a7a48656794a094f5b1a2a5a874a4d`\r\n\r\nThis is not what I am using, but what I have was generated the same way. After saving this to my config file and restarting my client, I checked my debug log file and found this line. \r\n\r\n`No rpcpassword set - using random cookie authentication`\r\n\r\nI double checked and there was, indeed, a cookie file generated. \r\n<!--- What behavior did you expect? -->\r\nI thought the rpcauth was replacing the rpcuser and rpcpassword authentication.\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nNo matter what I do, I cannot seem to get the node to accept the rpcauth line in my config file. I did try to run the client with the rpcauth as a command line option. This also did not work.\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\nI am using the v0.15.1.0-g7b57bc998f33 client. It is the most up to date version provided by the ArchLinux repositories.\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nI am running ArchLinux and am using a Corei7.\r\n\r\nI'm sorry if this is a known issue or I'm doing something wrong. I did try to search for more information and found comments on this bitcoin Stack Exchange question with the same issue but no resolution. \r\n\r\n`https://bitcoin.stackexchange.com/questions/46782/rpc-cookie-authentication`\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sjors": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12191", "title": "bech32-optimized QR codes", "body": "@sipa said in #11991:\r\n\r\n> I haven't looked at the code, but inside QR codes it's advantageous to use uppercase Bech32 (it will result in a smaller QR encoding).\r\n\r\nIs that still the case when rendered as URI?\r\n\r\nShould amounts be added in a different way?\r\n\r\nWould that involve amending BIP-21?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ac8907ce6ab095b37858d6e96946b59ce1c13f", "message": "[qt] receive tab: bech32 address opt-in checkbox\n\nWhen launched with -adresstype=legacy the checkbox will be hidden."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12216", "title": "scripted-diff: prefix [address|change]type parameters with 'default'", "body": "Making it clear that these parameters can be overridden by individual wallet commands.\r\n\r\nRequesting 0.16 tag, as it's probably not worth changing otherwise.\r\n\r\nThis makes grateful use of the fact that @sipa used an underscore for `address_type` and `change_type` RPC arguments.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12200", "title": "Bind functional test nodes to 127.0.0.1", "body": "Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\r\n\r\nTo test, make an arbitrary whitespace change to `src/bitcoind.cpp` and recompile. This normally resets the firewall's memory.\r\n\r\nEasiest way to reproduce a popup without running the test suite:\r\n\r\n```sh\r\nsrc/bitcoind -regtest -bind=127.0.0.1 # No popup\r\nsrc/bitcoind -regtest # Popup\r\n```\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12152", "title": "[WIP] misc. backwards compatibility tests", "body": "Builds on top of #12134.\r\n\r\nTests:\r\n- [x] v0.16 generated wallets don't work on older versions\r\n- [x] the five SegWit wallet scenario's (including bech32 address)  \r\n\r\nTest framework changes (or: things I'm doing wrong):\r\n- [ ] method to copy wallet\r\n- [ ] method to push and pop wallet backups\r\n- [ ] remember network topology between start and restart\r\n\r\nSuggestions for additional tests welcome. I'll make individual PR's later.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dukeh3": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12186", "title": "Debian folder is for 1.4x and does not work for 15.1", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nThe debian file in contrib does not work with latest build. Also if you try to use the latest in debian stable ( build around 15.1 ) fails too. \r\n\r\n\r\n<!--- What behavior did you expect? -->\r\nBuilding a nice debian package\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\nThe build fails with lost of errors\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nEvery time\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\n15.1 Tag\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nx86 Debian stable\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dooglus": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12179", "title": "\"abandon transaction\" only removed tx from display until client restart", "body": "commit 45cf8a03cb57b8639a8d47323bde46ba22d9eeaf\r\n\r\nI recently made a transaction with too-low fees. I was in a hurry to get it confirmed, so I clicked \"increase transaction fee\" a bunch of times. Each time I clicked it, it added an extra transaction to the transactions tab.\r\n\r\nEventually one of the transactions confirmed, and all the others were marked as \"conflicted\". I right-clicked each of the conflicted transactions in turn and selected \"abandon transaction\". That caused them to disappear from the transactions tab.\r\n\r\nWhen I restarted the client, all the conflicted transactions reappeared. I was hoping they would be gone permanently.\r\n\r\nAm I misunderstanding what \"abandon transaction\" should do, or is it not working correctly?\r\n\r\nEdit: two related points from this experience:\r\n\r\n1) I wanted to double the fee, but \"increase transaction fee\" didn't give me any way to say how much to increase it by, so I had to click it maybe 20 times to get to the fee I wanted.\r\n\r\n2) I was able to select all the conflicted transactions at once, and right-click the group. When I selected \"abandon transaction\" on the group, it only deleted one transaction from the display, not all of them. Why let me select multiple transactions if the right-click menu only operates on one of them anyway?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DrakonAlpha": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12176", "title": "Application crashes when the connected hard disk drive gets disconnected", "body": "Application crashes when the connected hard disk drive gets disconnected. Error message would be ok, but crash ist inacceptable.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jappiecr": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12170", "title": "Bitcoin core doens't respond", "body": "Hi,\r\n\r\nBitcoin core 0.15.1 get's stuck when I try to open program. Most of the time it goes through the update startup rocess oke and then wehen it starts loading it get's stuck.\r\nI looked in the error.log and this is what it says something like:\r\n2018-01-12 12:08:05 LevelDB read failure: IO error: E:\\BT\\chainstate\\101461.ldb: Can't execute because of an error in I/O-device.\r\n\r\n\r\n2018-01-12 12:08:05 IO error: E:\\BT\\chainstate\\101461.ldb: Can't execute because of an error in I/O-device.\r\n\r\nI have the bitcoin folder on external harddrive. It worked fine a couple of weeks ago when I went to update after a couple of months of not connecting. Everything was updated fine and working properly. Then  I wanted to do a little test and opend an online account on Blockchain and transfered a minimal amount as a test. Test went fine but after that I was no longer able to open my Bitcoin Core wallet because of above descibed error.\r\n\r\nCan anybody help?\r\nThanks in advance!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarcoFalke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1e69e52bf8de08b1ce7a774416aa7a8d20068b", "message": "qa: Sync with validationinterface queue in sync_mempools"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad504bf4c302f7a72e0a0e191f3fdbafda7340f", "message": "Merge #12177: trivial: fix address_type help text of getnewaddress and getrawchangeaddress\n\n5f911c5cc2 trivial: fix address_type help text of getnewaddress and getrawchangeaddress (mruddy)\n\nPull request description:\n\n  \"p2sh\" in the help messages should have been \"p2sh-segwit\".\n\n  The messages before this patch:\n\n  `help getnewaddress`\n  \"address_type\"   (string, optional) The address type to use. Options are \"legacy\", \"**p2sh**\", and \"bech32\". Default is set by -addresstype.\n\n  `help getrawchangeaddress`\n  \"address_type\"           (string, optional) The address type to use. Options are \"legacy\", \"**p2sh**\", and \"bech32\". Default is set by -changetype.\n\nTree-SHA512: 6dfc0bebe577995f5521b83a12854045ac3eda4e65c9b92fc581da4ee68ab1218e05af82f2154bb2640a0813c5f79e010cd9e5ada449494c8831b3757bda854c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cf8a03cb57b8639a8d47323bde46ba22d9eeaf", "message": "Merge #12168: Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/)\n\n648bdc8cc0 Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/) (Jan Sarenik)\n\nPull request description:\n\n  http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html\n  http://man7.org/linux/man-pages/man2/fcntl.2.html\n\nTree-SHA512: 82c7e0aba55f34a6fec60bdecb712b65c84422461454f0ae9eed5e1bb31bf585c5a65f49bbdd5a89feb59140a998ad6fcd5573ede123a12b2ba2ff677d95cc2b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7450cdbd89a1c862f4d4d8bf093f8a0b5448f9c", "message": "Merge #11970: Add test coverage for bitcoin-cli multiwallet calls\n\na14dbff39e Allow multiwallet.py to be used with --usecli (Russell Yanofsky)\nf6ade9ce1a [tests] allow tests to be run with --usecli (John Newbery)\nff9a363ff7 TestNodeCLI batch emulation (Russell Yanofsky)\nca9085afc5 Prevent TestNodeCLI.args mixups (Russell Yanofsky)\nfcfb952bca Improve TestNodeCLI output parsing (Russell Yanofsky)\n\nPull request description:\n\n  Lack of test coverage was pointed out by @jnewbery in https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158133900\n\nTree-SHA512: 5f10e31abad11a5edab0da4e2515e39547adb6ab9e55e50427ab2eb7ec9a43d6b896b579b15863e5edc9beee7d8bf1c84d9dabd247be0760a1b9ae39e1e8ee02"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0910cbe4ef31eb95fd76c7c2f820419fe64a3150", "message": "Merge #12082: Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json\n\n18be3ab139 Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json (Chris Stewart)\n\nPull request description:\n\n  We are missing a test vector for SINGLE|ANYONECANPAY inside of tx_valid.json. This addresses the issue #12060\n\nTree-SHA512: e3526113477dbf575c4a844cf489dcfa2c037c6d928af6f97413edc1a8d29cdf2143da96471cdfd3de08bf5ed178117ed67926fd70fd42ca391ac0bb0d08f3fd"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12217", "title": "qa: Add missing syncwithvalidationinterfacequeue to tests", "body": "Fixes intermittent travis failures with those tests caused by a missing flush of mempool txes to the wallet.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12193", "title": "RPC: Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d)", "body": "Rebased version of  #11386 by karel-3d.\r\n\r\nCloses:  #11386", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81920315", "body": "Maybe comment the comments out, so it is not required to delete them?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81920315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87377352", "body": "I think https://bitcoincore.org/en/contact/ will always be the page for contact, even if there is a subsection with a list of gpg keys.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87377352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/150910060", "body": "```vim\r\ns/and are/are/", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/150910060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jonasschnelli": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/062c8b69f4ccae323d675685da8cbfcb7ccd0c55", "message": "Merge #11991: [qt] Receive: checkbox for bech32 address\n\n63ac8907c [qt] receive tab: bech32 address opt-in checkbox (Sjors Provoost)\n\nPull request description:\n\n  <img width=\"647\" alt=\"schermafbeelding 2018-01-12 om 18 34 48\" src=\"https://user-images.githubusercontent.com/10217/34887691-a6a796fe-f7c7-11e7-8b89-87ce07c61ce3.png\">\n\n  Checkbox does what you would expect. Press tab from the amount field to get there.\n\n  It's unchecked by default.\n\n  When launched with `-addresstype=bech32` it's checked by default. When launched with `-addresstype=legacy` it unchecked and disabled.\n\n  The change in `receivecoinsdialog.ui` is smaller than it looks, due to the way git handles XML diffs. I had to add a horizontal spacer to make it look decent, see https://github.com/bitcoin/bitcoin/issues/11950#issuecomment-352870909. This causes column numbers to change in the rest of the grid.\n\n  I recommend testing on at least one other OS than OSX to be on the safe side.\n\nTree-SHA512: ec4b733b796d9a94278a5d8040a69d9574ef50021e68f94f61f2da75d1bb57f39272cbc9f1f7d34f733a19640daf666a23844fcd132f83bfdaf327d9d1d6f105"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59f9e2aaf3fe73961cc02042f929b430fee59f9c", "message": "Use flexible font size for QRCode image address"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196", "title": "Add scantxoutset RPC method", "body": "Alternative to #9152.\r\n\r\nThis takes `<n>` pubkeys and optionally  `<n>` xpubs (together with a definable lookup windows where the default is 0-1000) and looks up common scripts in the UTXO set of all given or derived keys.\r\n\r\nThe output will be an array similar to `listunspent`. That array is compatible with `createrawtransaction` as well as with `signrawtransaction`.\r\n\r\nThis makes it possible to prepare sweeps and have them signed in a secure (cold) space.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MeshCollider": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f3bd47d44634cfc0a4261e64af178407ce2869c", "message": "Abstract directory locking into util.cpp"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5260a4aca1e6c11e1dbca9d3390c0dc739e81204", "message": "Make .walletlock distinct from .lock"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64226de908c76997fadf147342c494ad0662fa43", "message": "Generalise walletdir lock error message for correctness"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ed4bd58cac05b355ab103476ff29ecd10ce263", "message": "Add a test for wallet directory locking"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60cb99c580a602a83856769ad2ac882d3cdfcb5", "message": "Add a lock to the wallet directory"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sdaftuar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a22a52918ad5af6d105b4f5ae9dd6c52199f0e8", "message": "Use mempool's ancestor sort in transaction selection\n\nTransaction selection for mining tracks ancestor feerates that are\nmodified based on transactions that have already been selected.  This\ncommit de-duplicates the code so that the ancestor feerate sorting used\nby the mempool can also be directly applied to the miner."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abfa538b5a4508e0cf0589ae3ac0620b2188912", "message": "Add test for new ancestor feerate sort behavior"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mruddy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f911c5cc2f60859cf3d5553d35c1160bd264cc0", "message": "trivial: fix address_type help text of getnewaddress and getrawchangeaddress"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsarenik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/648bdc8cc09c85748967b86347bbc7825e339d5f", "message": "Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/)\n\nhttp://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html\nhttp://man7.org/linux/man-pages/man2/fcntl.2.html"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "achow101": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/134cdc7cee3da7c554e40ad947a9cdcbb3069f13", "message": "Test walletpassphrase timeout bounds and clamping"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b63e3c7b20ea54930de3ec3955406e4d4737e3c", "message": "Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds\n\nClamps the timeout of walletpassphrase to 2^(30) seconds, which is\n~34 years. Any number greater than that will be forced to be\n2^(30). This avoids the sign flipping problem with large values which\ncan result in a negative time used.\n\nAlso perform bounds checks to ensure that the timeout is positive\nto avoid immediate relocking of the wallet."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12180", "title": "scripted-diff: change kB to kvB, kilobyte to kilovbyte for transaction fee rate things", "body": "Renames kB and kilobyte to kvB and kilovbyte respectively in order to make clear the fee rates are in virtual bytes rather than actual bytes.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "promag": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12213", "title": "Add address type option to addmultisigaddress", "body": "Adds the option `address_type` to `addmultisigaddress` RPC so that `addwitnessaddress` can be avoided to obtain an `p2sh-segwit` or `bech32` multsig address.\r\n\r\nRelated to #12210 as this reduces `addwitnessaddress` usage.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12194", "title": "Add change type option to fundrawtransaction", "body": "Adds a new option `change_type` to `fundrawtransaction` RPC. This is useful to override the node `-changetype` argument.\r\n\r\nThe new option is exclusive to `changeAddress` option, setting both raises a RPC error.\r\n\r\nSee also #11403, #12119.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12153", "title": "Avoid permanent cs_main lock in getblockheader", "body": "Based on #12151, this pull reduces the lock scope in `getblockheader` RPC.\r\n\r\nNote, review last commit only.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12151", "title": "Remove cs_main lock from blockToJSON and blockheaderToJSON", "body": "Motivated by https://github.com/bitcoin/bitcoin/pull/11913#discussion_r157798157, this pull makes `blockToJSON` and `blockheaderToJSON` free of `cs_main` locks.\r\n\r\nLocking `cs_main` was required to access `chainActive` in order to check if the block was in the chain and to retrieve the next block index.\r\n\r\nWith the this approach, `CBlockIndex::GetAncestor()` is used in a way to check if the block belongs to the specified chain tip and, at the same time, get the next block index.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084101", "body": "All of these notes can be inside a comment block:\r\n```\r\n<!---\r\nRemove sections that do not apply.\r\n\r\nThis issue tracker is only ...\r\n\r\nGeneral bitcoin questions ...\r\n\r\n...\r\n--->\r\n```\r\nSo that the user can see it when writing but it won't show. ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084411", "body": "uh, I guess it's what @laanwj suggests above.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084411/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bitspill": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12212", "title": "Trivial: Fix spelling in zapwallettxes test description", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanofsky": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12211", "title": "Avoid potential null dereference in ReceiveCoinsDialog constructor", "body": "Not a bug in practice because current `WalletModel::getDefaultAddressType()` implementation does not dereference its `this` pointer.\r\n\r\nEncountered issue while rebasing #10244 after #11991 was merged.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luke-jr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12208", "title": "GUI: Rephrase Bech32 checkbox texts, and enable it with legacy address default", "body": "- \"Bech32\" isn't very user-friendly; used \"native segwit\" as in #11937.\r\n- You don't spend from addresses.\r\n- No reason to block off Bech32 access with legacy address default.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847047", "body": "My directory is so cluttered that I use \"git status -uno\" ;)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "morcos": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12204", "title": "Fix overly eager BIP30 bypass", "body": "In #6931 we introduced a possible consensus breaking change by misunderstanding how completely BIP 34 obviated the need for BIP 30.  Unfixed, this could break consensus after block height about 1.9M.  Explained in code comment.\r\n\r\nh/t @sdaftuar ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fwolfst": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12192", "title": "Trivial: Update http URL of MIT license to use https", "body": "In two steps, update the links as described in the issue.\r\n\r\nFirst commit: `sed` everything.\r\nSecond commit: Fix whitespace syntactic sugar that got bitter due to different length of URLs.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ericallam": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12189", "title": "[Qt] Display transaction fee with sat/vbyte value in SendCoinsDialog", "body": "Related to issue #11564, this PR designed to provide feedback to the user about their relative transaction fee before they finish broadcasting their tx to the bitcoin network. \r\n\r\nDisplaying the sat/vbyte is useful for knowing how likely their tx will be included in an upcoming block when using public fee estimation tools like https://jochen-hoenicke.de/queue/#24h, https://estimatefee.com, and https://bitcoinfees.earn.com.\r\n\r\nThis updates the SendCoinsDialog to look like this:\r\n\r\n<img width=\"838\" alt=\"screen shot 2018-01-15 at 12 46 14\" src=\"https://user-images.githubusercontent.com/534/34943625-4f0037a6-f9f4-11e7-8a77-49d35df34c76.png\">", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeffrade": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12187", "title": "[Docs] Updating benchmarkmarking.md with an updated sample output", "body": "This PR is just a documentation update for someone (or myself) that looks into finishing up #7883 in the future.\r\n\r\nLooked through #7883 and appears [ryanofsky's PR](https://github.com/bitcoin/bitcoin/pull/8873) setup the benchmarks, but there are `FIXME` comments to pull in data from `test/` to get a larger data set (assuming reason why 7883 is still open).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kekimusmaximus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12184", "title": "[TRIVIAL] Drop C headers in favour of C++-compatibility headers.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12183", "title": "Make use of emplace in nonassociative containers.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12182", "title": "[TRIVIAL] Remove useless string initialization.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12169", "title": "Avoid temporary copies in C++11 ranged-based for loops.", "body": "The ::value_type of the std::map/std::unordered_map containers is\r\nstd::pair<const Key, T>.\r\n\r\nCurrently a lot of loops drop the const from the iterator which forces\r\nthe compiler to create a copy, this should be avoided by using the auto\r\nkeyword.\r\n\r\nA better explanation can be found in Meyer's Effective Modern C++.\r\n\r\nhttps://books.google.de/books?id=rjhIBQAAQBAJ&lpg=PA41&ots=FmZL15vynY&pg=PA41#v=onepage&q&f=false", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12159", "title": "Use the character based overload for std::string::find.", "body": "std::string::find has a character based overload as can be seen here\r\n(4th oveload): http://www.cplusplus.com/reference/string/string/find/\r\n\r\nUse that instead of constantly allocating temporary strings.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12158", "title": "Avoid unnecessary copy of objects.", "body": "* removed unnecessary value arguments.\r\n* removed unnecessary copy initialization.\r\n* removed unnecessary for range copy.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jtimon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12172", "title": "Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished", "body": "Fixes https://github.com/bitcoin/bitcoin/issues/12142\r\n\r\nThe tests are a little bit slow, mempool_persist.py goes from about 20 s to about 120 s in my hardware.\r\nPerhaps there's a better way to test this.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maaku": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12167", "title": "Make segwit failure due to CLEANSTACK violation return a SCRIPT_ERR_CLEANSTACK error code", "body": "If a segwit script terminates with a stack size not equal to one, the current error code is EVAL_FALSE. This is semantically wrong, and prevents explicitly checking CLEANSTACK violations in the unit tests. This PR changes the error code (and affected unit tests) to use SCRIPT_ERROR_CLEANSTACK instead of SCRIPT_ERROR_EVAL_FALSE.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnewbery": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12166", "title": "[docs] Clarify -walletdir usage", "body": "After discussion with @ryanofsky around #11687 , I think this documentation is a bit clearer for how the new `-walletdir` argument works.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kashyap2690": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12149", "title": "Unlock Wallet Implemented.", "body": "For frequent operation which requires an unlocked wallet, use Unlock Wallet menu option for keeping the wallet unlocked till the application is running.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cdecker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624388", "body": "We already have generic keystores on Linux machines, why not adapt Bitcoin to use them and provide a really simple one for systems that do not provide their own?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624421", "body": "Just delete all the block data and redownload the block chain.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641454", "body": "Seems to me as trying to fix an intermediate problem, I'd much rather see a patch adding the ability to specify a listen port. But the patch to disable IRC bootstrapping seems nice.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gavinandresen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624408", "body": "See my python bitcointools for code that can read and write the key/value pairs in wallet.dat (fixwallet.py reads the wallet and writes out a new wallet, leaving out any keys that seem to be mis-formatted).\n\nMerging wallets is hard because you have to teach bitcoin to re-scan the block chain for transactions to or from keys you just imported.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624435", "body": "Is this useful at all if there is no matching import?\n(export is pretty easy, the import is what is hard...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625002", "body": "See the blockheaders feature branch here for initial work on this.  Notes from Satoshi:\n\nCBlockIndex contains all the information of the block header, so to operate with headers only, I just maintain the CBlockIndex structure as usual.  The nFile/nBlockPos are null, since the full block is not recorded on disk.\n\nThe code to gracefully switch between client-mode on/off without deleting blk*.dat in between is not implemented yet.  It would mostly be a matter of having non-client LoadBlockIndex ignore block index entries with null block pos.  That would make it re-download those as full blocks.  Switching back to client-mode is no problem, it doesn't mind if the full blocks are there.\n\nIf the initial block download becomes too long, we'll want client mode as an option so new users can get running quickly.  With graceful switch-off of client mode, they can later turn off client mode and have it download the full blocks if they want to start generating.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035", "body": "Small, correct, if it breaks on Windows I'll be extremely surprised (and will back it out).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629871", "body": "Could you post a [PULL REQUEST] about this on the Dev&Tech forum: http://www.bitcoin.org/smf/index.php?board=6.0\n\nUntil we figure out where we want to discuss pull requests (on the forum or maybe directly here), I figure it is best to do both.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632251", "body": "I'm a little worried that if this feature gets popular the IRC channel and the 'addr' messages flying across the network might be overwhelmed with the IP addresses of clients that aren't listening.  New nodes joining might then spend a long time trying and failing to connect.\n\nI'd be more comfortable if the patch also taught the client NOT to advertise its own IP:port on the IRC channel or via 'addr' broadcasts.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644279", "body": "minconf=N only credits coins received that have N or more confirmations.\n\nIt still debits all sent coins, regardless of how many confirmations they have.\n\nThe reasoning is:  you can't be 100% sure that coins you are receiving are single-spent.  But you CAN be 100% sure that YOU are not trying to double-spend coins.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650074", "body": "What happened:\n\nSend 50.006... was rounded to 50.01 (amounts get rounded to two decimals).  Causing insufficient funds message.\n\nSend 50  ran into special-case code for micropayments; if making change would result in less than 0.01 coins (which would trigger the you-must-pay-a-0.01-fee transaction spam prevention code), then the sub-cent amount is sent along as a transaction fee.\n\nAt the very least, the RPC code should put the amount being sent in the insufficient funds message.\n\nDoing something more with sub-cent transactions needs more careful thought...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658512", "body": "Discussion here: http://www.bitcoin.org/smf/index.php?topic=2647.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658519", "body": "I'm proposing a simpler api; see http://www.bitcoin.org/smf/index.php?topic=2647.0\n\nI believe you can build what you want on top of the lower-level \"tell me when there are new blocks and transactions\".\n\nFor example, note the transaction ID when you get notified of a new transaction.  Then when you get notified of new blocks, call gettransaction <txid> to get the status of transactions that had fewer than $minconf confirmations.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659336", "body": "You could replace polling every N minutes with a monitorblocks callback that did what you are doing now-- because you know that transactions won't get more confirmations unless new blocks have been received.  You should end up with more accurate results (you'll update as soon as bitcoind sees a new block) with less polling.\n\nYou would probably ignore the transactions in the block, unless you want to do something with 1-confirmation transactions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661975", "body": "I submitted a pull request today to add \"details\" to gettransaction output.  You'll get one or more objects that give category (send or receive), account, and address.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665439", "body": "Before I lose them:\n  http://pastebin.com/evGiRVw2\nand\n  http://pastebin.com/wxCnw5SF\n... are listaccounts and gettransactions '*' output.  getbalance returns 850.05, sum(accounts) is 853.05...  I'll be debugging this more tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "davout": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624966", "body": "Deletion is not necessary,\ndoesn't it already happen anyway when wallet is replaced ?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624969", "body": "Yes, I forgot that\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625250", "body": "File should be human-readable\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625251", "body": "Duplicate of #2\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647117", "body": "Wow, I just sent 50 BTC, and now the client is reporting zero balance...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633521", "body": "I had originally made a forum post, with the patch attached, but the forum decided to eat it due to (invalid attachment type .patch). Then I found out about this feature :) But I'll make a new post and simply link here.\n\nValid issue about the IRC channel. I had considered that, and was under the impression that this if clause in net.cpp handled it (as in case of proxy or -connect, also no IRC connection should be made):\n\n```\nif (fUseProxy || mapArgs.count(\"-connect\") || fNoListen)\n```\n\nSeems I was wrong.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633522", "body": "Ah, I see the new commit (don't connect to IRC on -nolisten) was automatically added here.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mikegogulski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654419", "body": "Forum references for URI scheme discussion:\n- http://www.bitcoin.org/smf/index.php?topic=1877.0\n- http://www.bitcoin.org/smf/index.php?topic=1840.msg24927#msg24927\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658540", "body": "Hey Gavin,\n\nI can see there would be applications for what you're doing with that API.\n\nSeems like it would be painful to work with for e-commerce, though. Right now I can just poll an account/label linked to an open purchase order to check the balance and confirmations. Using this API would require (I think) responding to the JSON-RPC callback POST by sending a flurry of RPC calls to check on the each of the transactions in the new block. Given the complexity and traffic involved in that, I'd probably just continue to use periodic polling.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659367", "body": "I see how it could work, sure. But the sample JSON output you provided on the forum post showed the callback passing some general block info and then simply a list of transaction IDs.\n\nFor each transaction ID, I would have to determine if it's relevant to my open orders, then check each relevant transaction for the number of confirmations and the balance on the associated account/address in the wallet. Right now that would mean one RPC method call per transaction in the block. \n\nUnless monitorblocks is going to cough up some per-transaction data correlating transactions with accounts/addresses, I can't see an advantage to using it over polling.\n\nActually, maybe I'm totally missing something. The current implementation of gettransaction returns something like:\n\n```\n$ bitcoind gettransaction 270d70635927aac5ec9b42fda27e539ae50a7a06bc3bb2fb98e086e11446a3e6\n{\n\"amount\" : -0.02000000,\n\"fee\" : 0.00000000,\n\"confirmations\" : 248,\n\"txid\" : \"270d70635927aac5ec9b42fda27e539ae50a7a06bc3bb2fb98e086e11446a3e6\",\n\"message\" : \"comment\",\n\"to\" : \"comment-to\"\n}\n```\n\nHow do I associate this with an account or address?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659395", "body": "There's definitely something to this.\n\nI think the spam potential of your first use case is too nasty to contemplate. I'd be satisfied with commerce systems including a business rule which says \"if you want further notifications, attach an email address to your order\". The spam problem is already addressed broadly in the email domain, and email addresses can be rather anonymous.\n\nSigning an email with the bitcoin key is a neat idea, but there's a lack of symmetry in the typical commerce application. Customer learns a bitcoin address for vendor, so vendor can later sign messages back to customer using that address's private key. Not so in the reverse, unless the customer provides an address of their own as part of the exchange.\n\nWhat I would like to see is the ability to attach a small, optional data field to a transaction. For example, here in Slovakia, the banking system provides for the attachment of several fields to an electronic payment: constant symbol (4), variable symbol (10), specific symbol (16?), note (32?). The constant symbol is used for tax accounting purposes, and the rest are used to correlate payments with accounts, similar to \"please be sure to include your account/invoice number on your check\".\n\nI'm guessing this is already provided for in the protocol, though I'm not familiar with that part of the implementation. Also, it's arguable that it's not necessary if a merchant generates a new bitcoin address for each payment. Not a big priority, really.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307", "body": "Hooray!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665433", "body": "Eek!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665453", "body": "txid 22c1af3bc7f21a1ee74fbe63fcc58d0433ce2c574cf042a8f9129f989ebac68d has two entries associated with it, one of which is for BTC 3, and this is the only BTC 3 transaction in what you pastebinned. Maybe a place to look.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fanquake": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81896071", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81896071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82111720", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82111720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41837480", "body": "Ideally this should be ignored on the dev machine.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41837480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "paveljanik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82020848", "body": "micro-nit: DBL space\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82020848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87373853", "body": "I wanted to do so first, but the URLs are fragile and can change. And when the separate \"Report security issues\" page happens at bitcoincore.org, we will have to change URL here. Mail will probably be the same.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87373853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87382621", "body": "How can you predict it will be a subsection? What if en-GB speakers will ask for en-GB and en-US page?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87382621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sipa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812418", "body": "That doesn't seem very necessary.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16333558", "body": "gen.cpp?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16333558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "rebroad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812420", "body": "it's not.. I've removed this and made a new fixup commit now. Just need to squash(?) the commits together now.. @sipa, can you remind me the git command please?\n\n(the /build/ line is needed though, right? without it, git status reports on the contents of the build directory...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/818160", "body": "out of interest, how come I needed to add this line, but no one else seems to need it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/818160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839004", "body": "If i don't add this line, git complains. How do you manage without git wanting this directory added or ignored?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839081", "body": "Strangely, i can't add .gitignore to .gitignore. It ignores that line! \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Diapolo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/838976", "body": "That should not be here I guess.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/838976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839063", "body": "Sorry, I'm no GIT master :-/. But I never had a pull or commit, where I needed to include .gitignore.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jgarzik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16335943", "body": "No, gen.cpp is not a generated file to be ignored.  It definitely should be checked into git.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16335943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dexX7": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41850244", "body": "I'm very open to removing it (or other parts), but the precedence was basically the ignore of the Qt Creator project files.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41850244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42734779", "body": "I'm currently not at home, but later I can edit and remove the lines. But just for my understanding: isn't it pretty common to ignore project/editor specific files via the `.gitignore`?\n\nAs for the change:\n\n``` diff\n- # Qt creator\n- *.pro.user\n- \n- # NetBeans\n- nbproject/\n- \n```\n\nAnything else?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42734779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "4": {"laanwj": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12219", "title": "More granular net logging", "body": "#11583 moved many network logging messages to the `net` category, including the version messages for new connections.\r\n\r\nI think this was a good idea in itself, however this means that the only way to get information about connections and abnormal things happening is to enable *all* network logging. This includes every single message and transaction, bogs down performance and fills up the disk quickly.\r\n\r\nI'd like a category for just low-traffic network logging.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898f560b55aba2070f188b0223ef2beefcdede8b", "message": "Merge #12206: qa: Sync with validationinterface queue in sync_mempools\n\nfa1e69e qa: Sync with validationinterface queue in sync_mempools (MarcoFalke)\n\nPull request description:\n\n  Commit e545dedf72bff2bd41c93c93eb576929fce37112 moved `TransactionAddedToMempool` to the background scheduler thread. Thus, adding a transaction to the mempool will no longer add it to the wallet immediately. Functional tests, that `sync_mempools` and then call into wallet rpcs will race against the scheduler thread.\n\n  Fix that race by flushing the scheduler queue.\n\n  Fixes #12205; Fixes #12171;\n  References #9584;\n\nTree-SHA512: 14d99cff9c4756de9fad412f04e6d8e25bb9a0938f24ed8348de79df5b4ee67763dac5214b1a69e77e60787d81ee642976d1482b1b5637edfc4892a238ed22af"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17180fa608100ce1aab3df74c9db17c342c0380d", "message": "Merge #12210: wallet: Deprecate addwitnessaddress\n\ncdf3e03 wallet: Deprecate addwitnessaddress (Wladimir J. van der Laan)\n\nPull request description:\n\n  Now that segwit is natively supported by the wallet, deprecate the hack `addwitnessaddress`.\n\nTree-SHA512: f33b1c33d200fa8f1a0fba424b30e9c2a78147cde8bb0a3fd41194b77980454cddfb23da256cd6fe78726e87161deaa23357d0764e74c3eb83177cc518afa49c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdf3e03a723b1a0242199672878caf1543ba8124", "message": "wallet: Deprecate addwitnessaddress\n\nNow that segwit is natively supported by the wallet, deprecate the hack `addwitnessaddress`."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7978be899646194b6abc5b34a7f6a3311490033", "message": "Merge #12101: Clamp walletpassphrase timeout to 2^30 seconds and check its bounds\n\n134cdc7 Test walletpassphrase timeout bounds and clamping (Andrew Chow)\n0b63e3c Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds (Andrew Chow)\n\nPull request description:\n\n  Fixes #12100\n\n  Makes the timeout be clamped to 2^30 seconds to avoid the issue with sign flipping with large timeout values and thus relocking the wallet instantly. Unlocking for at most ~34 years should be sufficient.\n\n  Also checks that the timeout is not negative to avoid instant relocks.\n\nTree-SHA512: 426922f08c54e323d259e25dcdbebc2cd560708a65111ce6051493a7e7c61e79d9da1ea4026cc0d68807d728f5d7c0d7c58168c6ef4167b94cf6c2877af88794"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adce1de9a6ce5b41c4117b62f705bca53bf97216", "message": "Merge #12198: rpc: Add deprecation error for `getinfo`\n\n49e5f3f rpc: Add deprecation error for `getinfo` (Wladimir J. van der Laan)\n\nPull request description:\n\n  Add a short informative deprecation message when users use `getinfo`, that points them to the new calls\n   here to get the different information fields.\n  This is meant to be temporary, for one release only.\n\nTree-SHA512: 4fccd8853762d0740d051d9e74cdea5ad6f8d5c0ba67d69e8dd2ac8a1538d8270c1a1fab755d9f052ff3b3677753b09138c8c5ca0bc92d156de90413cd5c1814"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e5f3ff7e940b8da7d9e7252d2b1e27bd192ae4", "message": "rpc: Add deprecation error for `getinfo`\n\nAdd a short informative deprecation message when users use `getinfo`,\nthat points them to the new calls where to get the different information fields."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66e3af709dd444b2d85e15c56f4608c700ff82ee", "message": "Merge #11904: Add a lock to the wallet directory\n\n2f3bd47 Abstract directory locking into util.cpp (MeshCollider)\n5260a4a Make .walletlock distinct from .lock (MeshCollider)\n64226de Generalise walletdir lock error message for correctness (MeshCollider)\nc9ed4bd Add a test for wallet directory locking (MeshCollider)\ne60cb99 Add a lock to the wallet directory (MeshCollider)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/11888, needs a 0.16 milestone\n\n  Also adds a test that the lock works.\n\n  https://github.com/bitcoin/bitcoin/pull/11687 will probably rework this to a per-wallet lock instead of just the walletdir, but this fixes the current issue\n\nTree-SHA512: 98e52d67f820e3b8f919cf361ffbb7d928f1bd67603e0ed26c5076ea02d9b3a90c3535ddf7329f3b88171396fa28dd3c87adab3577a8a217bd1e4247bda99138"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc91b7699732efc20ac1526383515c944b66d70", "message": "Merge #12173: [Qt] Use flexible font size for QRCode image address\n\n59f9e2a Use flexible font size for QRCode image address (Jonas Schnelli)\n\nPull request description:\n\n  Bech32 addresses are currently cut off in the QRCode image in the GUI receive tab.\n  This adds a simple font size calculation logic that \"must\" (down to 4pt) fix into the given image width.\n\n  Examples OSX HiDPI:\n  <img width=\"332\" alt=\"bildschirmfoto 2018-01-12 um 11 25 40\" src=\"https://user-images.githubusercontent.com/178464/34896144-c0c65d76-f78c-11e7-93e1-94dc8e203269.png\">\n  <img width=\"322\" alt=\"bildschirmfoto 2018-01-12 um 11 25 46\" src=\"https://user-images.githubusercontent.com/178464/34896145-c0edfe1c-f78c-11e7-8c09-c15155e2160e.png\">\n\n  Examples Ubuntu non HIDPI:\n  <img width=\"314\" alt=\"bildschirmfoto 2018-01-12 um 11 27 51\" src=\"https://user-images.githubusercontent.com/178464/34896151-c88347f4-f78c-11e7-8a03-df8049dcfed6.png\">\n  <img width=\"322\" alt=\"bildschirmfoto 2018-01-12 um 11 27 42\" src=\"https://user-images.githubusercontent.com/178464/34896152-c8bb881c-f78c-11e7-89d2-6f04ec608a19.png\">\n\nTree-SHA512: d749763fb748b146f77fd8d88fb7d29b07a46cde0b0f303a4006ae9cc3521b3c2e8ab43b828e243514109379898b198552e17b8f316c5a869b0cc8246b054b86"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44080a90a29292df96e92f22242785c5040000a1", "message": "Merge #12118: Sort mempool by min(feerate, ancestor_feerate)\n\n0a22a52 Use mempool's ancestor sort in transaction selection (Suhas Daftuar)\n7abfa53 Add test for new ancestor feerate sort behavior (Suhas Daftuar)\n9a51319 Sort mempool by min(feerate, ancestor_feerate) (Suhas Daftuar)\n6773f92 Refactor CompareTxMemPoolEntryByDescendantScore (Suhas Daftuar)\n\nPull request description:\n\n  This more closely approximates the desirability of a given transaction for\n  mining, and should result in less re-sorting when transactions get removed from\n  the mempool after being mined.\n\n  I measured this as approximately a 5% speedup in removeForBlock.\n\nTree-SHA512: ffa36b567c5dfe3e8908c545a459b6a5ec0de26e7dc81b1050dd235cac9046564b4409a3f8c5ba97bd8b30526e8fec8f78480a912e317979467f32305c3dd37b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db16ec82793beb941a7db2750e774246d7fbc21", "message": "Merge #11796: [tests] Functional test naming convention\n\n5fecd84 [tests] Remove redundant import in blocktools.py test (Anthony Towns)\n9b20bb4 [tests] Check tests conform to naming convention (Anthony Towns)\n7250b4e [tests] README.md nit fixes (Anthony Towns)\n82b2712 [tests] move witness util functions to blocktools.py (John Newbery)\n1e10854 [tests] [docs] update README for new test naming scheme (John Newbery)\n\nPull request description:\n\n  Splitting #11774 into two parts -- this part updates the README with the proposed naming convention, and adds some checks to test_runner.py that the number of tests violating the naming convention doesn't increase too much. Idea is this part of the change should not introduce merge conflicts or require much rebasing, so reviews of the complicated bits won't become invalidated too often; while the second part will just be file renames, which will require regular rebasing and will introduce merge conflicts with pending PRs, but can be merged later, and should also be much easier to review, since it will only include relatively trivial changes.\n\nTree-SHA512: b96557d41714addbbfe2aed62fb5a48639eaeb1eb3aba30ac1b3a86bb3cb8d796c6247f9c414c4695c4bf54c0ec9968ac88e2f88fb62483bc1a2f89368f7fc80"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9501dc27b336fc20adb0c367e0904b57bd507f51", "message": "Merge #12127: Remove unused mempool index\n\n8e617e3 Remove unused mempool index (Suhas Daftuar)\n\nPull request description:\n\n  We haven't used the \"mining_score\" index since 0.12, so remove it.\n\nTree-SHA512: ae37b8663194986eaeecfc2bbeca7ecb4ae6f0d8384515fa218cbc939a580d4b9f7f997c5297c3f1b3c3a0651edb092f373ac9a4808aaec30d38cb99d5f3ed70"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12218", "title": "net: Move misbehaving logging to net logging category", "body": "This moves the error messages for misbehavior (when available) into the line that reports the misbehavior, as well as moves the logging to the `net` category.\r\n\r\nThis is a continuation of #11583 and avoids serious-looking errors due to misbehaving peers. As it is impossible to correlate the `peer=X` numbers to specific incoming connections now without enabling the `net` category, it doesn't really help to see these messages by default.\r\n\r\nTo do this, Misbehaving() gains an optional `message` argument.\r\n\r\nE.g. change:\r\n\r\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED\r\n    2018-01-18 16:02:27 ERROR: non-continuous headers sequence\r\n\r\nto\r\n\r\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED: non-continuous headers sequence\r\n\r\nWhen there is a category for \"important\" net messages (see #12219 ), we should move it there.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12197", "title": "Log debug build status and warn when running benchmarks", "body": "Log whether the starting instance of bitcoin core is a debug or release build (--enable-debug).\r\n\r\nAlso warn when running the benchmarks with a debug build, to prevent mistakes comparing debug to non-debug results.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81895028", "body": "maybe add 'or a distribution package such as PPA'\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81895028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87372615", "body": "Indeed. The discussion belongs there, and so does the documentation. Maybe refer to the instructions for reporting security issues on the contact page: https://bitcoincore.org/en/contact/ instead of mentioning the address directly?\nIf we then happen to have GPG set up, it can be mentioned there without having to put everything into this template.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87372615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87394637", "body": "\"I wanted to do so first, but the URLs are fragile and can change\" so are email addresses.\nIt's not impossible to update this again, it just should be rare.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87394637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/10507536", "body": "Please remove this from the patch.\nYou can define your own local git ignores in `.git/info/exclude` within the repository.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/10507536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42482626", "body": "> I'm very open to removing it (or other parts), but the precedence was basically the ignore of the Qt Creator project files.\n\nYes, those should go too (also as we haven't supported qt creator builds since 0.9).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42482626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851409", "body": "In closed-source environments in which everyone uses the same IDE that is common. In open source software, where everyone uses their own editors/IDE/tools, it is less common. Only you know what files your editor produces and this may change from version to version.\nThe canonical way to do this is thus to create your local gitignore. Add this to `~/.gitconfig`:\n\n```\n[core]\n    excludesfile = /home/.../.gitignore_global\n```\n\nThen put your favourite tool's excrement filenames in that file :-)\nAnother option is to use per-project `.git/info/exclude`. These are not committed either.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851979", "body": "See #6878\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "nQuantPlatforms": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12215", "title": "Installation and data directory lock issues", "body": "I'm using Raspbian Stretch and just installed the bitcoin to setup full node using following command\r\nsudo apt-get install bitcoin-qt bitcoind\r\n\r\n1. First I was not displayed with start screen to choose location for data directory as mentioned here \r\nhttps://bitcoin.org/en/full-node#ubuntu-1610\r\n2. I have mounted FTP drive folder where I want my data directory to be pointed. \r\n3. So I always have to start bitcoin from terminal with datadir option otherwise it starts downloading into default location and I cant download entire blockchain on my pi sdcard.\r\n4. Unfortunately that doesn't work either. it always errors out saying can not obtain lock may be this and that using it.\r\n\r\nIssues:\r\n1. I assume its permission issue, but I can manually create, delete update file in that mounted location so why bitcoin app can not? is there special command it need to start with ? And no there is no other program using it or running that has it locked.\r\n\r\n2. What option is requires it to start with to show data directory location screen at start \r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Linrono": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12209", "title": "RPCAUTH doesn's seem to be recognized by the client.", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nI was trying to set up a Lightning node and ran into issues with user authentication with cookies. So, as a work around, I ended up setting up a rpcuser and rpcpassword. Looking at my debug.log, I saw the line saying that those options have been superseded by rpcauth since 2015. I looked up how to do this and found and downloaded the rpcuser.py script and ran it and I got a line to put into my config file. It looked like this.\r\n\r\n`rpcauth=linrono:8512a641e39573384c5c321d5d1527a$ab5536ee2244c70ad2efe8d68bd50e3495a7a48656794a094f5b1a2a5a874a4d`\r\n\r\nThis is not what I am using, but what I have was generated the same way. After saving this to my config file and restarting my client, I checked my debug log file and found this line. \r\n\r\n`No rpcpassword set - using random cookie authentication`\r\n\r\nI double checked and there was, indeed, a cookie file generated. \r\n<!--- What behavior did you expect? -->\r\nI thought the rpcauth was replacing the rpcuser and rpcpassword authentication.\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nNo matter what I do, I cannot seem to get the node to accept the rpcauth line in my config file. I did try to run the client with the rpcauth as a command line option. This also did not work.\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\nI am using the v0.15.1.0-g7b57bc998f33 client. It is the most up to date version provided by the ArchLinux repositories.\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nI am running ArchLinux and am using a Corei7.\r\n\r\nI'm sorry if this is a known issue or I'm doing something wrong. I did try to search for more information and found comments on this bitcoin Stack Exchange question with the same issue but no resolution. \r\n\r\n`https://bitcoin.stackexchange.com/questions/46782/rpc-cookie-authentication`\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sjors": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12191", "title": "bech32-optimized QR codes", "body": "@sipa said in #11991:\r\n\r\n> I haven't looked at the code, but inside QR codes it's advantageous to use uppercase Bech32 (it will result in a smaller QR encoding).\r\n\r\nIs that still the case when rendered as URI?\r\n\r\nShould amounts be added in a different way?\r\n\r\nWould that involve amending BIP-21?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ac8907ce6ab095b37858d6e96946b59ce1c13f", "message": "[qt] receive tab: bech32 address opt-in checkbox\n\nWhen launched with -adresstype=legacy the checkbox will be hidden."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12216", "title": "scripted-diff: prefix [address|change]type parameters with 'default'", "body": "Making it clear that these parameters can be overridden by individual wallet commands.\r\n\r\nRequesting 0.16 tag, as it's probably not worth changing otherwise.\r\n\r\nThis makes grateful use of the fact that @sipa used an underscore for `address_type` and `change_type` RPC arguments.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12200", "title": "Bind functional test nodes to 127.0.0.1", "body": "Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\r\n\r\nTo test, make an arbitrary whitespace change to `src/bitcoind.cpp` and recompile. This normally resets the firewall's memory.\r\n\r\nEasiest way to reproduce a popup without running the test suite:\r\n\r\n```sh\r\nsrc/bitcoind -regtest -bind=127.0.0.1 # No popup\r\nsrc/bitcoind -regtest # Popup\r\n```\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12152", "title": "[WIP] misc. backwards compatibility tests", "body": "Builds on top of #12134.\r\n\r\nTests:\r\n- [x] v0.16 generated wallets don't work on older versions\r\n- [x] the five SegWit wallet scenario's (including bech32 address)  \r\n\r\nTest framework changes (or: things I'm doing wrong):\r\n- [ ] method to copy wallet\r\n- [ ] method to push and pop wallet backups\r\n- [ ] remember network topology between start and restart\r\n\r\nSuggestions for additional tests welcome. I'll make individual PR's later.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dukeh3": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12186", "title": "Debian folder is for 1.4x and does not work for 15.1", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nThe debian file in contrib does not work with latest build. Also if you try to use the latest in debian stable ( build around 15.1 ) fails too. \r\n\r\n\r\n<!--- What behavior did you expect? -->\r\nBuilding a nice debian package\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\nThe build fails with lost of errors\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nEvery time\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\n15.1 Tag\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nx86 Debian stable\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dooglus": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12179", "title": "\"abandon transaction\" only removed tx from display until client restart", "body": "commit 45cf8a03cb57b8639a8d47323bde46ba22d9eeaf\r\n\r\nI recently made a transaction with too-low fees. I was in a hurry to get it confirmed, so I clicked \"increase transaction fee\" a bunch of times. Each time I clicked it, it added an extra transaction to the transactions tab.\r\n\r\nEventually one of the transactions confirmed, and all the others were marked as \"conflicted\". I right-clicked each of the conflicted transactions in turn and selected \"abandon transaction\". That caused them to disappear from the transactions tab.\r\n\r\nWhen I restarted the client, all the conflicted transactions reappeared. I was hoping they would be gone permanently.\r\n\r\nAm I misunderstanding what \"abandon transaction\" should do, or is it not working correctly?\r\n\r\nEdit: two related points from this experience:\r\n\r\n1) I wanted to double the fee, but \"increase transaction fee\" didn't give me any way to say how much to increase it by, so I had to click it maybe 20 times to get to the fee I wanted.\r\n\r\n2) I was able to select all the conflicted transactions at once, and right-click the group. When I selected \"abandon transaction\" on the group, it only deleted one transaction from the display, not all of them. Why let me select multiple transactions if the right-click menu only operates on one of them anyway?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DrakonAlpha": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12176", "title": "Application crashes when the connected hard disk drive gets disconnected", "body": "Application crashes when the connected hard disk drive gets disconnected. Error message would be ok, but crash ist inacceptable.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jappiecr": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12170", "title": "Bitcoin core doens't respond", "body": "Hi,\r\n\r\nBitcoin core 0.15.1 get's stuck when I try to open program. Most of the time it goes through the update startup rocess oke and then wehen it starts loading it get's stuck.\r\nI looked in the error.log and this is what it says something like:\r\n2018-01-12 12:08:05 LevelDB read failure: IO error: E:\\BT\\chainstate\\101461.ldb: Can't execute because of an error in I/O-device.\r\n\r\n\r\n2018-01-12 12:08:05 IO error: E:\\BT\\chainstate\\101461.ldb: Can't execute because of an error in I/O-device.\r\n\r\nI have the bitcoin folder on external harddrive. It worked fine a couple of weeks ago when I went to update after a couple of months of not connecting. Everything was updated fine and working properly. Then  I wanted to do a little test and opend an online account on Blockchain and transfered a minimal amount as a test. Test went fine but after that I was no longer able to open my Bitcoin Core wallet because of above descibed error.\r\n\r\nCan anybody help?\r\nThanks in advance!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarcoFalke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1e69e52bf8de08b1ce7a774416aa7a8d20068b", "message": "qa: Sync with validationinterface queue in sync_mempools"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad504bf4c302f7a72e0a0e191f3fdbafda7340f", "message": "Merge #12177: trivial: fix address_type help text of getnewaddress and getrawchangeaddress\n\n5f911c5cc2 trivial: fix address_type help text of getnewaddress and getrawchangeaddress (mruddy)\n\nPull request description:\n\n  \"p2sh\" in the help messages should have been \"p2sh-segwit\".\n\n  The messages before this patch:\n\n  `help getnewaddress`\n  \"address_type\"   (string, optional) The address type to use. Options are \"legacy\", \"**p2sh**\", and \"bech32\". Default is set by -addresstype.\n\n  `help getrawchangeaddress`\n  \"address_type\"           (string, optional) The address type to use. Options are \"legacy\", \"**p2sh**\", and \"bech32\". Default is set by -changetype.\n\nTree-SHA512: 6dfc0bebe577995f5521b83a12854045ac3eda4e65c9b92fc581da4ee68ab1218e05af82f2154bb2640a0813c5f79e010cd9e5ada449494c8831b3757bda854c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cf8a03cb57b8639a8d47323bde46ba22d9eeaf", "message": "Merge #12168: Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/)\n\n648bdc8cc0 Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/) (Jan Sarenik)\n\nPull request description:\n\n  http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html\n  http://man7.org/linux/man-pages/man2/fcntl.2.html\n\nTree-SHA512: 82c7e0aba55f34a6fec60bdecb712b65c84422461454f0ae9eed5e1bb31bf585c5a65f49bbdd5a89feb59140a998ad6fcd5573ede123a12b2ba2ff677d95cc2b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7450cdbd89a1c862f4d4d8bf093f8a0b5448f9c", "message": "Merge #11970: Add test coverage for bitcoin-cli multiwallet calls\n\na14dbff39e Allow multiwallet.py to be used with --usecli (Russell Yanofsky)\nf6ade9ce1a [tests] allow tests to be run with --usecli (John Newbery)\nff9a363ff7 TestNodeCLI batch emulation (Russell Yanofsky)\nca9085afc5 Prevent TestNodeCLI.args mixups (Russell Yanofsky)\nfcfb952bca Improve TestNodeCLI output parsing (Russell Yanofsky)\n\nPull request description:\n\n  Lack of test coverage was pointed out by @jnewbery in https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158133900\n\nTree-SHA512: 5f10e31abad11a5edab0da4e2515e39547adb6ab9e55e50427ab2eb7ec9a43d6b896b579b15863e5edc9beee7d8bf1c84d9dabd247be0760a1b9ae39e1e8ee02"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0910cbe4ef31eb95fd76c7c2f820419fe64a3150", "message": "Merge #12082: Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json\n\n18be3ab139 Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json (Chris Stewart)\n\nPull request description:\n\n  We are missing a test vector for SINGLE|ANYONECANPAY inside of tx_valid.json. This addresses the issue #12060\n\nTree-SHA512: e3526113477dbf575c4a844cf489dcfa2c037c6d928af6f97413edc1a8d29cdf2143da96471cdfd3de08bf5ed178117ed67926fd70fd42ca391ac0bb0d08f3fd"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12217", "title": "qa: Add missing syncwithvalidationinterfacequeue to tests", "body": "Fixes intermittent travis failures with those tests caused by a missing flush of mempool txes to the wallet.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12193", "title": "RPC: Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d)", "body": "Rebased version of  #11386 by karel-3d.\r\n\r\nCloses:  #11386", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81920315", "body": "Maybe comment the comments out, so it is not required to delete them?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81920315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87377352", "body": "I think https://bitcoincore.org/en/contact/ will always be the page for contact, even if there is a subsection with a list of gpg keys.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87377352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/150910060", "body": "```vim\r\ns/and are/are/", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/150910060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jonasschnelli": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/062c8b69f4ccae323d675685da8cbfcb7ccd0c55", "message": "Merge #11991: [qt] Receive: checkbox for bech32 address\n\n63ac8907c [qt] receive tab: bech32 address opt-in checkbox (Sjors Provoost)\n\nPull request description:\n\n  <img width=\"647\" alt=\"schermafbeelding 2018-01-12 om 18 34 48\" src=\"https://user-images.githubusercontent.com/10217/34887691-a6a796fe-f7c7-11e7-8b89-87ce07c61ce3.png\">\n\n  Checkbox does what you would expect. Press tab from the amount field to get there.\n\n  It's unchecked by default.\n\n  When launched with `-addresstype=bech32` it's checked by default. When launched with `-addresstype=legacy` it unchecked and disabled.\n\n  The change in `receivecoinsdialog.ui` is smaller than it looks, due to the way git handles XML diffs. I had to add a horizontal spacer to make it look decent, see https://github.com/bitcoin/bitcoin/issues/11950#issuecomment-352870909. This causes column numbers to change in the rest of the grid.\n\n  I recommend testing on at least one other OS than OSX to be on the safe side.\n\nTree-SHA512: ec4b733b796d9a94278a5d8040a69d9574ef50021e68f94f61f2da75d1bb57f39272cbc9f1f7d34f733a19640daf666a23844fcd132f83bfdaf327d9d1d6f105"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59f9e2aaf3fe73961cc02042f929b430fee59f9c", "message": "Use flexible font size for QRCode image address"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196", "title": "Add scantxoutset RPC method", "body": "Alternative to #9152.\r\n\r\nThis takes `<n>` pubkeys and optionally  `<n>` xpubs (together with a definable lookup windows where the default is 0-1000) and looks up common scripts in the UTXO set of all given or derived keys.\r\n\r\nThe output will be an array similar to `listunspent`. That array is compatible with `createrawtransaction` as well as with `signrawtransaction`.\r\n\r\nThis makes it possible to prepare sweeps and have them signed in a secure (cold) space.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MeshCollider": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f3bd47d44634cfc0a4261e64af178407ce2869c", "message": "Abstract directory locking into util.cpp"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5260a4aca1e6c11e1dbca9d3390c0dc739e81204", "message": "Make .walletlock distinct from .lock"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64226de908c76997fadf147342c494ad0662fa43", "message": "Generalise walletdir lock error message for correctness"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ed4bd58cac05b355ab103476ff29ecd10ce263", "message": "Add a test for wallet directory locking"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60cb99c580a602a83856769ad2ac882d3cdfcb5", "message": "Add a lock to the wallet directory"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sdaftuar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a22a52918ad5af6d105b4f5ae9dd6c52199f0e8", "message": "Use mempool's ancestor sort in transaction selection\n\nTransaction selection for mining tracks ancestor feerates that are\nmodified based on transactions that have already been selected.  This\ncommit de-duplicates the code so that the ancestor feerate sorting used\nby the mempool can also be directly applied to the miner."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abfa538b5a4508e0cf0589ae3ac0620b2188912", "message": "Add test for new ancestor feerate sort behavior"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mruddy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f911c5cc2f60859cf3d5553d35c1160bd264cc0", "message": "trivial: fix address_type help text of getnewaddress and getrawchangeaddress"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsarenik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/648bdc8cc09c85748967b86347bbc7825e339d5f", "message": "Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/)\n\nhttp://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html\nhttp://man7.org/linux/man-pages/man2/fcntl.2.html"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "achow101": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/134cdc7cee3da7c554e40ad947a9cdcbb3069f13", "message": "Test walletpassphrase timeout bounds and clamping"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b63e3c7b20ea54930de3ec3955406e4d4737e3c", "message": "Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds\n\nClamps the timeout of walletpassphrase to 2^(30) seconds, which is\n~34 years. Any number greater than that will be forced to be\n2^(30). This avoids the sign flipping problem with large values which\ncan result in a negative time used.\n\nAlso perform bounds checks to ensure that the timeout is positive\nto avoid immediate relocking of the wallet."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12180", "title": "scripted-diff: change kB to kvB, kilobyte to kilovbyte for transaction fee rate things", "body": "Renames kB and kilobyte to kvB and kilovbyte respectively in order to make clear the fee rates are in virtual bytes rather than actual bytes.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "promag": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12213", "title": "Add address type option to addmultisigaddress", "body": "Adds the option `address_type` to `addmultisigaddress` RPC so that `addwitnessaddress` can be avoided to obtain an `p2sh-segwit` or `bech32` multsig address.\r\n\r\nRelated to #12210 as this reduces `addwitnessaddress` usage.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12194", "title": "Add change type option to fundrawtransaction", "body": "Adds a new option `change_type` to `fundrawtransaction` RPC. This is useful to override the node `-changetype` argument.\r\n\r\nThe new option is exclusive to `changeAddress` option, setting both raises a RPC error.\r\n\r\nSee also #11403, #12119.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12153", "title": "Avoid permanent cs_main lock in getblockheader", "body": "Based on #12151, this pull reduces the lock scope in `getblockheader` RPC.\r\n\r\nNote, review last commit only.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12151", "title": "Remove cs_main lock from blockToJSON and blockheaderToJSON", "body": "Motivated by https://github.com/bitcoin/bitcoin/pull/11913#discussion_r157798157, this pull makes `blockToJSON` and `blockheaderToJSON` free of `cs_main` locks.\r\n\r\nLocking `cs_main` was required to access `chainActive` in order to check if the block was in the chain and to retrieve the next block index.\r\n\r\nWith the this approach, `CBlockIndex::GetAncestor()` is used in a way to check if the block belongs to the specified chain tip and, at the same time, get the next block index.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084101", "body": "All of these notes can be inside a comment block:\r\n```\r\n<!---\r\nRemove sections that do not apply.\r\n\r\nThis issue tracker is only ...\r\n\r\nGeneral bitcoin questions ...\r\n\r\n...\r\n--->\r\n```\r\nSo that the user can see it when writing but it won't show. ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084411", "body": "uh, I guess it's what @laanwj suggests above.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084411/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bitspill": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12212", "title": "Trivial: Fix spelling in zapwallettxes test description", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanofsky": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12211", "title": "Avoid potential null dereference in ReceiveCoinsDialog constructor", "body": "Not a bug in practice because current `WalletModel::getDefaultAddressType()` implementation does not dereference its `this` pointer.\r\n\r\nEncountered issue while rebasing #10244 after #11991 was merged.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luke-jr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12208", "title": "GUI: Rephrase Bech32 checkbox texts, and enable it with legacy address default", "body": "- \"Bech32\" isn't very user-friendly; used \"native segwit\" as in #11937.\r\n- You don't spend from addresses.\r\n- No reason to block off Bech32 access with legacy address default.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847047", "body": "My directory is so cluttered that I use \"git status -uno\" ;)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "morcos": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12204", "title": "Fix overly eager BIP30 bypass", "body": "In #6931 we introduced a possible consensus breaking change by misunderstanding how completely BIP 34 obviated the need for BIP 30.  Unfixed, this could break consensus after block height about 1.9M.  Explained in code comment.\r\n\r\nh/t @sdaftuar ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fwolfst": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12192", "title": "Trivial: Update http URL of MIT license to use https", "body": "In two steps, update the links as described in the issue.\r\n\r\nFirst commit: `sed` everything.\r\nSecond commit: Fix whitespace syntactic sugar that got bitter due to different length of URLs.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ericallam": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12189", "title": "[Qt] Display transaction fee with sat/vbyte value in SendCoinsDialog", "body": "Related to issue #11564, this PR designed to provide feedback to the user about their relative transaction fee before they finish broadcasting their tx to the bitcoin network. \r\n\r\nDisplaying the sat/vbyte is useful for knowing how likely their tx will be included in an upcoming block when using public fee estimation tools like https://jochen-hoenicke.de/queue/#24h, https://estimatefee.com, and https://bitcoinfees.earn.com.\r\n\r\nThis updates the SendCoinsDialog to look like this:\r\n\r\n<img width=\"838\" alt=\"screen shot 2018-01-15 at 12 46 14\" src=\"https://user-images.githubusercontent.com/534/34943625-4f0037a6-f9f4-11e7-8a77-49d35df34c76.png\">", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeffrade": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12187", "title": "[Docs] Updating benchmarkmarking.md with an updated sample output", "body": "This PR is just a documentation update for someone (or myself) that looks into finishing up #7883 in the future.\r\n\r\nLooked through #7883 and appears [ryanofsky's PR](https://github.com/bitcoin/bitcoin/pull/8873) setup the benchmarks, but there are `FIXME` comments to pull in data from `test/` to get a larger data set (assuming reason why 7883 is still open).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kekimusmaximus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12184", "title": "[TRIVIAL] Drop C headers in favour of C++-compatibility headers.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12183", "title": "Make use of emplace in nonassociative containers.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12182", "title": "[TRIVIAL] Remove useless string initialization.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12169", "title": "Avoid temporary copies in C++11 ranged-based for loops.", "body": "The ::value_type of the std::map/std::unordered_map containers is\r\nstd::pair<const Key, T>.\r\n\r\nCurrently a lot of loops drop the const from the iterator which forces\r\nthe compiler to create a copy, this should be avoided by using the auto\r\nkeyword.\r\n\r\nA better explanation can be found in Meyer's Effective Modern C++.\r\n\r\nhttps://books.google.de/books?id=rjhIBQAAQBAJ&lpg=PA41&ots=FmZL15vynY&pg=PA41#v=onepage&q&f=false", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12159", "title": "Use the character based overload for std::string::find.", "body": "std::string::find has a character based overload as can be seen here\r\n(4th oveload): http://www.cplusplus.com/reference/string/string/find/\r\n\r\nUse that instead of constantly allocating temporary strings.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12158", "title": "Avoid unnecessary copy of objects.", "body": "* removed unnecessary value arguments.\r\n* removed unnecessary copy initialization.\r\n* removed unnecessary for range copy.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jtimon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12172", "title": "Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished", "body": "Fixes https://github.com/bitcoin/bitcoin/issues/12142\r\n\r\nThe tests are a little bit slow, mempool_persist.py goes from about 20 s to about 120 s in my hardware.\r\nPerhaps there's a better way to test this.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maaku": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12167", "title": "Make segwit failure due to CLEANSTACK violation return a SCRIPT_ERR_CLEANSTACK error code", "body": "If a segwit script terminates with a stack size not equal to one, the current error code is EVAL_FALSE. This is semantically wrong, and prevents explicitly checking CLEANSTACK violations in the unit tests. This PR changes the error code (and affected unit tests) to use SCRIPT_ERROR_CLEANSTACK instead of SCRIPT_ERROR_EVAL_FALSE.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnewbery": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12166", "title": "[docs] Clarify -walletdir usage", "body": "After discussion with @ryanofsky around #11687 , I think this documentation is a bit clearer for how the new `-walletdir` argument works.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kashyap2690": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12149", "title": "Unlock Wallet Implemented.", "body": "For frequent operation which requires an unlocked wallet, use Unlock Wallet menu option for keeping the wallet unlocked till the application is running.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cdecker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624388", "body": "We already have generic keystores on Linux machines, why not adapt Bitcoin to use them and provide a really simple one for systems that do not provide their own?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624421", "body": "Just delete all the block data and redownload the block chain.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641454", "body": "Seems to me as trying to fix an intermediate problem, I'd much rather see a patch adding the ability to specify a listen port. But the patch to disable IRC bootstrapping seems nice.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gavinandresen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624408", "body": "See my python bitcointools for code that can read and write the key/value pairs in wallet.dat (fixwallet.py reads the wallet and writes out a new wallet, leaving out any keys that seem to be mis-formatted).\n\nMerging wallets is hard because you have to teach bitcoin to re-scan the block chain for transactions to or from keys you just imported.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624435", "body": "Is this useful at all if there is no matching import?\n(export is pretty easy, the import is what is hard...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625002", "body": "See the blockheaders feature branch here for initial work on this.  Notes from Satoshi:\n\nCBlockIndex contains all the information of the block header, so to operate with headers only, I just maintain the CBlockIndex structure as usual.  The nFile/nBlockPos are null, since the full block is not recorded on disk.\n\nThe code to gracefully switch between client-mode on/off without deleting blk*.dat in between is not implemented yet.  It would mostly be a matter of having non-client LoadBlockIndex ignore block index entries with null block pos.  That would make it re-download those as full blocks.  Switching back to client-mode is no problem, it doesn't mind if the full blocks are there.\n\nIf the initial block download becomes too long, we'll want client mode as an option so new users can get running quickly.  With graceful switch-off of client mode, they can later turn off client mode and have it download the full blocks if they want to start generating.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035", "body": "Small, correct, if it breaks on Windows I'll be extremely surprised (and will back it out).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629871", "body": "Could you post a [PULL REQUEST] about this on the Dev&Tech forum: http://www.bitcoin.org/smf/index.php?board=6.0\n\nUntil we figure out where we want to discuss pull requests (on the forum or maybe directly here), I figure it is best to do both.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632251", "body": "I'm a little worried that if this feature gets popular the IRC channel and the 'addr' messages flying across the network might be overwhelmed with the IP addresses of clients that aren't listening.  New nodes joining might then spend a long time trying and failing to connect.\n\nI'd be more comfortable if the patch also taught the client NOT to advertise its own IP:port on the IRC channel or via 'addr' broadcasts.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644279", "body": "minconf=N only credits coins received that have N or more confirmations.\n\nIt still debits all sent coins, regardless of how many confirmations they have.\n\nThe reasoning is:  you can't be 100% sure that coins you are receiving are single-spent.  But you CAN be 100% sure that YOU are not trying to double-spend coins.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650074", "body": "What happened:\n\nSend 50.006... was rounded to 50.01 (amounts get rounded to two decimals).  Causing insufficient funds message.\n\nSend 50  ran into special-case code for micropayments; if making change would result in less than 0.01 coins (which would trigger the you-must-pay-a-0.01-fee transaction spam prevention code), then the sub-cent amount is sent along as a transaction fee.\n\nAt the very least, the RPC code should put the amount being sent in the insufficient funds message.\n\nDoing something more with sub-cent transactions needs more careful thought...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658512", "body": "Discussion here: http://www.bitcoin.org/smf/index.php?topic=2647.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658519", "body": "I'm proposing a simpler api; see http://www.bitcoin.org/smf/index.php?topic=2647.0\n\nI believe you can build what you want on top of the lower-level \"tell me when there are new blocks and transactions\".\n\nFor example, note the transaction ID when you get notified of a new transaction.  Then when you get notified of new blocks, call gettransaction <txid> to get the status of transactions that had fewer than $minconf confirmations.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659336", "body": "You could replace polling every N minutes with a monitorblocks callback that did what you are doing now-- because you know that transactions won't get more confirmations unless new blocks have been received.  You should end up with more accurate results (you'll update as soon as bitcoind sees a new block) with less polling.\n\nYou would probably ignore the transactions in the block, unless you want to do something with 1-confirmation transactions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661975", "body": "I submitted a pull request today to add \"details\" to gettransaction output.  You'll get one or more objects that give category (send or receive), account, and address.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665439", "body": "Before I lose them:\n  http://pastebin.com/evGiRVw2\nand\n  http://pastebin.com/wxCnw5SF\n... are listaccounts and gettransactions '*' output.  getbalance returns 850.05, sum(accounts) is 853.05...  I'll be debugging this more tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/367326", "body": "That'll teach me to pull without sanity-check compiling first...\nThis breaks the GUI build:  CMainFrame::OnMenuOptionsGenerate(wxCommandEvent&)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/367326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562179", "body": "I think the right place for a CRITICAL_BLOCK is SetCrypted()...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563002", "body": "See line 2163 of rpc.cpp.  The cs_main and cs_wallet mutex are grabbed before making RPC calls.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563024", "body": "Yes, it is overkill, but until we have a sane locking scheme I'm not\ngoing to spend the time required analyzing every new RPC method (or\nevery change to the existing RPC methods) to figure out whether\nthey're locking the right stuff in the right order. And I don't trust\nthat anybody else will, either.\n## \n## \n\nGavin Andresen\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564265", "body": "I commented in the issue Matt opened:\n\nCan somebody double-check to see if I'm reading the code correctly?\n\nLooks like both BitcoinMiner and getwork() call IncrementExtraNonce()\nto create unique coinbase transactions, so I don't think this is an\nissue.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578381", "body": "Could... although as 0.4 rolls out there will be more and more non-0.3 nodes to talk to.\nThis change is because downloading from a 0.3.20-0.0.23 client is broken (you'll get disconnected repeatedly).\n\nIf it becomes a big problem, we could ask the broken versions to upgrade using the alert mechanism.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "davout": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624966", "body": "Deletion is not necessary,\ndoesn't it already happen anyway when wallet is replaced ?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624969", "body": "Yes, I forgot that\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625250", "body": "File should be human-readable\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625251", "body": "Duplicate of #2\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647117", "body": "Wow, I just sent 50 BTC, and now the client is reporting zero balance...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633521", "body": "I had originally made a forum post, with the patch attached, but the forum decided to eat it due to (invalid attachment type .patch). Then I found out about this feature :) But I'll make a new post and simply link here.\n\nValid issue about the IRC channel. I had considered that, and was under the impression that this if clause in net.cpp handled it (as in case of proxy or -connect, also no IRC connection should be made):\n\n```\nif (fUseProxy || mapArgs.count(\"-connect\") || fNoListen)\n```\n\nSeems I was wrong.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633522", "body": "Ah, I see the new commit (don't connect to IRC on -nolisten) was automatically added here.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mikegogulski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654419", "body": "Forum references for URI scheme discussion:\n- http://www.bitcoin.org/smf/index.php?topic=1877.0\n- http://www.bitcoin.org/smf/index.php?topic=1840.msg24927#msg24927\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658540", "body": "Hey Gavin,\n\nI can see there would be applications for what you're doing with that API.\n\nSeems like it would be painful to work with for e-commerce, though. Right now I can just poll an account/label linked to an open purchase order to check the balance and confirmations. Using this API would require (I think) responding to the JSON-RPC callback POST by sending a flurry of RPC calls to check on the each of the transactions in the new block. Given the complexity and traffic involved in that, I'd probably just continue to use periodic polling.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659367", "body": "I see how it could work, sure. But the sample JSON output you provided on the forum post showed the callback passing some general block info and then simply a list of transaction IDs.\n\nFor each transaction ID, I would have to determine if it's relevant to my open orders, then check each relevant transaction for the number of confirmations and the balance on the associated account/address in the wallet. Right now that would mean one RPC method call per transaction in the block. \n\nUnless monitorblocks is going to cough up some per-transaction data correlating transactions with accounts/addresses, I can't see an advantage to using it over polling.\n\nActually, maybe I'm totally missing something. The current implementation of gettransaction returns something like:\n\n```\n$ bitcoind gettransaction 270d70635927aac5ec9b42fda27e539ae50a7a06bc3bb2fb98e086e11446a3e6\n{\n\"amount\" : -0.02000000,\n\"fee\" : 0.00000000,\n\"confirmations\" : 248,\n\"txid\" : \"270d70635927aac5ec9b42fda27e539ae50a7a06bc3bb2fb98e086e11446a3e6\",\n\"message\" : \"comment\",\n\"to\" : \"comment-to\"\n}\n```\n\nHow do I associate this with an account or address?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659395", "body": "There's definitely something to this.\n\nI think the spam potential of your first use case is too nasty to contemplate. I'd be satisfied with commerce systems including a business rule which says \"if you want further notifications, attach an email address to your order\". The spam problem is already addressed broadly in the email domain, and email addresses can be rather anonymous.\n\nSigning an email with the bitcoin key is a neat idea, but there's a lack of symmetry in the typical commerce application. Customer learns a bitcoin address for vendor, so vendor can later sign messages back to customer using that address's private key. Not so in the reverse, unless the customer provides an address of their own as part of the exchange.\n\nWhat I would like to see is the ability to attach a small, optional data field to a transaction. For example, here in Slovakia, the banking system provides for the attachment of several fields to an electronic payment: constant symbol (4), variable symbol (10), specific symbol (16?), note (32?). The constant symbol is used for tax accounting purposes, and the rest are used to correlate payments with accounts, similar to \"please be sure to include your account/invoice number on your check\".\n\nI'm guessing this is already provided for in the protocol, though I'm not familiar with that part of the implementation. Also, it's arguable that it's not necessary if a merchant generates a new bitcoin address for each payment. Not a big priority, really.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307", "body": "Hooray!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665433", "body": "Eek!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665453", "body": "txid 22c1af3bc7f21a1ee74fbe63fcc58d0433ce2c574cf042a8f9129f989ebac68d has two entries associated with it, one of which is for BTC 3, and this is the only BTC 3 transaction in what you pastebinned. Maybe a place to look.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sipa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/346324", "body": "This seems strange to me. If a single dependency of an own transaction is in the block chain, the transaction as a whole will be considered confirmed?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/346324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/474782", "body": "Why not return enum DBErrors?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/474782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564402", "body": "They both call IncrementExtraNonce... which resets the extra nonce every second after overflowing. This guarantees unique block candidates, but not unique coinbase transactions. When an infinite supply of pubkeys are available, this isn't a problem, because after creating a block, the previous default pubkey will be in use, and a new one will be used.\n\nMy suggestion: add the current timestamp to the coinbase when no fresh pubkeys are available.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812418", "body": "That doesn't seem very necessary.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16333558", "body": "gen.cpp?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16333558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "hbons": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398363", "body": "typo: 'antwoord'\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398365", "body": "Portefeuille isn't capitalised elsewhere...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "andyparkins": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475010", "body": "Does the key memory allocated in key.h by OpenSSL in EC_KEY_generate_key() need mlock()ing too?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475050", "body": "I'll have a go.  I'm not entirely clear on which call triggers the memory allocation though.  Is it in MakeNewKey() or CKey(); does EC_regenerate_key() allocate new memory?  The OpenSSL documentation is seemingly non-existent for EC_xxx functions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475093", "body": "I wasn't thinking of altering OpenSSL; more like calling mlock() in a CKey member.\n\n```\nCKey()\n{\n    pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n    if (pkey == NULL)\n        throw key_error(\"CKey::CKey() : EC_KEY_new_by_curve_name failed\");\n    mlock( pkey, sizeof( *pkey ) );\n    fSet = false;\n}\n```\n\nBut that's not going to work because EC_KEY isn't an exported structure, so sizeof() won't work; nor is there any way to see what internal memory structures in EC_KEY have been allocated.\n\nBah.\n\nSomeone else must have solved this already.  I'll have a search.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475142", "body": "A bit of poking and I've found `CRYPTO_malloc_locked()` in `crypto/mem.c`. It looks like its only called for RSA though.\n\nChanging plain `malloc()` for the whole of OpenSSL seems like a mistake as it would make every single byte of memory allocated by OpenSSL locked.  That doesn't seem wise.  It looks like the EC allocation is done in `EC_GROUP_new()` with `OPENSSL_malloc()`.  I have no idea what part of that structure even holds the private key.\n\nOkay; I'm giving up now.  OpenSSL is making my brain hurt.\n\nThe private key will have to be swappable, through no fault of bitcoin's.\n\nSorry to have wasted your time.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "TheBlueMatt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475036", "body": "Yes, care to write it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475061", "body": "OpenSSL allocates the memory itself, so you have to hack up openssl to make it mlock.  (for some reason the entire openssl source code has no references to mlock()).  There are functions in openssl that allow you to override malloc, though I can't remember what they were and they aren't documented, well unless you count nondescriptive comments.  \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475084", "body": "You never know what other issues might have gotten in the way, this way it captures more errors than just the return value of TopUpKeyPool will.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475117", "body": "In the small amount of research I did when I was looking at doing this, it looked overriding malloc for openssl was the only safe way (note that yours isnt much safer than not because its in the memory un-mlocked during the creation of the key, which probably takes longer than anything using that key.  Its not a matter of modifying openssl, it provides publicly-accessible functions to make it override malloc, so you can use those, but you have to figure out how it works first.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475222", "body": "I was under the impression that there was a function to override malloc for only keying material, but I might be wrong, I didnt do enough research as its not documented and seems too much like a hack for my taste.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562138", "body": "To be safe, it might be a good idea to lock this.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562481", "body": "To be honest, I hadnt thought that through...shouldnt be hard to fix though: #482\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562983", "body": "No way this doesnt need a cs.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562984", "body": "Shouldnt this have a cs?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563007", "body": "Isnt that a bit...overkill?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578510", "body": "60% of listening nodes are 0.3.23 only because 0.3.24 doesnt disconnect you all the time.\nThere are way more 0.3.24 nodes, but they have their connection slots full all the time.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sgimenez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475074", "body": "I think this GetArg is not appropriate here, the return value from TopUpKeyPool() should be used instead.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475113", "body": "Then, add this test at the end of TopUpKeyPool.\nIntruding CWallet internals from rpc.cpp is just bad, IMHO.\n\nPublic interfaces between pieces of code are so blurry in bitcoin code...\nThis is just one more example.\n(But maybe C++ is the one to blame here)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "casascius": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562434", "body": "This edit states that the \"default key\" will be used as the target for payouts for mining.  If this is correct, then it might be problematic and could result in a loss of funds to miners.  When miners mine more than one block using the same payout address, the coinbase transactions in each block are identical, which results in them having an identical sha256 hash, which results in all but the first one being unidentifiable and hence unspendable.  I suppose you might be aware of that, but wanted to point this out just to prevent the possibility of it being an expensive consequence for somebody else.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "n1bor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578270", "body": "Careful with this one as 60% of listening servers are 3.23 - http://bitcoinstatus.rowit.co.uk/versionsDay.png, so could overload others?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "fanquake": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81896071", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81896071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82111720", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82111720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41837480", "body": "Ideally this should be ignored on the dev machine.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41837480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "paveljanik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82020848", "body": "micro-nit: DBL space\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82020848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87373853", "body": "I wanted to do so first, but the URLs are fragile and can change. And when the separate \"Report security issues\" page happens at bitcoincore.org, we will have to change URL here. Mail will probably be the same.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87373853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87382621", "body": "How can you predict it will be a subsection? What if en-GB speakers will ask for en-GB and en-US page?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87382621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rebroad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812420", "body": "it's not.. I've removed this and made a new fixup commit now. Just need to squash(?) the commits together now.. @sipa, can you remind me the git command please?\n\n(the /build/ line is needed though, right? without it, git status reports on the contents of the build directory...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/818160", "body": "out of interest, how come I needed to add this line, but no one else seems to need it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/818160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839004", "body": "If i don't add this line, git complains. How do you manage without git wanting this directory added or ignored?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839081", "body": "Strangely, i can't add .gitignore to .gitignore. It ignores that line! \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Diapolo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/838976", "body": "That should not be here I guess.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/838976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839063", "body": "Sorry, I'm no GIT master :-/. But I never had a pull or commit, where I needed to include .gitignore.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jgarzik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16335943", "body": "No, gen.cpp is not a generated file to be ignored.  It definitely should be checked into git.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16335943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dexX7": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41850244", "body": "I'm very open to removing it (or other parts), but the precedence was basically the ignore of the Qt Creator project files.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41850244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42734779", "body": "I'm currently not at home, but later I can edit and remove the lines. But just for my understanding: isn't it pretty common to ignore project/editor specific files via the `.gitignore`?\n\nAs for the change:\n\n``` diff\n- # Qt creator\n- *.pro.user\n- \n- # NetBeans\n- nbproject/\n- \n```\n\nAnything else?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42734779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}