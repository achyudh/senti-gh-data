{"_default": {"1": {"cbales": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/132", "title": "Capability annotations are not inherited correctly", "body": "", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e3c3b511a228e44f92eb997e33af6e03edc3aaed", "message": "Merge pull request #136 from Microsoft/bom-fix\n\nRemove BOM from encoding"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/81a7c8284b229b352c9185852b10a885f9e433a5", "message": "Remove BOM from encoding"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/59eb5e4009b48ae343c139a900c159b851285fe1", "message": "Fix sp error in catch"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/480e5107de1bd3afd82aa7395dc62d30aaae8657", "message": "Merge pull request #133 from Microsoft/error-handling\n\nCatch non-fatal errors"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/31f59ec40f4582b86ec431aa4613e62974d4d855", "message": "Merge pull request #135 from Microsoft/perf-improvements\n\nMultithread file I/O"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/dba179f8818f84a09783221c86c5586d4b2596ab", "message": "Switch to using lazy locks"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/1b7db3027e61adc583f7971d79dc233eab902b5f", "message": "Catch race condition on directory creation"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3a1002b0eb414d1f870251dc7503ca41b7a2dd7e", "message": "Switched to async locks with awaits\nUses batching to prevent I/O overload. Saves about 1m of processing time"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/bdbc58c769c5f0ad1ec97a3cca5bec35108e0429", "message": "Merge branch 'error-handling' of https://github.com/Microsoft/Vipr into error-handling"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e080bc23ef1a4da256be328e54c223f289a5e083", "message": "Update caught error messages and severities"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ab5245d0d1d9c2df3b6f30886b3562f3fd651410", "message": "Merge pull request #134 from Microsoft/error-testing\n\nAdd error tests for properties and primitives"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b32d6017ab2168cad0654518c1ff9eb32b7b7ae8", "message": "Add case for locked files"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/bc4858afa84864c2e714000fe3f3da001e3cca93", "message": "Write files to system asynchronously"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c9fbc055378f024b648b5d02415c306a1bb68a63", "message": "Remove incomplete tests"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a4f04e3265260dcee9c10a0d737ce158b2532bb2", "message": "Add tests for catching invalid property types"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a530268cb62b3ac1fe72e37f2d2ff9d33dddf68d", "message": "Utilize provided Logger"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9f33d68ad6b409d4cea87a85637216a2274e0622", "message": "Catch non-fatal errors to allow generation to continue"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamescro": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/105", "title": "OutlookServicesClient.Me.SendMailAsync does not refresh access token", "body": "I'm upgrading an app from v 1.0.22 to v1.0.34 of the OutlookServices .NET client library. I have existing code that creates a message and then sends it like this:\n\nawait outlookClient.Me.SendMailAsync(message, true);\n\nWhen I do that, the REST call does not include the access token because the OutlookServicesClient doesn't have a populated access token value.  The result is a 401 (unauthorized) error.\n\nIf I add the message to the drafts folder before sending it, I don't have this problem because the AddMessageAsync method uses the access token getter method that I supply in the constructor to refresh the access token:\n\nawait outlookClient.Me.Messages.AddMessageAsync(draft);\n\nI've stepped through the code and confirmed that AddMessageAsync calls the access token getter method.\n\nI did not see this issue in v 1.0.22 of the library. Should the SendMailAsync() method always refresh the access token, just as AddMessageAsync does? If not, how can I ensure that the OutlookServices client will pass an access token with the request?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martellaj": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/102", "title": "Implement ThenBy and ThenByDescending LINQ methods in ProxyExtensions.", "body": "", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/73", "title": "Requests need to include the Cache-Control header for Windows Phone usage.", "body": "Windows Phone caches all HTTP requests by default. A request, i.e. getting emails from Inbox, may not reflect the true state of the resource after the first call.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/73/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sridhar-MS": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/101", "title": "Create a Fetcher class for Media Entities with methods UploadMediaAsync and DownloadMediaAsync", "body": "\"MediaEntityBase\" class in proxy extensions currently has the methods UploadMediaAsync and DownloadMediaAsync. Ideally data classes must not build http requests instead it must be done by fetcher classes. \n\nSo create a new Fetcher class for media entities which supports media entities related methods  UploadMediaAsync and DownloadMediaAsync.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/99", "title": "Add support for \"?$search\" query option in Vipr", "body": "[?$search](http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part2-url-conventions/odata-v4.0-errata02-os-part2-url-conventions-complete.html#_Toc406398167) isn't supported\nExample:\u00a0\u00a0GET ~/pages?$search=disney\n\u00a0Search isn't supported. We would use this similar to .Expand(\"string\"), where a string is passed in and then URLEncoded into the query param.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/99/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/98", "title": "Better exceptions can be thrown by Vipr generated C# proxies", "body": "In a number of the call patterns, for example in CopyToSectionGroupAsync(String) (or any actions/functions), there's a Uri check that is followed by throwing a naked exception:\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Uri myUri = this.GetUrl();\n\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (myUri == (Uri) null)\n\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new Exception(\"cannot find entity\");\n\u00a0\n\nCould we throw a better exception than this? The expected catch block I'd have to write to catch and handle\u00a0this exception would feel silly if I have to catch an Exception and then dispatch on the message.\u00a0\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/98/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/97", "title": "Fix Ugly code formatting in Vipr generated C# proxies ", "body": "Example:\npublic enum PatchActionType : int\n\u00a0\n\u00a0 \u00a0 {\n\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 Replace\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0\n\u00a0 \u00a0 \u00a0 \u00a0 ,\n\u00a0 \u00a0 \u00a0 \u00a0 Append\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 1\n\u00a0 \u00a0 \u00a0 \u00a0 ,\n\u00a0 \u00a0 \u00a0 \u00a0 Delete\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 2\n\u00a0 \u00a0 \u00a0 \u00a0 ,\n\u00a0 \u00a0 \u00a0 \u00a0 Insert\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 3\n\u00a0 \u00a0 \u00a0 \u00a0 ,\n\u00a0 \u00a0 \u00a0 \u00a0 Prepend\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 4\n\u00a0 \u00a0 \u00a0 \u00a0 ,\n\u00a0 \u00a0 }\u00a0\n\nWould probably look better w/o the extra new lines. Maybe something like this instead:\n\u00a0 \u00a0 public enum PatchActionType : int\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 Replace\u00a0= 0,\n\u00a0 \u00a0 \u00a0 \u00a0 Append\u00a0= 1,\n\u00a0 \u00a0 \u00a0 \u00a0 Delete\u00a0= 2,\n\u00a0 \u00a0 \u00a0 \u00a0 Insert\u00a0= 3,\n\u00a0 \u00a0 \u00a0 \u00a0 Prepend\u00a0= 4\n\u00a0 \u00a0 }\u00a0\n\nA space on the generated class names between the name of the class and its parent may be nice.\nSQUO: \u00a0 \u00a0 public partial class PageLinks:Microsoft.OData.ProxyExtensions.Lite.ComplexTypeBase\nPROPOSED:\u00a0\u00a0 \u00a0 public partial class PageLinks\u00a0:\u00a0Microsoft.OData.ProxyExtensions.Lite.ComplexTypeBase\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/97/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/86", "title": "[C#Writer]: Abstract EntityType without Key produces non-compiling c# code", "body": "For example the below edmx produces non-compiling c# code.\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<edmx:Edmx Version=\"4.0\" xmlns:edmx=\"http://docs.oasis-open.org/odata/ns/edmx\">\n  <edmx:DataServices>\n    <Schema Namespace=\"mscrm\" xmlns=\"http://docs.oasis-open.org/odata/ns/edm\">\n      <EntityType Name=\"crmbaseentity\" Abstract=\"true\" />\n      <EntityType Name=\"customerrelationship\" BaseType=\"mscrm.crmbaseentity\">\n        <Key>\n          <PropertyRef Name=\"customerrelationshipid\" />\n        </Key>\n        <Property Name=\"customerrelationshipid\" Type=\"Edm.Guid\" />        \n        </EntityType>\n        <EntityContainer Name=\"System\">\n        <EntitySet Name=\"customerrelationships\" EntityType=\"mscrm.customerrelationship\"/>\n        </EntityContainer>\n        </Schema>\n  </edmx:DataServices>\n</edmx:Edmx>\n```\n\nThe collection class for 'crmbaseentity' uses the Key property to overload the index [] operator. But since the key is missing the generated code looks like below snippet and compilation fails with error - \"Indexers must have at least one parameter\".\n\npublic global::mscrm.IcrmbaseentityFetcher this[] {}\n\nAccording to [OData CSDL spec](http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_Toc406397975) an abstract EntityType may or may not define a Key element.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/86/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/77", "title": "Rename Fetcher classes to something better like \"RequestBuilder\" or \"Requestors\".", "body": "Fetcher classes does a lot more than just fetching entities from the server. It constructs the http request and parses the http response too. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/77/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/75", "title": "Fetcher.DeleteAsync must not take the entity type object to be deleted as a parameter.", "body": "DeleteAsync method (inside a fetcher) takes the entity type object to be deleted as a parameter. This is not required. The fetcher class has the URL path to that entity type. It must be able to just send a DELETE request with that URL.\n\nBut right now we take a dependency on OData Client libraries. We call DataServiceContext.DeleteAsync to delete an entity type. But this method requires that entity type object as a parameter to send that DELETE request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/75/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/74", "title": "For ReadOnly properties CSharp writer must not generate setters", "body": "If a property is annotated as readonly, CSharp writer must not generate setters for that property.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/74/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/72", "title": "SaveChangesAsync must not be a part of the Fetcher classes", "body": "Calling Fetcher.SaveChangesAsync method not only saves the corresponding entities but the entire model changes that are cached in the client. This can be somewhat misleading.\n\nConsider removing it from the Fetcher class. And developers can use client.Context.SaveChangesAsync directly to save all the cached changes in the model (where 'client' is an entity container object). \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/72/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/71", "title": "Fetcher classes of abstract entities should have Update/Delete/Execute/Expand methods", "body": "Given an abstract entity should its fetcher class have the Update/Delete/Execute/Expand methods? Having these methods would allow to iterate through collections of the base type to update/delete the derived types. \n\nRight now these methods are not generated for such fetchers. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/71/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/70", "title": "[ProxyExtensions.Lite]: Move DownloadMediaAsync and UploadMediaAsync out of MediaEntityBase.", "body": "In the light-weight version of proxy extensions (Microsoft.OData.ProxyExtensions.Lite) DownloadMediaAsync and UploadMediaAsync methods must be moved from MediaEntityBase to a new fetcher class (example 'MediaEntityFetcher'). So in the generated proxy 'MediaEntityFetcher' must be used to download/upload media instead of using the media entity objects themselves.\n\nThis is similar to having the Update/Delete method inside 'RestShallowObjectFetcher' instead of 'EntityBase'.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/70/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72280891", "body": "<a href=\"https://github.com/piotrpMSFT\"><img src=\"https://avatars.githubusercontent.com/u/2379589?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [piotrpMSFT](https://github.com/piotrpMSFT)**\n_Monday Jan 26, 2015 at 22:05 GMT_\n\n---\n\n@tonycrider is working on a pull request that specifies whether a given OdcmParameter should be passed to the service in the URL or in the request body. It will also specify the HTTP Verb that a given OdcmMethod should use. I will fix this issue once that PR is in.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72280891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72287853", "body": "This is a duplicate of issue #8.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72287853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72347469", "body": "It seems one of the ProxyExtensions tests is timing out in the appveyor environment. I will take a look.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72347469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72512560", "body": "Jenkens CI system has been setup for Vipr. So this is no longer required.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72512560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72549376", "body": "@tonycrider addresses the same issue in his PR #20 . So closing this pull request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72549376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72943459", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72943459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632187", "body": "@MrTomWhite Can you please create this PR against the Annotations branch? We are planning to do the Annotations feature in that branch and merge back into master.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632282", "body": "@MrTomWhite 'Annotations' branch is even with master. So creating a PR should be easy.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74586447", "body": "LGTM apart from my minor comments.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74586447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "TheRealPiotrP": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/87", "title": "C# Client Library should expose Edm.Stream using an IStreamFetcher", "body": "StreamFetchers provide convenient upload/download capabilities instead of requiring users to interact with a separate Http Client. Edm.Stream properties do not currently leverage these but should.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/87/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/69", "title": "NotHaveExplicitMethod should not throw when the explicit interface is not implemented by the target type", "body": "[Fact]\n-        public void The_Concrete_class_does_not_implement_an_explicit_Expand_method()\n-        {\n-            ConcreteType.Should()\n-                .NotHaveExplicitMethod(FetcherInterface, \"Expand\", \"Because abstract Entities cannot be queried\");\n-        }\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/69/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/43", "title": "Enable materialization of derived types based on odata.type property", "body": "When a request to an OData v4 service returns a base Entity Type, according to $metadata, it is feasible for the service to actually return a derived type. Today, the CSharp proxy will ignore the @odata.type property and materialize the entity as the Base type. Ideally, the proxy would use the @odata.type information to realize that a derived type was returned and would instantiatiate the corresponding derived C# type.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/43/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/30", "title": "Support Property Default Values", "body": "# Default Values\n\nNon-nullable properties that are not set on the client during object creation will typically have their values defaulted on the server and then sent back on subsequent requests. When properties do have default values they should be expressed in the client-side model. This allows for minimizing bits on the wire [values that are default need not be sent] and improves developer experiences [inspecting a 'new' object instance is representative on the server's projection of that object].\n## OData v4 Description\n\n[Property Default Value](http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_Toc406397961)\n## Model description\n\nThe default values will be represented on the OdcmProperty type. Consider making OdcmProperty generic so that readers can be responsible for parsing the value and store it in a strongly-typed DefaultValue property.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/30/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/27", "title": "ReadOnlyQueryableSetBase navigationPropertyAccessor should respect ForceToPascalCase", "body": "When the code writer is configured to rename properties, Pascal Casing for example, users will generate a navigationPropertyAccessor which uses the new names. When passed to .Expand the selected properties should be replaced by the original model's properties.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/27/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/26", "title": "QueryableSet whereExpression should respect ForceToPascalCase", "body": "When the code writer is configured to rename properties, Pascal Casing for example, users will generate a whereExpression which uses the new names. When passed to .GetPath the selected properties should be replaced by the original model's properties.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/26/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/24", "title": "Navigation Properties exposed on Concrete Types should be retrievable.", "body": "\\vipr\\test\\csharpwriterunittests\\given_an_odcmclass_entity_navigation_property_collection_forced_to_pascal_case.cs\nWhen_retrieved_through_Concrete_ConcreteInterface_Property_then_request_is_sent_with_original_name\n\nNavigation properties exposed on the Concrete Interface, when not expanded, appear as empty collections or null properties. They instead should use a construct like Nullable which depicts that their value is unknown but can be fetched.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/24/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72332730", "body": "Sridhar, looks like this was blocked by AppVeyor. It looks like we have a task that is failing to complete. Can you take a look?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72332730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72947292", "body": "Some comments, LGTM otherwise.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72947292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73328161", "body": "It is, @MrTomWhite. \n\n@tonycrider, fixed this in PR #22. Closing the issue.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73328161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74131200", "body": "@joshgav it looks like these changes broke the build validation. Can you take a look?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74131200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74135204", "body": "Tony, can you please make the required ODCM Model enhancements?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74135204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74618398", "body": "@Sridhar-MS \n- Added basic console output as suggested\n- Will rename test project to ViprCLI in next PR. Those merges are messy so I don't want to have to do them twice.\n\n@joshgav \nAgreed. This feature is two PRs away. I'm revamping the configuration system next, then will use that as a basis for configuring Readers & Writers.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74618398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74982681", "body": "LGTM, aside from comments.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74982681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74983334", "body": "Fixed in PR #37 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74983334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74983502", "body": "Fixed in PR #34 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74983502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122515", "body": "This looks like a reference to a developer's local file system...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122725", "body": "Do we still need ODataWriter.cs?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122997", "body": "This should just be removed. The CSharp model included Odcm fields for completeness but did not take dependencies on the fields existing, IIRC. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24123002", "body": "This should just be removed. The CSharp model included Odcm fields for completeness but did not take dependencies on the fields existing, IIRC. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24123002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793847", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793854", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793868", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793875", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793882", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793888", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "joshgav": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/63", "title": "Generated output files should stream to disk", "body": "Currently all output files are aggregated in a TextFileCollection or IEnumerable<TextFile>, and only after all processing is complete are they written to disk.\n\nFor large APIs with lots of types and operations, this may lead to a lot of text being held in memory longer than necessary. It seems it would be better if files were written out to disk as soon as available.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/63/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74133075", "body": "Thanks Peter, I didn't intend for this to be merged as is. Can you review the proposals though and comment? Once we settle on interfaces we can adjust other parts of the code. This is one of the reasons I'd like to have consensus on these core bits now.\n\nI propose we create a branch for CLI and Core feature work - we can update the current ViprCLI branch to that end.\n\n@marcote will also review and we'll potentially work on this in our fork first.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74133075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "tonycrider": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/39", "title": "Add warning mechanism for OdcmModel readers.", "body": "In both the v3 and v4 OData readers, there are cases where a warning rather than an error is warranted. The GenerateOdcmModel() method should be updated to permit the return of an array or warning and/or informational messages.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/39/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72543535", "body": "There is a latent bug with the new MediaEntity class kind. I'm correcting the problem and will revise the pull request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72543535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74546835", "body": "Looked good -- just committed it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74546835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74579753", "body": "In general, this looks good--just a few i's and t's.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74579753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74934819", "body": "Completes Odcm model changes for Issue #30\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74934819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357548", "body": "Move to TypeExtensions.cs\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357647", "body": "Just make Name read/write.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357809", "body": "Formatting?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24358136", "body": "Please remove.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24358136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24775877", "body": "Copyright notice\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24775877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24775962", "body": "Copyright notice.\nJust to make sure: Are all using statements necessary?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24775962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776029", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776050", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776087", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776101", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776114", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776144", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776160", "body": "Did you intend to remove the copyright notice?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776213", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776246", "body": "Copyright notice.\nAnd just to make sure: Are all using statements necessary?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776274", "body": "Remove extra whitespace.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776291", "body": "Remove extra whitespace.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776373", "body": "Should the DeleteFiles() call be done using a try/finally block?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776417", "body": "Should the DeleteFiles() call (and the following File.Delete() call) be done in a try/finally block?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776427", "body": "Should the DeleteFiles() call be done in a try/finally block?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dotnet-bot": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/17", "title": "Support custom annotation registration beyond Core and Capabilities", "body": "<a href=\"https://github.com/MrTomWhite\"><img src=\"https://avatars.githubusercontent.com/u/2236580?v=3\" align=\"left\" width=\"96\" height=\"96\" hspace=\"10\"></img></a> **Issue by [MrTomWhite](https://github.com/MrTomWhite)**\n_Friday Jan 23, 2015 at 23:08 GMT_\n_Originally opened as https://github.com/Microsoft/vipr-old/issues/59_\n\n---\n### Status Quo\n\nOur code writers will only need to consume annotations for Capabiltiies and Core vocabularies. Although it's not general or extensible, it's acceptable at the moment to hard-code references to these vocabularies. This entails registering a mapping from the vocabulary namespace to a namespace that contains implementations of complex types:  \n\n``` C#\n        // TODO: Extend / modify this to more clearly support custom annotation registration. \n        private static Dictionary<string, string> VocabularyNamespaceMappings = new Dictionary<string, string>()\n        {\n            { \"Org.OData.Capabilities.V1\", ViprCoreVocabularyRoot + \".Capabilities\" }\n        };\n```\n\nAdditionally, this requires loading the Edm Model that defines entities in the referenced vocabulary.\n\n``` C#\n// TODO: As above, Extend / modify this to more clearly support custom annotation registration. \n            using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(CapabilitiesXmlFilePath))\n            { /*etc...*/ \n```\n### Reasons to fix\n\nIn the future, if we have consumers of Vipr that would like to write custom writers which use custom annotations for code generation (SAP may find this functionality useful, for example), this design will need to be changed. \n\nA possible fix is to refactor registration to a static method that can be invoked with the namespace mapping and a path to the vocabulary definiton; the remainder of the vocabulary parsing code should be general enough to handle this case. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/17/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/15", "title": "Prevent setting non-nullable reference properties to NULL", "body": "<a href=\"https://github.com/piotrpMSFT\"><img src=\"https://avatars.githubusercontent.com/u/2379589?v=3\" align=\"left\" width=\"96\" height=\"96\" hspace=\"10\"></img></a> **Issue by [piotrpMSFT](https://github.com/piotrpMSFT)**\n_Tuesday Jan 20, 2015 at 19:16 GMT_\n_Originally opened as https://github.com/Microsoft/vipr-old/issues/50_\n\n---\n\nOData supports properties of structrural reference types [e.g. string, Complex Types]. These reference type properties can be specified to be nullable or non-nullable. When non-nullable, the generated proxy cannot express that a user is unable to set the value to null.\n\nWhen a user tries setting such a property's value to null we could throw an exception from the property Setter. It is unclear if this is necessary or beneficial since the generated proxy would not provide design-time support for preventing invalid code, and a runtime exception would be propagated from the service when a request is made. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/15/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/4", "title": "Fix Expand Extension Method in ProxyExtensions", "body": "<a href=\"https://github.com/piotrpMSFT\"><img src=\"https://avatars.githubusercontent.com/u/2379589?v=3\" align=\"left\" width=\"96\" height=\"96\" hspace=\"10\"></img></a> **Issue by [piotrpMSFT](https://github.com/piotrpMSFT)**\n_Wednesday Jan 28, 2015 at 22:02 GMT_\n_Originally opened as https://github.com/Microsoft/vipr-old/issues/81_\n\n---\n\n\\vipr\\test\\ProxyExtensionsUnitTests\\Given_A_ReadOnlyQueryableSet.cs\npublic void When_Using_Expand_Clause_On_EntityType_Interface_Then_Resulting_Sequence_Must_Be_Expanded()\n\nThis test passes when we create a ReadOnlyQueryableSet of the class type but fails when we use the interface type with System.NotSupportedException: The expression 'p => p.Supplier' is not a valid expression for navigation path. The only supported operations inside the lambda expression body are MemberAccess and TypeAs. The expression must contain at least one MemberAccess and it cannot end with TypeAs.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/4/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/3", "title": "Enable patching OData GeoSpatial properties in ODataV4TestService", "body": "<a href=\"https://github.com/piotrpMSFT\"><img src=\"https://avatars.githubusercontent.com/u/2379589?v=3\" align=\"left\" width=\"96\" height=\"96\" hspace=\"10\"></img></a> **Issue by [piotrpMSFT](https://github.com/piotrpMSFT)**\n_Thursday Jan 29, 2015 at 01:46 GMT_\n_Originally opened as https://github.com/Microsoft/vipr-old/issues/84_\n\n---\n\n\\vipr\\test\\ProxyExtensionsUnitTests\\Given_An_EntityType_From_Server.cs\nWhen_Updating_GeoSpatial_Primitive_Property_On_Client_Then_That_Property_Must_Be_Updated_On_Server\n\nUsing a GeoSpatial property seems to be causing issues with converting the payload into a Delta<Supplier>. This issue, deserialization of GeoJson, is discussed in a few places like http://blogs.microsoft.co.il/applisec/2014/06/03/spatial-support-in-web-api-and-odata/. Unfortunately, it seems that since we are using Delta<T> a custom Json deserializer is not even getting triggered. We need to find a workaround for this issue.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/3/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284397", "body": "<a href=\"https://github.com/marcote\"><img src=\"https://avatars.githubusercontent.com/u/2897427?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [marcote](https://github.com/marcote)**\n_Friday Jan 16, 2015 at 20:45 GMT_\n\n---\n\nOur current configuration settings are simply some key/value and and don't think we will need more than that. \n@joshgav, @lt72  What do you think? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284399", "body": "<a href=\"https://github.com/MrTomWhite\"><img src=\"https://avatars.githubusercontent.com/u/2236580?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [MrTomWhite](https://github.com/MrTomWhite)**\n_Friday Jan 16, 2015 at 21:02 GMT_\n\n---\n\nHow do other C# libraries handle this problem? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284401", "body": "<a href=\"https://github.com/piotrpMSFT\"><img src=\"https://avatars.githubusercontent.com/u/2379589?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [piotrpMSFT](https://github.com/piotrpMSFT)**\n_Friday Jan 16, 2015 at 21:18 GMT_\n\n---\n\nThis is not a library problem but an application problem. We are enabling communication of state between an application [the Vipr host applicaiton] and the Components [Readers, Writers].\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284403", "body": "<a href=\"https://github.com/joshgav\"><img src=\"https://avatars.githubusercontent.com/u/4421720?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [joshgav](https://github.com/joshgav)**\n_Tuesday Jan 20, 2015 at 16:41 GMT_\n\n---\n\nUnder the two proposals, how would configuration be shared between **multiple writers or readers**? Do we need a hierarchy of configuration? If so, do at least the top levels of this hierarchy need to be typed as dictionaries?\n\nPerhaps to leverage config files, we could extend the dictionary with the ability to read config files from disk at an expected location (e.g. typename.config) as a strongly-typed element such as XmlDocument.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284406", "body": "<a href=\"https://github.com/joshgav\"><img src=\"https://avatars.githubusercontent.com/u/4421720?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [joshgav](https://github.com/joshgav)**\n_Tuesday Jan 20, 2015 at 16:57 GMT_\n\n---\n\nAn alternative suggestion: What if instead of IDictionary, we surface configuration data through a \"dynamic\" object produced from JSON? That is, we create an object that acts like a complete tree (not just a dictionary), from a JSON config file? It seems [JSON.NET](http://james.newtonking.com/json) has [this capability](http://james.newtonking.com/json/help/html/SerializationGuide.htm#Dynamic).\n\nI think if we did this we wouldn't have complex objects as nodes/leaves in the tree. The final leaf node would always be a primitive type.\n\nNB: It would be even better if we could use [YAML](http://www.yaml.org/). IMHO it's so much easier to read and write then JSON, which is a big advantage for config files. There's a C# lib for it [here](https://github.com/aaubry/YamlDotNet).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "MIchaelMainer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/61c45d9e51ac7a343c0b3db8892791bd6e0c18db", "message": "Removed packages from outdated OutlookServicesVIPR\n\nWe are using vipr as a submodule of a submodule. This means we are using a deep recursive clone which leads to the Nuget restore step being done on this package.json. There isn't a vipr nuget package so the restore fails here."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shiftylogic": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ef3b93be53c8944a76e3b3873147f639bc02c8d7", "message": "Merge pull request #131 from Microsoft/mmitche-patch-1\n\nhttp://dotnet-ci.cloudapp.net -> https://ci.dot.net"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f69c3b7f36e29dcf694be140c0601aed7e062465", "message": "Merge pull request #130 from Microsoft/shiftylogic/working3\n\nUpdating to only use latest MSBuild."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/25bbbad1de5214ad25e9644887ca899292caca0c", "message": "Merge pull request #127 from v-am/master\n\nAdd support for logging via NLog"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b53bb03d53450fc1b3335943d26f990934764854", "message": "Merge pull request #126 from v-am/master\n\nFix for #125."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9af0da1eb56ea4166b44af2ca1b4138f63f09c16", "message": "Merge pull request #124 from v-am/master\n\nAdd Code of Conduct text."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/0551621e3265d26b688bb00c89cbc530f33280ef", "message": "Merge pull request #123 from v-am/master\n\nAdd description annotations support for enum members (Issue #50)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mmitche": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/60fbd36baa0abc9e925fbeb6f747d443651a0952", "message": "http://dotnet-ci.cloudapp.net -> https://ci.dot.net"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "v-am": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/96727e464ba5580852cfbe85b3c1a15e1897dd10", "message": "Add support for logging via NLog"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e99c82d93efd66c0e330e5b08a22bca997c1e183", "message": "Fix for #125.\n\nWhen ODATA lib returns a list of vocabulary annotations for an EntityType, this list consists of all annotations defined for this type plus all annotations inherited from its base types. The type annotations and the inherited annotations differ by their Target property. The annotation list is parsed by VIPR into Projection for a OdcmClass object. However, VIPR requires only one copy of a particular annotation type to be present in any OdcmObject.Projection list.\n\nThis particular crash is caused by redefinition of a base EntityType annotation by its derived class.\n\nThe fix takes into account that base type annotations can be redefined (or overridden) by derived types.The OdcmObject.Projection for any type would contain base type annotation only if this annotation hasn't been redefined or overridden by this type.\n\nThe change also adds a new unit test for annotation inheritance scenario."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/cffb0cdadeb04f16fb983f9c4c053eb2dc64ea49", "message": "Add Code of Conduct text."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/7e93a23d95808bc5ee9e2b7431e80df16aeeb790", "message": "Add description annotations support for enum members (Issue #50)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MrTomWhite": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73317052", "body": "@piotrpMSFT Isn't this already resolved? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73317052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632571", "body": "I'll close this and open a PR on Annotations. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}}}}