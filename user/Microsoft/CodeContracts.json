{"_default": {"1": {"baSSiLL": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/498", "title": "Another NullReferenceException with closure in constructor", "body": "The issue is similar to #191. However, it reproduces with the latest sources. The difference is that an argument is also used in an expression for a local variable, and then both used in a lambda. Here is a test class:\r\n```c#\r\n\r\n    class A\r\n    {\r\n        public A(object o)\r\n        {\r\n            Contract.Requires(o != null);\r\n\r\n            var local = o;\r\n            Action a = () => ReferenceEquals(local, o);\r\n        }\r\n    }\r\n```", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "LYP951018": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/497", "title": "Document for the implementation/source code?", "body": "Is there any document for Code Contracts' implementation like _Book of runtime_ for CoreCLR? With documents, more people are able to evolved in the project and make it better.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johncrim": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/495", "title": "Build with CodeContracts fails with dotnet build", "body": "By manually adding imports and msbuild properties (b/c no IDE support in VS 2017), ccrewrite works on netcoreapp and netstandard projects (only when [portable PDBs](https://github.com/dotnet/core/blob/master/Documentation/diagnostics/portable_pdb.md) are not used).\r\n\r\nRunning the build using `msbuild /t:build` works. Running the build using `dotnet build` fails:\r\n\r\n```\r\ndotnet build /v:normal\r\nBuild started 2017-09-25 9:06:34 AM\r\n...\r\n       CreateCodeContractReferenceAssembly:\r\n         \"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrefgen.exe\" \"@obj\\Debug\\netstandard2.0\\MyProject.ccrefgen.rsp\"\r\n         elapsed time: 881.9998ms\r\n       CodeContractRewrite:\r\n         \"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrewrite.exe\" \"@MyProject.ccrewrite.rsp\"\r\n                There were errors reported in Tv.Web.Upfront.Model's metadata.\r\n                Exception of type 'System.OutOfMemoryException' was thrown.\r\n     1>ccrewrite : error : Foxtrot:     There were errors reported in Tv.Web.Upfront.Model's metadata. [C:\\src\\my\\project\\MyProject.csproj]\r\n                Exception of type 'System.OutOfMemoryException' was thrown.\r\n         elapsed time: 61.4774ms\r\n     1>C:\\Program Files (x86)\\Microsoft\\Contracts\\MsBuild\\v15.0\\Microsoft.CodeContracts.targets(275,5): error MSB3073: The command \"\"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrewrite.exe\" \"@MyProject.ccrewrite.rsp\"\" exited with code -1. [C:\\src\\my\\project\\MyProject.csproj]\r\n     1>Done Building Project \"C:\\src\\my\\project\\MyProject.csproj\" (Build target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n```\r\n\r\nThe root cause is this block of the `Microsoft.CodeContracts.targets` file:\r\nhttps://github.com/Microsoft/CodeContracts/blob/master/Microsoft.Research/ManagedContract.Setup/MSBuild/v15.0/Microsoft.CodeContracts.targets#L292\r\n\r\nTarget `GetFrameworkSdkPath`, and `sn.exe` don't exist in the dotnet build system.\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/496", "title": "Bugfix/495 dotnet build", "body": "This commit fixes #495 , which I opened. I believe it's reasonable to skip the sn.exe step when building under dotnet, [since strong-naming is discouraged for non-.NET Core SDK libraries and apps](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/strong-name-signing.md).\r\n\r\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/486", "title": "Fixes: #471 Can't build in VS 2015", "body": "Fixes #471 due to missing Microsoft.VisualBasic.dll assembly, and after that an invalid reference to Microsoft.Research/Contracts/MsCorlib/MsCorlib.Contracts.csproj.\r\n\r\nAfter this, I'm able to run `buildcc %version%` with VS 2015 installed. I've verified that the Contracts.devlab9ts.msi works as expected on our projects (.NET 4.6.x).", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vladexl": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/494", "title": "COMException (0x80004005)", "body": "If i open sln-file with C++ projects only  (but projects too many: 198 in one solution):\r\n\r\nCode Contracts Editor Extensions 1.9.10714.2 12.0.40629.0 Visual Studio failed. 0:20.256\r\n\r\nProjectRemoved failed\r\nSystem.Runtime.InteropServices.COMException (0x80004005): Object reference not set to an instance of an object.\r\n   at EnvDTE.Project.get_UniqueName()\r\n   at ContractAdornments.VSServiceProvider.<>c__DisplayClassa.<ProjectRemoved>b__9()\r\n   at UtilitiesNamespace.Logger.PublicEntry(Action action, String entryName) 0:25.611", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wavebit": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/493", "title": "Do not work with visual studio 2017", "body": "After installing this, I got nothing\r\nhttps://marketplace.visualstudio.com/items?itemName=RiSEResearchinSoftwareEngineering.CodeContractsforNET\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/493/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SaiSK88": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/492", "title": "How to enable \"perform runtime contract checking\" in Visual Studio 2017?", "body": "Hi All,\r\n\r\nI have VS 2017 community edition. I need to enable \"perform runtime contract checking\" on Code Contracts pane. But I don't see that pane anywhere in the project properties.\r\n\r\nAny idea on how to enable this in Visual Studio 2017 community edition.\r\n\r\nThanks in advance.\r\n\r\nRegards,\r\nSai", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yaakov-h": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/491", "title": "Postcondition missing from StringBuilder.AppendFormat(IFormatProvider, string, object)", "body": "Probably all contract missing from this method, not just postconditions.\r\n\r\n> warning : CodeContracts: Possibly calling a method on a null reference. Do you expect that System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object) returns non-null?", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/489", "title": "StackOverflowException in cccheck.exe", "body": "The following function causes cccheck to stack overflow:\r\n\r\n```\r\npublic static SqlBoolean StackOverflowReproFunction(SqlGuid first, SqlGuid second)\r\n{\r\n\treturn SqlGuid.Equals(first, second);\r\n}\r\n```\r\n\r\ncccheck output (through msbuild):\r\n\r\n```\r\nCodeContracts: Task manager is unavailable (unable to run in background).\r\nCodeContracts: FrameworkExtensions: Run static contract analysis.\r\nCodeContracts: FrameworkExtensions: Time spent connecting to the cache: 00:00:01.2159937\r\nCodeContracts: FrameworkExtensions: Cache used: my.cache.db.server\r\nCodeContracts: FrameworkExtensions: Process is terminated due to StackOverflowException.\r\nCodeContracts: FrameworkExtensions: \r\nCodeContracts: FrameworkExtensions: Static contract analysis done.\r\n```", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/487", "title": ".NET Framework 4.7 BCL Contracts", "body": "Is anyone working on this, or do I need to dig through source control to figure out how it was done for .NET 4.6.x?", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/481", "title": "ccrewrite chokes on async preconditions with using in VS2017", "body": "Using Visual Studio 2017 Enterprise RC, 15.0.0-RC.4+26206.0\r\n\r\nOutput:\r\n```\r\nerror CC1017: Malformed contract section in method 'AsyncContracts.AsyncContracts+<DoTheThingSlowly>d__0.MoveNext'\r\n```\r\n\r\nCode that triggers this bug:\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics.Contracts;\r\nusing System.IO;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace AsyncContracts\r\n{\r\n\tpublic class AsyncContracts\r\n\t{\r\n\t\tpublic static async Task<string> DoTheThingSlowly(object o)\r\n\t\t{\r\n\t\t\tContract.Requires(o != null);\r\n\r\n\t\t\tawait Task.Delay(TimeSpan.FromSeconds(1));\r\n\r\n\t\t\tusing (var s = new MemoryStream())\r\n\t\t\t{\r\n\t\t\t\tawait Task.Delay(TimeSpan.FromSeconds(1));\r\n\t\t\t\tawait Task.Delay(TimeSpan.FromSeconds(1));\r\n\t\t\t\treturn o.ToString();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nIL of the generated async state machine:\r\n\r\n```\r\n.class nested private auto ansi sealed beforefieldinit '<DoTheThingSlowly>d__0'\r\n\textends [mscorlib]System.ValueType\r\n\timplements [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine\r\n{\r\n\t.custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (\r\n\t\t01 00 00 00\r\n\t)\r\n\t// Fields\r\n\t.field public int32 '<>1__state'\r\n\t.field public valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> '<>t__builder'\r\n\t.field public object o\r\n\t.field private class [mscorlib]System.IO.MemoryStream '<s>5__1'\r\n\t.field private valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter '<>u__1'\r\n\r\n\t// Methods\r\n\t.method private final hidebysig newslot virtual \r\n\t\tinstance void MoveNext () cil managed \r\n\t{\r\n\t\t.override method instance void [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine::MoveNext()\r\n\t\t// Method begins at RVA 0xbe2c\r\n\t\t// Code size 476 (0x1dc)\r\n\t\t.maxstack 3\r\n\t\t.locals init (\r\n\t\t\t[0] int32,\r\n\t\t\t[1] string,\r\n\t\t\t[2] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[3] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[4] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[5] class [mscorlib]System.Exception\r\n\t\t)\r\n\r\n\t\tIL_0000: ldarg.0\r\n\t\tIL_0001: ldfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\tIL_0006: stloc.0\r\n\t\t.try\r\n\t\t{\r\n\t\t\tIL_0007: ldloc.0\r\n\t\t\tIL_0008: brfalse.s IL_0066\r\n\r\n\t\t\tIL_000a: ldloc.0\r\n\t\t\tIL_000b: ldc.i4.1\r\n\t\t\tIL_000c: sub\r\n\t\t\tIL_000d: ldc.i4.1\r\n\t\t\tIL_000e: ble.un IL_009c\r\n\r\n\t\t\tIL_0013: ldarg.0\r\n\t\t\tIL_0014: ldfld object AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::o\r\n\t\t\tIL_0019: ldnull\r\n\t\t\tIL_001a: cgt.un\r\n\t\t\tIL_001c: call void [mscorlib]System.Diagnostics.Contracts.Contract::Requires(bool)\r\n\t\t\tIL_0021: ldc.r8 1\r\n\t\t\tIL_002a: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\tIL_002f: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\tIL_0034: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\tIL_0039: stloc.2\r\n\t\t\tIL_003a: ldloca.s 2\r\n\t\t\tIL_003c: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\tIL_0041: brtrue.s IL_0082\r\n\r\n\t\t\tIL_0043: ldarg.0\r\n\t\t\tIL_0044: ldc.i4.0\r\n\t\t\tIL_0045: dup\r\n\t\t\tIL_0046: stloc.0\r\n\t\t\tIL_0047: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\tIL_004c: ldarg.0\r\n\t\t\tIL_004d: ldloc.2\r\n\t\t\tIL_004e: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_0053: ldarg.0\r\n\t\t\tIL_0054: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\tIL_0059: ldloca.s 2\r\n\t\t\tIL_005b: ldarg.0\r\n\t\t\tIL_005c: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\tIL_0061: leave IL_01db\r\n\r\n\t\t\tIL_0066: ldarg.0\r\n\t\t\tIL_0067: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_006c: stloc.2\r\n\t\t\tIL_006d: ldarg.0\r\n\t\t\tIL_006e: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_0073: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\tIL_0079: ldarg.0\r\n\t\t\tIL_007a: ldc.i4.m1\r\n\t\t\tIL_007b: dup\r\n\t\t\tIL_007c: stloc.0\r\n\t\t\tIL_007d: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\tIL_0082: ldloca.s 2\r\n\t\t\tIL_0084: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\tIL_0089: ldloca.s 2\r\n\t\t\tIL_008b: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\tIL_0091: ldarg.0\r\n\t\t\tIL_0092: newobj instance void [mscorlib]System.IO.MemoryStream::.ctor()\r\n\t\t\tIL_0097: stfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\r\n\t\t\tIL_009c: nop\r\n\t\t\t.try\r\n\t\t\t{\r\n\t\t\t\tIL_009d: ldloc.0\r\n\t\t\t\tIL_009e: ldc.i4.1\r\n\t\t\t\tIL_009f: beq.s IL_00ed\r\n\r\n\t\t\t\tIL_00a1: ldloc.0\r\n\t\t\t\tIL_00a2: ldc.i4.2\r\n\t\t\t\tIL_00a3: beq IL_015c\r\n\r\n\t\t\t\tIL_00a8: ldc.r8 1\r\n\t\t\t\tIL_00b1: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\t\tIL_00b6: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\t\tIL_00bb: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\t\tIL_00c0: stloc.3\r\n\t\t\t\tIL_00c1: ldloca.s 3\r\n\t\t\t\tIL_00c3: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\t\tIL_00c8: brtrue.s IL_0109\r\n\r\n\t\t\t\tIL_00ca: ldarg.0\r\n\t\t\t\tIL_00cb: ldc.i4.1\r\n\t\t\t\tIL_00cc: dup\r\n\t\t\t\tIL_00cd: stloc.0\r\n\t\t\t\tIL_00ce: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\t\tIL_00d3: ldarg.0\r\n\t\t\t\tIL_00d4: ldloc.3\r\n\t\t\t\tIL_00d5: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_00da: ldarg.0\r\n\t\t\t\tIL_00db: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\t\tIL_00e0: ldloca.s 3\r\n\t\t\t\tIL_00e2: ldarg.0\r\n\t\t\t\tIL_00e3: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\t\tIL_00e8: leave IL_01db\r\n\r\n\t\t\t\tIL_00ed: ldarg.0\r\n\t\t\t\tIL_00ee: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_00f3: stloc.3\r\n\t\t\t\tIL_00f4: ldarg.0\r\n\t\t\t\tIL_00f5: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_00fa: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0100: ldarg.0\r\n\t\t\t\tIL_0101: ldc.i4.m1\r\n\t\t\t\tIL_0102: dup\r\n\t\t\t\tIL_0103: stloc.0\r\n\t\t\t\tIL_0104: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\t\tIL_0109: ldloca.s 3\r\n\t\t\t\tIL_010b: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\t\tIL_0110: ldloca.s 3\r\n\t\t\t\tIL_0112: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0118: ldc.r8 1\r\n\t\t\t\tIL_0121: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\t\tIL_0126: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\t\tIL_012b: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\t\tIL_0130: stloc.s 4\r\n\t\t\t\tIL_0132: ldloca.s 4\r\n\t\t\t\tIL_0134: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\t\tIL_0139: brtrue.s IL_0179\r\n\r\n\t\t\t\tIL_013b: ldarg.0\r\n\t\t\t\tIL_013c: ldc.i4.2\r\n\t\t\t\tIL_013d: dup\r\n\t\t\t\tIL_013e: stloc.0\r\n\t\t\t\tIL_013f: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\t\tIL_0144: ldarg.0\r\n\t\t\t\tIL_0145: ldloc.s 4\r\n\t\t\t\tIL_0147: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_014c: ldarg.0\r\n\t\t\t\tIL_014d: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\t\tIL_0152: ldloca.s 4\r\n\t\t\t\tIL_0154: ldarg.0\r\n\t\t\t\tIL_0155: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\t\tIL_015a: leave.s IL_01db\r\n\r\n\t\t\t\tIL_015c: ldarg.0\r\n\t\t\t\tIL_015d: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_0162: stloc.s 4\r\n\t\t\t\tIL_0164: ldarg.0\r\n\t\t\t\tIL_0165: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_016a: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0170: ldarg.0\r\n\t\t\t\tIL_0171: ldc.i4.m1\r\n\t\t\t\tIL_0172: dup\r\n\t\t\t\tIL_0173: stloc.0\r\n\t\t\t\tIL_0174: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\t\tIL_0179: ldloca.s 4\r\n\t\t\t\tIL_017b: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\t\tIL_0180: ldloca.s 4\r\n\t\t\t\tIL_0182: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0188: ldarg.0\r\n\t\t\t\tIL_0189: ldfld object AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::o\r\n\t\t\t\tIL_018e: callvirt instance string [mscorlib]System.Object::ToString()\r\n\t\t\t\tIL_0193: stloc.1\r\n\t\t\t\tIL_0194: leave.s IL_01c7\r\n\t\t\t} // end .try\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tIL_0196: ldloc.0\r\n\t\t\t\tIL_0197: ldc.i4.0\r\n\t\t\t\tIL_0198: bge.s IL_01ad\r\n\r\n\t\t\t\tIL_019a: ldarg.0\r\n\t\t\t\tIL_019b: ldfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\t\t\t\tIL_01a0: brfalse.s IL_01ad\r\n\r\n\t\t\t\tIL_01a2: ldarg.0\r\n\t\t\t\tIL_01a3: ldfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\t\t\t\tIL_01a8: callvirt instance void [mscorlib]System.IDisposable::Dispose()\r\n\r\n\t\t\t\tIL_01ad: endfinally\r\n\t\t\t} // end handler\r\n\t\t} // end .try\r\n\t\tcatch [mscorlib]System.Exception\r\n\t\t{\r\n\t\t\tIL_01ae: stloc.s 5\r\n\t\t\tIL_01b0: ldarg.0\r\n\t\t\tIL_01b1: ldc.i4.s -2\r\n\t\t\tIL_01b3: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\tIL_01b8: ldarg.0\r\n\t\t\tIL_01b9: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\tIL_01be: ldloc.s 5\r\n\t\t\tIL_01c0: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetException(class [mscorlib]System.Exception)\r\n\t\t\tIL_01c5: leave.s IL_01db\r\n\t\t} // end handler\r\n\r\n\t\tIL_01c7: ldarg.0\r\n\t\tIL_01c8: ldc.i4.s -2\r\n\t\tIL_01ca: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\tIL_01cf: ldarg.0\r\n\t\tIL_01d0: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\tIL_01d5: ldloc.1\r\n\t\tIL_01d6: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetResult(!0)\r\n\r\n\t\tIL_01db: ret\r\n\t} // end of method '<DoTheThingSlowly>d__0'::MoveNext\r\n\r\n\t.method private final hidebysig newslot virtual \r\n\t\tinstance void SetStateMachine (\r\n\t\t\tclass [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine stateMachine\r\n\t\t) cil managed \r\n\t{\r\n\t\t.custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = (\r\n\t\t\t01 00 00 00\r\n\t\t)\r\n\t\t.override method instance void [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine::SetStateMachine(class [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine)\r\n\t\t// Method begins at RVA 0xc048\r\n\t\t// Code size 13 (0xd)\r\n\t\t.maxstack 8\r\n\r\n\t\tIL_0000: ldarg.0\r\n\t\tIL_0001: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\tIL_0006: ldarg.1\r\n\t\tIL_0007: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetStateMachine(class [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine)\r\n\t\tIL_000c: ret\r\n\t} // end of method '<DoTheThingSlowly>d__0'::SetStateMachine\r\n\r\n} // end of class <DoTheThingSlowly>d__0\r\n```\r\n\r\nIL from VS2015, this works with ccrewrite:\r\n```\r\n.class nested private auto ansi sealed beforefieldinit '<DoTheThingSlowly>d__0'\r\n\textends [mscorlib]System.ValueType\r\n\timplements [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine\r\n{\r\n\t.custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (\r\n\t\t01 00 00 00\r\n\t)\r\n\t// Fields\r\n\t.field public int32 '<>1__state'\r\n\t.field public valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> '<>t__builder'\r\n\t.field public object o\r\n\t.field private class [mscorlib]System.IO.MemoryStream '<s>5__1'\r\n\t.field private valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter '<>u__1'\r\n\r\n\t// Methods\r\n\t.method private final hidebysig newslot virtual \r\n\t\tinstance void MoveNext () cil managed \r\n\t{\r\n\t\t.override method instance void [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine::MoveNext()\r\n\t\t// Method begins at RVA 0xbe2c\r\n\t\t// Code size 482 (0x1e2)\r\n\t\t.maxstack 3\r\n\t\t.locals init (\r\n\t\t\t[0] int32,\r\n\t\t\t[1] string,\r\n\t\t\t[2] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[3] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[4] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[5] class [mscorlib]System.Exception\r\n\t\t)\r\n\r\n\t\tIL_0000: ldarg.0\r\n\t\tIL_0001: ldfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\tIL_0006: stloc.0\r\n\t\t.try\r\n\t\t{\r\n\t\t\tIL_0007: ldloc.0\r\n\t\t\tIL_0008: switch (IL_006c, IL_00a2, IL_00a2)\r\n\r\n\t\t\tIL_0019: ldarg.0\r\n\t\t\tIL_001a: ldfld object AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::o\r\n\t\t\tIL_001f: ldnull\r\n\t\t\tIL_0020: cgt.un\r\n\t\t\tIL_0022: call void [mscorlib]System.Diagnostics.Contracts.Contract::Requires(bool)\r\n\t\t\tIL_0027: ldc.r8 1\r\n\t\t\tIL_0030: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\tIL_0035: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\tIL_003a: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\tIL_003f: stloc.2\r\n\t\t\tIL_0040: ldloca.s 2\r\n\t\t\tIL_0042: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\tIL_0047: brtrue.s IL_0088\r\n\r\n\t\t\tIL_0049: ldarg.0\r\n\t\t\tIL_004a: ldc.i4.0\r\n\t\t\tIL_004b: dup\r\n\t\t\tIL_004c: stloc.0\r\n\t\t\tIL_004d: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\tIL_0052: ldarg.0\r\n\t\t\tIL_0053: ldloc.2\r\n\t\t\tIL_0054: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_0059: ldarg.0\r\n\t\t\tIL_005a: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\tIL_005f: ldloca.s 2\r\n\t\t\tIL_0061: ldarg.0\r\n\t\t\tIL_0062: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\tIL_0067: leave IL_01e1\r\n\r\n\t\t\tIL_006c: ldarg.0\r\n\t\t\tIL_006d: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_0072: stloc.2\r\n\t\t\tIL_0073: ldarg.0\r\n\t\t\tIL_0074: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_0079: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\tIL_007f: ldarg.0\r\n\t\t\tIL_0080: ldc.i4.m1\r\n\t\t\tIL_0081: dup\r\n\t\t\tIL_0082: stloc.0\r\n\t\t\tIL_0083: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\tIL_0088: ldloca.s 2\r\n\t\t\tIL_008a: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\tIL_008f: ldloca.s 2\r\n\t\t\tIL_0091: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\tIL_0097: ldarg.0\r\n\t\t\tIL_0098: newobj instance void [mscorlib]System.IO.MemoryStream::.ctor()\r\n\t\t\tIL_009d: stfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\r\n\t\t\tIL_00a2: nop\r\n\t\t\t.try\r\n\t\t\t{\r\n\t\t\t\tIL_00a3: ldloc.0\r\n\t\t\t\tIL_00a4: ldc.i4.1\r\n\t\t\t\tIL_00a5: beq.s IL_00f3\r\n\r\n\t\t\t\tIL_00a7: ldloc.0\r\n\t\t\t\tIL_00a8: ldc.i4.2\r\n\t\t\t\tIL_00a9: beq IL_0162\r\n\r\n\t\t\t\tIL_00ae: ldc.r8 1\r\n\t\t\t\tIL_00b7: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\t\tIL_00bc: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\t\tIL_00c1: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\t\tIL_00c6: stloc.3\r\n\t\t\t\tIL_00c7: ldloca.s 3\r\n\t\t\t\tIL_00c9: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\t\tIL_00ce: brtrue.s IL_010f\r\n\r\n\t\t\t\tIL_00d0: ldarg.0\r\n\t\t\t\tIL_00d1: ldc.i4.1\r\n\t\t\t\tIL_00d2: dup\r\n\t\t\t\tIL_00d3: stloc.0\r\n\t\t\t\tIL_00d4: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\t\tIL_00d9: ldarg.0\r\n\t\t\t\tIL_00da: ldloc.3\r\n\t\t\t\tIL_00db: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_00e0: ldarg.0\r\n\t\t\t\tIL_00e1: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\t\tIL_00e6: ldloca.s 3\r\n\t\t\t\tIL_00e8: ldarg.0\r\n\t\t\t\tIL_00e9: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\t\tIL_00ee: leave IL_01e1\r\n\r\n\t\t\t\tIL_00f3: ldarg.0\r\n\t\t\t\tIL_00f4: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_00f9: stloc.3\r\n\t\t\t\tIL_00fa: ldarg.0\r\n\t\t\t\tIL_00fb: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_0100: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0106: ldarg.0\r\n\t\t\t\tIL_0107: ldc.i4.m1\r\n\t\t\t\tIL_0108: dup\r\n\t\t\t\tIL_0109: stloc.0\r\n\t\t\t\tIL_010a: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\t\tIL_010f: ldloca.s 3\r\n\t\t\t\tIL_0111: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\t\tIL_0116: ldloca.s 3\r\n\t\t\t\tIL_0118: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_011e: ldc.r8 1\r\n\t\t\t\tIL_0127: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\t\tIL_012c: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\t\tIL_0131: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\t\tIL_0136: stloc.s 4\r\n\t\t\t\tIL_0138: ldloca.s 4\r\n\t\t\t\tIL_013a: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\t\tIL_013f: brtrue.s IL_017f\r\n\r\n\t\t\t\tIL_0141: ldarg.0\r\n\t\t\t\tIL_0142: ldc.i4.2\r\n\t\t\t\tIL_0143: dup\r\n\t\t\t\tIL_0144: stloc.0\r\n\t\t\t\tIL_0145: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\t\tIL_014a: ldarg.0\r\n\t\t\t\tIL_014b: ldloc.s 4\r\n\t\t\t\tIL_014d: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_0152: ldarg.0\r\n\t\t\t\tIL_0153: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\t\tIL_0158: ldloca.s 4\r\n\t\t\t\tIL_015a: ldarg.0\r\n\t\t\t\tIL_015b: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\t\tIL_0160: leave.s IL_01e1\r\n\r\n\t\t\t\tIL_0162: ldarg.0\r\n\t\t\t\tIL_0163: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_0168: stloc.s 4\r\n\t\t\t\tIL_016a: ldarg.0\r\n\t\t\t\tIL_016b: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_0170: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0176: ldarg.0\r\n\t\t\t\tIL_0177: ldc.i4.m1\r\n\t\t\t\tIL_0178: dup\r\n\t\t\t\tIL_0179: stloc.0\r\n\t\t\t\tIL_017a: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\t\tIL_017f: ldloca.s 4\r\n\t\t\t\tIL_0181: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\t\tIL_0186: ldloca.s 4\r\n\t\t\t\tIL_0188: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_018e: ldarg.0\r\n\t\t\t\tIL_018f: ldfld object AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::o\r\n\t\t\t\tIL_0194: callvirt instance string [mscorlib]System.Object::ToString()\r\n\t\t\t\tIL_0199: stloc.1\r\n\t\t\t\tIL_019a: leave.s IL_01cd\r\n\t\t\t} // end .try\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tIL_019c: ldloc.0\r\n\t\t\t\tIL_019d: ldc.i4.0\r\n\t\t\t\tIL_019e: bge.s IL_01b3\r\n\r\n\t\t\t\tIL_01a0: ldarg.0\r\n\t\t\t\tIL_01a1: ldfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\t\t\t\tIL_01a6: brfalse.s IL_01b3\r\n\r\n\t\t\t\tIL_01a8: ldarg.0\r\n\t\t\t\tIL_01a9: ldfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\t\t\t\tIL_01ae: callvirt instance void [mscorlib]System.IDisposable::Dispose()\r\n\r\n\t\t\t\tIL_01b3: endfinally\r\n\t\t\t} // end handler\r\n\t\t} // end .try\r\n\t\tcatch [mscorlib]System.Exception\r\n\t\t{\r\n\t\t\tIL_01b4: stloc.s 5\r\n\t\t\tIL_01b6: ldarg.0\r\n\t\t\tIL_01b7: ldc.i4.s -2\r\n\t\t\tIL_01b9: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\tIL_01be: ldarg.0\r\n\t\t\tIL_01bf: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\tIL_01c4: ldloc.s 5\r\n\t\t\tIL_01c6: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetException(class [mscorlib]System.Exception)\r\n\t\t\tIL_01cb: leave.s IL_01e1\r\n\t\t} // end handler\r\n\r\n\t\tIL_01cd: ldarg.0\r\n\t\tIL_01ce: ldc.i4.s -2\r\n\t\tIL_01d0: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\tIL_01d5: ldarg.0\r\n\t\tIL_01d6: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\tIL_01db: ldloc.1\r\n\t\tIL_01dc: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetResult(!0)\r\n\r\n\t\tIL_01e1: ret\r\n\t} // end of method '<DoTheThingSlowly>d__0'::MoveNext\r\n\r\n\t.method private final hidebysig newslot virtual \r\n\t\tinstance void SetStateMachine (\r\n\t\t\tclass [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine stateMachine\r\n\t\t) cil managed \r\n\t{\r\n\t\t.custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = (\r\n\t\t\t01 00 00 00\r\n\t\t)\r\n\t\t.override method instance void [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine::SetStateMachine(class [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine)\r\n\t\t// Method begins at RVA 0xc050\r\n\t\t// Code size 13 (0xd)\r\n\t\t.maxstack 8\r\n\r\n\t\tIL_0000: ldarg.0\r\n\t\tIL_0001: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\tIL_0006: ldarg.1\r\n\t\tIL_0007: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetStateMachine(class [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine)\r\n\t\tIL_000c: ret\r\n\t} // end of method '<DoTheThingSlowly>d__0'::SetStateMachine\r\n\r\n} // end of class <DoTheThingSlowly>d__0\r\n```\r\n\r\nIt appears that this block of IL, which exists before the calls to `Contract.Requires`, is confusing the rewriter. The rewriter seems to understand a switch statement and a simple condition, but not this subtraction-based condition.\r\n\r\n```\r\nIL_0007: ldloc.0\r\nIL_0008: brfalse.s IL_0066\r\n\r\nIL_000a: ldloc.0\r\nIL_000b: ldc.i4.1\r\nIL_000c: sub\r\nIL_000d: ldc.i4.1\r\nIL_000e: ble.un IL_009c\r\n```\r\n\r\n(Related to VS2017, so tagging #451 here).\r\n\r\n@SergeyTeplyakov Is this something that can be easily fixed?", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/481/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3b44d3ebeb373c43084a6e607d717f258d80af43", "message": "It would help if the MSBuild15 targets were actually part of a feature."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/0b18b2eac5df2f16c61a22d74606f0c4d774e6d3", "message": "Fix installer - targets for 15.0 should have unique GUID"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/07804ed9ce85c7ea9a7bcbbb17a8afd8c6bac930", "message": "Use 4.6.x reference assemblies for 4.6.2 in VS2013 and VS2015"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/5884b5e93a125f27e6f342d5a11c49510b98d4c0", "message": "Add .vs to .gitignore"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8162d003abbd01b6258d1df1de56615a3b6ed3af", "message": "Add MSBuild targets for VS2017"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/30ab1fe1c625402b28fa5f7e6f6249ff7ac19005", "message": "Add CodeContractsDeferAnalysis to do all of static checking except actually running cccheck.exe"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/7aef039ffd3ac4acd318e890702bc51117dcda3f", "message": "Merge remote-tracking branch 'microsoft/master' into internal/master"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/65d5d795a00849afb795d53d55fbb52fb7efe660", "message": "Fix typo in comment - OptionsParsing.cs"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/dd92cd704150707091dfd5d38cb2d9804aff6571", "message": "Fix static checker dogfooding warning - remove redundant null-check"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e1c657ed44c599d480bbc87592c33f18ca060f3a", "message": "Fix static checker dogfooding warning - make un-mutated field readonly"}], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/462", "title": "Add options to cccheck to find source in a different location", "body": "`cccheck` currently reads the paths to source files out of the PDBs. This is required for some suppressions to work, e.g. `RequiresAtCall`.\n\nWhat I need to be able to do for distributed testing is build in one path, e.g. `C:\\Build\\MyProject`, and then invoke `cccheck` from another computer entirely in a different path, e.g. `C:\\Testing\\TestRun001\\MyProject`.\n\nThis pull request adds two command-line flags.\n- `-sourcePaths` lists partial paths that the project was built from.\n- `-alternativeSourcePaths` lists alternative/substitute paths that can be used to replace a partial path from `-sourcePaths`.\n\nFor example, with these changes I can successfully test an assembly in the scenario above by running:\n\n```\nC:\\Testing\\TestRun001\\MyProject\\bin\\CodeContractsDeclarative>C:\\path\\to\\cccheck.exe @MyProject.rsp -sourcePaths:C:\\Build\\MyProject -alternativeSourcePaths:C:\\Testing\\TestRun001\\MyProject\n```\n\nIf you don't supply both `-sourcePaths` and `-alternativeSourcePaths`, these changes have no other effect.\n\nThis goes hand-in-hand with #459.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndirNotes": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/490", "title": "IDictionary contracts and boxing", "body": "Accidentally during memory profiling of our app, I've discovered that contracts for IDictionary\r\nhttps://github.com/Microsoft/CodeContracts/blob/master/Microsoft.Research/Contracts/MsCorlib/System.Collections.Generic.IDictionary.cs\r\nContains a lot of contracts like\r\n`Contract.Requires(!ReferenceEquals(key, null));`\r\nand this lead to boxing of a value type keys (e.g. keys like  ints, Guids are quite common) and performance penalties. Looks like a bug.\r\nI suspect that those contracts should be more clever than that and consider that generic type could be a ValueType and such check does not make sense at all.\r\n\r\nIn the meantime I need a workaround: Is it possible to ask somehow code contracts rewriter do not use contracts for implemented interfaces? Some way to ignore them for a specific type only?", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nexussays": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/488", "title": "ccrewrite aborted due to metadata errors (Xamarin or VS2017 15.2 related?)", "body": "I wasn't able to find anything regarding the below issue when searching, apologies if I missed something.\r\n\r\nI started receiving this error when compiling Xamarin library projects for iOS or Android on a system running VS2017 15.2. It doesn't happen in any app projects that I can tell, just libraries, and just iOS and Android (PCL and .Net4.5 libraries appear fine). I can't recall anything that has changed on my end, but it still works on a machine with VS2017 15.1 as well as VSTS. So I'm presuming it's an issue with the 15.2 update? Somehow?\r\n\r\nThe specific errors are different between iOS and Android but I am assuming they are related since they both appeared at the same time.\r\n\r\nXamarin.iOS library project:\r\n```\r\nTask \"Exec\" (TaskId:164)\r\n  Task Parameter:WorkingDirectory=obj\\Release\\ (TaskId:164)\r\n  Task Parameter:Command=\"C:\\Users\\<snip>\\lib\\packages\\DotNet.Contracts.1.10.20606.1\\Bin\\ccrewrite.exe\" \"@projectnameccrewrite.rsp\" (TaskId:164)\r\n  \"C:\\Users\\<snip>\\lib\\packages\\DotNet.Contracts.1.10.20606.1\\Bin\\ccrewrite.exe\" \"@projectnameccrewrite.rsp\" (TaskId:164)\r\n  Reading assembly 'mscorlib' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\mscorlib.dll' resulted in errors. (TaskId:164)\r\nccrewrite : error : Rewrite aborted due to metadata errors. Check output window\r\n    An attempt was made to move the file pointer before the beginning of the file. (TaskId:164)\r\n   (TaskId:164)\r\n  elapsed time: 533.1574ms (TaskId:164)\r\n```\r\nXamarin.Android library project:\r\n```\r\nTask \"Exec\" (TaskId:167)\r\n  Task Parameter:WorkingDirectory=obj\\Release\\ (TaskId:167)\r\n  Task Parameter:Command=\"C:\\Users\\<snip>\\lib\\packages\\DotNet.Contracts.1.10.20606.1\\Bin\\ccrewrite.exe\" \"@projectnameccrewrite.rsp\" (TaskId:167)\r\n  \"C:\\Users\\<snip>\\lib\\packages\\DotNet.Contracts.1.10.20606.1\\Bin\\ccrewrite.exe\" \"@projectnameccrewrite.rsp\" (TaskId:167)\r\n  Reading assembly 'Xamarin.iOS' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\Xamarin.iOS\\v1.0\\Xamarin.iOS.dll' resulted in errors. (TaskId:167)\r\nccrewrite : error : Rewrite aborted due to metadata errors. Check output window\r\n    Could not resolve type reference: [Mono.Security]Mono.Security.Interface.MonoTlsProvider. (TaskId:167)\r\n  elapsed time: 567.021ms (TaskId:167)\r\n```", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aleksd": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/483", "title": "Rewriter produces incorrect debug information for async methods in PDB file", "body": "It looks like CC rewriter produces incorrect table of yield/resume offsets for the MoveNext() method of the async state machine. As a result it's not possible to step through async methods with the VS debugger.\r\n\r\nFirst, if you don't define any conditions in the project with CodeContracts enabled, the rewriter still modifies the IL of the assembly slightly and instruction offsets change. However debug info is not updated accordingly.\r\n\r\nSecond, if you add some conditions to the project, then debug info is updated but still contains incorrect offsets.\r\n\r\nTo reproduce, you can open the attached solution in the VS and try to step through Method1(). The debugger loses track of the method execution after the first await. If CodeContracts are disabled, then stepping through the method works correctly again.\r\n[AsyncDebugging.zip](https://github.com/Microsoft/CodeContracts/files/831358/AsyncDebugging.zip)\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/483/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NickStrupat": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/480", "title": "DotNet.Contracts hard to find", "body": "Hi pals,\r\n\r\nI'm wondering if the DotNet.Contracts package can be renamed to Microsoft.CodeContracts, or at least have tags added (\"microsoft\", \"contracts\", \"codecontracts\", etc.).\r\n\r\nWhen I search \"microsoft contracts\" it's not even on the first hundred or so of the results.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/480/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GerbrandStap": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/479", "title": "False positive on a contant value when using GeneratedCodeAttribute", "body": "Analyzing the following code:\r\n\r\n```\r\n[System.CodeDom.Compiler.GeneratedCodeAttribute(\"\",\"\")]\r\npublic class GeneratedClass\r\n{\r\n}\r\n\r\npublic class Test\r\n{\r\n\tprivate GeneratedClass _cachedItem;\r\n\r\n\tpublic GeneratedClass Item\r\n\t{\r\n\t\tget\r\n\t\t{\r\n\t\t\tif( this._cachedItem == null )\r\n\t\t\t{\r\n\t\t\t\tthis._cachedItem = new GeneratedClass();\r\n\t\t\t}\r\n\t\t\treturn this._cachedItem;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nProduces the error:\r\n\r\n```\r\nCodeContracts: warning: The Boolean condition this._cachedItem == null always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or redundant check\r\n```\r\n\r\nWhen the `GeneratedCodeAttribute` attribute is removed, the error no longer occurs. The attribute gets added by the xsd tool in our case, so it is generated code and we'd rather not have to remove the attribute,\r\n\r\nWe use Code Contracts 1.10.20606.1.\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NameOfTheDragon": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/478", "title": "Contract for Enum.GetName incorrectly states result\u00a0not null", "body": "When building I get an incorrect warning about possible 'dead code' for the following IF statement:\r\n\r\n```\r\n            foreach (char c in text)\r\n                {\r\n                var b = (byte)c;\r\n                var strASCII = Enum.GetName(typeof(AsciiSymbols), b);\r\n                if (strASCII != null)\r\n                    expanded.Append(\"<\" + strASCII + \">\");\r\n                else\r\n                    expanded.Append(c);\r\n                }\r\n```\r\n\r\nThe problem seems to be an incorrect contract for `Enum.GetName()`:\r\n![image](https://cloud.githubusercontent.com/assets/1268490/22178245/49e1bb72-e029-11e6-8961-ed30c5efed19.png)\r\n\r\nAn examination of the source code shows that the result can in fact be null, so this is leading to a false positive in the warning.\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dfch": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/477", "title": "ccrewrite error when trying to set TextBox.Margin in UWP project when targeting ARM platform", "body": "I get the following error when building an UWP application for ARM:\r\n\r\n```\r\nCould not resolve member reference: Windows.UI.Xaml.FrameworkElement::put_Margin.\r\n```\r\n\r\nThis happens only when CodeContracts are enabled (v1.9.10714.2, see screenshot) and *ONLY* when `Solutions Platform` is set to `ARM` (I try to build for `IoT`; there is no error when trying to build for `x64` or `x86`)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8310360/21953800/c66fabca-da40-11e6-828d-a804bfc8d930.png)\r\n\r\nI use UWP target version 10.0.14393 (for min and max):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8310360/21953808/f9d230dc-da40-11e6-8653-5090b6b260cf.png)\r\n\r\nThe code I use to reproduce the behaviour is a simple constructor that creates a `TextBox` and sets a `Margin`:\r\n\r\n``` csharp\r\npublic sealed partial class ArbitraryPage : Page\r\n{\r\n  public ArbitraryPage()\r\n  {\r\n    this.InitializeComponent();\r\n\r\n    var textBox = new TextBox()\r\n    {\r\n      Text = item,\r\n      IsReadOnly = true,\r\n      Margin = new Thickness(10),\r\n    };\r\n  }\r\n}\r\n```\r\n\r\nNote: when omitting the `Margin = ...` line there is no error.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RealDotNetDave": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/476", "title": "CodeContracts not working in VS2017", "body": "This extension does not work in VS2017 RC. Most of my projects will not compile since I use this for all of my DLL assemblies.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/476/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Daniel-Svensson": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/474", "title": "Wrong reference assemblies used when targeting .Net 4.6.2 (and in some cases 4.5.2)", "body": "If targeting .Net 4.6.2 then the reference assemblies for .Net 3.5 is used when targeting 4.6.2 since 4.6.2 is missing from the switch statements in the target files.\r\n\r\nIf targeting .Net 4.5.2 (using v12 tools) then the reference assemblies for .Net 3.5 is used when targeting 4.5.2 since 4.5.2 is missing from the switch statements in the target files under v12 (it is part of v14 target file) .", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/475", "title": "Target correct reference assemblies for .Net 4.6.2 and 4.5.2", "body": "* Add support for .Net 4.6.2 \r\n** Any possible future 4.6.x release would also choose correct reference assemblies\r\n** Fixes #475 \r\n* Add support for .Net 4.5.2 for toolset version 12\r\n\r\nDefault TargetFramework (if target framework is missing) changed from 3.5 to 4.0\r\n\r\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/473", "title": "Fix nuget package", "body": "This PR makes it possible to use the code contracts nuget package by just adding Dotnet.Contracts as a nuget reference. (first commit)\r\nIt also makes some minor improvements to the target files such as adding support for .Net 4.6.2 (second commit). This can be moved to a second PR if requested.\r\n\r\n## Nuget improvements\r\nThe .targets files will be automatically included in the Project and no further action is required unless the MSI is also installed .\r\n\r\nIt should solve the following issues\r\n* #313 Nuget package refuse to install \r\n* #454 Cant install Nuget for DotNet.Contracts 1.10.20606.1\r\n* #13 CodeContracts as NuGet package\r\n\r\nIt should also allowing code contract rewriter to run for VS 2017 #451 \r\n\r\nHowever *if you have installed the MSI* you do need to *include the following workaround at the top of your project file* (it must be before \"Microsoft.CSharp.targets\" is included) which is mentioned in Issue #368 \r\n\r\n ```\r\n  <PropertyGroup>\r\n    <DontImportCodeContracts>True</DontImportCodeContracts>\r\n  </PropertyGroup>\r\n```\r\n\r\n## .target file improvements \r\n\r\n* Remove extra space from library path\r\n Use relative path when including analysis targets so that the same file can be used for multiple MsBuild versions", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HugoRoss": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/472", "title": "Documentation errors in userdoc.pdf", "body": "When studying file userdoc.pdf from https://github.com/Microsoft/CodeContracts/blob/master/Documentation/User%20Documentation/userdoc.pdf, I noticed the following rename- and copy/paste errors:\r\n\r\n2.12 Contract Abbreviator Methods\r\n\r\nOld: \"Important: the ContractArgumentValidatorAttribute type is not defined...\"\r\nNew: \"Important: the ContractAbbreviatorAttribute type is not defined...\"\r\n\r\n2.3 Object Invariants\r\nand\r\n4.2 ContractInvariantMethod\r\n\r\nOld: \"nullary method\"\r\nNew: \"parameterless method\"\r\nReason: Not a mistake but an improvement. e.g. I have never heard yet of nullary methods and had to google it. It must be an academic term that is not very wide-spread and we non-English-natives have difficulties to understand it.\r\n\r\n4.8 ContractOption\r\n\r\nOld: \"Important: the ContractArgumentValidatorAttribute type is not defined...\"\r\nNew: \"Important: the ContractOptionAttribute type is not defined...\"\r\n\r\n7.1 Rewriter Methods\r\n\r\nOld: The code sample has rename mistakes, sometime code referes to userMessage, sometimes to message. Same issue with condition and conditionText as well as type parameter E and TException.\r\n\r\nNew: (I post the new code as attachment)\r\n\r\nIssue 2: I couldn't get the example running, because I didn't find the referred class \"TestRewriterMethods\" (the only hint I found was in project RewriterMethods.csproj that unfortunately does not compile because of missing references). Please include a hint in which assembly this class may be found.\r\n\r\nThank you for this detailed documentation.\r\n\r\n[RuntimeFailureMethods.cs.txt](https://github.com/Microsoft/CodeContracts/files/662319/RuntimeFailureMethods.cs.txt)\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "richgilson": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/471", "title": "Error trying to compile the latest source", "body": "Whenever I try to compile the source (whether using the buildcc.bat or Visual Studio), both of the Visual Basic projects (Microsoft.VisualBasic10 and Microsoft.VisualBasic.Compatibility10), I get the following error:\r\n\r\nvbc : error BC2017: could not find library 'Microsoft.VisualBasic.dll'\r\n\r\nThe file exists in C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0\\System.dll just like the other .NET assemblies listed as references.\r\n\r\nI'm at a loss as to where to go from here.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/471/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jehoel": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/469", "title": "CodeContracts doesn't detect value is mutated by lambda method.", "body": "I have code in a function which does this:\r\n\r\n    Int32 count = 0;\r\n    Parallel.ForEach( foos, (foo) =>\r\n    {\r\n        lock( _lock )\r\n        {\r\n            // do stuff\r\n            count++;\r\n        }\r\n    }\r\n    Int32 x = GetX();\r\n    if( 0 <= x && x < count ) {\r\n        // more stuff\r\n    }\r\n\r\nI get this warning:\r\n\r\n> CodeContracts warning: The Boolean condition `x < 0` always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or a redundant check.\r\n\r\nThe expression `0 <= x && x < count` has a purple squiggle underline.\r\n\r\nIf I change the `Parallel.ForEach` to a regular `foreach` then I don't get the warning.\r\n\r\nI'm using Code Contracts 1.9.10714.2 in VS2015 Enterprise Update 3.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maritaria": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/467", "title": "Class invariants not checked on autoproperty with public setter", "body": "The following code doesn't generate an unproven invariant:\r\n```\r\nusing System.Diagnostics.Contracts;\r\npublic class ClassInvariants\r\n{\r\n    public object MySupervisor\r\n    {\r\n        get;\r\n        set;//Does not uphold class invariants\r\n    }\r\n    public ClassInvariants()\r\n    {\r\n        MySupervisor = new object();\r\n    }\r\n    [ContractInvariantMethod]\r\n    private void InvariantsOfThisClass()\r\n    {\r\n        Contract.Invariant(MySupervisor != null), \"MySupervisor cannot be null\");\r\n    }\r\n}\r\n```\r\nVersion: v.1.10.20606.1-rc2\r\nVisual studio: 2015 update 3\r\nProject targets .NET 4.5.2", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "summivox": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/466", "title": "Invariants not respected in static method?", "body": "Minimal example:\n\n``` csharp\npublic class Example\n{\n    private const string s = \"123\";\n\n    public int A { get; }\n\n    [ContractInvariantMethod]\n    private void ObjectInvariant()\n    {\n        Contract.Invariant(A >= 0);\n        Contract.Invariant(A < 3);\n    }\n\n    public Example(int a)\n    {\n        Contract.Requires(a >= 0);\n        Contract.Requires(a < 3);\n\n        this.A = a;\n    }\n\n    public static char Test(Example x)\n    {\n        Contract.Requires(x != null);\n        return s[x.A];\n    }\n}\n```\n\ngives warnings:\n\n```\nCodeContracts: Missing precondition in an externally visible method. Consider adding Contract.Requires(0 <= x.A); for parameter validation\nCodeContracts: Missing precondition in an externally visible method. Consider adding Contract.Requires(x.A < 3); for parameter validation\n```\n\nI tried all flavors of defining a public readonly property --- with and without explicit backing field. All resulted in the same warnings.\n\nI wonder how I can make the static verifier recognize the invariants I specified?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bkqc": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/465", "title": "CC breaks if XML axis is used within a lambda function (VB.net)", "body": "Original source code:\n\n```\n        Friend Shared Function CCR(myValue As System.Xml.Linq.XElement) As Object\n            Contract.Requires(Of ArgumentNullException)(myValue IsNot Nothing, \"myValue\")\n\n            Return myValue.<values>.ToDictionary(Function(e) e.@DisplayName, Function(e) e.Value)\n        End Function\n```\n\nVB.NET compiled code (from IL Spy)\n\n```\nFriend Shared Function CCR(myValue As XElement) As Object\n    Dim closure$__ As LLSearch._Closure$__7 = New LLSearch._Closure$__7()\n    Dim xNamespace As XNamespace = XNamespace.[Get](\"\")\n    Dim name As XName = xNamespace.GetName(\"values\")\n    closure$__.$VB$Local_VB$t_ref$L2 = xNamespace.GetName(\"DisplayName\")\n    Contract.Requires(Of ArgumentNullException)(myValue IsNot Nothing, \"myValue\")\n    Return myValue.Elements(name).ToDictionary(AddressOf closure$__._Lambda$__29, AddressOf LLSearch._Lambda$__30)\nEnd Function\n```\n\nVB.NET compiled IL\n\n```\n.method assembly static \n    object CCR (\n        class [System.Xml.Linq]System.Xml.Linq.XElement myValue\n    ) cil managed \n{\n    // Method begins at RVA 0x1123c\n    // Code size 101 (0x65)\n    .maxstack 4\n    .locals init (\n        [0] class MRQ.Livelink.Search.LLSearch/_Closure$__7,\n        [1] object,\n        [2] class [System.Xml.Linq]System.Xml.Linq.XName,\n        [3] class [System.Xml.Linq]System.Xml.Linq.XNamespace\n    )\n\n    IL_0000: newobj instance void MRQ.Livelink.Search.LLSearch/_Closure$__7::.ctor()\n    IL_0005: stloc.0\n    IL_0006: ldstr \"\"\n    IL_000b: call class [System.Xml.Linq]System.Xml.Linq.XNamespace [System.Xml.Linq]System.Xml.Linq.XNamespace::Get(string)\n    IL_0010: stloc.3\n    IL_0011: ldloc.3\n    IL_0012: ldstr \"values\"\n    IL_0017: callvirt instance class [System.Xml.Linq]System.Xml.Linq.XName [System.Xml.Linq]System.Xml.Linq.XNamespace::GetName(string)\n    IL_001c: stloc.2\n    IL_001d: ldloc.0\n    IL_001e: ldloc.3\n    IL_001f: ldstr \"DisplayName\"\n    IL_0024: callvirt instance class [System.Xml.Linq]System.Xml.Linq.XName [System.Xml.Linq]System.Xml.Linq.XNamespace::GetName(string)\n    IL_0029: stfld class [System.Xml.Linq]System.Xml.Linq.XName MRQ.Livelink.Search.LLSearch/_Closure$__7::$VB$Local_VB$t_ref$L2\n    IL_002e: ldarg.0\n    IL_002f: ldnull\n    IL_0030: ceq\n    IL_0032: ldc.i4.0\n    IL_0033: ceq\n    IL_0035: ldstr \"myValue\"\n    IL_003a: call void [mscorlib]System.Diagnostics.Contracts.Contract::Requires<class [mscorlib]System.ArgumentNullException>(bool, string)\n    IL_003f: ldarg.0\n    IL_0040: ldloc.2\n    IL_0041: callvirt instance class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement> [System.Xml.Linq]System.Xml.Linq.XContainer::Elements(class [System.Xml.Linq]System.Xml.Linq.XName)\n    IL_0046: ldloc.0\n    IL_0047: dup\n    IL_0048: ldvirtftn instance string MRQ.Livelink.Search.LLSearch/_Closure$__7::_Lambda$__29(class [System.Xml.Linq]System.Xml.Linq.XElement)\n    IL_004e: newobj instance void class [mscorlib]System.Func`2<class [System.Xml.Linq]System.Xml.Linq.XElement, string>::.ctor(object, native int)\n    IL_0053: ldnull\n    IL_0054: ldftn string MRQ.Livelink.Search.LLSearch::_Lambda$__30(class [System.Xml.Linq]System.Xml.Linq.XElement)\n    IL_005a: newobj instance void class [mscorlib]System.Func`2<class [System.Xml.Linq]System.Xml.Linq.XElement, string>::.ctor(object, native int)\n    IL_005f: call class [mscorlib]System.Collections.Generic.Dictionary`2<!!1, !!2> [System.Core]System.Linq.Enumerable::ToDictionary<class [System.Xml.Linq]System.Xml.Linq.XElement, string, string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>, class [mscorlib]System.Func`2<!!0, !!1>, class [mscorlib]System.Func`2<!!0, !!2>)\n    IL_0064: ret\n}\n```\n\nCCR Compiled code (ILSpy)\n\n```\nFriend Shared Function CCR(myValue As XElement) As Object\n    If __ContractsRuntime.insideContractEvaluation <= 4 Then\n        Try\n            __ContractsRuntime.insideContractEvaluation += 1\n            Dim xNamespace As XNamespace\n            Dim VB$t_ref$L2 As XName = xNamespace.GetName(\"DisplayName\")\n            __ContractsRuntime.Requires(Of ArgumentNullException)(myValue IsNot Nothing, \"myValue\", \"myValue IsNot Nothing\")\n        Finally\n            __ContractsRuntime.insideContractEvaluation -= 1\n        End Try\n    End If\n    Dim [object] As LLSearch._Closure$__1 = New LLSearch._Closure$__1()\n    Dim xNamespace2 As XNamespace = XNamespace.[Get](\"\")\n    Dim name As XName = xNamespace2.GetName(\"values\")\n    Return myValue.Elements(name).ToDictionary(AddressOf [object]._Lambda$__1, AddressOf LLSearch._Lambda$__2)\nEnd Function\n\n```\n\nCCR Compiled IL\n\n```\n.method assembly static \n    object CCR (\n        class [System.Xml.Linq]System.Xml.Linq.XElement myValue\n    ) cil managed \n{\n    // Method begins at RVA 0x17918\n    // Code size 166 (0xa6)\n    .maxstack 12\n    .locals init (\n        [0] class MRQ.Livelink.Search.LLSearch/_Closure$__1,\n        [1] object,\n        [2] class [System.Xml.Linq]System.Xml.Linq.XName,\n        [3] class [System.Xml.Linq]System.Xml.Linq.XNamespace,\n        [4] object,\n        [5] class MRQ.Livelink.Search.LLSearch/LLSearch__Closure$__1_0,\n        [6] class [System.Xml.Linq]System.Xml.Linq.XNamespace\n    )\n\n    IL_0000: newobj instance void MRQ.Livelink.Search.LLSearch/LLSearch__Closure$__1_0::.ctor()\n    IL_0005: stloc.s 5\n    IL_0007: ldsfld int32 System.Diagnostics.Contracts.__ContractsRuntime::insideContractEvaluation\n    IL_000c: ldc.i4.4\n    IL_000d: bgt IL_005a\n    .try\n    {\n        IL_0012: ldsfld int32 System.Diagnostics.Contracts.__ContractsRuntime::insideContractEvaluation\n        IL_0017: ldc.i4.1\n        IL_0018: add\n        IL_0019: stsfld int32 System.Diagnostics.Contracts.__ContractsRuntime::insideContractEvaluation\n        IL_001e: ldloc.s 5\n        IL_0020: ldloc.s 6\n        IL_0022: ldstr \"DisplayName\"\n        IL_0027: callvirt instance class [System.Xml.Linq]System.Xml.Linq.XName [System.Xml.Linq]System.Xml.Linq.XNamespace::GetName(string)\n        IL_002c: stfld class [System.Xml.Linq]System.Xml.Linq.XName MRQ.Livelink.Search.LLSearch/LLSearch__Closure$__1_0::$VB$Local_VB$t_ref$L2\n        IL_0031: ldarg.0\n        IL_0032: ldnull\n        IL_0033: ceq\n        IL_0035: ldc.i4.0\n        IL_0036: ceq\n        IL_0038: ldstr \"myValue\"\n        IL_003d: ldstr \"myValue IsNot Nothing\"\n        IL_0042: call void System.Diagnostics.Contracts.__ContractsRuntime::Requires<class [mscorlib]System.ArgumentNullException>(bool, string, string)\n        IL_0047: nop\n        IL_0048: leave IL_005a\n    } // end .try\n    finally\n    {\n        IL_004d: ldsfld int32 System.Diagnostics.Contracts.__ContractsRuntime::insideContractEvaluation\n        IL_0052: ldc.i4.1\n        IL_0053: sub\n        IL_0054: stsfld int32 System.Diagnostics.Contracts.__ContractsRuntime::insideContractEvaluation\n        IL_0059: endfinally\n    } // end handler\n\n    IL_005a: newobj instance void MRQ.Livelink.Search.LLSearch/_Closure$__1::.ctor()\n    IL_005f: stloc.0\n    IL_0060: ldstr \"\"\n    IL_0065: call class [System.Xml.Linq]System.Xml.Linq.XNamespace [System.Xml.Linq]System.Xml.Linq.XNamespace::Get(string)\n    IL_006a: stloc.3\n    IL_006b: ldloc.3\n    IL_006c: ldstr \"values\"\n    IL_0071: callvirt instance class [System.Xml.Linq]System.Xml.Linq.XName [System.Xml.Linq]System.Xml.Linq.XNamespace::GetName(string)\n    IL_0076: stloc.2\n    IL_0077: ldarg.0\n    IL_0078: ldloc.2\n    IL_0079: callvirt instance class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement> [System.Xml.Linq]System.Xml.Linq.XContainer::Elements(class [System.Xml.Linq]System.Xml.Linq.XName)\n    IL_007e: ldloc.0\n    IL_007f: dup\n    IL_0080: ldvirtftn instance string MRQ.Livelink.Search.LLSearch/_Closure$__1::_Lambda$__1(class [System.Xml.Linq]System.Xml.Linq.XElement)\n    IL_0086: newobj instance void class [mscorlib]System.Func`2<class [System.Xml.Linq]System.Xml.Linq.XElement, string>::.ctor(object, native int)\n    IL_008b: ldnull\n    IL_008c: ldftn string MRQ.Livelink.Search.LLSearch::_Lambda$__2(class [System.Xml.Linq]System.Xml.Linq.XElement)\n    IL_0092: newobj instance void class [mscorlib]System.Func`2<class [System.Xml.Linq]System.Xml.Linq.XElement, string>::.ctor(object, native int)\n    IL_0097: call class [mscorlib]System.Collections.Generic.Dictionary`2<!!1, !!2> [System.Core]System.Linq.Enumerable::ToDictionary<class [System.Xml.Linq]System.Xml.Linq.XElement, string, string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>, class [mscorlib]System.Func`2<!!0, !!1>, class [mscorlib]System.Func`2<!!0, !!2>)\n    IL_009c: stloc.s 4\n    IL_009e: br IL_00a3\n\n    IL_00a3: ldloc.s 4\n    IL_00a5: ret\n} // end of method LLSearch::CCR\n```\n\nThis applies also to Contract.Ensures and in both cases, only if Optimizations are enabled (release build).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SergeyTeplyakov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/7255a95ec1de1453518852030de285d0fa001c11", "message": "Merge pull request #482 from WiseTechGlobal/wtg/pr/vs2017\n\nAdd MSBuild targets for VS2017"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a7df47aaf1b6570abc07191a32a0afa29f9838e8", "message": "Merge pull request #459 from WiseTechGlobal/wtg/pr/rsp-generation\n\nAdd flag to generate cccheck RSP at build time"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1803c2a95f3472bd05f856957fa2f7bda920fd9e", "message": "Merge pull request #464 from kkm000/patch-1\n\nSupport SQL Local DB 2016"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/84bbcb14a299d5ff830671bb7c634baa56893a6a", "message": "Merge pull request #470 from tom-englert/SyncR#\n\nAdd missing contracts found when aligning CC with R#"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9cf9f5489d2cb6e58ce1352ddd77e0e973361701", "message": "Merge pull request #457 from vanillajonathan/patch-1\n\nFixed capitalization in parameter"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a6f1d39405ad8be218c56388732f364384ce5a75", "message": "Merge pull request #452 from mnkraus/FixAssemblyRefs\n\nForced AssemblyRef flags to be ECMA compatible when writing output"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/01e007bc7b2fbd11eb1418ed10d1e0d595195046", "message": "Merge pull request #393 from jeroen-mostert/master\n\nAdd preconditions to System.Text.Encoding"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e733b0ae86a478e8fd9b726a79e7400e47c545de", "message": "Merge pull request #446 from tom-englert/Issue340\n\nAdd a test case and revert changes in reader as it breaks the tests."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/67b57824a3a666e38a10b508042ef070eff631c4", "message": "Merge pull request #445 from tom-englert/Issue340\n\nAdditional fix for #340"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/bf32538c8be7ad22aee546b8762252abb92b97a2", "message": "Merge pull request #426 from WiseTechGlobal/wtg/wip/WI00119105\n\nFixes for various issues"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/88a752b97e625728447a7a241f14c8cd1d91d09e", "message": "Merge pull request #413 from DanAtkinson/patch-1\n\nComment modification for language code"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/75b1c47c4d021faf9efcce7246c4184dbb7b0945", "message": "Merge pull request #390 from hubuk/issue221\n\nAdded support for array creation in contract methods in Roslyn generated code."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/comments/11936447", "body": "Sorry I've missed that. Was a bit in rush. I'll fix via next push. Because I've missed another point in this review: method ReplaceRequiresWithAssumInMoveNext should be commented out, actually.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/comments/11936447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "tom-englert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b87d7a02ff256f9fc4ed1aa1109e43359c73d7d4", "message": "Add missing contracts found when aligning CC with R# External Annotations\n\n(https://github.com/JetBrains/ExternalAnnotations)"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/f7c92fbc56026910822903a728a6d66b6e808011", "message": "Add a test case and revert changes in reader as it breaks the tests."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/fd0e5ffc9440f2dcf36bb63f1dfc64ee5707e56b", "message": "Additional fix for #340: Type arguments can't start with a reserved char, so fall back to standard behavior in this case."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81682032", "body": "You're right, adding a post condition works in this case. I expected to get the \"x is implementing y, thus can't add contracts\" warning - so I didn't try.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81682032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450354", "body": "I don't think this would make any difference, CC will only look at the contracts information and ignores any code.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468546", "body": "Because there is no constraint that TDelegate is a class, so for the compiler it could be a value type, too - and you cant do value_type != null\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468792", "body": "Sorry, it's hard to keep the old formatting with 2 spaces indent where the default in VS is 4 spaces. Are there any coding guidelines for CC project?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468875", "body": "I'll add some comments in the code.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468881", "body": "I'll add some comments in the code.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "kkm000": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/da7188411af38b9c755e336cfd88f6625144c579", "message": "Support SQL Local DB 2016"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vanillajonathan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8bdc7180bd2d202a8b75fc8c5c33fc377c7a9512", "message": "Fixed capitalization in parameter\n\nFixed capitalization of `scopeid` parameter to camelCase in order to adhere to the .NET naming convention."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wuestholz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/6cc1fafd925d87c60dfc754f63e2e249170807c6", "message": "Add a test."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e904c8d4531baa2b9b97b5e76f7d02e5eb476840", "message": "Minor changes"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aidmsu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/499", "title": "Add AppVeyor build status badge", "body": "This PR adds build status badge to Readme page.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Patashu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/387", "title": "Add contracts to System.Windows.Forms, System.Windows.Data classes", "body": "Just a bunch of contracts that I noticed were missing.\n\nFirst pull request; LMK if I did anything wrong.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hubuk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/356", "title": "Simplified projects and tests configuration.", "body": "This PR consist of the following tasks:\n- [x] Remove unused (other than Debug and Devlab9) configurations from projects in CodeContracts.sln.\n- [x] Rename Devlab9 configuration to Release (along with output directories).\n- [x] Remove old project versions (e.g. System.Compiler/System.Compiler9.csproj).\n- [x] Make tests work in both configurations.\n- [x] Remove Debug build from AppVeyor settings.\n- [ ] Get rid of irrelevant defines.\n- [ ] Refactor project files (e.g. remove click once stuff).\n\nIf you have some additional tasks that fit in scope of this PR, feel free to mention them in comments. I will try to include them.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/31076922", "body": "According to issue #30 this line should point to v14.0 of the targets folder.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/31076922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32394252", "body": "This whole file needs a reformatting as it uses two space indentation.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32394252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32494501", "body": "Can you provide some info about what problems it can cause?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32494501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32536959", "body": "It may be an issue if downloaded package is suppose to modify MSBuild script structure as MSBuild does not allow to mutate already loaded project ([source](https://docs.nuget.org/consume/package-restore/team-build#the-general-approach)). This is not a case in our scenario.\n\nFunctionality you are referring to is called Command-Line Package Restore. Automatic Package Restore is being used by Visual Studio. In addition an approach that is no longer promoted by NuGet team is called MSBuild-Integrated Package Restore. This is the one used to download Enterprise Library package in Code Contracts solution.\n\nAlong with moving `nuget restore` to a bat file it would be required to handle nuget errors. With current approach MSBuild is taking care of that.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32536959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32546498", "body": "If you are going to build VSIX projects using <MsBuild/> task from within buildMSI10.xml or any other project file you do not need to run nuget from bat file. You can just use <Exec/> taks before <MSBuild/>. In that way any modification introduced by nuget packages will be processed by MsBuild after <Exec/>(nuget restore) finish.\nMaybe we should talk about how the build process should be organized? Currently Editor Extension is not being built with Code Contracts. It would be best to have them build together. If we choose to use command line as a glue for them we should also consider Power Shell.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32546498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32559887", "body": "OK, I think I understand our different point of view:\n\nCurrent CC build script is similar to the one presented in my [link](https://docs.nuget.org/consume/package-restore/team-build#the-general-approach). In both cases MsBuild is executed twice:\n- First one on `build.proj` in example and `buildMSI10.xml` in CC.\n- The second one on `BingSearcher.sln` in example and `CodeContracts.sln` in CC.\n\nThis first msbuild run acts like a bat file from your point of view. In both cases nuget is being called before second msbuild run. This is a solution proposed in the NuGet link I provided. And it is stated that this solution differs from a legacy one (the one which uses Nuget.targets) in which:\n\"The previous implementation had a chicken-and-egg problem for packages that want to extend the build process because NuGet restored packages while building the project\"\nThe presented solution does not have this kind of problems because MsBuild for which the packages were downloaded has not been run yet.\n\nSo behavior described in your point 1. is exactly the same for my approach.\nAll the arguments from point 2 can also be applied to all the logic contained in buildMSI10.xml.\nI admit, current project file is quite complex and hard to maintain. We should rethink how the build process should be defined. Then I can agree to move _all the logic_ from `buildMSI10.xml` to sh1 script. Bat file may be too clumsy.\n\nMoving only `nuget.exe restore` call to a bat file complicates things. Current approach centralizes all the build activities keeping them in one file. When you move nuget.exe call to a bat file moving another activity from an xml to bat before nuget may not be so simple (depends on complexity of the activity to be moved).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32559887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ndykman": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/239", "title": "Changes to support contracts for FileDialog (and other common Dialogs)", "body": "This is a set of contract for FileDialog.cs and other classes to address #217. This is a fairly small set of contracts. Thanks again for reviewing.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/238", "title": "Supporting DataGridView (and it's many related classes)", "body": "Okay, this is a big merge, but all of it is in support of DataGridView as requested in issue #216. I have gone over it a few times, but peer review and comments are very much welcomed and needed. \n\nThere are some complex contract code that matches the if/throw code in the source bases. It's unclear if some of these really could be checked by the static checker, but they are there to match the source. Others are fairly straightforward.\n\nAlso, of note, there are some cases in which some obvious seem missing, but I couldn't see that the code actually would guarantee or require them (for example, a Height property always being >= 0). I am open to adding these, but I'm already doing a lot and I'm trying to be very conservative. \n\nI'm sure there are things I missed here. I just appreciate your consideration. Hopefully, this is useful down the road. \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/224", "title": "Changes in System.Windows.Forms.Control", "body": "In regards to #214. There were some formatting changes to be made more consistent with other files, so the diff is fairly large. Also, there was a renamed file to fix a spelling error in a file name. \n\nAgain, thanks for your consideration. \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/223", "title": "Added Contract for GetAllNetworkInterfaces", "body": "In regards to issue #215. Fairly straightforward. \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nathan-022": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/236", "title": "Contract for TypeConverter.ConvertFrom(object)", "body": "As far as I can tell this is a valid contract, it doesn't appear that ConvertFrom should ever return null - it either successfully returns the conversion or throws a NotSupportedException\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Dennis-Petrov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/196", "title": "Added new snippets.", "body": "Snippets use string.IsNullOrWhiteSpace() instead of\nstring.IsNullOrEmpty, as proposed in #190.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aarondandy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69098511", "body": "Should also consider creating a related issue with respect to contributing. Any CLA stuff to worry about? ASP.NET could be used as an example, they have a minimal source header and spell things out pretty well.\n- https://github.com/aspnet/Home/blob/master/LICENSE.txt\n- https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md\n- https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Formatters/DelegatingStream.cs#L2\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69098511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69340470", "body": "If somebody has a machine that reproduces this could they provide a Fusion Log for the failed bind, assuming it is a failed bind.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69340470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72215906", "body": "@kant2002 \nThis is how I setup my configurations: http://mediocresoft.com/things/code-contracts-from-new-project-to-nuget#build-config\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72215906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72404650", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72404650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/74784992", "body": "There is a similar package for stylecop: http://www.nuget.org/packages/StyleCop.MSBuild/ . Could be a source of some inspiration.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/74784992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/77725808", "body": "I wonder if this would be a large undertaking as the compiler output from Roslyn may be different enough to cause problems. I think 2015 support is going to be very important to keep this project going but it seems like we are going to be the ones that need to do it. Hopefully somebody can get enough time to dig in and learn the code base.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/77725808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79114981", "body": "May be related:\n- https://social.msdn.microsoft.com/Forums/en-US/acdb74d0-e48d-4f45-89d6-8f845d861559/ccrewriter-crash-unable-to-cast-object-of-type-systemcompilertypeparameter-to-type?forum=codecontracts\n- https://github.com/Microsoft/CodeContracts/blob/180c3ae426fae1c31105fc672eeba57c91f76ed0/System.Compiler/StandardVisitor.cs#L1687\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79114981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79168216", "body": "Did you mean to close this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79168216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81191037", "body": "I'm done reading up to 227167b042b5657b98e34736b15bebb6123e4b08 . Some good changes in this PR. Found some stuff I was unsure about but only found one item that I think needs to be addressed: https://github.com/Microsoft/CodeContracts/pull/21/files#diff-cace338ba5980de8d18370a9d6b804e2R389\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81191037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81191909", "body": "While you can add post conditions I have found in my experience that CC seems to ignore them. Not sure if this is a bug or not.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81191909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81192803", "body": "When I make contract classes (sorry if my assumption is wrong) for interfaces I get around these issues by using `abstract override` or `abstract` to signal that I don't want to add a contract for that method or property.\n\nIn this case you could probably just do `abstract bool ICollection.IsSynchronized { get; }` and leave it out of your contract class.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81192803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385491", "body": "Rebracer may be a nice solution for keeping formatting for the project the same for everybody, works well for me at work.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26449760", "body": "Should this maybe throw a NotImplementedException?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26449760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26449963", "body": "Looks like strange whitespace here\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26449963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450043", "body": "I can't find anything backing this one up. Can you add a comment for it?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450044", "body": "I can't find anything backing this one up. Can you add a comment for it?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450108", "body": "Probably right but I am curious, why not `Contract.Result<TDelegate>() != null` ?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450227", "body": "This makes sense to me but I don't see anything that would indicate it is required. Could you justify with a comment maybe?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450232", "body": "This makes sense to me but I don't see anything that would indicate it is required. Could you justify with a comment maybe?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450396", "body": "The documentation mentions that this could return null if there are no groups: https://msdn.microsoft.com/en-us/library/system.componentmodel.icollectionview.groups(v=vs.110).aspx\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450445", "body": "I'm more curious here. I prefer to return as I think it is lighter but was wondering it it made any difference. I suppose it does not matter if we have a standard, not yet at least.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "FrancescoLogozzo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69098957", "body": "thanks. In general we are very open (and we expect!) for contributions\nI will add the license file\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69098957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/73909241", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/73909241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79141494", "body": "Foxtrot will generate the rewriter.\nThen we ILMerge it to generate ccrewrite.exe\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79141494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "sharwell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69343081", "body": "This is something I can probably take a look at, but it could be a few days.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69343081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69348222", "body": "@reitzmichnicht Thanks for that update. I've worked with this DLL successfully in a single VSIX which supports Visual Studio 2010 through 2015:\n\nhttps://github.com/tunnelvisionlabs/InheritanceMargin\n\nI'll look into implementing a similar strategy here.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69348222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72192275", "body": "This method is not annotated _by design_. Many methods of the `Contract` class, such as `Requires` (the non-generic form) are only enabled when specifically requested. In many ways, they are similar to `Debug.Assert`, provided for the purpose of explicitly stating conditions and verifying them during debug builds, but disabled during final releases (with no runtime checking overhead in the final release).\n\n`Requires<T>`, on the other hand, is an expression of behavior that should _always_ occur in the application. For example, this contract can be used on public API surfaces in libraries where external callers may not be using Code Contracts and expect particular exceptions to be thrown in response to invalid inputs. Code using this method must always use the rewriter, yet still has the option of defining or removing the `CONTRACTS_FULL` preprocessor directive to control the runtime behavior of all other contracts.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72192275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385509", "body": ":bulb: this documentation comment is associated with the private field `isTypeArgument`, and the public property `IsTypeArgument` does not have any comment. This can be resolved by moving the backing field before the comment.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385415", "body": ":bulb: Can you correct _just_ the indentation for the contents of the block? In other words, add two spaces at the beginning of each line but don't change any other formatting associated with the block.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385756", "body": "I have some doubts about using that (especially considering I'm working on an alternative that doesn't require Visual Studio), but either way it would be a separate issue to consider from this pull request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32471371", "body": ":exclamation: `nuget restore` should be run prior to entering the MSBuild process as part of the NuGet Automatic Package Restore process. Restoring packages during a build is known to be problematic, and we won't need to do so if we make sure to restore them beforehand.\n\nSummary: This command needs to be removed from this location, and added to the **.bat** file(s) which launch this build.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32471371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32519173", "body": "In some cases, the downloaded packages might not be applied to the current build, forcing you to run the build again. Even if that doesn't apply to this project specifically, following the recognized pattern of restore, then build, ensures we will never have problems of this nature.\n\nI believe information is available in the [Package Restore](https://docs.nuget.org/consume/package-restore) NuGet documentation.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32519173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32542970", "body": "The MSBuild-Integrated package restore will be migrated to automatic package restore as part of a separate commit. At least the VSIX projects will rely on command-line package restore before the build to download packages which integrate into the build process, so we're going to have to run the restore from the .bat file eventually anyway. I prefer to keep it consistent even if running the restore within MSBuild would not cause problems for some subset of the projects.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32542970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32548427", "body": "All of my command line builds are PowerShell-driven, so you certainly wouldn't hear any complaint from me for that. :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32548427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32553336", "body": "@hubuk I want to see this pull request merged. To get us back on track to do so, can you reiterate the reasons why you don't want to move the call to `nuget restore` outside of this file? My reasons in favor of moving it are the following:\n1. Command line restore matches the behavior of automatic package restore in Visual Studio. The restore operation is completed before entering the MSBuild process.\n2. Command line restore works in all scenarios, and is an easily recognized pattern. IMO, it leaves no confusion regarding the manner and timing in which packages are restored during a command line build. Restoring packages in an MSBuild target requires separate consideration of multiple entry points (the selected build targets) and declared dependencies, and runs a risk that a future configuration might force us back to command line restoration anyway.\n\nSummary: I believe command line restore prior to MSBuild is simpler and more robust in the face of unknown project developments in the future. I have higher confidence that we will be happy with it as a long-term solution for integrating NuGet packages into the build.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32553336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32560958", "body": "Thanks for the detailed explanation. I find it acceptable, and believe we are on the same page regarding longer-term goals to evaluate the complete build strategy (which may or may not need changes).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32560958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "reitzmichnicht": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69346791", "body": "Microsoft.VisualStudio.Csharp.Services.Language.dll is the dll it tries to load from VS2012\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69346791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69347015", "body": "Corresponding forum post:\nhttps://social.msdn.microsoft.com/Forums/en-US/a79a3a31-ef22-4946-8b00-9953c2d57617/code-contracts-editor-extensions-on-vs-2013-rtm-crash?forum=codecontracts\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69347015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/70224375", "body": "I can confirm this.Happens on every update in VS2013.4\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/70224375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kant2002": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72198900", "body": "Thanks for explanation. I have a project where I was trying to enforce the Code Contracts. Having Code Contracts enabled during development was significantly slow me down during development and I decide to adopt them gradually and have different configuration.\n\nI use VS tools for Code Contracts and want to turn them off on the dev solution configuration. I was not able do that. Maybe I miss some other option in the VS tooling how I could configure such scenario.\n\nI post this on Connect but not receive any feedback. Maybe I miss something in the docs. I will try to play again with more understanding. Still this is not very obvious message.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72198900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72247244", "body": "@aarondandy Thank you so much. A lot of helpful stuff in your guide!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72247244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mike-barnett": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72229791", "body": "@aarondandy: Thanks so much for writing such a fantastic guide! It is great to see people in the community doing such great work!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72229791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72278289", "body": "How about adding it to the CodeContracts sources themselves while continuing to own it? This is supposed to be a community-based project now.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72278289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "RxDave": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72277122", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72277122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81190536", "body": "Adding a post-condition shouldn't be a problem. Did you try adding it? If you're getting another warning or an error then it may be a bug in Code Contracts.\n\nThe rule is: You can't add preconditions to inherited members, but you can add post-conditions. See [Liskov Substitution Principle](http://en.wikipedia.org/wiki/Liskov_substitution_principle).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81190536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Igorbek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72278556", "body": "Sure, I'll arrange some time on the next week to make PR with sources.\nWill try to merge with history.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72278556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sryze": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/73029470", "body": "I noticed this too. Shouldn't [this](https://github.com/Microsoft/CodeContracts/blob/180c3ae426fae1c31105fc672eeba57c91f76ed0/Microsoft.Research/ManagedContract.Setup/ManagedContracts.wxs#L263) be `<DirectoryRef Id=\"VS11_ROOT_FOLDER\">`?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/73029470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DzonnyDZ": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79138412", "body": "If somebody can advise me which project produces ccrewrite.exe, I can try to fix the issue myself, but I was unable to figure it out myself :-(.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79138412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "krk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/comments/11925556", "body": "typo now -> nor\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/comments/11925556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}