{"_default": {"1": {"heinezen": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/958", "title": "Converter: Create nyan modpack from modded .dat files", "body": "As an optional improvement, the converter should be able to detect differences between the standard AoC .dat files and modded versions. Then we can create a modpack for the base game from that diff. This would allow Genie Engine modders to use our converter, instead of writing their mods from scratch in nyan.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/929", "title": "Add useful shortcuts", "body": "We could integrate a bunch of useful shortcuts from other strategy games, e.g. Rise of Nations, into this project.\r\n\r\n* `CTRL+SHIFT` with selection box: Only select villagers.\r\n* `CTRL` with selection box: Only select military. Right now `SHIFT` and `CTRL` have the same behavior.\r\n* `ALT` with selection box: Only select non-siege/non-support units.\r\n* `CTRL+ALT` with selection box: Only select siege/support units.\r\n* `RIGHT-CLICK+ALT` on building: If selection contains siege, set all non-siege units on *guard* to defend the siege.\r\n* `CTRL+RIGHT-CLICK`: Perform attack move (`TAB` in HD)\r\n* `CTRL+SHIFT+RIGHT-CLICK`: Patrol (`Q` in HD)\r\n* `LEFT-CLICK` while using `RIGHT-CLICK+DRAG`: Iterate through formation types (requires #928 ).\r\n* `SCROLL` while using `RIGHT-CLICK+DRAG`: Change width of a formation (requires #928 ).\r\n\r\nKeep adding your own ideas in the comments.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/928", "title": "Let players change the direction a formation is facing", "body": "This is basically an extension to the existing movement command. Right now, formations in AoE2 will always face in the direction the units are coming from. This makes the direction of a formation unpredictable as players never know the exact path a group will take.\r\n\r\n**How does it work?**\r\n\r\n`RIGHT-CLICK` followed by an immediate release of the moue button will work as before. The direction of a formation would be changed by *holding* `RIGHT-CLICK` and *dragging* the mouse pointer in the direction the formation should face (see below). \r\n\r\n<img src=\"https://user-images.githubusercontent.com/6852422/31855058-1dfa183c-b6a3-11e7-9022-fd6b0d405c98.png\" width=\"199\" height=\"121\" />\r\n<img src=\"https://user-images.githubusercontent.com/6852422/31855060-22cfff34-b6a3-11e7-88db-0001598f36ab.png\" width=\"194\" height=\"161\" />\r\n\r\nMoving the mouse pointer will pivot the formation around the point where the player right-clicked. Unit lines will always be orthogonal to the line between pivot point and mouse pointer. To aid the player in choosing the right direction, the UI should display the selection circles where the units will stand when arrivng.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/6852422/31855061-24cedfda-b6a3-11e7-8abc-3181a9cd5fd0.png\" width=\"203\" height=\"178\" />\r\n\r\n**Will this change the balance?**\r\n\r\nUnlikely, since right-clicking without drag will always be faster. I see the main use case for unit groups that are moved long distances across the map, where the direction of a formation is generally unpredictable. Just in case, we should give players the option to turn this feature off in MP games. Then it remains a nice addition to single player.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/873", "title": "Accessibility modes", "body": "Apparently about 10 % of gamers have some kind of disability, so we should start to think about making the game accessible for them. AoE 2 was already very progressive in this regard, but the HD Edition so far does little to implement the \"Lessons Learned\" that were discovered in the 17 years after the initial release.\r\n\r\nWe are already addressing many of these issues with changeable font size and such, but there's so much more. Especially color blind mode is vital for distinguishing multiplayer factions.\r\n\r\nReferences:\r\n* [List of accessibility modes with best practice examples](http://gameaccessibilityguidelines.com/full-list)\r\n* [A practical guide to game accessibility](https://www.includification.com/AbleGamers_Includification.pdf) by Able Gamers with descriptions on what disabled people find difficult.\r\n* [Article about good and bad implementations of color blind modes](http://www.gamersexperience.com/colorblind-accessibility-in-video-games-is-the-industry-heading-in-the-right-direction/)\r\n* [Extra Credits: Accessibility - The Curb Cut Effect](https://www.youtube.com/watch?v=PJoax1Z1x4Y)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/873/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/986e731524f2933d64aa1f3a4340f76bd65d7926", "message": "Add various ideas from 2017"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/001b9081df54779b92a56b12a81204193a377150", "message": "Convert: String everything back together nicely."}], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/877", "title": "doc: Network protocol of AoC 1.0c", "body": "**EDIT:** Screw it! Let this PR be a (full) documentation of the network communication in AoC.\r\n\r\nMotivation: Revealing otherwise hidden mechanics in the game engine, understanding the implementation of other game mechanics, determining what can lead to an out-of-sync error. Could result in finding a lot of ridiculous bugs.\r\n\r\n- [x] General structure\r\n- [x] Protocol headers\r\n- [x] Synchronization\r\n    - [x] In-game Sync \r\n    - [x] Lobby\r\n- [x] Chat Messaging (already in repo)\r\n- [x] Spoofing and forging messages\r\n- [x] Player-issued commands\r\n    - [x] Unit interaction\r\n        - [x] Primary actions\r\n        - [x] Movement\r\n        - [x] Formations\r\n    - [x] Unit creation\r\n    - [x] Buildings\r\n    - [x] Market\r\n    - [x] Others\r\n        - [x] Tribute\r\n        - [x] Diplomacy\r\n        - [x] Flares\r\n    - [x] AI actions\r\n\r\nThings for later PRs:\r\n* AI actions refined\r\nThe AI is a pain to test which leads to action `0x1f` being mostly unknown bytes\r\n* Wireshark dissector\r\nwho wouldn't want this?\r\n* ~~C structs~~\r\n~~If we or someone else would want to use this protocol, for whatever reason.~~ Done.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thawkins": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/954", "title": "Proposal: domestication", "body": "Priest conversion capability on wild animals to convert them into controlable military units,  domesticate wolf packs and direct them to attack enemies or defend buildings and units with guard. ", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/954/reactions", "total_count": 1, "+1": 0, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "waghcwb": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/953", "title": "Implement all contributors in this project", "body": "Loved the project.. I would like to suggest the implementation of [this specification](https://github.com/kentcdodds/all-contributors) for recognizing all type of contributors for the project.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryandakid": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/946", "title": "CMake Error at buildsystem/codegen.cmake:25 (message):   failed to get target list from codegen invocation", "body": "I almost fixed everything, just this is left...\r\n\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Program Files (x86)\\Python36-32\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"C:\\Program Files (x86)\\Python36-32\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\SFTtech-openage-fb4a9eb\\openage\\__main__.py\", line 133, in <module>\r\n    sys.exit(main())\r\n  File \"C:\\SFTtech-openage-fb4a9eb\\openage\\__main__.py\", line 83, in main\r\n    from .convert.main import init_subparser\r\n  File \"C:\\SFTtech-openage-fb4a9eb\\openage\\convert\\main.py\", line 7, in <module>\r\n    import readline  # pylint: disable=unused-import\r\nModuleNotFoundError: No module named 'readline'\r\nCMake Error at buildsystem/codegen.cmake:25 (message):\r\n  failed to get target list from codegen invocation\r\nCall Stack (most recent call first):\r\n  libopenage/CMakeLists.txt:54 (codegen_run)\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\nSee also \"C:/SFTtech-openage-fb4a9eb/build/CMakeFiles/CMakeOutput.log\".\r\n```", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TheJJ": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/937", "title": "Translation: Fr\u00e4ngisch", "body": "As part of #107 it would be beneficial* to also support the (widely known) [german dialect of Fr\u00e4ngisch](https://en.wikipedia.org/wiki/East_Franconian_German).\r\n\r\nWe could then have [settings menus](https://github.com/greenshot/greenshot) [like this](https://github.com/greenshot/greenshot/blob/master/Greenshot/Languages/language-de-x-franconia.xml):\r\n![greenshot](https://user-images.githubusercontent.com/673543/33235649-bed9f4f2-d23c-11e7-9e14-4d44d914bba7.png)\r\n\r\n\\* Disclaimer: This translation may not actually be beneficial. It may increase the humorous value of this project as an unintended side effect.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/937/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/920", "title": "Create game launcher", "body": "It may be useful to have a game launcher with these features:\r\n\r\n* [ ] Update functionality for non-package-installs (Windows, macOS?)\r\n* [ ] Mod ordering and activation (later, the download and update manager for those)\r\n* [ ] Convert script invocation (for initial convert-mod creation and updates)\r\n\r\nIf needed, it can be extended with some more features, but this should be good for now.\r\n\r\nI'd say this should be written in Python and Qt.\r\n\r\nIt strongly works together with #632 and then has to provide information to the engine about the activated mods when it performs the launch, but how? :)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/919", "title": "Enable more non-default warnings", "body": "Although we've long hat `-Wall` and `-Wextra`, there is more useful warnings:\r\n\r\nhttps://kristerw.blogspot.de/2017/09/useful-gcc-warning-options-not-enabled.html\r\n\r\nWhich of those should we activate?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/899", "title": "Use Sphinx and Breathe (+Doxygen) for documentation", "body": "Currently, we have Doxygen to generate our inline C++ documentation (`libopenage/`). We also use it for the Python code (`openage/`), but we should switch to [Sphinx](http://www.sphinx-doc.org/) for this.\r\n\r\nTo beautify our `doc/` folder, we could use [Sphinx](http://www.sphinx-doc.org/).\r\n\r\nTo link between both, there is [Breathe](https://breathe.readthedocs.io/en/latest/).\r\n\r\nThen we would have a nice and one-for-all documentation by Sphinx: It natively support Python, the C++ parsing is still done by Doxygen which would be nicely integrated via breathe.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/852", "title": "macOS event dispatching broken", "body": "#828 figured out that for a successful mac run the event dispatching for mac needs to be changed.\r\nThis has to be fixed properly.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/6f7797e7c6b3ef7d727e23db85abf7abfd79a25c", "message": "Merge pull request #947 from tusharpm/msvc_doc_update\n\nUpdate MSVC build instructions to answer some FAQs"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/d3cf7bf210c384fd36281127b487e158d671481f", "message": "Merge pull request #961 from tusharpm/compiler_version_msg\n\nShow known compiler versions in CMake error message"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cb26aa714529ce7278c54a8fb07cec6fe46776ea", "message": "Merge pull request #959 from nyx/patch-1\n\nupdate Homebrew-Cask installation instruction"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/eb2ce933ebe976ac87b15d7be9f6b63d47fd7dac", "message": "Merge pull request #960 from TheJJ/doc-fix\n\ndoc: fix whitespace error"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/e65ad82f2cad973eab0ca75a54706a0b9b7b5860", "message": "doc: fix whitespace error"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/00a7c3325c015a3550f7f00b5cd5547c5f6de2b0", "message": "Merge pull request #957 from heinezen/feature-suggest\n\nFeature suggestions"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/a4cb3dec2165832f9efd13edf60f82c8ca2dc019", "message": "Merge pull request #952 from vaibhavkaul/patch-1\n\n[IDEAS] Proposal to allow using wood forests for sneak attacks."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/436e9e38ee2b9546e003bf380ee3f49b8d96b3c8", "message": "Merge pull request #955 from tusharpm/cxx_compile_features\n\nRequire C++ compiler to support C++17 features"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/f942bfb2be093cc360ebbe65ff401644c44426a6", "message": "Merge pull request #942 from heinezen/convert\n\nConvert data for all Genie Engine games"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/adccacea6f84a7ebae5cdc097047a39902f1c50c", "message": "readme: add nyan to technology table"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/61b5383e111d05a108c87d5030b628dac19328ee", "message": "doc: update to c++17"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/831d49865cae9c41cf8d913f2a41bc9f68b22dc2", "message": "buildsystem: require c++17"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/14083ab0d0b706cf9d16a781dc690de31ac89f63", "message": "buildsystem: don't check if subproject folder still exists\n\nit would be downloaded again anyway"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/26746de63072c6e2966ac69731484dad9f63db55", "message": "buildsystem: make disable_updates an option"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/fe1a49e51fa8c9dfe1886c0c28c7e3197267317d", "message": "convert: open registry information file as binary"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/2d7e34a7dad51bddb9e602ebb83f8cce8ff403be", "message": "buildsystem: detect if folder of subproject still exists"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60523218", "body": "thx, that link wasn't updated when the milestones file was moved ;)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60523218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60529791", "body": "thx, link was forgotten as well when the files were moved.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60529791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60537827", "body": "thx, i'm procrastinating from preparing my presentation slides as well. You don't need to feel bad.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60537827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60545878", "body": "You might wanna resubmit the pull request with the correct email stored in each commit.\nOtherwise github won't associate the code with your account ;)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60545878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60545984", "body": "Also, why libopus-dev libvorbis-dev? They should be pulled in by libopusfile, shouldn't they?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60545984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546099", "body": "would you mind placing this in the #dependencies section? (basically under the dependency list and before \"Build procedure\")\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60548048", "body": "awesome! lets see how we can bring your changes upstream without ugly hacks ;)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60548048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60584724", "body": "We could utilize cmake for that in near future: We're currently using [FindOpenGL](http://www.cmake.org/cmake/help/v3.0/module/FindOpenGL.html) which should directly provide the correct names.\n\nI think the header-switch was a quick fix, but in the long run we should go for cmake.\n\nAbout indenting `#include`: writing `#    include` would surely look nice :smile: \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60584724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60625322", "body": "i think many include guards also had a comment at the bottom of the file. you could either update them or remove the comments. i'd prefer removing, do you?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60625322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60633634", "body": "The header is created [here](https://github.com/SFTtech/openage/blob/63cdb4470a1c1b8b58f18012fd88ca2b1a2bc507/py/openage/convert/dataformat.py#L848).\n\nThe convert script is veeery sophisticated, but adding a uuid identifier to the header guard should be trivial.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60633634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/9736597", "body": "nope, as this does not change the exported fields, the change is not visible to the outside.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9736597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/12420835", "body": "you might want to use `util::Dir` for that, i'm not sure if that's the best path representation at the moment^^\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/12420835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/12424386", "body": "if you need that, sure. Add it.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/12424386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/12938812", "body": "This is openage-specific, so should not be in a cmake file in the `modules/` folder. instead, the openage specifics should be in `buildsystem/python.cmake`. Everything in `modules/` is kind of library functions for the buildsystem that should not be specific to openage.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/12938812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/20272488", "body": "thx :)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/20272488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19638723", "body": "could you please indent the lines with tabs instead of two spaces?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19638723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19687782", "body": "isn't it [\"lesser\" GPL](https://www.gnu.org/licenses/lgpl.html)?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19687782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19884992", "body": "nice find! this is really stupid and i have no idea why ~ broke, there was a time it worked..\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19884992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "crazycusti": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/935", "title": "build fails on powerpc (linux)", "body": "```\r\n[ 39%] Building CXX object libopenage/CMakeFiles/libopenage.dir/error/demo.cpp.o\r\n[ 39%] Building CXX object libopenage/CMakeFiles/libopenage.dir/error/error.cpp.o\r\n/tmp/ccmrhs8c.s: Assembler messages:\r\n/tmp/ccmrhs8c.s:3493: Error: unrecognized opcode: `int'\r\nlibopenage/CMakeFiles/libopenage.dir/build.make:2930: die Regel f\u00fcr Ziel \u201elibopenage/CMakeFiles/libopenage.dir/error/error.cpp.o\u201c scheiterte\r\nmake[3]: *** [libopenage/CMakeFiles/libopenage.dir/error/error.cpp.o] Fehler 1\r\nCMakeFiles/Makefile2:1482: die Regel f\u00fcr Ziel \u201elibopenage/CMakeFiles/libopenage.dir/all\u201c scheiterte\r\nmake[2]: *** [libopenage/CMakeFiles/libopenage.dir/all] Fehler 2\r\nMakefile:160: die Regel f\u00fcr Ziel \u201eall\u201c scheiterte\r\nmake[1]: *** [all] Fehler 2\r\nMakefile:33: die Regel f\u00fcr Ziel \u201ebuild\u201c scheiterte\r\nmake: *** [build] Fehler 2\r\nwynton@PowerBookG4:~/Downloads/SFTtech-openage-c69922d$\r\n```\r\n\r\n\r\nUbuntu Mate 16.04\r\nopenage git (19.11.2017)\r\nPowerPC G4 7450 1.67GHz\r\nGCC 5.4.0 altivec enabled\r\n\r\nAny ideas?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hgdagon": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/934", "title": "Compiling in msys2", "body": "This is just my experience compiling with msys2 (Spoiler alert: I DID NOT Succeed).\r\n\r\nPreliminary configuration:\r\n\r\nGo ahead and install everything in the [dependency list](https://github.com/SFTtech/openage/blob/master/doc/building.md), except for Python-related stuff (`numpy`, `pillow`, `pycodestyle`, `pygments`, `pylint`). Get those with `pip`, except for `pillow`. `Qt5` is 5GB, so it's gonna take a while.\r\n\r\nGet dejavu fonts from [here](https://dejavu-fonts.github.io/Download.html) and install. These are unrelated to msys2 (and building in general).\r\n\r\nGet the latest [Pillow source](https://github.com/python-pillow/Pillow/releases), `4.3.0` as of now.\r\nExtract, cd into it and run (in mingw32 shell):\r\n\t`python3 setup.py build_ext --disable-jpeg2000 install`\r\n\r\nGet `pyReadLine` with `pip`, `Jasper` and `dlfcn` from repo.\r\n\r\nIf I didn't forget anything, this should be enough. CMake is also looking for `backtrace`, `gperftools`, and `inotify`. These seem to be optional, so I never bothered with these.\r\n\r\nAs far as the code goes, my only problem with `libopenage` was the `_MSC_VER` checks. You guys should really consider replacing those that look for Windows with [something else](https://github.com/msys2/msys2/wiki/Porting#platform-checks). I've made some changes ([libopenage-msys2.zip](https://github.com/SFTtech/openage/files/1484428/libopenage-msys2.zip)), but since I couldn't build openage itself, I can only confirm that libopenage builds with these changes, but I have no idea, if it actually works.\r\n\r\nWhen building openage, I got a bunch of unidentified references to `Py*` (you can feast your eyes [here](https://pastebin.com/dC9r173V)), which is not surprising, since nothing in `openage` is being linked against, well, _anything_ python-related. At least I couldn't find one in _any_ of the `linklibs.rsp`'s in `openage`. Since I know pretty much nothing about Python, I didn't know what to do with this, so this was my dead end...\r\nI'm not sure if this is related or not, but CMake, for whatever reason, detected `PYTHON_LIBRARIES` and `PYTHON_LIBRARY` as `libpython3.6.dll`, I manually changed them to `libpython3.6.dll.a`, that didn't seem to change anything...\r\nI noticed that there also seems to be a problem with `WinMain`/`SDL_main` in run.exe, `-lSDL2Main` must be added for Windows.\r\n\r\nI guess, this is it. I hope you guys find this useful!", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "momo-aux": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/931", "title": "VMs for testing on Windows", "body": "Hi, I think you could use https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/ for this.\r\n\r\nFree and usable for 90 Days, then reset, repeat.\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "castilma": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/914", "title": "doubled input handling", "body": "when I start the console and then select an input field from the game option, the keyboard input is put in the textfield and the console.\r\n\r\nwe currently have 3 input handler. one for qt, one for the normal keybindings and one for the console. they are called in that order in engine.h:359\r\n```\r\nfor (auto &action : this->on_input_event) {\r\n       if (false == action->on_input(&event)) {\r\n              break;\r\n       }\r\n}\r\n```\r\nit looks like the handler can return false to indicate that they handled the input. strangely, input/input_manager.cpp:381 always returns true.\r\n\r\nI guess we need to unselect the textfield when the console is set visible/clicked on.\r\n(why does the qt input manager return true if it handled the key?)\r\n\r\n\r\nanother problem is that Console::register_to_engine.h() registers \"`\" to be used to hide the console, but when pressing it, it is taken as literal text input to the console.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/910", "title": "Build fails on armv7l: 'hypot' not a member of std", "body": "I'm trying to package openage v0.3.0 with [guix](http://gnu.org/software/guix/) on armv7l. 0.3.0 is a pretty old version, but the newest.\r\n```\r\n[  0%] Building CXX object libopenage/CMakeFiles/libopenage.dir/terrain/terrain_object.cpp.o\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp: In member function \u2018virtual openage::coord::phys_t openage::SquareObject::from_edge(const openage::coord::phys3&) const\u2019:\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:323:9: error: \u2018hypot\u2019 is not a member of \u2018std\u2019\r\n  return std::hypot(dx, dy);\r\n         ^\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:323:9: note: suggested alternative:\r\nIn file included from /gnu/store/ld8n6wb1f20fjb5xi3ajk4mizk4lsi9n-glibc-2.25/include/features.h:410:0,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/arm-unknown-linux-gnueabihf/bits/os_defines.h:39,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/arm-unknown-linux-gnueabihf/bits/c++config.h:482,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/bits/stl_algobase.h:59,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/memory:62,\r\n                 from /tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.h:6,\r\n                 from /tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:3:\r\n/gnu/store/ld8n6wb1f20fjb5xi3ajk4mizk4lsi9n-glibc-2.25/include/bits/mathcalls.h:164:1: note:   \u2018hypot\u2019\r\n __MATHCALL (hypot,, (_Mdouble_ __x, _Mdouble_ __y));\r\n ^\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp: In member function \u2018virtual bool openage::SquareObject::intersects(const openage::TerrainObject&, const openage::coord::phys3&) const\u2019:\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:367:10: error: \u2018hypot\u2019 is not a member of \u2018std\u2019\r\n   return std::hypot(dx, dy) < rad->phys_radius;\r\n          ^\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:367:10: note: suggested alternative:\r\nIn file included from /gnu/store/ld8n6wb1f20fjb5xi3ajk4mizk4lsi9n-glibc-2.25/include/features.h:410:0,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/arm-unknown-linux-gnueabihf/bits/os_defines.h:39,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/arm-unknown-linux-gnueabihf/bits/c++config.h:482,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/bits/stl_algobase.h:59,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/memory:62,\r\n                 from /tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.h:6,\r\n                 from /tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:3:\r\n/gnu/store/ld8n6wb1f20fjb5xi3ajk4mizk4lsi9n-glibc-2.25/include/bits/mathcalls.h:164:1: note:   \u2018hypot\u2019\r\n __MATHCALL (hypot,, (_Mdouble_ __x, _Mdouble_ __y));\r\n ^\r\n```\r\non amd64 v0.3.0 builds. any ideas?\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/905", "title": "Asan Error on generating game", "body": "building with asan and generating a game results in this nice message.\r\n\r\n```\r\nINFO [T17829216608256360205] name2 has civilisation French\r\n/home/mcd/.repo/ap/openage/libopenage/coord/tile3.cpp:22:29: runtime error: left shift of negative value -1\r\n/home/mcd/.repo/ap/openage/libopenage/coord/tile.cpp:23:29: runtime error: left shift of negative value -1\r\n/home/mcd/.repo/ap/openage/libopenage/coord/tile3.cpp:23:29: runtime error: left shift of negative value -21\r\n/home/mcd/.repo/ap/openage/libopenage/coord/tile.cpp:24:29: runtime error: left shift of negative value -21\r\n=================================================================\r\n==20768==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62d00062ba00 at pc 0x7feaaa319e18 bp 0x7fea88d46cb0 sp 0x7fea88d46ca0\r\nREAD of size 2 at 0x62d00062ba00 thread T3 (SDLAudioDev2)\r\n    #0 0x7feaaa319e17 in openage::audio::SoundImpl::mix_audio(int*, int) /home/mcd/.repo/ap/openage/libopenage/audio/sound.cpp:150\r\n    #1 0x7feaaa2bc3f7 in openage::audio::AudioManager::audio_callback(short*, int) /home/mcd/.repo/ap/openage/libopenage/audio/audio_manager.cpp:172\r\n    #2 0x7feaaa2bc776 in operator() /home/mcd/.repo/ap/openage/libopenage/audio/audio_manager.cpp:76\r\n    #3 0x7feaaa2bc776 in _FUN /home/mcd/.repo/ap/openage/libopenage/audio/audio_manager.cpp:77\r\n    #4 0x7feaa689183a  (/usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0+0x1b83a)\r\n    #5 0x7feaa68f109b  (/usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0+0x7b09b)\r\n    #6 0x7feaa693f398  (/usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0+0xc9398)\r\n    #7 0x7feabac766b9 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76b9)\r\n    #8 0x7feabaf933dc in clone (/lib/x86_64-linux-gnu/libc.so.6+0x1073dc)\r\n\r\n0x62d00062ba00 is located 0 bytes to the right of 38400-byte region [0x62d000622400,0x62d00062ba00)\r\nallocated by thread T0 here:\r\n    #0 0x7feabca056b2 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x996b2)\r\n    #1 0x7feaaa2d9b0d in std::_MakeUniq<short []>::__array std::make_unique<short []>(unsigned long) /usr/include/c++/5/bits/unique_ptr.h:771\r\n    #2 0x7feaaa2d9b0d in openage::audio::chunk_info_t::chunk_info_t(openage::audio::chunk_info_t::state_t, unsigned long) /home/mcd/.repo/ap/openage/libopenage/audio/dynamic_resource.cpp:19\r\n    #3 0x7feaaa2deacc in void __gnu_cxx::new_allocator<openage::audio::chunk_info_t>::construct<openage::audio::chunk_info_t, openage::audio::chunk_info_t::state_t, unsigned long&>(openage::audio::chunk_info_t*, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/ext/new_allocator.h:120\r\n    #4 0x7feaaa2deacc in void std::allocator_traits<std::allocator<openage::audio::chunk_info_t> >::construct<openage::audio::chunk_info_t, openage::audio::chunk_info_t::state_t, unsigned long&>(std::allocator<openage::audio::chunk_info_t>&, openage::audio::chunk_info_t*, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/alloc_traits.h:530\r\n    #5 0x7feaaa2deacc in std::_Sp_counted_ptr_inplace<openage::audio::chunk_info_t, std::allocator<openage::audio::chunk_info_t>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<openage::audio::chunk_info_t::state_t, unsigned long&>(std::allocator<openage::audio::chunk_info_t>, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr_base.h:522\r\n    #6 0x7feaaa2deacc in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<openage::audio::chunk_info_t, std::allocator<openage::audio::chunk_info_t>, openage::audio::chunk_info_t::state_t, unsigned long&>(std::_Sp_make_shared_tag, openage::audio::chunk_info_t*, std::allocator<openage::audio::chunk_info_t> const&, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr_base.h:617\r\n    #7 0x7feaaa2deacc in std::__shared_ptr<openage::audio::chunk_info_t, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<openage::audio::chunk_info_t>, openage::audio::chunk_info_t::state_t, unsigned long&>(std::_Sp_make_shared_tag, std::allocator<openage::audio::chunk_info_t> const&, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr_base.h:1097\r\n    #8 0x7feaaa2deacc in std::shared_ptr<openage::audio::chunk_info_t>::shared_ptr<std::allocator<openage::audio::chunk_info_t>, openage::audio::chunk_info_t::state_t, unsigned long&>(std::_Sp_make_shared_tag, std::allocator<openage::audio::chunk_info_t> const&, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr.h:319\r\n    #9 0x7feaaa2deacc in std::shared_ptr<openage::audio::chunk_info_t> std::allocate_shared<openage::audio::chunk_info_t, std::allocator<openage::audio::chunk_info_t>, openage::audio::chunk_info_t::state_t, unsigned long&>(std::allocator<openage::audio::chunk_info_t> const&, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr.h:620\r\n    #10 0x7feaaa2deacc in std::shared_ptr<openage::audio::chunk_info_t> std::make_shared<openage::audio::chunk_info_t, openage::audio::chunk_info_t::state_t, unsigned long&>(openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr.h:636\r\n    #11 0x7feaaa2deacc in openage::audio::DynamicResource::use() /home/mcd/.repo/ap/openage/libopenage/audio/dynamic_resource.cpp:51\r\n    #12 0x7feaaa31a141 in openage::audio::Sound::play() /home/mcd/.repo/ap/openage/libopenage/audio/sound.cpp:53\r\n    #13 0x7feaaa5838a3 in openage::Sound::play() const /home/mcd/.repo/ap/openage/libopenage/gamestate/game_spec.cpp:448\r\n    #14 0x7feaaa9a201d in openage::ObjectProducer::place(openage::Unit*, std::shared_ptr<openage::Terrain>, openage::coord::phys3) const /home/mcd/.repo/ap/openage/libopenage/unit/producer.cpp:315\r\n    #15 0x7feaaa9a2a9e in openage::MovableProducer::place(openage::Unit*, std::shared_ptr<openage::Terrain>, openage::coord::phys3) const /home/mcd/.repo/ap/openage/libopenage/unit/producer.cpp:397\r\n    #16 0x7feaaa9a2f1a in openage::LivingProducer::place(openage::Unit*, std::shared_ptr<openage::Terrain>, openage::coord::phys3) const /home/mcd/.repo/ap/openage/libopenage/unit/producer.cpp:481\r\n    #17 0x7feaaaa477fb in openage::UnitContainer::new_unit(openage::UnitType&, openage::Player&, openage::coord::phys3) /home/mcd/.repo/ap/openage/libopenage/unit/unit_container.cpp:107\r\n    #18 0x7feaaa648abd in openage::Generator::add_units(openage::GameMain&) const /home/mcd/.repo/ap/openage/libopenage/gamestate/generator.cpp:260\r\n    #19 0x7feaaa55ff8a in openage::GameMain::GameMain(openage::Generator const&) /home/mcd/.repo/ap/openage/libopenage/gamestate/game_main.cpp:37\r\n    #20 0x7feaaa64fde6 in std::_MakeUniq<openage::GameMain>::__single_object std::make_unique<openage::GameMain, openage::Generator&>(openage::Generator&) /usr/include/c++/5/bits/unique_ptr.h:765\r\n    #21 0x7feaaa64fde6 in openage::Generator::create(std::shared_ptr<openage::GameSpec>) /home/mcd/.repo/ap/openage/libopenage/gamestate/generator.cpp:314\r\n    #22 0x7feaaa43490b in operator() /home/mcd/.repo/ap/openage/libopenage/gui/game_creator.cpp:53\r\n    #23 0x7feaaa43490b in operator() /home/mcd/.repo/ap/openage/libopenage/gui/guisys/link/gui_item.h:187\r\n    #24 0x7feaaa43490b in _M_invoke /usr/include/c++/5/functional:1871\r\n    #25 0x7feaaa4b6a67 in std::function<void ()>::operator()() const /usr/include/c++/5/functional:2267\r\n    #26 0x7feaaa4b6915 in qtsdl::GuiCallback::process(std::function<void ()> const&) /home/mcd/.repo/ap/openage/libopenage/gui/guisys/private/gui_callback.cpp:23\r\n    #27 0x7feaaa4b2b24 in QtPrivate::FunctorCall<QtPrivate::IndexesList<0>, QtPrivate::List<std::function<void ()> const&>, void, void (qtsdl::GuiCallback::*)(std::function<void ()> const&)>::call(void (qtsdl::GuiCallback::*)(std::function<void ()> const&), qtsdl::GuiCallback*, void**) /usr/include/x86_64-linux-gnu/qt5/QtCore/qobjectdefs_impl.h:501\r\n    #28 0x7feaaa4b2b24 in void QtPrivate::FunctionPointer<void (qtsdl::GuiCallback::*)(std::function<void ()> const&)>::call<QtPrivate::List<std::function<void ()> const&>, void>(void (qtsdl::GuiCallback::*)(std::function<void ()> const&), qtsdl::GuiCallback*, void**) /usr/include/x86_64-linux-gnu/qt5/QtCore/qobjectdefs_impl.h:520\r\n    #29 0x7feaaa4b2b24 in QtPrivate::QSlotObject<void (qtsdl::GuiCallback::*)(std::function<void ()> const&), QtPrivate::List<std::function<void ()> const&>, void>::impl(int, QtPrivate::QSlotObjectBase*, QObject*, void**, bool*) /usr/include/x86_64-linux-gnu/qt5/QtCore/qobject_impl.h:143\r\n    #30 0x7feaa56b2bae in QMetaObject::activate(QObject*, int, int, void**) (/usr/lib/x86_64-linux-gnu/libQt5Core.so.5+0x2b4bae)\r\n    #31 0x7feaaace423f in qtsdl::GameLogicCaller::in_game_logic_thread(std::function<void ()> const&) const /home/mcd/.repo/ap/openage/.bin/g++-debug-Oauto-sanitize-yes/libopenage/moc_game_logic_caller.cpp:138\r\n    #32 0x7feaaa436927 in i<openage::gui::GameCreator::activate()::<lambda(openage::GameMainHandle*, openage::GameSpecHandle*, openage::Generator*, std::shared_ptr<openage::gui::GameCreatorSignals>)>, openage::gui::GameSpecLink*&, openage::gui::GeneratorLink*&, std::shared_ptr<openage::gui::GameCreatorSignals>&> /home/mcd/.repo/ap/openage/libopenage/gui/guisys/link/gui_item.h:185\r\n    #33 0x7feaaa436927 in openage::gui::GameCreator::activate() /home/mcd/.repo/ap/openage/libopenage/gui/game_creator.cpp:71\r\n    #34 0x7feaaacf4a3e in openage::gui::GameCreator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**) /home/mcd/.repo/ap/openage/.bin/g++-debug-Oauto-sanitize-yes/libopenage/moc_game_creator.cpp:131\r\n    #35 0x7feaaad06f34 in openage::gui::GameCreator::qt_metacall(QMetaObject::Call, int, void**) /home/mcd/.repo/ap/openage/.bin/g++-debug-Oauto-sanitize-yes/libopenage/moc_game_creator.cpp:231\r\n    #36 0x7feaa60b3318  (/usr/lib/x86_64-linux-gnu/libQt5Qml.so.5+0x297318)\r\n\r\nThread T3 (SDLAudioDev2) created by T0 here:\r\n    #0 0x7feabc9a2253 in pthread_create (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x36253)\r\n    #1 0x7feaa693f420  (/usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0+0xc9420)\r\n\r\nSUMMARY: AddressSanitizer: heap-buffer-overflow /home/mcd/.repo/ap/openage/libopenage/audio/sound.cpp:150 openage::audio::SoundImpl::mix_audio(int*, int)\r\nShadow bytes around the buggy address:\r\n  0x0c5a800bd6f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c5a800bd700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c5a800bd710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c5a800bd720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c5a800bd730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x0c5a800bd740:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c5a800bd750: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c5a800bd760: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c5a800bd770: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c5a800bd780: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c5a800bd790: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Heap right redzone:      fb\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack partial redzone:   f4\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n==20768==ABORTING\r\n```", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/890", "title": "Build fails on armv7l", "body": "I'm trying to build on a raspberry pi 3. after './configure'ing  without additional options, make fails.\r\n```[  1%] Building CXX object libopenage/CMakeFiles/libopenage.dir/gui/guisys/public/gui_renderer.cpp.o\r\nIn file included from /usr/include/arm-linux-gnueabihf/qt5/QtGui/qopengl.h:99:0,\r\n                 from /usr/include/arm-linux-gnueabihf/qt5/QtQuick/qquickwindow.h:45,\r\n                 from /usr/include/arm-linux-gnueabihf/qt5/QtQuick/QQuickWindow:1,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/../private/gui_renderer_impl.h:12,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/gui_renderer.cpp:7:\r\n/usr/include/GLES3/gl31.h:73:25: error: conflicting declaration \u2018typedef khronos_ssize_t GLsizeiptr\u2019\r\n typedef khronos_ssize_t GLsizeiptr;\r\n                         ^~~~~~~~~~\r\nIn file included from /usr/include/GL/gl.h:2055:0,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/../public/gui_renderer.h:12,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/gui_renderer.cpp:3:\r\n/usr/include/GL/glext.h:468:19: note: previous declaration as \u2018typedef ptrdiff_t GLsizeiptr\u2019\r\n typedef ptrdiff_t GLsizeiptr;\r\n                   ^~~~~~~~~~\r\nIn file included from /usr/include/arm-linux-gnueabihf/qt5/QtGui/qopengl.h:99:0,\r\n                 from /usr/include/arm-linux-gnueabihf/qt5/QtQuick/qquickwindow.h:45,\r\n                 from /usr/include/arm-linux-gnueabihf/qt5/QtQuick/QQuickWindow:1,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/../private/gui_renderer_impl.h:12,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/gui_renderer.cpp:7:\r\n/usr/include/GLES3/gl31.h:74:26: error: conflicting declaration \u2018typedef khronos_intptr_t GLintptr\u2019\r\n typedef khronos_intptr_t GLintptr;\r\n                          ^~~~~~~~\r\nIn file included from /usr/include/GL/gl.h:2055:0,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/../public/gui_renderer.h:12,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/gui_renderer.cpp:3:\r\n/usr/include/GL/glext.h:469:19: note: previous declaration as \u2018typedef ptrdiff_t GLintptr\u2019\r\n typedef ptrdiff_t GLintptr;\r\n                   ^~~~~~~~\r\nlibopenage/CMakeFiles/libopenage.dir/build.make:1766: die Regel f\u00fcr Ziel \u201elibopenage/CMakeFiles/libopenage.dir/gui/guisys/public/gui_renderer.cpp.o\u201c scheiterte\r\nmake[3]: *** [libopenage/CMakeFiles/libopenage.dir/gui/guisys/public/gui_renderer.cpp.o] Fehler 1\r\nCMakeFiles/Makefile2:1513: die Regel f\u00fcr Ziel \u201elibopenage/CMakeFiles/libopenage.dir/all\u201c scheiterte\r\nmake[2]: *** [libopenage/CMakeFiles/libopenage.dir/all] Fehler 2\r\nMakefile:138: die Regel f\u00fcr Ziel \u201eall\u201c scheiterte\r\nmake[1]: *** [all] Fehler 2\r\nMakefile:33: die Regel f\u00fcr Ziel \u201ebuild\u201c scheiterte\r\nmake: *** [build] Fehler 2\r\n```\r\nI understand the error but have no clue, how to fix it.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/884", "title": "Address sanitizer false positives.", "body": "when compiling dea5112dbd with addresssanitizer, I get the following error. It looks like a false positive to me, but I don't know who is responsible for it.\r\n\r\non a side note, ~~the thread counter is broken~~. EDIT: on the same commit without asan the counter works. strange...\r\n```$ ./run game\r\n/home/mcd/.repo/ap/openage/openage/log/log_cpp.cpp:1748:59: runtime error: member call on address 0x604000023350 which does not point to an object of type 'LogSource'\r\n0x604000023350: note: object is of type 'openage::log::NamedLogSource'\r\n 04 00 80 52  78 f6 11 e7 6d 7f 00 00  00 00 00 00 00 00 00 00  70 33 02 00 40 60 00 00  02 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::log::NamedLogSource'\r\nINFO [T875755398522103943] [py] launching openage v0.3.0-984-gdea5112\r\nINFO [T875755398522103943] [py] compiled by GNU 5.4.0\r\nINFO [T875755398522103943] [py] running in DEVMODE\r\nINFO [T875755398522103943] launching engine with Path(Union(Directory(/home/mcd/.repo/ap/openage/cfg).root @ (b'cfg',), Directory(/home/mcd/.repo/ap/openage/assets).root @ (b'assets',)):) and fps limit 0\r\nINFO [T875755398522103943] SDL audio subsystems initialized\r\nINFO [T875755398522103943] Using audio device: default [freq=48000, format=32784, channels=2, samples=2048]\r\nINFO [T875755398522103943] Initialized SDL video subsystems.\r\n/home/mcd/.repo/ap/openage/libopenage/util/fslike/python.cpp:47:38: runtime error: member call on address 0x7fff10cf8950 which does not point to an object of type 'Path'\r\n0x7fff10cf8950: note: object is of type 'openage::util::Path'\r\n 6d 7f 00 00  f8 7a ea d5 6d 7f 00 00  50 5f 04 00 70 60 00 00  40 5f 04 00 70 60 00 00  30 ee 0f 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::Path'\r\n/home/mcd/.repo/ap/openage/libopenage/util/fslike/python.cpp:46:65: runtime error: member call on address 0x7fff10cf8950 which does not point to an object of type 'Path'\r\n0x7fff10cf8950: note: object is of type 'openage::util::Path'\r\n 6d 7f 00 00  f8 7a ea d5 6d 7f 00 00  50 5f 04 00 70 60 00 00  40 5f 04 00 70 60 00 00  30 ee 0f 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::Path'\r\nINFO [T875755398522103943] Compiled with Qt 5.5.1 and run with Qt 5.5.1\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6662:17: runtime error: member call on address 0x7fff10cf8090 which does not point to an object of type 'File'\r\n0x7fff10cf8090: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  f0 a2 11 e7 6d 7f 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  01 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6662:17: runtime error: member call on address 0x7fff10cf7fb0 which does not point to an object of type 'File'\r\n0x7fff10cf7fb0: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  f0 a2 11 e7 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  70 f4 37 f8\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6667:13: runtime error: member call on address 0x7fff10cf8230 which does not point to an object of type 'File'\r\n0x7fff10cf8230: note: object is of type 'openage::util::File'\r\n ff 7f 00 00  f0 a2 11 e7 6d 7f 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  98 87 cf 10\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6574:23: runtime error: member call on address 0x7fff10cf8090 which does not point to an object of type 'File'\r\n0x7fff10cf8090: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  f0 a2 11 e7 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  01 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6897:13: runtime error: member call on address 0x7fff10cf8270 which does not point to an object of type 'File'\r\n0x7fff10cf8270: note: object is of type 'openage::util::File'\r\n 00 00 00 00  f0 a2 11 e7 6d 7f 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  b0 82 cf 10\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6897:58: runtime error: member call on address 0x7fff10cf8230 which does not point to an object of type 'File'\r\n0x7fff10cf8230: note: object is of type 'openage::util::File'\r\n ff 7f 00 00  f0 a2 11 e7 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  98 87 cf 10\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6898:11: runtime error: member call on address 0x7fff10cf8330 which does not point to an object of type 'File'\r\n0x7fff10cf8330: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  f0 a2 11 e7 6d 7f 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  00 c9 72 67\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6824:23: runtime error: member call on address 0x7fff10cf8270 which does not point to an object of type 'File'\r\n0x7fff10cf8270: note: object is of type 'openage::util::File'\r\n 00 00 00 00  f0 a2 11 e7 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  b0 82 cf 10\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/libopenage/pyinterface/functional.h:182:54: runtime error: member call on address 0x7fff10cf8330 which does not point to an object of type 'File'\r\n0x7fff10cf8330: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  f0 a2 11 e7 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  00 c9 72 67\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/libopenage/gui/gui.cpp:71:22: runtime error: member call on address 0x7fff10cf8a00 which does not point to an object of type 'File'\r\n0x7fff10cf8a00: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  88 5e 04 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/libopenage/gui/gui.cpp:79:22: runtime error: member call on address 0x7fff10cf8a00 which does not point to an object of type 'File'\r\n0x7fff10cf8a00: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  88 5e 04 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/libopenage/gui/gui.cpp:73:67: runtime error: member call on address 0x7fff10cf8a40 which does not point to an object of type 'File'\r\n0x7fff10cf8a40: note: object is of type 'openage::util::File'\r\n ff 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 ab 12 00 60 61 00 00  80 ab 12 00 60 61 00 00  60 5e 04 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/libopenage/gui/gui.cpp:65:65: runtime error: member call on address 0x7fff10cf8a00 which does not point to an object of type 'File'\r\n0x7fff10cf8a00: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  88 5e 04 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\nINFO [T875755398522103943] loading configuration files...\r\nINFO [T875755398522103943] [py] loading config file [Union(Directory(/home/mcd/.repo/ap/openage/cfg).root @ (b'cfg',), Directory(/home/mcd/.repo/ap/openage/assets).root @ (b'assets',))]:cfg/keybinds.oac...\r\n/home/mcd/.repo/ap/openage/libopenage/gamedata/../util/csv.h:184:23: runtime error: member call on address 0x7fff10cf9d80 which does not point to an object of type 'File'\r\n0x7fff10cf9d80: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 36 12 00 60 61 00 00  80 36 12 00 60 61 00 00  e0 dd 08 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\nINFO [T875755398522103943] Loading time [engine]: 0.592 s\r\n<unknown>: runtime error: member call on address 0x7fff10cf8c80 which does not point to an object of type 'File'\r\n0x7fff10cf8c80: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 55 14 00 60 61 00 00  80 55 14 00 60 61 00 00  c0 8e 18 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8ca0 which does not point to an object of type 'File'\r\n0x7fff10cf8ca0: note: object is of type 'openage::util::File'\r\n 30 60 00 00  d8 7a ea d5 6d 7f 00 00  90 4f 14 00 60 61 00 00  80 4f 14 00 60 61 00 00  07 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8cc0 which does not point to an object of type 'File'\r\n0x7fff10cf8cc0: note: object is of type 'openage::util::File'\r\n 00 00 00 00  d8 7a ea d5 6d 7f 00 00  90 28 14 00 60 61 00 00  80 28 14 00 60 61 00 00  20 8d cf 10\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8ce0 which does not point to an object of type 'File'\r\n0x7fff10cf8ce0: note: object is of type 'openage::util::File'\r\n ff 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 0d 14 00 60 61 00 00  80 0d 14 00 60 61 00 00  00 c9 72 67\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8d00 which does not point to an object of type 'File'\r\n0x7fff10cf8d00: note: object is of type 'openage::util::File'\r\n e5 12 e4 ef  d8 7a ea d5 6d 7f 00 00  90 5a 15 00 60 61 00 00  80 5a 15 00 60 61 00 00  1e 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8d20 which does not point to an object of type 'File'\r\n0x7fff10cf8d20: note: object is of type 'openage::util::File'\r\n 00 00 00 00  d8 7a ea d5 6d 7f 00 00  90 3f 15 00 60 61 00 00  80 3f 15 00 60 61 00 00  09 3a ef f6\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8d40 which does not point to an object of type 'File'\r\n0x7fff10cf8d40: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 ce 16 00 60 61 00 00  80 ce 16 00 60 61 00 00  19 39 ef f6\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8d60 which does not point to an object of type 'File'\r\n0x7fff10cf8d60: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 b3 16 00 60 61 00 00  80 b3 16 00 60 61 00 00  32 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\nINFO [T875755398522103943] Loading time   [game]: 0.721 s\r\nINFO [T13377334251450678901] Loading game specification files...\r\n/home/mcd/.repo/ap/openage/libopenage/gui/game_control_link.cpp:119:15: runtime error: load of value 190, which is not a valid value for type 'bool'\r\n/home/mcd/.repo/ap/openage/libopenage/gamestate/../gamedata/../util/csv.h:184:23: runtime error: member call on address 0x7f6dbb3c23d0 which does not point to an object of type 'File'\r\n0x7f6dbb3c23d0: note: object is of type 'openage::util::File'\r\n 00 00 00 00  d8 7a ea d5 6d 7f 00 00  90 d1 2b 00 60 61 00 00  80 d1 2b 00 60 61 00 00  00 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n=================================================================\r\n==21157==ERROR: AddressSanitizer: new-delete-type-mismatch on 0x60c000592f00 in thread T0:\r\n  object passed to delete has wrong type:\r\n  size of the allocated type:   120 bytes;\r\n  size of the deallocated type: 1 bytes.\r\n    #0 0x7f6df8a1c132 in operator delete(void*, unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x9a132)\r\n    #1 0x7f6de68c174d in std::default_delete<unsigned char>::operator()(unsigned char*) const /usr/include/c++/5/bits/unique_ptr.h:76\r\n    #2 0x7f6de68c174d in std::unique_ptr<unsigned char, std::default_delete<unsigned char> >::~unique_ptr() /usr/include/c++/5/bits/unique_ptr.h:236\r\n    #3 0x7f6de68c174d in openage::renderer::GlyphAtlas::get(openage::renderer::Font*, unsigned int) /home/mcd/.repo/ap/openage/libopenage/renderer/font/glyph_atlas.cpp:88\r\n    #4 0x7f6de689e0d3 in openage::renderer::TextRenderer::render() /home/mcd/.repo/ap/openage/libopenage/renderer/text.cpp:159\r\n    #5 0x7f6de623c53b in openage::Engine::loop() /home/mcd/.repo/ap/openage/libopenage/engine.cpp:456\r\n    #6 0x7f6de623cd31 in openage::Engine::run() /home/mcd/.repo/ap/openage/libopenage/engine.cpp:311\r\n    #7 0x7f6de62a9f15 in openage::run_game(openage::main_arguments const&) /home/mcd/.repo/ap/openage/libopenage/main.cpp:61\r\n    #8 0x7f6de9f4b997 in __pyx_pf_7openage_4game_8main_cpp_run_game /home/mcd/.repo/ap/openage/openage/game/main_cpp.cpp:1183\r\n    #9 0x7f6de9f4d1ca in __pyx_pw_7openage_4game_8main_cpp_1run_game /home/mcd/.repo/ap/openage/openage/game/main_cpp.cpp:1023\r\n    #10 0x7f6df839b1b8 in PyCFunction_Call (/usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0+0xa01b8)\r\n    #11 0x7f6df84b5084 in PyEval_EvalFrameEx (/usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0+0x1ba084)\r\n    #12 0x7f6df84b5508 in PyEval_EvalFrameEx (/usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0+0x1ba508)\r\n    #13 0x4033e9 in __Pyx_PyFunction_FastCallNoKw /home/mcd/.repo/ap/openage/run.cpp:1407\r\n    #14 0x403b2d in __Pyx_PyFunction_FastCallDict /home/mcd/.repo/ap/openage/run.cpp:1447\r\n    #15 0x407bee in __Pyx_PyObject_CallNoArg /home/mcd/.repo/ap/openage/run.cpp:1591\r\n    #16 0x407bee in PyInit_run /home/mcd/.repo/ap/openage/run.cpp:1055\r\n    #17 0x408c34 in __Pyx_main /home/mcd/.repo/ap/openage/run.cpp:1800\r\n    #18 0x408f84 in main /home/mcd/.repo/ap/openage/run.cpp:1941\r\n    #19 0x7f6df6ec282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\r\n    #20 0x402648 in _start (/home/mcd/.repo/ap/openage/run+0x402648)\r\n\r\n0x60c000592f00 is located 0 bytes inside of 120-byte region [0x60c000592f00,0x60c000592f78)\r\nallocated by thread T0 here:\r\n    #0 0x7f6df8a1b6b2 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x996b2)\r\n    #1 0x7f6de68b0bf1 in openage::renderer::Font::load_glyph(unsigned int, openage::renderer::Glyph&) const /home/mcd/.repo/ap/openage/libopenage/renderer/font/font.cpp:224\r\n    #2 0x7f6de68c166a in openage::renderer::GlyphAtlas::get(openage::renderer::Font*, unsigned int) /home/mcd/.repo/ap/openage/libopenage/renderer/font/glyph_atlas.cpp:88\r\n    #3 0x7f6de689e0d3 in openage::renderer::TextRenderer::render() /home/mcd/.repo/ap/openage/libopenage/renderer/text.cpp:159\r\n    #4 0x7f6de623c53b in openage::Engine::loop() /home/mcd/.repo/ap/openage/libopenage/engine.cpp:456\r\n    #5 0x7f6de623cd31 in openage::Engine::run() /home/mcd/.repo/ap/openage/libopenage/engine.cpp:311\r\n    #6 0x7f6de62a9f15 in openage::run_game(openage::main_arguments const&) /home/mcd/.repo/ap/openage/libopenage/main.cpp:61\r\n    #7 0x7f6de9f4b997 in __pyx_pf_7openage_4game_8main_cpp_run_game /home/mcd/.repo/ap/openage/openage/game/main_cpp.cpp:1183\r\n    #8 0x7f6de9f4d1ca in __pyx_pw_7openage_4game_8main_cpp_1run_game /home/mcd/.repo/ap/openage/openage/game/main_cpp.cpp:1023\r\n    #9 0x7f6df839b1b8 in PyCFunction_Call (/usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0+0xa01b8)\r\n\r\nSUMMARY: AddressSanitizer: new-delete-type-mismatch ??:0 operator delete(void*, unsigned long)\r\n==21157==HINT: if you don't care about these warnings you may set ASAN_OPTIONS=new_delete_type_mismatch=0\r\n==21157==ABORTING\r\n```", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/832", "title": "[WIP] Spelling", "body": "some things I found over time.\r\nwe could keep this pr open for a while and I will add stuff over time.\r\n\r\nI don't know, if you want the change in print in logging.py. If you do, I will squash it, if not, remove it.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/814", "title": "[WIP] Use libopus instead of opusenc binary for conversion.", "body": "This is in response to #434.\r\n\r\nThings todo:\r\n- [x] Make the resampler faster.\r\n- [x] Comment my code. (I'm supposed to do that.)\r\n- [ ] Comment on my code. (You're supposed to do that.)\r\n- [ ] Checkout which `todo`s from the `todo` file should be done and do them.\r\n- [ ] Remove opus-tools requirement from buildsystem and documentation. [Done for all except os x. Who is responsible for the [arch packet](https://aur.archlinux.org/packages/openage-git/)? @linkmauve or @FabioLolix?]\r\n- [x] Register cython files into buildsystem.\r\n- [ ] Rebase and squash leaving only a few commits. (One for the code, one for the buildsystem changes, one for ...) PLEASE don't merge before I ticked this.\r\n\r\nOptionally:\r\n- [ ] Come up with an idea how to unit test this code.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/640", "title": "[WIP] doc: Nyan types", "body": "I started a list of all base types that need to be implemented in the engine. Add your thoughts and make changes.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/22775108", "body": "what was the problem you encountered? it works fine for me on current master.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/22775108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sairam": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/913", "title": "Setup CI via Travis CI", "body": "Travis CI has offering for Mac OS X . Offers free for OpenSource projects.\r\n\r\nhttps://blog.travis-ci.com/2017-09-22-macos-update", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rehmsen": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/912", "title": "Some HUD textures missing (red cross) when converting from AoE 2 HD", "body": "# Looks like this:\r\n![openage_2017-09-19_21-52-55_00](https://user-images.githubusercontent.com/29040/30612833-2a6e2792-9d86-11e7-9fae-11512e28d9ea.png)\r\n\r\n\r\n# To reproduce:\r\n\r\n1. Convert textures from a AoE 2 HD Beta 4.3 (in my case, installed on Windows, but openage is run on Linux).\r\n2. Run openage, generate any game.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MaanooAk": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/902", "title": "Alias Thread IDs to smaller numbers", "body": "Anyone else gets this:\r\n\r\n![screenshot from 2017-08-30 00-41-55](https://user-images.githubusercontent.com/6997990/29845641-5a1c2d9c-8d1c-11e7-99ca-6c1828fd75d6.png)\r\n\r\nShouldn't that be T1?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/904", "title": "Buildings limits, Resource capacity and more", "body": "- **Buildings**\r\n  - **cost** check and deduction\r\n  -  **limits** max at single instance, max ever created\r\n    - Player keeps track for each unit type the numbers:\r\n      - **units have**: active \r\n      - **units had**: active and dead\r\n      - **units pending**: being made\r\n- Player **Resource capacity**\r\n  - **Storage** attribute\r\n- Dynamic resources (first steps)\r\n  - **Resource**: one resource type (e.g wood)\r\n  - **Resources**: set of Resource\r\n  - **ResourceBoundle**: Resource-Amount pairs (created with a Resources)\r\n- **Resource** **decay** and **gather rate multiplier**\r\n\r\nEDIT:\r\n\r\n- **Resource generator** attribute\r\n  - Tmp logic in idle action\r\n- **ResourceCost** \r\n  - It can be **constant** or **dynamic** (= function of player)\r\n  - Used in **UnitType** and **ReseachType**\r\n\r\nEDIT:\r\n\r\n- **ResourceBundle** operations with bundles from different versions of Resources", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Vtec234": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/855", "title": "GUI subsystem refactor", "body": "As part of both the renderer rewrite (#850) and the [architectural rework of the engine](https://github.com/SFTtech/openage/milestone/6), we need to decouple subsystems. Without this, proper support for a client/server split and job-based parallelism with communication through channels will be practically impossible. I'm working on the graphics side of things, so I'd like to work on decoupling the GUI first.\r\n\r\nTo achieve this design goal, we unfortunately have to get rid of all the `GuiLink`s as they stand, as well as any other links to non-GUI engine components (e.g. `EngineQMLInfo`). From a very high-level viewpoint, the initial idea of how we could replace this is a callback system, where all communication proceeds solely through the `Gui` class, with an API of something like:\r\n```c++\r\nclass Gui {\r\npublic:\r\n  Gui (SDL_Window*, util::Path const& source, util::Path const& root_dir); // no EngineQMLInfo\r\n\r\n  void register_on_X_cb(std::function<..> callback); // registers a function to be called when X happens in the GUI\r\n\r\n  void enqueue_event(SDL_Event*); // stores an event to be processed\r\n  void process_events(); // actually processes events and calls callbacks\r\n\r\nprivate:\r\n  internal state\r\n};\r\n```\r\nObviously, we will need more than just the above in practice, but the general idea is that the GUI is an event-based component like any other. By itself it doesn't do anything. The user registers functions that they want called on GUI state changes. To give an example, currently changing properties of a game involves a `GameControlLink` that directly manipulates `Engine` members. This is unfortunate, because it will result in completely unpredictable behaviour in a concurrent execution context. Instead, what we would have is a `on_game_property_changed` callback which is called from `process_events` whenever the GUI detects that one of the enqueued events is a mouse click on something that triggers a game property change. It is up to the user to ensure threadsafety for that callback, and what we would in fact do is either make that callback send an event on the `WorldUpdater` concurrent input channel or directly modify some property of the `PresentationState`, which is local to the `Presenter` class - the user of the GUI.\r\n\r\nI'd be happy to hear thoughts on this, especially from @ChipmunkV, who I understand is the principal author of the GUI.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/850", "title": "[WIP] New renderer, cont.", "body": "A new rendering engine providing functionality designed for our needs. This is work continued from #287. Related: #34, #153, #286. Please submit contributions to the branch [here](https://github.com/Vtec234/openage/tree/new-renderer).\r\n\r\nList of things to do:\r\n- [x] Abstraction of render backend\r\n  - [x] OpenGL 3.3 or higher\r\n    - [ ] Use 4.x when available (optional)\r\n    - [ ] Support ancient 2.x legacy (optional)\r\n  - [ ] Vulkan (optional, #242)\r\n- [ ] Render pipeline abstraction\r\n  - [x] Textures\r\n  - [x] Shaders\r\n    - [x] Uniforms\r\n    - [ ] Uniform buffers\r\n    - [ ] Vertex attributes\r\n  - [x] Geometries\r\n    - [x] Quad primitives\r\n    - [ ] Circles\r\n    - [ ] Smooth paths\r\n    - [ ] Mesh importing (optional)\r\n  - [x] Render targets\r\n    - [x] Framebuffers\r\n    - [ ] Renderbuffers (optional)\r\n- [ ] Functionality\r\n  - [x] Screenshot support\r\n    - [ ] [PBO optimization](http://www.songho.ca/opengl/gl_pbo.html) for texture downloading (optional)\r\n  - [x] Pixel-perfect unit hitbox for unit selection and damage areas (#368, #671 )\r\n  - [ ] Outline rendering\r\n  - [ ] Investigate why tree textures render incorrectly (#359, [maybe this?](http://www.adriancourreges.com/blog/2017/05/09/beware-of-transparent-pixels/))\r\n  - [ ] Fix #374\r\n- [ ] Terrain rendering\r\n  - [ ] Merge terrain texture into a single bitmap\r\n  - [ ] Cache blending results (#154, #158)\r\n  - [ ] Do as much as possible in shaders (#149)\r\n  - [ ] Clip tiles properly (#141)\r\n- [ ] Optimizations\r\n  - [ ] [Occlusion queries](https://vertostudio.com/gamedev/?p=177)\r\n  - [ ] Minimize OpenGL state changes (batch by shader, then by buffer)\r\n  - [ ] Texture binpacking into atlas\r\n  - [ ] Smooth zooming\r\n- [ ] Integration\r\n  - [ ] Rewrite all of drawing functionality to be expressed in terms of `Renderer`\r\n    - [ ] Get rid of GL code everywhere except the rendering backend and the GUI\r\n    - [ ] Write a `GameRenderer` that takes evaluations of curves at the current instant as input\r\n  - [ ] GUI integration\r\n    - [ ] TBD (#624)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tusharpm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/01012d852133c6512d1f5e33973d3a3f888bb876", "message": "doc: miscellaneous\n- include nyan update\n- line breaks for multiple sentence lines.\n- clarify build and run instructions"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/1fb34885ad018bcafb79c8d9c08f0565438be23e", "message": "buildsystem: adjustment for MSVC\n- skip \"untested compiler\" message\n- skip optimization/sanitizing flags"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/807a50f899d91f3fe29d86922e10f32c8edc1054", "message": "doc: add instructions to install fonts on Windows"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3649f7dac5f9744f064ddde5c09db03736652d38", "message": "doc: add MSVC build instructions to answer some FAQs"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/0d9e145c13a98cca0143f480b84b77c61bdf7329", "message": "buildsystem: add known compiler versions to error message"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/c2e0e9de08f65e7c2d3bedc49ee51072362fa9d4", "message": "buildsystem: add details in error message"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cc58cd5e68aa9afd55670b65638a382844895e40", "message": "buildsystem: require c++ compiler to support following c++17 features\n- nested namespaces\n- structured bindings"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/208178aa4572acdefe75baaac55a0f35ecb89be8", "message": "Merge pull request #939 from TheJJ/nyan-link-lib\n\nLink to nyan library"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nyx": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/ba0fc4609cfec4173ab10807ed735a85e254ac8b", "message": "update Homebrew-Cask installation instruction\n\nit seems this process has changed"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vaibhavkaul": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/a01062a4d53081c1ba132843c0620f97485e211c", "message": "doc/ideas: add villagers hiding in trees."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mic-e": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/f624779b82b4c8141286f507f13d42a73dfb29b8", "message": "Merge pull request #951 from TheJJ/readme-updates\n\nReadme updates"}], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/662", "title": "[WIP] Re-write of the coordinate system", "body": "The coordinate system code is arguably one of the most stinky and oldest parts of the C++ codebase and desperately requires a re-write - manual, header-assisted code generation - could you imagine I once thought that was a good idea?\r\n\r\nFurthermore it adds new coordinate base classes.\r\n\r\n- [x] Add new fixed-point number type, adapted from #322, thanks to @detrumi\r\n- [x] Add tests for the fixed-point number type\r\n- [x] Add new coordinate system base classes: Coordinate(XY(Z)?|NeSe(Up)?)(Absolute|Relative)\r\n- [ ] Move the coordinate conversion functions from the existing classes to the Engine (or a subsystem thereof)\r\n- [ ] Re-write the existing classes (CamGame, ...) to be based on the Coordinate classes, using the fixed-point number type\r\n- [x] Update build instructions for new dependencies (jinja2)\r\n\r\ncloses #56", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60560522", "body": "Hm... from various other `C` projects I've looked at/worked on, I was under the impression that this is how header guards are done, but you're of course right in that we should follow the standard. Standards are a great thing. I suggest we change the guards to `CALLBACKS_H` and `ENGINE_TERRAIN_H` as suggested in your link.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60560522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60561848", "body": "We've been considerating that... there are benefits, especially that classical guards are very prone to accidential name clashes or typos.\nIt's obviously useful, so I researched why it wasn't put into the standard. The answer seems to be that header files might be copy/pasted or reached over multiple paths through symlinks, confusing the compiler as to whether to include them with `#pragma once`.\nI'm rather undecided right now... obviously the C++ standards commitee knows what they're doing*, so if they decide against `#pragma once`, maybe we should just accept that. Ideally, there would be something like `#pragma once ENGINE_TERRAIN_H`.\n\n*disclaimer: actually they don't\n\nP.S.: [obligatory stackoverflow link](http://stackoverflow.com/a/23699893/1347646)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60561848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562376", "body": "If `cmake 3.0` is available in all distros that also have the other dependencies (such as recent versions of `gcc` and/or `g++`, `libopusfile`, ...), there's no reason not to just bump the required cmake version to that version instead of applying hacks. Any feedback on that (I guess Debian stable is out anyway, but what about the various versions of Ubuntu, Fedora, ...)?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562662", "body": "`set(Python_ADDITIONAL_VERSIONS 3.4)` it is, then. Though I believe it belongs into `python.cmake` rather than the `cpp.cmake` :P\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60567951", "body": "Sounds like something straight for one of our \"idea\" files (gameplay? interface?). The current design for networking includes a dedicated server (optionally run when clicking the 'Host' button), so both the client and server could provide such an interface. Hacking around in attempts to parse recorded game files/network streams is unnecessary though, since you can build your interface, and even the web server (or maybe an OpenGL rendering window?) directly into the game.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60567951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60590322", "body": "[This issue](https://github.com/Homebrew/homebrew/issues/25118) seems to be related.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60590322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60626655", "body": "- I agree with TheJJ. Please remove all the `#endif` comments in the last lines of the header files.\n- I guess the UUIDs are a necessary evil... how did you generate them?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60626655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/8469156", "body": "I didn't even know that github allows you to comment on any commits...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8469156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/10716745", "body": "orly?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/10716745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/10717031", "body": "All my life I've lived with a lie... this changes everything.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/10717031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650349", "body": "this isn't delete[]'d (memory leak... we should really migrate to `c++ std::string` already...)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650417", "body": "style issue: should be\n\n```\nscreenshotmanager()\n        :\n        count(0) {}\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650448", "body": "this shouldn't be there anymore\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650481", "body": "whitespace issue\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19700778", "body": "nope, it was called \"library\" up until v2.1... I guess they renamed it to \"lesser\" with v3 for propaganda reasons.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19700778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19739806", "body": "this only runs `if omode == 'max'`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19739806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19885433", "body": "I suggest writing `$HOME` instead of `/home/user`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19885433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971687", "body": "We don't do that; it's horrible.\n\n```\nwrite if() {\n        return true;\n}\n```\n\ninstead.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971863", "body": "example:\n\n```\nif (test) a(); b();\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971948", "body": "this should be in the engine class (analogous to the draw_debug_view bool)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "alanyee": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/cc00d491a1cabc8839a4c1136ed15a5d522ff9bc", "message": "readme: update for https linkx and macOS name"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gocarlos": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/956", "title": "[WIP] snapcraft packaging", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PythonicChemist": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/938", "title": "util/iterators.py removed superfluous ListIterator for iter() and refactored denote_last", "body": "ListIterator was only used once and reimplemented iter() so I replaced it with iter().\r\n\r\nI didn't like the \"while True:\" loop in denote_last, so I researched a cleaner way of implementing the logic. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wanderrful": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/936", "title": "Fixed minor typo in main_cpp.pyx", "body": "Don't mind me, just fixing a typo.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sandsmark": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/922", "title": "Minimap", "body": "just rebased #559, + added support for using the mouse to move around from the minimap.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stiopaa1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/810", "title": "[WIP] speed up initial loading of the textures", "body": "use several threads for loading SDL_Surface", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "LordAro": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/789", "title": "Monk conversions instead of killings, rebased", "body": "Supercedes #428. No functional changes (I haven't even tested it beyond compilation & tests!), and @bombadie retains primary commit authorship\r\n\r\nI got very bored.\r\n\r\nFixes #375", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ChipmunkV": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/749", "title": "Settings menu placeholder", "body": "#673 \r\n#728 \r\n#732 \r\n#751\r\n\r\n- [x] SettingsMode and its TabView with global font size setting in \"Graphics\" tab\r\n- [x] Global font size cvar\r\n- [x] Write back cvars to config file when calling set\r\n- [x] Initial propagation of the cvar list to gui\r\n- [x] on-changed propagation from gui to cvar\r\n- [x] on-cvar-changed callbacks (that will allow on-changed propagation from cvar to gui)\r\n- [x] caching of the cvars that are loaded but not yet taken by any subsystem of the engine\r\n- [x] ~~Batch write back to config file (instead on writing each time)~~. Ok, write them one by one, but in different thread\r\n\r\nRandom unrelated stuff:\r\n- [x] Keep mode when reloading gui\r\n- [x] Fix input crash on reload\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/642", "title": "[WIP] History and interpolation", "body": "The current game logic will be mostly used in the server. Same code will probably be used on the client to predict the outcome of the commands issued by the player.\r\n\r\nThe outcomes of all commands of all of the players form a history. The history is generated by the server.\r\n\r\nThis PR starts from an in-memory representation of the history (it's not about network). The goals are:\r\n- [x] modify attributes, so they can record changes\r\n- [x] position is not an `Attribute`, so capture changes inside the constructor and actions\r\n- [x] write out the history while the client is running (currently it has all the server code)\r\n- [ ] write out the history of object creation\r\n\r\n*no server-side prediction/correction for the moment\r\n\r\n*no special format\r\n- [ ] replay that history on the client\r\n- [ ] output the history with server-side predictions and corrections (move away from recording every change of an attribute)\r\n- [ ] replay the history that contains corrections\r\n\r\nIntegration is probably going to be via `Unit::action_secondary`, `UnitContainer::new_unit` and `Unit::delete_unit`. The idea is to create one `CurveAction` that will sit forever in the `Unit::action_secondary` and apply all curves on each graphical tick.\r\n\r\nTo extract changes, the members of `Attribute<T>` can be transformed into \"spying\" values. It's enough for point-curves, but things like `MoveAction` will eventually need to generate longer curves.\r\n\r\nAt the end of each logic tick (maybe I should call it a network tick) the history will be resynchronized and a segment from it will be used to show the next tick. Pipelining will be needed. The network frame rate is flexible because in theory it's inversely proportional to the amount of stuff that is coming.\r\n\r\nRelated - #530.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/584", "title": "[WIP] Input replay", "body": "There is no established world-history protocol, so it's too early for the game replays.\n\nThe goal is to be able to replay the player's perspective by replaying the input. It's supposed to be a part of the real replay functionality.\n\nWill do:\n- [x] replay of actions\n- [x] mouse movements\n- [x] camera movements\n- [ ] camera movements with keys\n- [ ] testing GUI for starting/restarting the replay\n- [ ] testing GUI for specifying I/O files\n- [ ] doc overview (copy-paste several sentences from this PR description)\n\nRelated to the #277\n\nDumps ActionMode events to out.txt while playing from in.txt.\n\nProblems: ~~held buttons~~, constness of the events, SDL_SetRelativeMouseMode.\n\nFuture work that needs real replays to be done first:\n- GUI to switch between players\n- handling switches between different players and the 'free mode' during the replays\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/578", "title": "[WIP] Fix paper crash", "body": "(**edit:** actually, it's unrelated to #577).\n\nMakes the paper more yellowish, but removes inline shaders that were causing problems when chained together by the untrained personnel.\n\nUses some copy-paste from Qt 5.7.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/559", "title": "Minimap", "body": "Made some action buttons (hooked up 'kill' and 'garrison', haven't found the game logic for other ones).\n\nBorrowed https://github.com/SFTtech/openage/pull/344 for the minimap. But can't understand why the player colours aren't bright. The player palette has only dark shades...\n\n**update:** dissociated action buttons from this PR.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Tomatower": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/744", "title": "Event logic", "body": "The tube demo runs a simple curses based pong, that shall\r\ndemonstrate the functionality where and why a prediction interface is\r\nbuilt.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timohaas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/649", "title": "savefile Format proposal", "body": "#613 It is written in Markdown and contains the first draft. I need the help of the other developers, I don't know what attributes need saving and what of what types they are.\r\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/613", "title": "[WIP] random map scripts (already working)", "body": "a simple random map generator\n\ngets a rms file and tries to make a map which can be loaded within the game.\n\nimportant: if the map is for more than 2 players, you need to add more playernames in the menu, otherwise openage will crash.\n\nhow does it work?\n./rms.py oasis.rms\nwill generate a /tmp/default_save.oas file which can be loaded\n\nwhat works:\ncan create Islands (Water,Grass) with shapes(random flood fill) and placement(in circle, random, and within a bounding box)\nconnection: from island center to another island center with terrain costs\nobject placement: random, in a circle, filling whole island\nnearly everything has paramenters which can be tweaked\nnew map can be generated with a different seed\n\nTODO:\n- [ ] preprocessor language\n- [x] team circle placement\n- [x] team circle placement with deep pocket players >= 6\n- [ ] team placement (random placement for a team on an island)\n- [x] map scaling completion (current status: only size of map is scaling)\n- [x] map scaling algorithm (linear, sqrt,..)\n- [ ] island styles (more than just random flood fill)\n- [x] island basesize\n- [ ] island smoothing, no single tiles inside water\n- [x] island polygon boundary\n- [ ] automatic beach grass - beach - water\n- [x] automatic deep water\n- [ ] object placement parameter (min distance to, loose coupling)\n- [ ] object avoid player starting area\n- [ ] water unit placement\n- [ ] wall generation with gates\n- [ ] island patches (maybe can be implemented as it is now with a dummy object)\n- [x] team connection\n- [x] team to island connection\n- [ ] team to team connection\n- [ ] connection variance (currently we go straight lines, maybe add random costs to tiles or random dummy objects)\n- [x] individual  object connection cost\n- [ ] diffrent connection width for diffrent terrain\n- [x] do not do replacement on start and end island of a connection\n- [ ] blacklist of island for connection creation\n- [ ] merge connection which are close to each other\n- [ ] trigger support\n- [ ] cython wrapper\n\nwhat ideas do you have?\n\n[documentation](https://github.com/timohaas/openage/tree/randommap/openage/randommap)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jprashanth": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/560", "title": "[WIP] Another bold attempt at out of source builds", "body": "- Moves python build process from cmake to setuptools\n- Removes the clutter of cmake files from python packages\n- Moves generation of pxd files, cython c++ files, python extension from source dir to binary dir\n- Removes various buildsystem routines like pxdgen, check_py_file_list, compilepy, cythonize, inplacemodules\n- Now, no configuration dependent files (config.h, config.cpp) are generated inside the libopenage directory\n- Single point of version specification. Now, there is no need to invent a way to re-configure the project when the git HEAD changes\n- Introduced a central source for storing and retrieving build metadata\n- Removes the awkward cmake configuration for config.py.in\n- Simpler approach to DEVMODE\n\nAddresses #398 #381 \n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19923903", "body": "any suggestions?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19923903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "coffenbacher": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/552", "title": "[WIP] Improving building logic", "body": "Do not place conflicting buildings and/or foundations. Conflict with unit is OK to place foundation, although building construction cannot begin until the site has been cleared. Addresses second half of #533.\n\nFixes the two behaviors seen here:\n\n![two_bad_building_behaviors](https://cloud.githubusercontent.com/assets/245867/15038760/8894ecf0-125b-11e6-9245-50c49ff742b2.png)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesmintram": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546224", "body": "> Also, why libopus-dev libvorbis-dev? They should be pulled in by libopusfile, shouldn't they?\n> Ah yeah - that was an artifact of me working through the dependencies!\n> \n> would you mind placing this in the #dependencies section? (basically under the dependency list and before \"Build procedure\")\n\nSure\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546397", "body": "Should be good now.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mappu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60547745", "body": "**DEPENDENCIES**\n\nInstall MSYS2 with mingw-w64 toolchain\n\n```\npacman -Syu\n```\n\nInstall opusfile (not currently packaged by MSYS2 distribution)\n\n```\nwget http://downloads.xiph.org/releases/opus/opusfile-0.6.tar.gz\n./configure --prefix=/mingw32/ --{build,host,target}=mingw64-i686\nmake install\n```\n\nInstall dependencies\n\n```\npacman -S mingw-w64-i686-{SDL2,SDL2_image,glew,freetype,ftgl,opus,opus-tools,libogg,python3-numpy,python3-Pillow}\nfc-cache\n```\n\n**PATCHES**\n\nBuildsystem patches: (I gave up on cmake)\n- configure: Comment out 258-259, MSYS2 doesn't support symlinks.\n- configure: Add `invocation.append('-G')` `invocation.append('MSYS Makefiles')` around line 278.\n- buildsystem/simple: line 18 add `set -e` for debugging\n- buildsystem/simple: `sed -i 's~/usr/include/~/mingw32/include/~g' buildsystem/simple`\n- buildsystem/simple: remove `-z,relro` and `-fPIC` options\n- buildsystem/simple: move `-lpython3.4m` to the END of the python ext module build\n- buildsystem/simple: change `PYTHONPATH` to just `PYTHONPATH=py`\n- buildsystem/simple: Remove `-l{GLEW,GLU,GL,SM,ICE,X11,Xext,util}` from main gcc build ; move libraries to end ; `-lSDL2` doesn't need to be there twice ; add `-lglew32 -lopengl32`\n- buildsystem/simple: Add `-Wno-format`. There are lots of minor printf format issues owing to building on ILP32 platform.\n\nC++ patches:\n- utils/fds.h: comment out termio.h, comment 84\n- utils/fds.cpp: comment out pty.h, comment 26-27, comment 101-111, comment 115-118\n- console/tests.cpp: comment out pty.h, comment 36-158\n- audio/hash_functions.h: change to <<16 for ILP32 platform. This seems unused?\n- main.cpp: append the WinMain wrapper from http://www.flipcode.com/archives/WinMain_Command_Line_Parser.shtml , since main() doesn't seem to be called as-is and `ld` can't find the usual mainCRTStartup wrapper\n\nPython patches:\n- py/openage/convert/dataformat.py:1051: should be snippets_body_sorted ( issue #7 )\n- py/openage/convert/mediafile.py:20: dat_cache_file = \"C:/tmp_empires2_x1_p1.dat.pickle\"\n\n**BUILD**\n\nBuild binary\n\n```\n./configure --mode=debug --c-compiler=gcc --cpp-compiler=g++ \ncp -R .bin/gcc-debug-01 ./bin\nbuildsystem/simple\n```\n\nBuild assets (takes a long time and 600MB+ ram.)\n\n```\nPYTHONPATH=py python3 -m openage.convert -v media -o \"assets/converted\" \"/c/Program Files (x86)/Age of Empires/\" graphics:*.* terrain:*.* sounds0:*.* sounds1:*.* gamedata0:*.* gamedata1:*.* gamedata2:*.* interface:*.*\n```\n\nConvert all *.docx files from CRLF to LF\n\n```\nfind ./assets/converted/ | grep 'docx$' | xargs -n1 sed -rie 's/\\r\\n/\\n/'\n```\n\nThis conversion is slow, it would be better to fix the script to produce LF instead of CRLF on MSYS2 platform.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60547745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mdparker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60560969", "body": "Since the project is using C++ 11, there's no reason not to simply use \"#pragma once\" at the top of each header. All modern C++ compilers support, AFAIK.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60560969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "snoek09": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60561220", "body": "Or add version 3.4 to the list in (Ubuntu 14.04):\n\n/usr/share/cmake-2.8/Modules/FindPythonLibs.cmake (line 41)\n/usr/share/cmake-2.8/Modules/FindPythonInterp.cmake (line 36)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60561220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "organman91": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562595", "body": "On Ubuntu 14.04 the latest available version is 2.8.12 (unless there's a suitable backport).\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "LeviSchuck": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60590346", "body": "I upgraded to 10.10 with brew and had problems with python. I removed brew and reinstalled it, as well as packages I regularly use.\n\nPerhaps you can try that. (I have not tried to build this yet, as I only started watching yesterday :sweat_smile: )\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60590346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dalexandrov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60592122", "body": "@kloplop321 I've reinstalled brew yesterday. Did not help.\n\n@mic-e I've tried to find fix in the issue specified, still the same stuff. \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60592122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "svkurowski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60606802", "body": "Actually I chatted with @mic-e on the IRC channel and we concluded to have a `cpp/crossplatform/opengl.h` file that includes the appropriate files to avoid having platform specific code in each header.\nI will do that later and open a pull request unless he's faster than me ;)\n[This stackoverflow answer](http://stackoverflow.com/a/16203192) gives some hints for cmake based approaches.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60606802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60629962", "body": "Install python3 via homebrew and then pass the following to the configure script. You may need to change the python version.\n\n```\n  --raw-cmake-args \\\n  -DPYTHON_INCLUDE_DIR=/usr/local/Cellar/python3/3.4.2_1/Frameworks/Python.framework/Versions/3.4/include/python3.4m/ \\\n  -DPYTHON_LIBRARY=/usr/local/Cellar/python3/3.4.2_1/Frameworks/Python.framework/Versions/3.4/lib/libpython3.4.dylib \\\n  -DPython_FRAMEWORKS=/usr/local/Cellar/python3/3.4.2_1/Frameworks/Python.framework\n```\n\n[This](https://gist.github.com/svkurowski/746e85f1e28eeefc30f1) is the whole command I use to configure right now. Compilation will fail due to [this llvm bug](http://llvm.org/bugs/show_bug.cgi?id=18350). @fr3akout is working on that after we discussed it in the irc channel.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60629962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "thehydroimpulse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60625186", "body": "Same issue for me. Tried a bunch of workarounds, trying to overwrite which version of python cmake uses with `-DPYTHON_EXECUTABLE` with no luck.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60625186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60633592", "body": "@svkurowski Yep, that worked perfectly. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60633592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "elfring": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60628703", "body": "- Most changes for this update suggestion were automatically generated by my patch creation program which reuses the function \"[uuid_generate_random](http://linux.die.net/man/3/uuid_generate_random)\".\n- I do not really care for those comments that mark the end of affected include guards. I would be more interested to improve the header files that will be generated in the subdirectory \"gamedata\". Does this software build step reuse a template file which I do not know and find so far?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60628703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "franciscod": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/8408196", "body": "nice!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8408196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8432888", "body": "discussion is here: https://github.com/SFTtech/openage/issues/28\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8432888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8434677", "body": "...@TheJJ you didn't clean the broken line?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8434677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8434732", "body": "https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8434732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8468572", "body": "nice!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8468572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8469475", "body": "![tmyk](http://rainiernew.wpengine.com/yurts/wp-content/uploads/sites/2/2014/01/The_more_you_know_banner.jpg)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8469475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8494914", "body": "works perfectly!!!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8494914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/9643786", "body": "what's this @TheJJ?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9643786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/9730298", "body": "does this require a `make media`? @TheJJ \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9730298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/9736735", "body": "nice! Tom Hanks!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9736735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19649238", "body": "whoops, sorry! sure thing!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19649238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19649479", "body": "yup, bad copypaste in a hurry! thanks!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19649479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651217", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651221", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651228", "body": "check the new one!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19778025", "body": "maybe the description could be \"print the current version string\"? is `v2.2-437-gf6736cd` even a number?\n\nedit: already merged, but anyway it could be improved\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19778025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857226", "body": "quoting your commit message: \n\n```\nconfigure: error: unknown compiler suite: g++. manually specify\n--c-compiler and --cpp-compiler, or use one of [llvm, gnu]\n```\n\nhowever, you put \"gcc\", does that work? :)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857235", "body": "same that line 108 comment\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857241", "body": "Arch _L_inux? /me is a capitalization nazi\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857249", "body": "nice! thanks\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921666", "body": "0 is a valid index, you should test for -1\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921669", "body": "0 is a valid index, you should test for -1\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921690", "body": "are you sure about giving that huge block of code a level of nesting?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971737", "body": "okay, i'll go with that style, but why do you think it's horrible?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "UltraMC": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/8432028", "body": "Why not use YAML?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8432028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "andrekupka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/9116830", "body": "vector::reserve only allocates memory, but it doesn't initialize the size of the vector. Therefore the chunk's size was still zero.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9116830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "zuntrax": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/9831943", "body": "We use valgrind to find memory leaks in our code. SDL causes a memory leak which clutters our output. This is a minimal example to reproduce that issue.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9831943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "dbrgn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/10713560", "body": "Actually you can select 40 :)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/10713560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Davidslv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/10866260", "body": "Really? LOL!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/10866260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Jon0": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/12424344", "body": "They are used to append other `Dir` objects at the moment. Should there be a `Dir::append(const Dir &other)` ?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/12424344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "darrenstrash": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/13342959", "body": "Interesting. I wonder why we don't see this problem with the other calls to py_exec...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/13342959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/15234266", "body": "Yep. Thanks for finding this. I guess hardly anyone uses Mac OSX.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/15234266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "0bailey6": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/15229287", "body": "Well pretty much it's going to be another day one of those days that you just wake up and say \"damn can't believe it\", \"another year that just went by and things are just going on\", kids are just growing, talking bad, just doing all sorts of things. You don't know me pretty much, a little bit about myself: I'm 29 now its her turn. On Christmas Day and then really do not the for my birthday but just wanted to say have a lot happy new years\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/15229287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "williamriancho": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/15233962", "body": "@darrenstrash : Isn't it `brew tap homebrew/versions`?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/15233962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mdrost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/20269209", "body": "Missing semicolon.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/20269209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "AlexandreArpin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19627805", "body": "typo, should be screenshot manager I believe?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19627805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "qlonik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19874844", "body": "That is apparently a typo. 'gcc' does not work as well. 'gnu' has to be there.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19874844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}