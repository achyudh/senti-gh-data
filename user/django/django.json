{"_default": {"1": {"jdufresne": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/90ca9412e4d2f0b543938a1fa3fbc43c2c7ac57f", "message": "Removed unnecessary microsecond truncation in SplitDateTimeWidget.\n\nThe microseconds are already truncated by the TimeInput subwidget."}, {"url": "https://api.github.com/repos/django/django/commits/3c34452ab5e5de816357aee99cd2a98a0c7c4e50", "message": "Refs #23668 -- Removed passing default argument of current TZ to make_aware()/naive."}, {"url": "https://api.github.com/repos/django/django/commits/1e81a4b897b6b4343fcae58e9dc1349cc95fade5", "message": "Fixed #28638 -- Made allowed_hosts a required argument of is_safe_url()."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atombrella": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/65728550bd6296871562da02069ddb86e9dd3482", "message": "Refs #28643 -- Added Replace database function."}, {"url": "https://api.github.com/repos/django/django/commits/999fc0687d6b27309e3604602cf996c71b229537", "message": "Added a few tests for smtp EmailBackend."}, {"url": "https://api.github.com/repos/django/django/commits/59b1aaa5a5136702f5b7b2ab718d91128473b9c3", "message": "Added a couple tests for collectstatic."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9543", "title": "Refs #28643 -- Implemented the NullIf SQL function.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vpoulailleau": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/fcd431c6c3159a753f1cc0658cc4b25803ffccc1", "message": "Improved generic detail view error message for when pk or slug is missing."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SShayashi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/27557a7a99ab1ad032c699dc01e114a5e6504b0a", "message": "Fixed #28857 -- Fixed invalid SQL when using Cast with complex expressions on PostgreSQL."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timgraham": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/b902878fd61feb83159a4770ccf327d532963b67", "message": "Doc'd the latest state of the Jenkins pull request builders."}, {"url": "https://api.github.com/repos/django/django/commits/cea5fe94c6bb1b61e791f1375c246566c950b3e3", "message": "Added stub release notes for 1.11.10."}, {"url": "https://api.github.com/repos/django/django/commits/b17c1d53fd7875dd0e3ffcffbfdeff348834b9b0", "message": "Removed unused query log clearing in bulk_create tests."}, {"url": "https://api.github.com/repos/django/django/commits/b9cec9fa1fc50207ab68a59853c851a945c5db5e", "message": "Fixed #29017 -- Updated BaseCommand.leave_locale_alone doc per refs #24073."}, {"url": "https://api.github.com/repos/django/django/commits/4bcec02368b7e5466f64dc17286689b16613c94b", "message": "Added tests for django.forms.formsets.all_valid()."}, {"url": "https://api.github.com/repos/django/django/commits/a8e492bc81fca829f5d270e2d57703c02e58701e", "message": "Removed note in tutorial about bypassing manage.py.\n\nThis isn't relevant for beginners."}, {"url": "https://api.github.com/repos/django/django/commits/7c00f9fb1cc47e1c993f7728e2b592a1be29dd40", "message": "Fixed #29002 -- Corrected cached template loader docs about when it's automatically enabled.\n\nThanks oTree-org for the suggestion."}, {"url": "https://api.github.com/repos/django/django/commits/1c95737ebebb9fe1b59e9de08d4e8cd7226de00d", "message": "Reduced redundancy in DecimalField tests with subTest()."}, {"url": "https://api.github.com/repos/django/django/commits/db9cd1b37e5fee2fdcbf888cb390dc751a8b8150", "message": "Unified construction of WITH SQL in contrib.postgres.indexes."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9593", "title": "Replaced \"trunk\" with \"master branch\" in docs.", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/9498", "title": "Fixed #28858 -- Removed unnecessary \"else\" statements.", "body": "Opinions on this patch are welcome. I'm not sure if it's an improvement.\r\nhttps://code.djangoproject.com/ticket/28858", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PeterW-LWL": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/196c257a230bba8f2f1b2021c383eb2744e8df41", "message": "Fixed typo in docs/topics/i18n/translation.txt."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "klu17": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/4fcd28d442c2fec56f544f99cb658f33f847824c", "message": "Fixed #28881 -- Doc'd that CommonPasswordValidator's password list must be lowercase."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timmartin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/02365d3f38a64a5c2f3e932f23925a381d5bb151", "message": "Fixed #28542 -- Fixed deletion of primary key constraint if the new field is unique."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JayWelborn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/56e590cc0be4d8c8b6fe0967583a6e02d18ee03e", "message": "Fixed #28761 -- Documented how an inline formset's prefix works."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nimn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/9a621edf624a4eb1f1645fca628a9e432f0de776", "message": "Fixed #29016 -- Fixed incorrect foreign key nullification on related instance deletion."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "botondus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/52aa26e6979ba81b00f1593d5ee8c5c73aaa6391", "message": "Fixed #28231 -- Doc'd that QuerySet.bulk_create() casts objs to a list."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "h-chauhan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1b753b2d60230974e7d537ddacbcc1ad23348e7c", "message": "Fixed #28885 -- Fixed hidden content at the bottom of the \"The install worked successfully!\" page for some languages."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "felixxm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/385e6fb352f3cb80d2f72838e08372cb392aaa45", "message": "Removed Query.split_exclude()'s unused prefix argument.\n\nUnused since b4492a8ca4a7ae4daa3a6b03c3d7a845fad74931."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9594", "title": "Refs #20487 -- Added test for querying mixed case fields with common related model.", "body": "https://code.djangoproject.com/ticket/20487", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pope1ni": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1f0813ca7e8a15d10fcdaad1a5d66b7eec28dedb", "message": "Fixed string format specifier for fillfactor in GistIndex."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sir-sigurd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1dce629c038b88a26d02ddc9d5e7f047933581ee", "message": "Refs #29006 -- Simplified handling of SNaN values in DecimalField.validate()."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9548", "title": "Simplified handling of timezone names.", "body": "`tzname()` of correctly implemented `tzinfo` subclass must return string: https://docs.python.org/3/library/datetime.html#datetime.tzinfo.tzname.\r\n\r\n```\r\nIn [190]: class CustomTZ(datetime.tzinfo):\r\n     ...:     def tzname(self, dt):\r\n     ...:         return b'bytes'\r\n     ...: \r\n\r\nIn [191]: datetime.datetime(1, 1, 1, tzinfo=CustomTZ()).tzname()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-191-1f9927218b78> in <module>()\r\n----> 1 datetime.datetime(1, 1, 1, tzinfo=CustomTZ()).tzname()\r\n\r\nTypeError: tzinfo.tzname() must return None or a string, not 'bytes'\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9484", "title": "Used datetime.timezone.utc instead of pytz.utc for better performance.", "body": "Before:\r\n```\r\nIn [2]: %timeit django.utils.timezone.now()\r\n2.77 \u00b5s \u00b1 57.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n```\r\nAfter:\r\n```\r\nIn [2]: %timeit django.utils.timezone.now()\r\n937 ns \u00b1 5.35 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9462", "title": "Fixed #28925 -- Made durations-only expressions work on SQLite and MySQL.", "body": "https://code.djangoproject.com/ticket/28925", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "T-101": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9598", "title": "Added exception raise when form_class not defined in FormMixin", "body": "Not having a form_class defined in FormView and parents will cause an Exception with a nonsensical error message and trace about NoneType not being callable.\r\n\r\nThis will check if form_class is defined, and raise ImproperlyConfigured Exception with a accurate error message for the user to define form_class or override get_form_class()", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "charettes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9597", "title": "Defined immutable queryset/query attributes at the class level.", "body": "Adam and Sergey, since you both worked on speeding up the ORM internals I wanted to know what you think of the following changes.\r\n\r\nDefining immutable default attrs at the class level has the benefit of faster `__init__`, faster `self.__dict__.copy()` during `clone()` and reduced memory usage.\r\n\r\nThis seems to speed up simple and moderately complex queryset/query cloning locally but it's hard to get an accurate picture. We should really try to bring back https://github.com/django/djangobench back to life.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1301669", "body": "@akaariai I can't figure out why [CI is failing](http://ci.djangoproject.com/job/Django%20trunk/database=sqlite3,python=python2.7/lastBuild/console)... Re-ran full test suite and everything pass on sqlite3.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1301699", "body": "Argh... I've got 2.7.3 on my machine. It looks like [python 2.7 shipped with an incorrect implementation](https://regebro.wordpress.com/2010/12/13/python-implementing-rich-comparison-the-correct-way/).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1301718", "body": "Here's the [python bug report](http://bugs.python.org/issue10042).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "shangdahao": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9587", "title": "Fixed #28838 -- Fixed crash on Model.save() after annotate.", "body": "https://code.djangoproject.com/ticket/28838", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bobort": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9583", "title": "Refs #28643 -- Added Ord, Chr, Left, and Right database functions", "body": "This is my first time contributing.  I appreciate advice and guidance.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "doganmeh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9581", "title": "ModelBackend object permissions fallback to model permissions", "body": "This is for the issue:\r\n\r\nhttps://code.djangoproject.com/ticket/20218\r\n\r\nand the discussion:\r\n\r\nhttps://groups.google.com/forum/#!topic/django-developers/MLWfvPPVwDk", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "onkruid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9577", "title": "Refs #28643 -- Added Abs function", "body": "Ticket: [#28643](https://code.djangoproject.com/ticket/28643)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jschneier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9575", "title": "Fixed #28959 -- Fixed 'No, take me back' button on admin's inline popup.", "body": "https://code.djangoproject.com/ticket/28959\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Demo318": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9572", "title": "Change shell launch from django-admin to manage.py", "body": "At this point in the tutorial, project has not configured django-admin to launch commands. Launching the shell through django-admin will produce an error. Launching the shell through manage.py will yield same result, without requiring student to backtrack and configure django-admin. Configuring django-admin is beyond the scope of this tutorial.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stkrp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9560", "title": "Fixed #28960 -- Implemented GEOS.BufferWithStyle.", "body": "Ticket: https://code.djangoproject.com/ticket/28960\r\n\r\nPossible improvement, for which I could not find a place:\r\n```\r\n/// End cap styles\r\nenum EndCapStyle {\r\n\r\n    /// Specifies a round line buffer end cap style.\r\n    CAP_ROUND=1,\r\n\r\n    /// Specifies a flat line buffer end cap style.\r\n    CAP_FLAT=2,\r\n\r\n    /// Specifies a square line buffer end cap style.\r\n    CAP_SQUARE=3\r\n};\r\n\r\n/// Join styles\r\nenum JoinStyle {\r\n    \r\n    /// Specifies a round join style.\r\n    JOIN_ROUND=1,\r\n    \r\n    /// Specifies a mitre join style.\r\n    JOIN_MITRE=2,\r\n    \r\n    /// Specifies a bevel join style.\r\n    JOIN_BEVEL=3\r\n};\r\n```\r\nSource: https://github.com/OSGeo/geos/blob/master/include/geos/operation/buffer/BufferParameters.h#L62", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bquinn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9559", "title": "Fixed #29004 -- Optional database view support for inspectdb command", "body": "Added --include-views option to inspectdb command which creates Django\r\nmodels from database views as well as tables.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grantjenks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9555", "title": "Fixed #28977 -- Changed local memory cache to use LRU-eviction policy.", "body": "The previous locmem cache eviction policy was psuedo-random. Now that\r\nDjango requires Python 3.4 or greater, the collections.OrderedDict can\r\nbe used to impelement an LRU-eviction policy. These changes do the\r\nfollowing:\r\n\r\n1. Add a failing test to validate LRU-eviction.\r\n2. Update the locmem backend to evict keys in LRU-order.\r\n3. Update locmem cache tests regarding locking.\r\n4. Remove RWLock in utils/synch.py as it is no longer used.\r\n\r\nLRU-eviction is a well-regarded policy but turns every read into a kind\r\nof write to the cache: cache keys are moved to the first position in the\r\nOrderedDict when they are retrieved. The previous implementation used a\r\nspecial RWLock which permitted multiple readers while prioritizing a\r\nsingle writer. LRU turns all accesses into writes, effectively removing\r\nthe utility of the RWLock. In its place, threading.RLock is used, which\r\nhas the added benefit of being re-entrant and so simplifying the\r\nimplementation.\r\nhttps://code.djangoproject.com/ticket/28977", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonashaag": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9546", "title": "Fixed #28991 -- Added new BlankFieldListFilter admin filter.", "body": "https://code.djangoproject.com/ticket/28991  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1373178", "body": "doubletest!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1373178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ramiro": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9538", "title": "Fixed #25790 -- Added option to disable column sort in admin changelist.", "body": "https://code.djangoproject.com/ticket/25790", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martinvol": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9533", "title": "Added documentation for User.has_usable_password method", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sliverc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9529", "title": "Fixed #28442 - Fixed nested OuterRefs on primary key", "body": "Avoid exception in AutoField get_prep_value when value is an OuterRef.\r\nhttps://code.djangoproject.com/ticket/28442", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinayinvicible": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9520", "title": "Fixed #28950 -- Made Arrayfield.has_changed compare empty values properly", "body": "https://code.djangoproject.com/ticket/28950", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sphrak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9518", "title": "[WIP] Fixes 28975 -- Allows to skip create extension statement for postgis", "body": "Background: https://code.djangoproject.com/ticket/28975\r\n\r\nThis patch check for the result of `SELECT installed_version FROM pg_available_extensions WHERE name ='postgis';` - if it returns something, the function simply returns since we dont want to create the extension then - however if it doesnt return anything the expected behaivor of autocreating the extension is executed.\r\n\r\nAllows for a bit more freedom when running the migration with a non-superuser db user. However it will still raise:\r\n```\r\ndjango.db.utils.ProgrammingError: permission denied to create extension \"postgis\"\r\nHINT:  Must be superuser to create this extension.\r\n```\r\n\r\n..if the extension does not exist, and the user is not a superuser.\r\n\r\n* [x] logic\r\n* [x] docs\r\n* [ ] tests\r\n* [ ] ready to merge\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "funkybob": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9510", "title": "Fixed #24754 -- Added support for per-app permissions (not tied to a model)", "body": "- Allow Permission.content_type to be Null\r\n- Add settings.GLOBAL_PERMS as a list of permission details\r\n- Update a few places to handle ContentType being None.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jieter": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9480", "title": "Fixed #27398 -- Ignore order of query string params in assertRedirects", "body": "Both url and expected url are normalized so any differences in the\r\nordering of the query string parameters doesn't make the test fail.\r\n\r\nhttps://code.djangoproject.com/ticket/27398", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "weijunji": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9479", "title": "Fixed #28917 Remove paginator's unordered queryset warning for a .none() queryset ", "body": "https://code.djangoproject.com/ticket/28917", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hakib": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9469", "title": "Fixed #28933 -- Custom range-based filter for date_hierarchy", "body": "[Ticket](https://code.djangoproject.com/ticket/28933#ticket)\r\n\r\nThe predicate generated by date_hierarchy makes it very difficult for databases to optimize the query.\r\n\r\nThe following date hierarchy:\r\n```\r\n/admin/app/model?created__year=2017&created__month=12&created__day=16\r\n```\r\n\r\nWill generate the following where clause (PostgreSql):\r\n```\r\nWHERE created between '2017-01-01' and '2017-31-12' and EXTRACT('month', created) = 12 and EXTRACT('day', created) = 16\r\n```\r\n\r\nThe query above will not be able to utilize range based indexes on the date hierarchy column - on big tables this has a significant performance impact.\r\n\r\nThe current implementation of date hierarchy is relying on the \"default\" filtering mechinizem used by Django Admin. **I propose implementing custom filtering for Django Admin that will better utilize it's hierarchical nature and make it more database \"friendly\".**\r\n\r\nInstead of the query above the date hierarchy would generate the following predicates for different levels of the heirarchy:\r\n```\r\n/admin/app/model?created__year=2017&created__month=12&created__day=16 \r\nWHERE created >= '2017-12-16' and created < '2017-12-17'\r\n```\r\n```\r\n/admin/app/model?created__year=2017&created__month=12\r\nWHERE created >= '2017-12-01' and created < '2018-01-01'\r\n```\r\n```\r\n/admin/app/model?created__year=2017\r\nWHERE created >= '2017-01-01' and created < '2018-01-01'\r\n```\r\n\r\nPlease let me know if this is acceptable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snyff": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9464", "title": "Update shell.py", "body": "Not having globals() here prevents people from using python manage.py shell < script.py. More details can be found in https://stackoverflow.com/questions/47748824/very-weird-issue-with-import", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaap3": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9440", "title": "Fixed #28905 - Added optional dependencies to extra_requires", "body": "https://code.djangoproject.com/ticket/28905\r\n\r\nMake it easier to install Django including optional dependencies (like pyscopg2, Pillow etc.) with the correct minimum version by using, i.e.:\r\n\r\n    pip install Django[postgresql,images]", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "passy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5395752", "body": "Why Markdown and not RST like the rest of the docs?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5395829", "body": "From my phone, so please excuse errors. RST is rendered as well. All you\nneed is the .rst extension. I don't think there is any difference in\nappearance.\nOn Apr 28, 2012 12:03 PM, \"James Clemence\" <\nreply@reply.github.com>\nwrote:\n\n> Unlike RST, Github renders READMEs formatted using Markdown, which makes\n> them look cleaner when visiting the front page of the Django repository on\n> GH. Clearly, it doesn't make a difference to viewing the front page in any\n> form other than through the GH web interface, so it may reasonably be\n> considered unnecessary, especially given the rest of the docs being\n> formatted in RST.\n> \n> As the front README is the front-facing text file in the respository,\n> rendered Markdown looks a bit more readable and clean via GH - may be\n> personal preference, so feel free to discard if considered superfluous!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/pull/3#issuecomment-5395782\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jvc26": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5395782", "body": "Unlike RST, Github renders READMEs formatted using Markdown, which makes them look cleaner when visiting the front page of the Django repository on GH. Clearly, it doesn't make a difference to viewing the front page in any form other than through the GH web interface, so it may reasonably be considered unnecessary, especially given the rest of the docs being formatted in RST. \n\nAs the front README is the front-facing text file in the respository, rendered Markdown looks a bit more readable and clean via GH - may be personal preference, so feel free to discard if considered superfluous!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5395850", "body": "Aha - didn't know that! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "niwinz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5396129", "body": "This a repeated pull request - https://github.com/django/django/pull/3\nI think reStructuredText is preferable.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5396129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "remiprev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5396198", "body": "Ah damnit, I didn\u2019t look through _closed_ pull requests :) Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5396198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sindresorhus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5397297", "body": "See #3 and #6\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5397297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "domenkozar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5397666", "body": "Github renders RST aswell, just name it README.rst\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5397666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aaugustin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398291", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398297", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398305", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398307", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398452", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac (specifically, we need an excellent reason to add yet another setting).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398623", "body": "Thanks :) Sorry, we still need to figure out some bits of our ticket management processes after the move to GitHub.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1271058", "body": "There's a syntax error here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1271058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "davehughes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398581", "body": "Here's a Trac ticket for it:\nhttps://code.djangoproject.com/ticket/18229\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "t0m": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398678", "body": "trac ticket: https://code.djangoproject.com/ticket/18230\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "carljm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398824", "body": "Closing this pull request in favor of #6; there's no reason to convert the README to Markdown when github is just as capable of nicely rendering a README.rst, provided we change the file extension, and all the rest of Django's documentation is in reST.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "adrianholovaty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398881", "body": "Thanks, guys. I've just renamed README to README.rst so that GitHub formats it in a nicer way. Looks like there's still some formatting weirdness happening, which we can take care of.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398937", "body": "Thanks, yuvadm. I actually did this in a separate commit before seeing your pull request.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5399040", "body": "Thanks, notcarl. If you just make one tiny formatting change to this, I'll commit it. Specifically, `.get(c,c)` should have a space after the comma.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5399040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5400221", "body": "Thanks, Jason!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5400221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5400514", "body": "Thanks, Matthew!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5400514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272034", "body": "dswarbrick: Ah, interesting -- I can't reproduce but take your word for it. Do you know of another way of getting the hash of the current Git checkout? I'd love to avoid that subprocess call as well.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1272229", "body": "I'm on Python 2.7.1.\n\nI would _love_ to see a pure Python solution. It's gotta be possible somehow. Are you willing to do the research/work?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1277073", "body": "@dswarbrick I think 80 lines of code is overkill for the task at hand. :-/ But go ahead and paste it somewhere so we might be able to use it, or at least learn from it, in some way.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1277073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1295991", "body": "Was this line intended to be checked in? It doesn't have anything to do with context managers.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1295991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1296013", "body": "I think it definitely needs a comment next to it in the source code,\nto explain what that thing is. I'm fine with leaving it in here as\nlong as you add another commit with a comment. (Then feel free to\nclose the ticket!)\n\nOn Sat, May 5, 2012 at 9:35 AM, Claude Paroz\nreply@reply.github.com\nwrote:\n\n> No, sorry. This was intended to be checked in as a different commit as a fix for #17393. Good catch! Do you think that reverting it and recommit separately is useful, or just mark #17393 as fixed would be enough?\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/commit/865cd35c9b357e20994f6c6a51f2ae000ba0a3ee#commitcomment-1296009\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5399229", "body": "Sure thing, glad to help.  Just made the change.\n\nOn 4/28/2012 2:38 PM, Adrian Holovaty wrote:\n\n> Thanks, notcarl. If you just make one tiny formatting change to this, I'll commit it. Specifically, `.get(c,c)` should have a space after the comma.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/pull/2#issuecomment-5399040\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5399229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "akaariai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5400781", "body": "I will try to work on this ticket/pull request - limited time, unlimited amount of work and all that.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5400781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402213", "body": "I am still unsure how I should commit code to github - so here is another pull request fixing Oracle specific stuff.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402452", "body": "All tests haven't passed in a while on Oracle. I'm working on fixes...\n\nAt least one more test passes with the patch applied (test_runner tests, related to character field primary keys having null=True). I haven't done a comparison between full test suite with and without this patch as it takes a lot of time to do that. I can leave the full test suite running for the night if needed.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402498", "body": "Worth a test at least (if not already tested somewhere). It seems this could cause some weird behavior there. Should I close this pull request while I check this? I am not sure how long it will take to check and possibly correct errors caused by this...\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "alex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5402418", "body": "Do all tests still pass on Oracle?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402470", "body": "Ok, FWIW my concern was whether this was needed so the correct INNER vs. OUTER JOINs were generated.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402506", "body": "I think it's fine to leave the pull request open.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "berkerpeksag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1269110", "body": "```\ngit remote add upstream git://github.com/django/django.git\ngit pull --rebase upstream master\n```\n\nwould be better.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1269110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dswarbrick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272003", "body": "This is throwing AttributeError exceptions in ./manage.py runserver:\n\nException AttributeError: AttributeError(\"'_DummyThread' object has no attribute '_Thread__block'\",) in <module 'threading' from '/usr/lib/python2.7/threading.pyc'> ignored\n\n...and fails completely when using gevent-socketio's SocketIOServer. I don't think using subprocess.Popen is advisable in a multithreaded environment - at least not without some additional code.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272017", "body": "Resolved gevent's failure by changing monkey.patch_all() to monkey.patch_all(select=False).\n\nI'm still not a fan of calling subprocesses from multiple threads. I expect webserver logs to start filling up with the DummyThread error mentioned above.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272043", "body": "I suspect the DummyThread error may only afflict Python 2.7 (http://bugs.python.org/issue14308). What version are you testing with?\n\nI actually wrote a patch only hours before aaugustin opened a trac ticket with his patch. My patch obtained the git commit hash using only pure Python code (eg. no subprocess), but since aaugustin needs the timestamp of the commit, rather than the hash, this is a bit trickier to obtain. The Git Community Book describes in reasonable detail the format of the .git directory and pack files, so it would be feasible to get the timestamp without resorting to a subprocess.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272231", "body": "Sure... already on it ;-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272339", "body": "I've just been looking at Dulwich. Obviously it's intended to be a fairly complete implementation of git, which is unnecessary in this case (otherwise Django could simply include a copy of Dulwich). Also, a lot of the class methods appear to raise NotImplementedError().\n\nDrawing upon my earlier patch submission that ascertains the HEAD commit hash, I now have some rough Python code that parses the pack index(es) until it finds the HEAD commit object offset, then extracts the compressed object from the pack file. The Unix timestamp should then be easy to parse from there.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272500", "body": "@adrianholovaty I have the code in a reasonable shape now. It's not quite in a form that can be pulled into Django, rather a little proof of concept script containing various git repo-parsing functions. I don't have a fork of Django currently, and suggest that I simply email or paste the code somewhere, until it can be manipulated into a form suitable for inclusion. Does that work for you?\n\nIt's about 80 lines of code, most of that spent parsing the pack index files and extracting the object from the pack file.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1277082", "body": "@adrianholovaty I wish 80 LoC were an overkill, but parsing a git repo is considerably more involved than parsing a svn repo, due to the fact that a) objects can be either \"loose objects\", or stored in one of several pack files, b) if an object is not stored as a loose object, the pack indices need to be parsed in order to find the offset in the corresponding pack file where the object is located, c) the length of the object uses a somewhat bizarre variable length system, and d) only once the object is located and decompressed, do we actually get the timestamp of the commit. Fun.\n\nAnyway.... here 'tis. http://pastebin.com/r9GLEQHS\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1277082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1297074", "body": "Does this still pass tests? I would have thought that since Django liberally uses unicode, there would be TypeError exceptions where unicode strings were written to a BytesIO object without first being encode('utf_8') 'ed. The old StringIO.StringIO() supported unicode string assignment, whereas cStringIO.StringIO() did not. Since it appears that all of these files attempted to import cStringIO, I'm going to cautiously assume that there were no unicode writes happening. And yes, I do see the byte literal string prefixes, but since Django pulls strings out of DBs as unicode, I wonder if there are any situations where that string content could end up being written to a BytesIO object.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1297074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jamierumbelow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272263", "body": "Just to chip in here; there's a pure Python Git file/repo implementation called [Dulwich](https://launchpad.net/dulwich). It'd be a good place to begin looking for a pure Python solution.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272345", "body": "To satisfy my professional curiosity please mention this issue in the commit message so it's linked... I'd like to have a look to see how you do it :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "claudep": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1296009", "body": "No, sorry. This was intended to be checked in as a different commit as a fix for #17393. Good catch! Do you think that reverting it and recommit separately is useful, or just mark #17393 as fixed would be enough?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1296021", "body": "Pushed in 208e26b39\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1297319", "body": "See https://code.djangoproject.com/ticket/11739. Let's discuss it on the ticket (and yes, I should update the patch on this ticket).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1297319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1351363", "body": "Granted, this is inconsitent. At some point, I think that the csrf processor will simply return a Unicode string, but I'm not there yet. Feel free to create a ticket if you want to track this issue.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1351363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "cyberdelia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1316669", "body": ":star2:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1316669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jezdez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1334052", "body": "Yays!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1334052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1382120", "body": "YES!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1382120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "uruz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1351355", "body": "NOTPROVIDED have b prefix there, but not at django/template/defaulttags.py line 45. Why?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1351355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jpic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1399122", "body": "Before, we could run scripts outside django, by just doing \"import manage\" at the top. Now it's not possible anymore because the django project is setup only if **name** == '**main**'. Is it normal ? Wasn't it cool to just do \"import manage\" and then be able to use the django project in a script ?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1399122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}}, "2": {"jdufresne": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/90ca9412e4d2f0b543938a1fa3fbc43c2c7ac57f", "message": "Removed unnecessary microsecond truncation in SplitDateTimeWidget.\n\nThe microseconds are already truncated by the TimeInput subwidget."}, {"url": "https://api.github.com/repos/django/django/commits/3c34452ab5e5de816357aee99cd2a98a0c7c4e50", "message": "Refs #23668 -- Removed passing default argument of current TZ to make_aware()/naive."}, {"url": "https://api.github.com/repos/django/django/commits/1e81a4b897b6b4343fcae58e9dc1349cc95fade5", "message": "Fixed #28638 -- Made allowed_hosts a required argument of is_safe_url()."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atombrella": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/65728550bd6296871562da02069ddb86e9dd3482", "message": "Refs #28643 -- Added Replace database function."}, {"url": "https://api.github.com/repos/django/django/commits/999fc0687d6b27309e3604602cf996c71b229537", "message": "Added a few tests for smtp EmailBackend."}, {"url": "https://api.github.com/repos/django/django/commits/59b1aaa5a5136702f5b7b2ab718d91128473b9c3", "message": "Added a couple tests for collectstatic."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9543", "title": "Refs #28643 -- Implemented the NullIf SQL function.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vpoulailleau": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/fcd431c6c3159a753f1cc0658cc4b25803ffccc1", "message": "Improved generic detail view error message for when pk or slug is missing."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SShayashi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/27557a7a99ab1ad032c699dc01e114a5e6504b0a", "message": "Fixed #28857 -- Fixed invalid SQL when using Cast with complex expressions on PostgreSQL."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timgraham": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/b902878fd61feb83159a4770ccf327d532963b67", "message": "Doc'd the latest state of the Jenkins pull request builders."}, {"url": "https://api.github.com/repos/django/django/commits/cea5fe94c6bb1b61e791f1375c246566c950b3e3", "message": "Added stub release notes for 1.11.10."}, {"url": "https://api.github.com/repos/django/django/commits/b17c1d53fd7875dd0e3ffcffbfdeff348834b9b0", "message": "Removed unused query log clearing in bulk_create tests."}, {"url": "https://api.github.com/repos/django/django/commits/b9cec9fa1fc50207ab68a59853c851a945c5db5e", "message": "Fixed #29017 -- Updated BaseCommand.leave_locale_alone doc per refs #24073."}, {"url": "https://api.github.com/repos/django/django/commits/4bcec02368b7e5466f64dc17286689b16613c94b", "message": "Added tests for django.forms.formsets.all_valid()."}, {"url": "https://api.github.com/repos/django/django/commits/a8e492bc81fca829f5d270e2d57703c02e58701e", "message": "Removed note in tutorial about bypassing manage.py.\n\nThis isn't relevant for beginners."}, {"url": "https://api.github.com/repos/django/django/commits/7c00f9fb1cc47e1c993f7728e2b592a1be29dd40", "message": "Fixed #29002 -- Corrected cached template loader docs about when it's automatically enabled.\n\nThanks oTree-org for the suggestion."}, {"url": "https://api.github.com/repos/django/django/commits/1c95737ebebb9fe1b59e9de08d4e8cd7226de00d", "message": "Reduced redundancy in DecimalField tests with subTest()."}, {"url": "https://api.github.com/repos/django/django/commits/db9cd1b37e5fee2fdcbf888cb390dc751a8b8150", "message": "Unified construction of WITH SQL in contrib.postgres.indexes."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9593", "title": "Replaced \"trunk\" with \"master branch\" in docs.", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/9498", "title": "Fixed #28858 -- Removed unnecessary \"else\" statements.", "body": "Opinions on this patch are welcome. I'm not sure if it's an improvement.\r\nhttps://code.djangoproject.com/ticket/28858", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PeterW-LWL": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/196c257a230bba8f2f1b2021c383eb2744e8df41", "message": "Fixed typo in docs/topics/i18n/translation.txt."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "klu17": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/4fcd28d442c2fec56f544f99cb658f33f847824c", "message": "Fixed #28881 -- Doc'd that CommonPasswordValidator's password list must be lowercase."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timmartin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/02365d3f38a64a5c2f3e932f23925a381d5bb151", "message": "Fixed #28542 -- Fixed deletion of primary key constraint if the new field is unique."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JayWelborn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/56e590cc0be4d8c8b6fe0967583a6e02d18ee03e", "message": "Fixed #28761 -- Documented how an inline formset's prefix works."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nimn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/9a621edf624a4eb1f1645fca628a9e432f0de776", "message": "Fixed #29016 -- Fixed incorrect foreign key nullification on related instance deletion."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "botondus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/52aa26e6979ba81b00f1593d5ee8c5c73aaa6391", "message": "Fixed #28231 -- Doc'd that QuerySet.bulk_create() casts objs to a list."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "h-chauhan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1b753b2d60230974e7d537ddacbcc1ad23348e7c", "message": "Fixed #28885 -- Fixed hidden content at the bottom of the \"The install worked successfully!\" page for some languages."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "felixxm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/385e6fb352f3cb80d2f72838e08372cb392aaa45", "message": "Removed Query.split_exclude()'s unused prefix argument.\n\nUnused since b4492a8ca4a7ae4daa3a6b03c3d7a845fad74931."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9594", "title": "Refs #20487 -- Added test for querying mixed case fields with common related model.", "body": "https://code.djangoproject.com/ticket/20487", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pope1ni": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1f0813ca7e8a15d10fcdaad1a5d66b7eec28dedb", "message": "Fixed string format specifier for fillfactor in GistIndex."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sir-sigurd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1dce629c038b88a26d02ddc9d5e7f047933581ee", "message": "Refs #29006 -- Simplified handling of SNaN values in DecimalField.validate()."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9548", "title": "Simplified handling of timezone names.", "body": "`tzname()` of correctly implemented `tzinfo` subclass must return string: https://docs.python.org/3/library/datetime.html#datetime.tzinfo.tzname.\r\n\r\n```\r\nIn [190]: class CustomTZ(datetime.tzinfo):\r\n     ...:     def tzname(self, dt):\r\n     ...:         return b'bytes'\r\n     ...: \r\n\r\nIn [191]: datetime.datetime(1, 1, 1, tzinfo=CustomTZ()).tzname()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-191-1f9927218b78> in <module>()\r\n----> 1 datetime.datetime(1, 1, 1, tzinfo=CustomTZ()).tzname()\r\n\r\nTypeError: tzinfo.tzname() must return None or a string, not 'bytes'\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9484", "title": "Used datetime.timezone.utc instead of pytz.utc for better performance.", "body": "Before:\r\n```\r\nIn [2]: %timeit django.utils.timezone.now()\r\n2.77 \u00b5s \u00b1 57.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n```\r\nAfter:\r\n```\r\nIn [2]: %timeit django.utils.timezone.now()\r\n937 ns \u00b1 5.35 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9462", "title": "Fixed #28925 -- Made durations-only expressions work on SQLite and MySQL.", "body": "https://code.djangoproject.com/ticket/28925", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "T-101": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9598", "title": "Added exception raise when form_class not defined in FormMixin", "body": "Not having a form_class defined in FormView and parents will cause an Exception with a nonsensical error message and trace about NoneType not being callable.\r\n\r\nThis will check if form_class is defined, and raise ImproperlyConfigured Exception with a accurate error message for the user to define form_class or override get_form_class()", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "charettes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9597", "title": "Defined immutable queryset/query attributes at the class level.", "body": "Adam and Sergey, since you both worked on speeding up the ORM internals I wanted to know what you think of the following changes.\r\n\r\nDefining immutable default attrs at the class level has the benefit of faster `__init__`, faster `self.__dict__.copy()` during `clone()` and reduced memory usage.\r\n\r\nThis seems to speed up simple and moderately complex queryset/query cloning locally but it's hard to get an accurate picture. We should really try to bring back https://github.com/django/djangobench back to life.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1301669", "body": "@akaariai I can't figure out why [CI is failing](http://ci.djangoproject.com/job/Django%20trunk/database=sqlite3,python=python2.7/lastBuild/console)... Re-ran full test suite and everything pass on sqlite3.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1301699", "body": "Argh... I've got 2.7.3 on my machine. It looks like [python 2.7 shipped with an incorrect implementation](https://regebro.wordpress.com/2010/12/13/python-implementing-rich-comparison-the-correct-way/).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1301718", "body": "Here's the [python bug report](http://bugs.python.org/issue10042).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "shangdahao": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9587", "title": "Fixed #28838 -- Fixed crash on Model.save() after annotate.", "body": "https://code.djangoproject.com/ticket/28838", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bobort": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9583", "title": "Refs #28643 -- Added Ord, Chr, Left, and Right database functions", "body": "This is my first time contributing.  I appreciate advice and guidance.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "doganmeh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9581", "title": "ModelBackend object permissions fallback to model permissions", "body": "This is for the issue:\r\n\r\nhttps://code.djangoproject.com/ticket/20218\r\n\r\nand the discussion:\r\n\r\nhttps://groups.google.com/forum/#!topic/django-developers/MLWfvPPVwDk", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "onkruid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9577", "title": "Refs #28643 -- Added Abs function", "body": "Ticket: [#28643](https://code.djangoproject.com/ticket/28643)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jschneier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9575", "title": "Fixed #28959 -- Fixed 'No, take me back' button on admin's inline popup.", "body": "https://code.djangoproject.com/ticket/28959\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Demo318": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9572", "title": "Change shell launch from django-admin to manage.py", "body": "At this point in the tutorial, project has not configured django-admin to launch commands. Launching the shell through django-admin will produce an error. Launching the shell through manage.py will yield same result, without requiring student to backtrack and configure django-admin. Configuring django-admin is beyond the scope of this tutorial.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stkrp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9560", "title": "Fixed #28960 -- Implemented GEOS.BufferWithStyle.", "body": "Ticket: https://code.djangoproject.com/ticket/28960\r\n\r\nPossible improvement, for which I could not find a place:\r\n```\r\n/// End cap styles\r\nenum EndCapStyle {\r\n\r\n    /// Specifies a round line buffer end cap style.\r\n    CAP_ROUND=1,\r\n\r\n    /// Specifies a flat line buffer end cap style.\r\n    CAP_FLAT=2,\r\n\r\n    /// Specifies a square line buffer end cap style.\r\n    CAP_SQUARE=3\r\n};\r\n\r\n/// Join styles\r\nenum JoinStyle {\r\n    \r\n    /// Specifies a round join style.\r\n    JOIN_ROUND=1,\r\n    \r\n    /// Specifies a mitre join style.\r\n    JOIN_MITRE=2,\r\n    \r\n    /// Specifies a bevel join style.\r\n    JOIN_BEVEL=3\r\n};\r\n```\r\nSource: https://github.com/OSGeo/geos/blob/master/include/geos/operation/buffer/BufferParameters.h#L62", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bquinn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9559", "title": "Fixed #29004 -- Optional database view support for inspectdb command", "body": "Added --include-views option to inspectdb command which creates Django\r\nmodels from database views as well as tables.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grantjenks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9555", "title": "Fixed #28977 -- Changed local memory cache to use LRU-eviction policy.", "body": "The previous locmem cache eviction policy was psuedo-random. Now that\r\nDjango requires Python 3.4 or greater, the collections.OrderedDict can\r\nbe used to impelement an LRU-eviction policy. These changes do the\r\nfollowing:\r\n\r\n1. Add a failing test to validate LRU-eviction.\r\n2. Update the locmem backend to evict keys in LRU-order.\r\n3. Update locmem cache tests regarding locking.\r\n4. Remove RWLock in utils/synch.py as it is no longer used.\r\n\r\nLRU-eviction is a well-regarded policy but turns every read into a kind\r\nof write to the cache: cache keys are moved to the first position in the\r\nOrderedDict when they are retrieved. The previous implementation used a\r\nspecial RWLock which permitted multiple readers while prioritizing a\r\nsingle writer. LRU turns all accesses into writes, effectively removing\r\nthe utility of the RWLock. In its place, threading.RLock is used, which\r\nhas the added benefit of being re-entrant and so simplifying the\r\nimplementation.\r\nhttps://code.djangoproject.com/ticket/28977", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonashaag": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9546", "title": "Fixed #28991 -- Added new BlankFieldListFilter admin filter.", "body": "https://code.djangoproject.com/ticket/28991  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1373178", "body": "doubletest!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1373178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ramiro": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9538", "title": "Fixed #25790 -- Added option to disable column sort in admin changelist.", "body": "https://code.djangoproject.com/ticket/25790", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martinvol": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9533", "title": "Added documentation for User.has_usable_password method", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sliverc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9529", "title": "Fixed #28442 - Fixed nested OuterRefs on primary key", "body": "Avoid exception in AutoField get_prep_value when value is an OuterRef.\r\nhttps://code.djangoproject.com/ticket/28442", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinayinvicible": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9520", "title": "Fixed #28950 -- Made Arrayfield.has_changed compare empty values properly", "body": "https://code.djangoproject.com/ticket/28950", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sphrak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9518", "title": "[WIP] Fixes 28975 -- Allows to skip create extension statement for postgis", "body": "Background: https://code.djangoproject.com/ticket/28975\r\n\r\nThis patch check for the result of `SELECT installed_version FROM pg_available_extensions WHERE name ='postgis';` - if it returns something, the function simply returns since we dont want to create the extension then - however if it doesnt return anything the expected behaivor of autocreating the extension is executed.\r\n\r\nAllows for a bit more freedom when running the migration with a non-superuser db user. However it will still raise:\r\n```\r\ndjango.db.utils.ProgrammingError: permission denied to create extension \"postgis\"\r\nHINT:  Must be superuser to create this extension.\r\n```\r\n\r\n..if the extension does not exist, and the user is not a superuser.\r\n\r\n* [x] logic\r\n* [x] docs\r\n* [ ] tests\r\n* [ ] ready to merge\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "funkybob": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9510", "title": "Fixed #24754 -- Added support for per-app permissions (not tied to a model)", "body": "- Allow Permission.content_type to be Null\r\n- Add settings.GLOBAL_PERMS as a list of permission details\r\n- Update a few places to handle ContentType being None.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jieter": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9480", "title": "Fixed #27398 -- Ignore order of query string params in assertRedirects", "body": "Both url and expected url are normalized so any differences in the\r\nordering of the query string parameters doesn't make the test fail.\r\n\r\nhttps://code.djangoproject.com/ticket/27398", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "weijunji": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9479", "title": "Fixed #28917 Remove paginator's unordered queryset warning for a .none() queryset ", "body": "https://code.djangoproject.com/ticket/28917", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hakib": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9469", "title": "Fixed #28933 -- Custom range-based filter for date_hierarchy", "body": "[Ticket](https://code.djangoproject.com/ticket/28933#ticket)\r\n\r\nThe predicate generated by date_hierarchy makes it very difficult for databases to optimize the query.\r\n\r\nThe following date hierarchy:\r\n```\r\n/admin/app/model?created__year=2017&created__month=12&created__day=16\r\n```\r\n\r\nWill generate the following where clause (PostgreSql):\r\n```\r\nWHERE created between '2017-01-01' and '2017-31-12' and EXTRACT('month', created) = 12 and EXTRACT('day', created) = 16\r\n```\r\n\r\nThe query above will not be able to utilize range based indexes on the date hierarchy column - on big tables this has a significant performance impact.\r\n\r\nThe current implementation of date hierarchy is relying on the \"default\" filtering mechinizem used by Django Admin. **I propose implementing custom filtering for Django Admin that will better utilize it's hierarchical nature and make it more database \"friendly\".**\r\n\r\nInstead of the query above the date hierarchy would generate the following predicates for different levels of the heirarchy:\r\n```\r\n/admin/app/model?created__year=2017&created__month=12&created__day=16 \r\nWHERE created >= '2017-12-16' and created < '2017-12-17'\r\n```\r\n```\r\n/admin/app/model?created__year=2017&created__month=12\r\nWHERE created >= '2017-12-01' and created < '2018-01-01'\r\n```\r\n```\r\n/admin/app/model?created__year=2017\r\nWHERE created >= '2017-01-01' and created < '2018-01-01'\r\n```\r\n\r\nPlease let me know if this is acceptable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snyff": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9464", "title": "Update shell.py", "body": "Not having globals() here prevents people from using python manage.py shell < script.py. More details can be found in https://stackoverflow.com/questions/47748824/very-weird-issue-with-import", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaap3": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9440", "title": "Fixed #28905 - Added optional dependencies to extra_requires", "body": "https://code.djangoproject.com/ticket/28905\r\n\r\nMake it easier to install Django including optional dependencies (like pyscopg2, Pillow etc.) with the correct minimum version by using, i.e.:\r\n\r\n    pip install Django[postgresql,images]", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5399229", "body": "Sure thing, glad to help.  Just made the change.\n\nOn 4/28/2012 2:38 PM, Adrian Holovaty wrote:\n\n> Thanks, notcarl. If you just make one tiny formatting change to this, I'll commit it. Specifically, `.get(c,c)` should have a space after the comma.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/pull/2#issuecomment-5399040\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5399229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6199354", "body": "Added changelog entry to 1.5.txt.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6199354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/25725468", "body": "I'll resurrect this and take a look at it over the weekend. I know there was a lot of merging since the change originally was for an old release, so I'll find out why the tests pass now even without the changes.\n\nThanks :) \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/25725468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/27635887", "body": "Sorry, I'd checked out one commit too far and reverted changes to _doctest.py that had been merged in to the last commit (https://github.com/coagulant/django/commit/020a11fc3f4b9092fd8e20d148693c64aefa059f).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/27635887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/41464858", "body": "> I think that ideally, django would create a json object for each language catalogue and then the javascript client would make an xhr request for that file. Then there would no longer be a need to dynamically create javascript. In that case, that javascript could be bundled with the rest of the applications javascript - eliminating potential load time issues. \n\nDjango docs [warn users about performance considerations of the javascript catalog](https://docs.djangoproject.com/en/dev/topics/i18n/translation/#note-on-performance) already.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/41464858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44262846", "body": "I don't see how it's racially charged... I find the whole idea of changing such established usage very silly as well. I think the master/slave analogy is an accurate one in this case.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44262846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44265000", "body": " #2720 -- it's been reverted, phew.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44265000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44309689", "body": "If you are offended by words in documentation, I suggest you seek help, as that is ridiculous. :-1: \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44309689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44311617", "body": "Retarded. Will look at alternatives whenever i need a framework from now on.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44311617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44378960", "body": "The Master just turned into a Slave..\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44378960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44445748", "body": "I'm glad to see I'm not the only one who dislikes this terminology. I've shrugged it off when others use it but I've also avoided it in my own speech/writing/naming conventions. \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44445748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44505735", "body": "How long until red-black trees are replaced with Native American Endangered Species Person-Oppressed African or African Descendant Person Trees?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44505735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44556356", "body": "@krainboltgreene I bet you i will. $100.000. Terribly written framework anyways.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44556356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44584828", "body": "I disagree with this because, you know, when master tells slave to do something he ought to do it, no objections. While the terms leader/followers are more politically correct, they do not serve as effectively as master/slave.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44584828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44598649", "body": "If only this sort of interest formed around more meaningful issues. Development should be free from political and social obligations and as such this is not much more than an end-user confusing step. On the other hand why not, if it pleases someone - it's just syntax.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44598649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44382190", "body": "Hilarious.  Some idiot is free to do that but an upstream merge?  Hello, anyone?  Is white still white for you and is black still black, as in colours?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44382190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44408298", "body": "Kurtis, do you even realize that you actually _support_ those who profit from those horrible activities by following their moronic misdirecting smokescreen wording?  Those who use to cry \"nazis\" the loudest were found to be ultranazi themselves, those who cry about \"freedom\" use to stomp on it worst, those who cry about \"equal rights\" were never actually intending for us to participate in those.\n@sirMackk  exactly!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44408298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/60726125", "body": "Thanks for updating the pull request!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/60726125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/102536989", "body": "It is very important that we not only get a clean, maintained, stable code, Django support and therefore we do in different ways, using the code, others with money and others just use it.\n\nI want to give her native to design bootstrap support, expect to see more and enhancements.\nHappy day for everyone.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/102536989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/165711507", "body": "thank you for patch :+1: \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/165711507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/261324129", "body": "Why is it necessary to ensure the secret key is a valid Unicode string? Is there some security issue with using truly random byte strings for the Django secret key?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/261324129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/261355923", "body": "I read the ticket and related Github issues. I still have questions. What are those cryptic errors that occur when using bytes? I saw no links to issues pertaining to these cryptic messages.\n\nAlso, I'm not sure of this but there seems to be a belief that keys should be unicode characters and truly random bytes as keys are strange and/or not used in practice. Using truly random byte strings (bytes with values 0 - 255) as keys is not strange at all. In fact, it **is** recommended practice. See also https://tools.ietf.org/html/rfc4086 .\n\nI'm not seeing a compelling argument for ensuring the secret key is a valid unicode string. At worst, you'll be adding an extra burden on your users to base64 encode their secret keys or do some other transformation in order to continue using Django. As it stands, this change does not make it clear what issues are being resolved, offers no enhanced security, implies to users that they go against recommended practice for generating cryptographic keys, and adds an unnecessary burden on your users to generate a proper cryptographic key. I would prefer if this restriction is not accepted and users like myself can continue to use random byte strings as secret keys, with the consideration that it seems this change offers no benefit.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/261355923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ELLIOTTCABLE": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/11743390", "body": "@alex: It was a joke via Twitter. I assumed, incorrectly, that I could delete pull-requests.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/11743390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gebi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/25017278", "body": "@apollo13 seems fine to me!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/25017278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5411519", "body": "This could use a test, and probably a note in the documentation.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5411519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402418", "body": "Do all tests still pass on Oracle?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402470", "body": "Ok, FWIW my concern was whether this was needed so the correct INNER vs. OUTER JOINs were generated.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402506", "body": "I think it's fine to leave the pull request open.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5405827", "body": "Ok now I remember this, unfortunately your analysis exactly matches what mine was.  That is: this decision should be made later, but that's a ton of work.  Patch LGTM feel free to commit!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5405827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5633002", "body": "Looks good to me, Adrian, are you good with this?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5633002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "berkerpeksag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1269110", "body": "```\ngit remote add upstream git://github.com/django/django.git\ngit pull --rebase upstream master\n```\n\nwould be better.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1269110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "aaugustin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1271058", "body": "There's a syntax error here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1271058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "dswarbrick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272003", "body": "This is throwing AttributeError exceptions in ./manage.py runserver:\n\nException AttributeError: AttributeError(\"'_DummyThread' object has no attribute '_Thread__block'\",) in <module 'threading' from '/usr/lib/python2.7/threading.pyc'> ignored\n\n...and fails completely when using gevent-socketio's SocketIOServer. I don't think using subprocess.Popen is advisable in a multithreaded environment - at least not without some additional code.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272017", "body": "Resolved gevent's failure by changing monkey.patch_all() to monkey.patch_all(select=False).\n\nI'm still not a fan of calling subprocesses from multiple threads. I expect webserver logs to start filling up with the DummyThread error mentioned above.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272043", "body": "I suspect the DummyThread error may only afflict Python 2.7 (http://bugs.python.org/issue14308). What version are you testing with?\n\nI actually wrote a patch only hours before aaugustin opened a trac ticket with his patch. My patch obtained the git commit hash using only pure Python code (eg. no subprocess), but since aaugustin needs the timestamp of the commit, rather than the hash, this is a bit trickier to obtain. The Git Community Book describes in reasonable detail the format of the .git directory and pack files, so it would be feasible to get the timestamp without resorting to a subprocess.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272231", "body": "Sure... already on it ;-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272339", "body": "I've just been looking at Dulwich. Obviously it's intended to be a fairly complete implementation of git, which is unnecessary in this case (otherwise Django could simply include a copy of Dulwich). Also, a lot of the class methods appear to raise NotImplementedError().\n\nDrawing upon my earlier patch submission that ascertains the HEAD commit hash, I now have some rough Python code that parses the pack index(es) until it finds the HEAD commit object offset, then extracts the compressed object from the pack file. The Unix timestamp should then be easy to parse from there.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272500", "body": "@adrianholovaty I have the code in a reasonable shape now. It's not quite in a form that can be pulled into Django, rather a little proof of concept script containing various git repo-parsing functions. I don't have a fork of Django currently, and suggest that I simply email or paste the code somewhere, until it can be manipulated into a form suitable for inclusion. Does that work for you?\n\nIt's about 80 lines of code, most of that spent parsing the pack index files and extracting the object from the pack file.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1277082", "body": "@adrianholovaty I wish 80 LoC were an overkill, but parsing a git repo is considerably more involved than parsing a svn repo, due to the fact that a) objects can be either \"loose objects\", or stored in one of several pack files, b) if an object is not stored as a loose object, the pack indices need to be parsed in order to find the offset in the corresponding pack file where the object is located, c) the length of the object uses a somewhat bizarre variable length system, and d) only once the object is located and decompressed, do we actually get the timestamp of the commit. Fun.\n\nAnyway.... here 'tis. http://pastebin.com/r9GLEQHS\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1277082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1297074", "body": "Does this still pass tests? I would have thought that since Django liberally uses unicode, there would be TypeError exceptions where unicode strings were written to a BytesIO object without first being encode('utf_8') 'ed. The old StringIO.StringIO() supported unicode string assignment, whereas cStringIO.StringIO() did not. Since it appears that all of these files attempted to import cStringIO, I'm going to cautiously assume that there were no unicode writes happening. And yes, I do see the byte literal string prefixes, but since Django pulls strings out of DBs as unicode, I wonder if there are any situations where that string content could end up being written to a BytesIO object.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1297074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "adrianholovaty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272034", "body": "dswarbrick: Ah, interesting -- I can't reproduce but take your word for it. Do you know of another way of getting the hash of the current Git checkout? I'd love to avoid that subprocess call as well.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1272229", "body": "I'm on Python 2.7.1.\n\nI would _love_ to see a pure Python solution. It's gotta be possible somehow. Are you willing to do the research/work?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1277073", "body": "@dswarbrick I think 80 lines of code is overkill for the task at hand. :-/ But go ahead and paste it somewhere so we might be able to use it, or at least learn from it, in some way.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1277073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1295991", "body": "Was this line intended to be checked in? It doesn't have anything to do with context managers.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1295991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1296013", "body": "I think it definitely needs a comment next to it in the source code,\nto explain what that thing is. I'm fine with leaving it in here as\nlong as you add another commit with a comment. (Then feel free to\nclose the ticket!)\n\nOn Sat, May 5, 2012 at 9:35 AM, Claude Paroz\nreply@reply.github.com\nwrote:\n\n> No, sorry. This was intended to be checked in as a different commit as a fix for #17393. Good catch! Do you think that reverting it and recommit separately is useful, or just mark #17393 as fixed would be enough?\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/commit/865cd35c9b357e20994f6c6a51f2ae000ba0a3ee#commitcomment-1296009\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jamierumbelow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272263", "body": "Just to chip in here; there's a pure Python Git file/repo implementation called [Dulwich](https://launchpad.net/dulwich). It'd be a good place to begin looking for a pure Python solution.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272345", "body": "To satisfy my professional curiosity please mention this issue in the commit message so it's linked... I'd like to have a look to see how you do it :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "claudep": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1296009", "body": "No, sorry. This was intended to be checked in as a different commit as a fix for #17393. Good catch! Do you think that reverting it and recommit separately is useful, or just mark #17393 as fixed would be enough?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1296021", "body": "Pushed in 208e26b39\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1297319", "body": "See https://code.djangoproject.com/ticket/11739. Let's discuss it on the ticket (and yes, I should update the patch on this ticket).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1297319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1351363", "body": "Granted, this is inconsitent. At some point, I think that the csrf processor will simply return a Unicode string, but I'm not there yet. Feel free to create a ticket if you want to track this issue.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1351363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "cyberdelia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1316669", "body": ":star2:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1316669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jezdez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1334052", "body": "Yays!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1334052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1382120", "body": "YES!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1382120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "uruz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1351355", "body": "NOTPROVIDED have b prefix there, but not at django/template/defaulttags.py line 45. Why?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1351355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jpic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1399122", "body": "Before, we could run scripts outside django, by just doing \"import manage\" at the top. Now it's not possible anymore because the django project is setup only if **name** == '**main**'. Is it normal ? Wasn't it cool to just do \"import manage\" and then be able to use the django project in a script ?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1399122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}}, "3": {"jdufresne": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/90ca9412e4d2f0b543938a1fa3fbc43c2c7ac57f", "message": "Removed unnecessary microsecond truncation in SplitDateTimeWidget.\n\nThe microseconds are already truncated by the TimeInput subwidget."}, {"url": "https://api.github.com/repos/django/django/commits/3c34452ab5e5de816357aee99cd2a98a0c7c4e50", "message": "Refs #23668 -- Removed passing default argument of current TZ to make_aware()/naive."}, {"url": "https://api.github.com/repos/django/django/commits/1e81a4b897b6b4343fcae58e9dc1349cc95fade5", "message": "Fixed #28638 -- Made allowed_hosts a required argument of is_safe_url()."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atombrella": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/65728550bd6296871562da02069ddb86e9dd3482", "message": "Refs #28643 -- Added Replace database function."}, {"url": "https://api.github.com/repos/django/django/commits/999fc0687d6b27309e3604602cf996c71b229537", "message": "Added a few tests for smtp EmailBackend."}, {"url": "https://api.github.com/repos/django/django/commits/59b1aaa5a5136702f5b7b2ab718d91128473b9c3", "message": "Added a couple tests for collectstatic."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9543", "title": "Refs #28643 -- Implemented the NullIf SQL function.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vpoulailleau": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/fcd431c6c3159a753f1cc0658cc4b25803ffccc1", "message": "Improved generic detail view error message for when pk or slug is missing."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SShayashi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/27557a7a99ab1ad032c699dc01e114a5e6504b0a", "message": "Fixed #28857 -- Fixed invalid SQL when using Cast with complex expressions on PostgreSQL."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timgraham": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/b902878fd61feb83159a4770ccf327d532963b67", "message": "Doc'd the latest state of the Jenkins pull request builders."}, {"url": "https://api.github.com/repos/django/django/commits/cea5fe94c6bb1b61e791f1375c246566c950b3e3", "message": "Added stub release notes for 1.11.10."}, {"url": "https://api.github.com/repos/django/django/commits/b17c1d53fd7875dd0e3ffcffbfdeff348834b9b0", "message": "Removed unused query log clearing in bulk_create tests."}, {"url": "https://api.github.com/repos/django/django/commits/b9cec9fa1fc50207ab68a59853c851a945c5db5e", "message": "Fixed #29017 -- Updated BaseCommand.leave_locale_alone doc per refs #24073."}, {"url": "https://api.github.com/repos/django/django/commits/4bcec02368b7e5466f64dc17286689b16613c94b", "message": "Added tests for django.forms.formsets.all_valid()."}, {"url": "https://api.github.com/repos/django/django/commits/a8e492bc81fca829f5d270e2d57703c02e58701e", "message": "Removed note in tutorial about bypassing manage.py.\n\nThis isn't relevant for beginners."}, {"url": "https://api.github.com/repos/django/django/commits/7c00f9fb1cc47e1c993f7728e2b592a1be29dd40", "message": "Fixed #29002 -- Corrected cached template loader docs about when it's automatically enabled.\n\nThanks oTree-org for the suggestion."}, {"url": "https://api.github.com/repos/django/django/commits/1c95737ebebb9fe1b59e9de08d4e8cd7226de00d", "message": "Reduced redundancy in DecimalField tests with subTest()."}, {"url": "https://api.github.com/repos/django/django/commits/db9cd1b37e5fee2fdcbf888cb390dc751a8b8150", "message": "Unified construction of WITH SQL in contrib.postgres.indexes."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9593", "title": "Replaced \"trunk\" with \"master branch\" in docs.", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/9498", "title": "Fixed #28858 -- Removed unnecessary \"else\" statements.", "body": "Opinions on this patch are welcome. I'm not sure if it's an improvement.\r\nhttps://code.djangoproject.com/ticket/28858", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PeterW-LWL": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/196c257a230bba8f2f1b2021c383eb2744e8df41", "message": "Fixed typo in docs/topics/i18n/translation.txt."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "klu17": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/4fcd28d442c2fec56f544f99cb658f33f847824c", "message": "Fixed #28881 -- Doc'd that CommonPasswordValidator's password list must be lowercase."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timmartin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/02365d3f38a64a5c2f3e932f23925a381d5bb151", "message": "Fixed #28542 -- Fixed deletion of primary key constraint if the new field is unique."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JayWelborn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/56e590cc0be4d8c8b6fe0967583a6e02d18ee03e", "message": "Fixed #28761 -- Documented how an inline formset's prefix works."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nimn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/9a621edf624a4eb1f1645fca628a9e432f0de776", "message": "Fixed #29016 -- Fixed incorrect foreign key nullification on related instance deletion."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "botondus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/52aa26e6979ba81b00f1593d5ee8c5c73aaa6391", "message": "Fixed #28231 -- Doc'd that QuerySet.bulk_create() casts objs to a list."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "h-chauhan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1b753b2d60230974e7d537ddacbcc1ad23348e7c", "message": "Fixed #28885 -- Fixed hidden content at the bottom of the \"The install worked successfully!\" page for some languages."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "felixxm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/385e6fb352f3cb80d2f72838e08372cb392aaa45", "message": "Removed Query.split_exclude()'s unused prefix argument.\n\nUnused since b4492a8ca4a7ae4daa3a6b03c3d7a845fad74931."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9594", "title": "Refs #20487 -- Added test for querying mixed case fields with common related model.", "body": "https://code.djangoproject.com/ticket/20487", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pope1ni": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1f0813ca7e8a15d10fcdaad1a5d66b7eec28dedb", "message": "Fixed string format specifier for fillfactor in GistIndex."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sir-sigurd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1dce629c038b88a26d02ddc9d5e7f047933581ee", "message": "Refs #29006 -- Simplified handling of SNaN values in DecimalField.validate()."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9548", "title": "Simplified handling of timezone names.", "body": "`tzname()` of correctly implemented `tzinfo` subclass must return string: https://docs.python.org/3/library/datetime.html#datetime.tzinfo.tzname.\r\n\r\n```\r\nIn [190]: class CustomTZ(datetime.tzinfo):\r\n     ...:     def tzname(self, dt):\r\n     ...:         return b'bytes'\r\n     ...: \r\n\r\nIn [191]: datetime.datetime(1, 1, 1, tzinfo=CustomTZ()).tzname()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-191-1f9927218b78> in <module>()\r\n----> 1 datetime.datetime(1, 1, 1, tzinfo=CustomTZ()).tzname()\r\n\r\nTypeError: tzinfo.tzname() must return None or a string, not 'bytes'\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9484", "title": "Used datetime.timezone.utc instead of pytz.utc for better performance.", "body": "Before:\r\n```\r\nIn [2]: %timeit django.utils.timezone.now()\r\n2.77 \u00b5s \u00b1 57.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n```\r\nAfter:\r\n```\r\nIn [2]: %timeit django.utils.timezone.now()\r\n937 ns \u00b1 5.35 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9462", "title": "Fixed #28925 -- Made durations-only expressions work on SQLite and MySQL.", "body": "https://code.djangoproject.com/ticket/28925", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "T-101": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9598", "title": "Added exception raise when form_class not defined in FormMixin", "body": "Not having a form_class defined in FormView and parents will cause an Exception with a nonsensical error message and trace about NoneType not being callable.\r\n\r\nThis will check if form_class is defined, and raise ImproperlyConfigured Exception with a accurate error message for the user to define form_class or override get_form_class()", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "charettes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9597", "title": "Defined immutable queryset/query attributes at the class level.", "body": "Adam and Sergey, since you both worked on speeding up the ORM internals I wanted to know what you think of the following changes.\r\n\r\nDefining immutable default attrs at the class level has the benefit of faster `__init__`, faster `self.__dict__.copy()` during `clone()` and reduced memory usage.\r\n\r\nThis seems to speed up simple and moderately complex queryset/query cloning locally but it's hard to get an accurate picture. We should really try to bring back https://github.com/django/djangobench back to life.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shangdahao": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9587", "title": "Fixed #28838 -- Fixed crash on Model.save() after annotate.", "body": "https://code.djangoproject.com/ticket/28838", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bobort": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9583", "title": "Refs #28643 -- Added Ord, Chr, Left, and Right database functions", "body": "This is my first time contributing.  I appreciate advice and guidance.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "doganmeh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9581", "title": "ModelBackend object permissions fallback to model permissions", "body": "This is for the issue:\r\n\r\nhttps://code.djangoproject.com/ticket/20218\r\n\r\nand the discussion:\r\n\r\nhttps://groups.google.com/forum/#!topic/django-developers/MLWfvPPVwDk", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "onkruid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9577", "title": "Refs #28643 -- Added Abs function", "body": "Ticket: [#28643](https://code.djangoproject.com/ticket/28643)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jschneier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9575", "title": "Fixed #28959 -- Fixed 'No, take me back' button on admin's inline popup.", "body": "https://code.djangoproject.com/ticket/28959\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Demo318": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9572", "title": "Change shell launch from django-admin to manage.py", "body": "At this point in the tutorial, project has not configured django-admin to launch commands. Launching the shell through django-admin will produce an error. Launching the shell through manage.py will yield same result, without requiring student to backtrack and configure django-admin. Configuring django-admin is beyond the scope of this tutorial.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stkrp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9560", "title": "Fixed #28960 -- Implemented GEOS.BufferWithStyle.", "body": "Ticket: https://code.djangoproject.com/ticket/28960\r\n\r\nPossible improvement, for which I could not find a place:\r\n```\r\n/// End cap styles\r\nenum EndCapStyle {\r\n\r\n    /// Specifies a round line buffer end cap style.\r\n    CAP_ROUND=1,\r\n\r\n    /// Specifies a flat line buffer end cap style.\r\n    CAP_FLAT=2,\r\n\r\n    /// Specifies a square line buffer end cap style.\r\n    CAP_SQUARE=3\r\n};\r\n\r\n/// Join styles\r\nenum JoinStyle {\r\n    \r\n    /// Specifies a round join style.\r\n    JOIN_ROUND=1,\r\n    \r\n    /// Specifies a mitre join style.\r\n    JOIN_MITRE=2,\r\n    \r\n    /// Specifies a bevel join style.\r\n    JOIN_BEVEL=3\r\n};\r\n```\r\nSource: https://github.com/OSGeo/geos/blob/master/include/geos/operation/buffer/BufferParameters.h#L62", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bquinn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9559", "title": "Fixed #29004 -- Optional database view support for inspectdb command", "body": "Added --include-views option to inspectdb command which creates Django\r\nmodels from database views as well as tables.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grantjenks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9555", "title": "Fixed #28977 -- Changed local memory cache to use LRU-eviction policy.", "body": "The previous locmem cache eviction policy was psuedo-random. Now that\r\nDjango requires Python 3.4 or greater, the collections.OrderedDict can\r\nbe used to impelement an LRU-eviction policy. These changes do the\r\nfollowing:\r\n\r\n1. Add a failing test to validate LRU-eviction.\r\n2. Update the locmem backend to evict keys in LRU-order.\r\n3. Update locmem cache tests regarding locking.\r\n4. Remove RWLock in utils/synch.py as it is no longer used.\r\n\r\nLRU-eviction is a well-regarded policy but turns every read into a kind\r\nof write to the cache: cache keys are moved to the first position in the\r\nOrderedDict when they are retrieved. The previous implementation used a\r\nspecial RWLock which permitted multiple readers while prioritizing a\r\nsingle writer. LRU turns all accesses into writes, effectively removing\r\nthe utility of the RWLock. In its place, threading.RLock is used, which\r\nhas the added benefit of being re-entrant and so simplifying the\r\nimplementation.\r\nhttps://code.djangoproject.com/ticket/28977", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonashaag": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9546", "title": "Fixed #28991 -- Added new BlankFieldListFilter admin filter.", "body": "https://code.djangoproject.com/ticket/28991  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ramiro": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9538", "title": "Fixed #25790 -- Added option to disable column sort in admin changelist.", "body": "https://code.djangoproject.com/ticket/25790", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martinvol": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9533", "title": "Added documentation for User.has_usable_password method", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sliverc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9529", "title": "Fixed #28442 - Fixed nested OuterRefs on primary key", "body": "Avoid exception in AutoField get_prep_value when value is an OuterRef.\r\nhttps://code.djangoproject.com/ticket/28442", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinayinvicible": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9520", "title": "Fixed #28950 -- Made Arrayfield.has_changed compare empty values properly", "body": "https://code.djangoproject.com/ticket/28950", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sphrak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9518", "title": "[WIP] Fixes 28975 -- Allows to skip create extension statement for postgis", "body": "Background: https://code.djangoproject.com/ticket/28975\r\n\r\nThis patch check for the result of `SELECT installed_version FROM pg_available_extensions WHERE name ='postgis';` - if it returns something, the function simply returns since we dont want to create the extension then - however if it doesnt return anything the expected behaivor of autocreating the extension is executed.\r\n\r\nAllows for a bit more freedom when running the migration with a non-superuser db user. However it will still raise:\r\n```\r\ndjango.db.utils.ProgrammingError: permission denied to create extension \"postgis\"\r\nHINT:  Must be superuser to create this extension.\r\n```\r\n\r\n..if the extension does not exist, and the user is not a superuser.\r\n\r\n* [x] logic\r\n* [x] docs\r\n* [ ] tests\r\n* [ ] ready to merge\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "funkybob": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9510", "title": "Fixed #24754 -- Added support for per-app permissions (not tied to a model)", "body": "- Allow Permission.content_type to be Null\r\n- Add settings.GLOBAL_PERMS as a list of permission details\r\n- Update a few places to handle ContentType being None.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jieter": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9480", "title": "Fixed #27398 -- Ignore order of query string params in assertRedirects", "body": "Both url and expected url are normalized so any differences in the\r\nordering of the query string parameters doesn't make the test fail.\r\n\r\nhttps://code.djangoproject.com/ticket/27398", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "weijunji": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9479", "title": "Fixed #28917 Remove paginator's unordered queryset warning for a .none() queryset ", "body": "https://code.djangoproject.com/ticket/28917", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hakib": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9469", "title": "Fixed #28933 -- Custom range-based filter for date_hierarchy", "body": "[Ticket](https://code.djangoproject.com/ticket/28933#ticket)\r\n\r\nThe predicate generated by date_hierarchy makes it very difficult for databases to optimize the query.\r\n\r\nThe following date hierarchy:\r\n```\r\n/admin/app/model?created__year=2017&created__month=12&created__day=16\r\n```\r\n\r\nWill generate the following where clause (PostgreSql):\r\n```\r\nWHERE created between '2017-01-01' and '2017-31-12' and EXTRACT('month', created) = 12 and EXTRACT('day', created) = 16\r\n```\r\n\r\nThe query above will not be able to utilize range based indexes on the date hierarchy column - on big tables this has a significant performance impact.\r\n\r\nThe current implementation of date hierarchy is relying on the \"default\" filtering mechinizem used by Django Admin. **I propose implementing custom filtering for Django Admin that will better utilize it's hierarchical nature and make it more database \"friendly\".**\r\n\r\nInstead of the query above the date hierarchy would generate the following predicates for different levels of the heirarchy:\r\n```\r\n/admin/app/model?created__year=2017&created__month=12&created__day=16 \r\nWHERE created >= '2017-12-16' and created < '2017-12-17'\r\n```\r\n```\r\n/admin/app/model?created__year=2017&created__month=12\r\nWHERE created >= '2017-12-01' and created < '2018-01-01'\r\n```\r\n```\r\n/admin/app/model?created__year=2017\r\nWHERE created >= '2017-01-01' and created < '2018-01-01'\r\n```\r\n\r\nPlease let me know if this is acceptable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snyff": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9464", "title": "Update shell.py", "body": "Not having globals() here prevents people from using python manage.py shell < script.py. More details can be found in https://stackoverflow.com/questions/47748824/very-weird-issue-with-import", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaap3": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9440", "title": "Fixed #28905 - Added optional dependencies to extra_requires", "body": "https://code.djangoproject.com/ticket/28905\r\n\r\nMake it easier to install Django including optional dependencies (like pyscopg2, Pillow etc.) with the correct minimum version by using, i.e.:\r\n\r\n    pip install Django[postgresql,images]", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "passy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5395752", "body": "Why Markdown and not RST like the rest of the docs?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5395829", "body": "From my phone, so please excuse errors. RST is rendered as well. All you\nneed is the .rst extension. I don't think there is any difference in\nappearance.\nOn Apr 28, 2012 12:03 PM, \"James Clemence\" <\nreply@reply.github.com>\nwrote:\n\n> Unlike RST, Github renders READMEs formatted using Markdown, which makes\n> them look cleaner when visiting the front page of the Django repository on\n> GH. Clearly, it doesn't make a difference to viewing the front page in any\n> form other than through the GH web interface, so it may reasonably be\n> considered unnecessary, especially given the rest of the docs being\n> formatted in RST.\n> \n> As the front README is the front-facing text file in the respository,\n> rendered Markdown looks a bit more readable and clean via GH - may be\n> personal preference, so feel free to discard if considered superfluous!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/pull/3#issuecomment-5395782\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jvc26": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5395782", "body": "Unlike RST, Github renders READMEs formatted using Markdown, which makes them look cleaner when visiting the front page of the Django repository on GH. Clearly, it doesn't make a difference to viewing the front page in any form other than through the GH web interface, so it may reasonably be considered unnecessary, especially given the rest of the docs being formatted in RST. \n\nAs the front README is the front-facing text file in the respository, rendered Markdown looks a bit more readable and clean via GH - may be personal preference, so feel free to discard if considered superfluous!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5395850", "body": "Aha - didn't know that! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "niwinz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5396129", "body": "This a repeated pull request - https://github.com/django/django/pull/3\nI think reStructuredText is preferable.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5396129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "remiprev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5396198", "body": "Ah damnit, I didn\u2019t look through _closed_ pull requests :) Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5396198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sindresorhus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5397297", "body": "See #3 and #6\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5397297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "domenkozar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5397666", "body": "Github renders RST aswell, just name it README.rst\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5397666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aaugustin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398291", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398297", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398305", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398307", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398452", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac (specifically, we need an excellent reason to add yet another setting).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398623", "body": "Thanks :) Sorry, we still need to figure out some bits of our ticket management processes after the move to GitHub.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "davehughes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398581", "body": "Here's a Trac ticket for it:\nhttps://code.djangoproject.com/ticket/18229\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "t0m": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398678", "body": "trac ticket: https://code.djangoproject.com/ticket/18230\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "carljm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398824", "body": "Closing this pull request in favor of #6; there's no reason to convert the README to Markdown when github is just as capable of nicely rendering a README.rst, provided we change the file extension, and all the rest of Django's documentation is in reST.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "adrianholovaty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398881", "body": "Thanks, guys. I've just renamed README to README.rst so that GitHub formats it in a nicer way. Looks like there's still some formatting weirdness happening, which we can take care of.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398937", "body": "Thanks, yuvadm. I actually did this in a separate commit before seeing your pull request.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5399040", "body": "Thanks, notcarl. If you just make one tiny formatting change to this, I'll commit it. Specifically, `.get(c,c)` should have a space after the comma.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5399040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5400221", "body": "Thanks, Jason!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5400221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5400514", "body": "Thanks, Matthew!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5400514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5399229", "body": "Sure thing, glad to help.  Just made the change.\n\nOn 4/28/2012 2:38 PM, Adrian Holovaty wrote:\n\n> Thanks, notcarl. If you just make one tiny formatting change to this, I'll commit it. Specifically, `.get(c,c)` should have a space after the comma.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/pull/2#issuecomment-5399040\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5399229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "akaariai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5400781", "body": "I will try to work on this ticket/pull request - limited time, unlimited amount of work and all that.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5400781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402213", "body": "I am still unsure how I should commit code to github - so here is another pull request fixing Oracle specific stuff.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402452", "body": "All tests haven't passed in a while on Oracle. I'm working on fixes...\n\nAt least one more test passes with the patch applied (test_runner tests, related to character field primary keys having null=True). I haven't done a comparison between full test suite with and without this patch as it takes a lot of time to do that. I can leave the full test suite running for the night if needed.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402498", "body": "Worth a test at least (if not already tested somewhere). It seems this could cause some weird behavior there. Should I close this pull request while I check this? I am not sure how long it will take to check and possibly correct errors caused by this...\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "alex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5402418", "body": "Do all tests still pass on Oracle?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402470", "body": "Ok, FWIW my concern was whether this was needed so the correct INNER vs. OUTER JOINs were generated.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402506", "body": "I think it's fine to leave the pull request open.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}}, "4": {"jdufresne": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/90ca9412e4d2f0b543938a1fa3fbc43c2c7ac57f", "message": "Removed unnecessary microsecond truncation in SplitDateTimeWidget.\n\nThe microseconds are already truncated by the TimeInput subwidget."}, {"url": "https://api.github.com/repos/django/django/commits/3c34452ab5e5de816357aee99cd2a98a0c7c4e50", "message": "Refs #23668 -- Removed passing default argument of current TZ to make_aware()/naive."}, {"url": "https://api.github.com/repos/django/django/commits/1e81a4b897b6b4343fcae58e9dc1349cc95fade5", "message": "Fixed #28638 -- Made allowed_hosts a required argument of is_safe_url()."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atombrella": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/65728550bd6296871562da02069ddb86e9dd3482", "message": "Refs #28643 -- Added Replace database function."}, {"url": "https://api.github.com/repos/django/django/commits/999fc0687d6b27309e3604602cf996c71b229537", "message": "Added a few tests for smtp EmailBackend."}, {"url": "https://api.github.com/repos/django/django/commits/59b1aaa5a5136702f5b7b2ab718d91128473b9c3", "message": "Added a couple tests for collectstatic."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9543", "title": "Refs #28643 -- Implemented the NullIf SQL function.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vpoulailleau": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/fcd431c6c3159a753f1cc0658cc4b25803ffccc1", "message": "Improved generic detail view error message for when pk or slug is missing."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SShayashi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/27557a7a99ab1ad032c699dc01e114a5e6504b0a", "message": "Fixed #28857 -- Fixed invalid SQL when using Cast with complex expressions on PostgreSQL."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timgraham": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/b902878fd61feb83159a4770ccf327d532963b67", "message": "Doc'd the latest state of the Jenkins pull request builders."}, {"url": "https://api.github.com/repos/django/django/commits/cea5fe94c6bb1b61e791f1375c246566c950b3e3", "message": "Added stub release notes for 1.11.10."}, {"url": "https://api.github.com/repos/django/django/commits/b17c1d53fd7875dd0e3ffcffbfdeff348834b9b0", "message": "Removed unused query log clearing in bulk_create tests."}, {"url": "https://api.github.com/repos/django/django/commits/b9cec9fa1fc50207ab68a59853c851a945c5db5e", "message": "Fixed #29017 -- Updated BaseCommand.leave_locale_alone doc per refs #24073."}, {"url": "https://api.github.com/repos/django/django/commits/4bcec02368b7e5466f64dc17286689b16613c94b", "message": "Added tests for django.forms.formsets.all_valid()."}, {"url": "https://api.github.com/repos/django/django/commits/a8e492bc81fca829f5d270e2d57703c02e58701e", "message": "Removed note in tutorial about bypassing manage.py.\n\nThis isn't relevant for beginners."}, {"url": "https://api.github.com/repos/django/django/commits/7c00f9fb1cc47e1c993f7728e2b592a1be29dd40", "message": "Fixed #29002 -- Corrected cached template loader docs about when it's automatically enabled.\n\nThanks oTree-org for the suggestion."}, {"url": "https://api.github.com/repos/django/django/commits/1c95737ebebb9fe1b59e9de08d4e8cd7226de00d", "message": "Reduced redundancy in DecimalField tests with subTest()."}, {"url": "https://api.github.com/repos/django/django/commits/db9cd1b37e5fee2fdcbf888cb390dc751a8b8150", "message": "Unified construction of WITH SQL in contrib.postgres.indexes."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9593", "title": "Replaced \"trunk\" with \"master branch\" in docs.", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/9498", "title": "Fixed #28858 -- Removed unnecessary \"else\" statements.", "body": "Opinions on this patch are welcome. I'm not sure if it's an improvement.\r\nhttps://code.djangoproject.com/ticket/28858", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PeterW-LWL": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/196c257a230bba8f2f1b2021c383eb2744e8df41", "message": "Fixed typo in docs/topics/i18n/translation.txt."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "klu17": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/4fcd28d442c2fec56f544f99cb658f33f847824c", "message": "Fixed #28881 -- Doc'd that CommonPasswordValidator's password list must be lowercase."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timmartin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/02365d3f38a64a5c2f3e932f23925a381d5bb151", "message": "Fixed #28542 -- Fixed deletion of primary key constraint if the new field is unique."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JayWelborn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/56e590cc0be4d8c8b6fe0967583a6e02d18ee03e", "message": "Fixed #28761 -- Documented how an inline formset's prefix works."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nimn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/9a621edf624a4eb1f1645fca628a9e432f0de776", "message": "Fixed #29016 -- Fixed incorrect foreign key nullification on related instance deletion."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "botondus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/52aa26e6979ba81b00f1593d5ee8c5c73aaa6391", "message": "Fixed #28231 -- Doc'd that QuerySet.bulk_create() casts objs to a list."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "h-chauhan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1b753b2d60230974e7d537ddacbcc1ad23348e7c", "message": "Fixed #28885 -- Fixed hidden content at the bottom of the \"The install worked successfully!\" page for some languages."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "felixxm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/385e6fb352f3cb80d2f72838e08372cb392aaa45", "message": "Removed Query.split_exclude()'s unused prefix argument.\n\nUnused since b4492a8ca4a7ae4daa3a6b03c3d7a845fad74931."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9594", "title": "Refs #20487 -- Added test for querying mixed case fields with common related model.", "body": "https://code.djangoproject.com/ticket/20487", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pope1ni": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1f0813ca7e8a15d10fcdaad1a5d66b7eec28dedb", "message": "Fixed string format specifier for fillfactor in GistIndex."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sir-sigurd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1dce629c038b88a26d02ddc9d5e7f047933581ee", "message": "Refs #29006 -- Simplified handling of SNaN values in DecimalField.validate()."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9548", "title": "Simplified handling of timezone names.", "body": "`tzname()` of correctly implemented `tzinfo` subclass must return string: https://docs.python.org/3/library/datetime.html#datetime.tzinfo.tzname.\r\n\r\n```\r\nIn [190]: class CustomTZ(datetime.tzinfo):\r\n     ...:     def tzname(self, dt):\r\n     ...:         return b'bytes'\r\n     ...: \r\n\r\nIn [191]: datetime.datetime(1, 1, 1, tzinfo=CustomTZ()).tzname()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-191-1f9927218b78> in <module>()\r\n----> 1 datetime.datetime(1, 1, 1, tzinfo=CustomTZ()).tzname()\r\n\r\nTypeError: tzinfo.tzname() must return None or a string, not 'bytes'\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9484", "title": "Used datetime.timezone.utc instead of pytz.utc for better performance.", "body": "Before:\r\n```\r\nIn [2]: %timeit django.utils.timezone.now()\r\n2.77 \u00b5s \u00b1 57.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n```\r\nAfter:\r\n```\r\nIn [2]: %timeit django.utils.timezone.now()\r\n937 ns \u00b1 5.35 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9462", "title": "Fixed #28925 -- Made durations-only expressions work on SQLite and MySQL.", "body": "https://code.djangoproject.com/ticket/28925", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "priyanshsaxena": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9600", "title": "Added error-message for too long PostgreSQL database name Refs #29015", "body": "PostgreSQL imposes a limit of 63 bytes for all identifiers by default.\r\nAdded a 'NotSupportedError' if the NAME value in settings.DATABASES\r\nis longer than 63 characters.\r\nUses 'len' method instead of 'sys.getsizeof' for getting the size.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "T-101": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9598", "title": "Added exception raise when form_class not defined in FormMixin", "body": "Not having a form_class defined in FormView and parents will cause an Exception with a nonsensical error message and trace about NoneType not being callable.\r\n\r\nThis will check if form_class is defined, and raise ImproperlyConfigured Exception with a accurate error message for the user to define form_class or override get_form_class()", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "charettes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9597", "title": "Defined immutable queryset/query attributes at the class level.", "body": "Adam and Sergey, since you both worked on speeding up the ORM internals I wanted to know what you think of the following changes.\r\n\r\nDefining immutable default attrs at the class level has the benefit of faster `__init__`, faster `self.__dict__.copy()` during `clone()` and reduced memory usage.\r\n\r\nThis seems to speed up simple and moderately complex queryset/query cloning locally but it's hard to get an accurate picture. We should really try to bring back https://github.com/django/djangobench back to life.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1301669", "body": "@akaariai I can't figure out why [CI is failing](http://ci.djangoproject.com/job/Django%20trunk/database=sqlite3,python=python2.7/lastBuild/console)... Re-ran full test suite and everything pass on sqlite3.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1301699", "body": "Argh... I've got 2.7.3 on my machine. It looks like [python 2.7 shipped with an incorrect implementation](https://regebro.wordpress.com/2010/12/13/python-implementing-rich-comparison-the-correct-way/).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1301718", "body": "Here's the [python bug report](http://bugs.python.org/issue10042).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "shangdahao": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9587", "title": "Fixed #28838 -- Fixed crash on Model.save() after annotate.", "body": "https://code.djangoproject.com/ticket/28838", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bobort": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9583", "title": "Refs #28643 -- Added Ord, Chr, Left, and Right database functions", "body": "This is my first time contributing.  I appreciate advice and guidance.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "doganmeh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9581", "title": "ModelBackend object permissions fallback to model permissions", "body": "This is for the issue:\r\n\r\nhttps://code.djangoproject.com/ticket/20218\r\n\r\nand the discussion:\r\n\r\nhttps://groups.google.com/forum/#!topic/django-developers/MLWfvPPVwDk", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "onkruid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9577", "title": "Refs #28643 -- Added Abs function", "body": "Ticket: [#28643](https://code.djangoproject.com/ticket/28643)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jschneier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9575", "title": "Fixed #28959 -- Fixed 'No, take me back' button on admin's inline popup.", "body": "https://code.djangoproject.com/ticket/28959\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Demo318": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9572", "title": "Change shell launch from django-admin to manage.py", "body": "At this point in the tutorial, project has not configured django-admin to launch commands. Launching the shell through django-admin will produce an error. Launching the shell through manage.py will yield same result, without requiring student to backtrack and configure django-admin. Configuring django-admin is beyond the scope of this tutorial.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stkrp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9560", "title": "Fixed #28960 -- Implemented GEOS.BufferWithStyle.", "body": "Ticket: https://code.djangoproject.com/ticket/28960\r\n\r\nPossible improvement, for which I could not find a place:\r\n```\r\n/// End cap styles\r\nenum EndCapStyle {\r\n\r\n    /// Specifies a round line buffer end cap style.\r\n    CAP_ROUND=1,\r\n\r\n    /// Specifies a flat line buffer end cap style.\r\n    CAP_FLAT=2,\r\n\r\n    /// Specifies a square line buffer end cap style.\r\n    CAP_SQUARE=3\r\n};\r\n\r\n/// Join styles\r\nenum JoinStyle {\r\n    \r\n    /// Specifies a round join style.\r\n    JOIN_ROUND=1,\r\n    \r\n    /// Specifies a mitre join style.\r\n    JOIN_MITRE=2,\r\n    \r\n    /// Specifies a bevel join style.\r\n    JOIN_BEVEL=3\r\n};\r\n```\r\nSource: https://github.com/OSGeo/geos/blob/master/include/geos/operation/buffer/BufferParameters.h#L62", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bquinn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9559", "title": "Fixed #29004 -- Optional database view support for inspectdb command", "body": "Added --include-views option to inspectdb command which creates Django\r\nmodels from database views as well as tables.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grantjenks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9555", "title": "Fixed #28977 -- Changed local memory cache to use LRU-eviction policy.", "body": "The previous locmem cache eviction policy was psuedo-random. Now that\r\nDjango requires Python 3.4 or greater, the collections.OrderedDict can\r\nbe used to impelement an LRU-eviction policy. These changes do the\r\nfollowing:\r\n\r\n1. Add a failing test to validate LRU-eviction.\r\n2. Update the locmem backend to evict keys in LRU-order.\r\n3. Update locmem cache tests regarding locking.\r\n4. Remove RWLock in utils/synch.py as it is no longer used.\r\n\r\nLRU-eviction is a well-regarded policy but turns every read into a kind\r\nof write to the cache: cache keys are moved to the first position in the\r\nOrderedDict when they are retrieved. The previous implementation used a\r\nspecial RWLock which permitted multiple readers while prioritizing a\r\nsingle writer. LRU turns all accesses into writes, effectively removing\r\nthe utility of the RWLock. In its place, threading.RLock is used, which\r\nhas the added benefit of being re-entrant and so simplifying the\r\nimplementation.\r\nhttps://code.djangoproject.com/ticket/28977", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonashaag": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9546", "title": "Fixed #28991 -- Added new BlankFieldListFilter admin filter.", "body": "https://code.djangoproject.com/ticket/28991  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1373178", "body": "doubletest!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1373178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ramiro": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9538", "title": "Fixed #25790 -- Added option to disable column sort in admin changelist.", "body": "https://code.djangoproject.com/ticket/25790", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martinvol": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9533", "title": "Added documentation for User.has_usable_password method", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sliverc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9529", "title": "Fixed #28442 - Fixed nested OuterRefs on primary key", "body": "Avoid exception in AutoField get_prep_value when value is an OuterRef.\r\nhttps://code.djangoproject.com/ticket/28442", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinayinvicible": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9520", "title": "Fixed #28950 -- Made Arrayfield.has_changed compare empty values properly", "body": "https://code.djangoproject.com/ticket/28950", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sphrak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9518", "title": "[WIP] Fixes 28975 -- Allows to skip create extension statement for postgis", "body": "Background: https://code.djangoproject.com/ticket/28975\r\n\r\nThis patch check for the result of `SELECT installed_version FROM pg_available_extensions WHERE name ='postgis';` - if it returns something, the function simply returns since we dont want to create the extension then - however if it doesnt return anything the expected behaivor of autocreating the extension is executed.\r\n\r\nAllows for a bit more freedom when running the migration with a non-superuser db user. However it will still raise:\r\n```\r\ndjango.db.utils.ProgrammingError: permission denied to create extension \"postgis\"\r\nHINT:  Must be superuser to create this extension.\r\n```\r\n\r\n..if the extension does not exist, and the user is not a superuser.\r\n\r\n* [x] logic\r\n* [x] docs\r\n* [ ] tests\r\n* [ ] ready to merge\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "funkybob": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9510", "title": "Fixed #24754 -- Added support for per-app permissions (not tied to a model)", "body": "- Allow Permission.content_type to be Null\r\n- Add settings.GLOBAL_PERMS as a list of permission details\r\n- Update a few places to handle ContentType being None.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jieter": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9480", "title": "Fixed #27398 -- Ignore order of query string params in assertRedirects", "body": "Both url and expected url are normalized so any differences in the\r\nordering of the query string parameters doesn't make the test fail.\r\n\r\nhttps://code.djangoproject.com/ticket/27398", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "weijunji": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9479", "title": "Fixed #28917 Remove paginator's unordered queryset warning for a .none() queryset ", "body": "https://code.djangoproject.com/ticket/28917", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hakib": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9469", "title": "Fixed #28933 -- Custom range-based filter for date_hierarchy", "body": "[Ticket](https://code.djangoproject.com/ticket/28933#ticket)\r\n\r\nThe predicate generated by date_hierarchy makes it very difficult for databases to optimize the query.\r\n\r\nThe following date hierarchy:\r\n```\r\n/admin/app/model?created__year=2017&created__month=12&created__day=16\r\n```\r\n\r\nWill generate the following where clause (PostgreSql):\r\n```\r\nWHERE created between '2017-01-01' and '2017-31-12' and EXTRACT('month', created) = 12 and EXTRACT('day', created) = 16\r\n```\r\n\r\nThe query above will not be able to utilize range based indexes on the date hierarchy column - on big tables this has a significant performance impact.\r\n\r\nThe current implementation of date hierarchy is relying on the \"default\" filtering mechinizem used by Django Admin. **I propose implementing custom filtering for Django Admin that will better utilize it's hierarchical nature and make it more database \"friendly\".**\r\n\r\nInstead of the query above the date hierarchy would generate the following predicates for different levels of the heirarchy:\r\n```\r\n/admin/app/model?created__year=2017&created__month=12&created__day=16 \r\nWHERE created >= '2017-12-16' and created < '2017-12-17'\r\n```\r\n```\r\n/admin/app/model?created__year=2017&created__month=12\r\nWHERE created >= '2017-12-01' and created < '2018-01-01'\r\n```\r\n```\r\n/admin/app/model?created__year=2017\r\nWHERE created >= '2017-01-01' and created < '2018-01-01'\r\n```\r\n\r\nPlease let me know if this is acceptable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snyff": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9464", "title": "Update shell.py", "body": "Not having globals() here prevents people from using python manage.py shell < script.py. More details can be found in https://stackoverflow.com/questions/47748824/very-weird-issue-with-import", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5399229", "body": "Sure thing, glad to help.  Just made the change.\n\nOn 4/28/2012 2:38 PM, Adrian Holovaty wrote:\n\n> Thanks, notcarl. If you just make one tiny formatting change to this, I'll commit it. Specifically, `.get(c,c)` should have a space after the comma.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/pull/2#issuecomment-5399040\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5399229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6199354", "body": "Added changelog entry to 1.5.txt.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6199354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/25725468", "body": "I'll resurrect this and take a look at it over the weekend. I know there was a lot of merging since the change originally was for an old release, so I'll find out why the tests pass now even without the changes.\n\nThanks :) \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/25725468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/27635887", "body": "Sorry, I'd checked out one commit too far and reverted changes to _doctest.py that had been merged in to the last commit (https://github.com/coagulant/django/commit/020a11fc3f4b9092fd8e20d148693c64aefa059f).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/27635887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/41464858", "body": "> I think that ideally, django would create a json object for each language catalogue and then the javascript client would make an xhr request for that file. Then there would no longer be a need to dynamically create javascript. In that case, that javascript could be bundled with the rest of the applications javascript - eliminating potential load time issues. \n\nDjango docs [warn users about performance considerations of the javascript catalog](https://docs.djangoproject.com/en/dev/topics/i18n/translation/#note-on-performance) already.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/41464858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44262846", "body": "I don't see how it's racially charged... I find the whole idea of changing such established usage very silly as well. I think the master/slave analogy is an accurate one in this case.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44262846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44265000", "body": " #2720 -- it's been reverted, phew.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44265000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44309689", "body": "If you are offended by words in documentation, I suggest you seek help, as that is ridiculous. :-1: \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44309689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44311617", "body": "Retarded. Will look at alternatives whenever i need a framework from now on.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44311617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44378960", "body": "The Master just turned into a Slave..\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44378960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44445748", "body": "I'm glad to see I'm not the only one who dislikes this terminology. I've shrugged it off when others use it but I've also avoided it in my own speech/writing/naming conventions. \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44445748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44505735", "body": "How long until red-black trees are replaced with Native American Endangered Species Person-Oppressed African or African Descendant Person Trees?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44505735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44556356", "body": "@krainboltgreene I bet you i will. $100.000. Terribly written framework anyways.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44556356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44584828", "body": "I disagree with this because, you know, when master tells slave to do something he ought to do it, no objections. While the terms leader/followers are more politically correct, they do not serve as effectively as master/slave.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44584828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44598649", "body": "If only this sort of interest formed around more meaningful issues. Development should be free from political and social obligations and as such this is not much more than an end-user confusing step. On the other hand why not, if it pleases someone - it's just syntax.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44598649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44382190", "body": "Hilarious.  Some idiot is free to do that but an upstream merge?  Hello, anyone?  Is white still white for you and is black still black, as in colours?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44382190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44408298", "body": "Kurtis, do you even realize that you actually _support_ those who profit from those horrible activities by following their moronic misdirecting smokescreen wording?  Those who use to cry \"nazis\" the loudest were found to be ultranazi themselves, those who cry about \"freedom\" use to stomp on it worst, those who cry about \"equal rights\" were never actually intending for us to participate in those.\n@sirMackk  exactly!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44408298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/60726125", "body": "Thanks for updating the pull request!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/60726125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/102536989", "body": "It is very important that we not only get a clean, maintained, stable code, Django support and therefore we do in different ways, using the code, others with money and others just use it.\n\nI want to give her native to design bootstrap support, expect to see more and enhancements.\nHappy day for everyone.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/102536989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/165711507", "body": "thank you for patch :+1: \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/165711507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/261324129", "body": "Why is it necessary to ensure the secret key is a valid Unicode string? Is there some security issue with using truly random byte strings for the Django secret key?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/261324129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/261355923", "body": "I read the ticket and related Github issues. I still have questions. What are those cryptic errors that occur when using bytes? I saw no links to issues pertaining to these cryptic messages.\n\nAlso, I'm not sure of this but there seems to be a belief that keys should be unicode characters and truly random bytes as keys are strange and/or not used in practice. Using truly random byte strings (bytes with values 0 - 255) as keys is not strange at all. In fact, it **is** recommended practice. See also https://tools.ietf.org/html/rfc4086 .\n\nI'm not seeing a compelling argument for ensuring the secret key is a valid unicode string. At worst, you'll be adding an extra burden on your users to base64 encode their secret keys or do some other transformation in order to continue using Django. As it stands, this change does not make it clear what issues are being resolved, offers no enhanced security, implies to users that they go against recommended practice for generating cryptographic keys, and adds an unnecessary burden on your users to generate a proper cryptographic key. I would prefer if this restriction is not accepted and users like myself can continue to use random byte strings as secret keys, with the consideration that it seems this change offers no benefit.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/261355923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ELLIOTTCABLE": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/11743390", "body": "@alex: It was a joke via Twitter. I assumed, incorrectly, that I could delete pull-requests.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/11743390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gebi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/25017278", "body": "@apollo13 seems fine to me!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/25017278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5411519", "body": "This could use a test, and probably a note in the documentation.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5411519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402418", "body": "Do all tests still pass on Oracle?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402470", "body": "Ok, FWIW my concern was whether this was needed so the correct INNER vs. OUTER JOINs were generated.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402506", "body": "I think it's fine to leave the pull request open.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5405827", "body": "Ok now I remember this, unfortunately your analysis exactly matches what mine was.  That is: this decision should be made later, but that's a ton of work.  Patch LGTM feel free to commit!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5405827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5633002", "body": "Looks good to me, Adrian, are you good with this?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5633002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/749018", "body": "It's generally the style of the Django tests to do:\n\n```\nself.assertFalse(..., msg=\"foo\")\n```\n\nrather than have the if statement (there may even be an assertNotContains or similar, that'd be even more optimal)..\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/749018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/749019", "body": "No need to save the user here, we only needed to test the one assert.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/749019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/749024", "body": "Test cases are isolated, objects created in one aren't visible to another.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/749024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/749031", "body": "It doesn't matter, the semantics are that the changes you make aren't visible to other tests.  Remove these lines and try running all the tests, you'll see!\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/749031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/753279", "body": "This list should be alphabetized, if you can put your name in the right place I'll go ahead an merge it in.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/753279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/753288", "body": "Quote is misaligned by one character.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/753288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/768828", "body": "You don't need this, it's just `frozenset`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/768828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/870528", "body": "Is exec actually used anywhere besides in this file?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/870528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/870531", "body": "This section should probably note that using the various variables in the py3 module is preferrable to branching on `if PY3`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/870531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/873377", "body": "If we don't actually need exec for django why don't we simplify this implementation and give it some name so it won't be public (e.g. `_exec`).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/873377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1180400", "body": "`False` shouldn't be the default, use `None` instead.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1180400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1180406", "body": "After `interface` is `None` by default you can skip this check.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1180406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1307510", "body": "Can you reformat this as:\n\n``` rest\n.. note::\n    <content>\n```\n\nAlso, \"a model named `Author`\"\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1307510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1307511", "body": "This text is a little confusing, I don't have any specific suggestions to improve it though :/  Also applies to the similar text below.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1307511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1307512", "body": "Same thing about note formatting as above.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1307512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1307518", "body": "Should be `.. classmethod::`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1307518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1307519", "body": "No extra space.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1307519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1376262", "body": "This and the subsequent ones can actually use `self.assertQuerysetEqual` (https://docs.djangoproject.com/en/1.4/topics/testing/#django.test.TestCase.assertQuerysetEqual)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1376262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1554977", "body": "These links are wrong, the methods are on `QuerySet`, not `Model`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1554977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1613733", "body": "Use `get_field_by_name('username')[0]`, `get_field` is O(n) whereas `get_field_by_name` is O(1). No joke.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1613733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1613737", "body": "+1 @jacobian \n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1613737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624264", "body": "Drop the parens (sorry, style nit of mine)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624267", "body": "Should this really be a default in the base?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624273", "body": "This probably shouldn't block this patch, but I'm starting to think it'd be cool, and seriously help readability if we replaced all these SQL strings with unmanaged models, and just used the ORM for querying...\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624284", "body": "Constraints and indexes really aren't the same things, does it really make sense to have them in the same method?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624293", "body": "Is SchemaEditor the right name for this? most of the other backend things have less action oriented names.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624787", "body": "Triple quotes for all docstrings please.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624792", "body": "Why does this have its own logging, instead of the usual query logging?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624804", "body": "This seems like it should be the caller's responsibility (same applies to create_model)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "berkerpeksag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1269110", "body": "```\ngit remote add upstream git://github.com/django/django.git\ngit pull --rebase upstream master\n```\n\nwould be better.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1269110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "aaugustin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1271058", "body": "There's a syntax error here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1271058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "dswarbrick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272003", "body": "This is throwing AttributeError exceptions in ./manage.py runserver:\n\nException AttributeError: AttributeError(\"'_DummyThread' object has no attribute '_Thread__block'\",) in <module 'threading' from '/usr/lib/python2.7/threading.pyc'> ignored\n\n...and fails completely when using gevent-socketio's SocketIOServer. I don't think using subprocess.Popen is advisable in a multithreaded environment - at least not without some additional code.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272017", "body": "Resolved gevent's failure by changing monkey.patch_all() to monkey.patch_all(select=False).\n\nI'm still not a fan of calling subprocesses from multiple threads. I expect webserver logs to start filling up with the DummyThread error mentioned above.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272043", "body": "I suspect the DummyThread error may only afflict Python 2.7 (http://bugs.python.org/issue14308). What version are you testing with?\n\nI actually wrote a patch only hours before aaugustin opened a trac ticket with his patch. My patch obtained the git commit hash using only pure Python code (eg. no subprocess), but since aaugustin needs the timestamp of the commit, rather than the hash, this is a bit trickier to obtain. The Git Community Book describes in reasonable detail the format of the .git directory and pack files, so it would be feasible to get the timestamp without resorting to a subprocess.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272231", "body": "Sure... already on it ;-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272339", "body": "I've just been looking at Dulwich. Obviously it's intended to be a fairly complete implementation of git, which is unnecessary in this case (otherwise Django could simply include a copy of Dulwich). Also, a lot of the class methods appear to raise NotImplementedError().\n\nDrawing upon my earlier patch submission that ascertains the HEAD commit hash, I now have some rough Python code that parses the pack index(es) until it finds the HEAD commit object offset, then extracts the compressed object from the pack file. The Unix timestamp should then be easy to parse from there.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272500", "body": "@adrianholovaty I have the code in a reasonable shape now. It's not quite in a form that can be pulled into Django, rather a little proof of concept script containing various git repo-parsing functions. I don't have a fork of Django currently, and suggest that I simply email or paste the code somewhere, until it can be manipulated into a form suitable for inclusion. Does that work for you?\n\nIt's about 80 lines of code, most of that spent parsing the pack index files and extracting the object from the pack file.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1277082", "body": "@adrianholovaty I wish 80 LoC were an overkill, but parsing a git repo is considerably more involved than parsing a svn repo, due to the fact that a) objects can be either \"loose objects\", or stored in one of several pack files, b) if an object is not stored as a loose object, the pack indices need to be parsed in order to find the offset in the corresponding pack file where the object is located, c) the length of the object uses a somewhat bizarre variable length system, and d) only once the object is located and decompressed, do we actually get the timestamp of the commit. Fun.\n\nAnyway.... here 'tis. http://pastebin.com/r9GLEQHS\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1277082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1297074", "body": "Does this still pass tests? I would have thought that since Django liberally uses unicode, there would be TypeError exceptions where unicode strings were written to a BytesIO object without first being encode('utf_8') 'ed. The old StringIO.StringIO() supported unicode string assignment, whereas cStringIO.StringIO() did not. Since it appears that all of these files attempted to import cStringIO, I'm going to cautiously assume that there were no unicode writes happening. And yes, I do see the byte literal string prefixes, but since Django pulls strings out of DBs as unicode, I wonder if there are any situations where that string content could end up being written to a BytesIO object.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1297074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "adrianholovaty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272034", "body": "dswarbrick: Ah, interesting -- I can't reproduce but take your word for it. Do you know of another way of getting the hash of the current Git checkout? I'd love to avoid that subprocess call as well.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1272229", "body": "I'm on Python 2.7.1.\n\nI would _love_ to see a pure Python solution. It's gotta be possible somehow. Are you willing to do the research/work?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1277073", "body": "@dswarbrick I think 80 lines of code is overkill for the task at hand. :-/ But go ahead and paste it somewhere so we might be able to use it, or at least learn from it, in some way.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1277073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1295991", "body": "Was this line intended to be checked in? It doesn't have anything to do with context managers.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1295991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1296013", "body": "I think it definitely needs a comment next to it in the source code,\nto explain what that thing is. I'm fine with leaving it in here as\nlong as you add another commit with a comment. (Then feel free to\nclose the ticket!)\n\nOn Sat, May 5, 2012 at 9:35 AM, Claude Paroz\nreply@reply.github.com\nwrote:\n\n> No, sorry. This was intended to be checked in as a different commit as a fix for #17393. Good catch! Do you think that reverting it and recommit separately is useful, or just mark #17393 as fixed would be enough?\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/commit/865cd35c9b357e20994f6c6a51f2ae000ba0a3ee#commitcomment-1296009\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jamierumbelow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272263", "body": "Just to chip in here; there's a pure Python Git file/repo implementation called [Dulwich](https://launchpad.net/dulwich). It'd be a good place to begin looking for a pure Python solution.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272345", "body": "To satisfy my professional curiosity please mention this issue in the commit message so it's linked... I'd like to have a look to see how you do it :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "claudep": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1296009", "body": "No, sorry. This was intended to be checked in as a different commit as a fix for #17393. Good catch! Do you think that reverting it and recommit separately is useful, or just mark #17393 as fixed would be enough?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1296021", "body": "Pushed in 208e26b39\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1297319", "body": "See https://code.djangoproject.com/ticket/11739. Let's discuss it on the ticket (and yes, I should update the patch on this ticket).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1297319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1351363", "body": "Granted, this is inconsitent. At some point, I think that the csrf processor will simply return a Unicode string, but I'm not there yet. Feel free to create a ticket if you want to track this issue.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1351363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "cyberdelia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1316669", "body": ":star2:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1316669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jezdez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1334052", "body": "Yays!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1334052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1382120", "body": "YES!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1382120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "uruz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1351355", "body": "NOTPROVIDED have b prefix there, but not at django/template/defaulttags.py line 45. Why?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1351355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jpic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1399122", "body": "Before, we could run scripts outside django, by just doing \"import manage\" at the top. Now it's not possible anymore because the django project is setup only if **name** == '**main**'. Is it normal ? Wasn't it cool to just do \"import manage\" and then be able to use the django project in a script ?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1399122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "brosner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/5404504", "body": "When I run `migrate` Django spews out naive datetime objects being used due to `USE_TZ = True`. Is this something that be changed to use Django's `timezone.now` function?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5404504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}