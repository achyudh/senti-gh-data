{"_default": {"1": {"oscerd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/8cb4dd7f2c8887e9f6ac3b2569845c445b338db8", "message": "CAMEL-12158 - Camel-AWS DdbStream: Use a configuration for the options like the other AWS components"}, {"url": "https://api.github.com/repos/apache/camel/commits/12386c2ea0a9aaeb14f15ad98c32d8c5c4bbbdc8", "message": "CAMEL-12157 - Camel-Websocket Karaf feature installs bundles with different version of Jetty (9.4 and 9.3)"}, {"url": "https://api.github.com/repos/apache/camel/commits/8fd18164294ec1251698aa497580684c43301483", "message": "Upgrade Chronicle Bytes to version 1.10.6"}, {"url": "https://api.github.com/repos/apache/camel/commits/543ebd0c0257ca9745748dc29466f99d0cfe256f", "message": "Upgrade HttpCore to version 4.4.9"}, {"url": "https://api.github.com/repos/apache/camel/commits/a5ef1d27335b7e0cab76e1e5eb0a8e24fb66444d", "message": "Upgrade Undertow to version 1.4.22.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/4f091b10178a0d78aa6bed0f4eec442e19798883", "message": "Upgrade Atmosphere to version 2.4.19"}, {"url": "https://api.github.com/repos/apache/camel/commits/36084422a6ae6779d56d9c746a1d06b1685e7f03", "message": "Upgrade Rabbitmq Amqp client to version 5.1.2"}, {"url": "https://api.github.com/repos/apache/camel/commits/86d407b942556d902dd8b0ebe795147887d03a67", "message": "Camel AWS DDB - Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/65746540eec0b6fa1984bbd922f06ddee473e880", "message": "Camel AWS DDB - secretKey and accessKey are secret"}, {"url": "https://api.github.com/repos/apache/camel/commits/54a79828eb329eb4786026279c2b5fda383a5aaf", "message": "CAMEL-12152 - Camel-AWS DDB: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/83cf5246234538d58fec285df8dd9836427e8435", "message": "Camel-AWS CW - Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/f43488fd6b02ff95e7ec925a3385ca3f613d919b", "message": "Camel-AWS CW - accessKey and secretKey are secret"}, {"url": "https://api.github.com/repos/apache/camel/commits/c9666fe25bf082ea41364d2d97bddb9b35b6cd44", "message": "CAMEL-12151 - Camel-AWS CW: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/1a6a807c0f0cc0678ef83ef7f1c839283189879a", "message": "CAMEL-12150 - Camel-AWS EC2: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/1b23a30419cf847a78e749ebd450acb2b899c470", "message": "Upgrade OS Maven Plugin to version 1.5.0.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/d05ee46910859037bc9c1c6aa3935a997909d9f9", "message": "CAMEL-12147 - Camel-AWS MQ: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/abd022d7022e276d10ae45ff2cce87e1d7846307", "message": "Camel AWS Lambda - Regen Docs and SB"}, {"url": "https://api.github.com/repos/apache/camel/commits/a07dd961e77e22841467765013c46f80ed186658", "message": "Camel-AWS Lambda - Fixed the javadoc related to the LamdbaClient"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060363", "body": "I'll patch my errors. Sorry about this. I'm apologize.\nIl 09/nov/2014 19:10 \"Aaron Whiteside\" notifications@github.com ha\nscritto:\n\n> In\n> components/camel-sjms/src/test/java/org/apache/camel/component/sjms/typeconversion/JMSMessageHelperTypeConversionTest.java:\n> \n> > -        String p = \"Hello Camel\";\n> > -        StringReader test = new StringReader(p);\n> > -        template.sendBody(\"sjms:queue:start\", test);\n> > -        assertMockEndpointsSatisfied();\n> > -    }\n> >   +\n> > -    @Test\n> > -    public void testJMSMessageHelperChar() throws InterruptedException, FileNotFoundException {\n> > -        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"H\");\n> > -        char p = 'H';\n> > -        template.sendBody(\"sjms:queue:start\", p);\n> > -        assertMockEndpointsSatisfied();\n> > -    }\n> >   +\n> > -    @Test\n> > -    public void testJMSMessageHelperCharArray() throws InterruptedException, FileNotFoundException {\n> \n> Need to assert that a TextMessage was created, and the type of class in\n> Exchange.getIn().getBody() is String.class.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/pull/326/files#r20060311.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "davsclaus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/f40c728e414c087b37939cc0e30d020ec30f2e31", "message": "CAMEL-12156: Camel Karaf commands for routes should flip the order so camel context is first, so the route completion can use the selected camel context to only show routes from that context. And make both arguments as required as they should be."}, {"url": "https://api.github.com/repos/apache/camel/commits/ce4e54ed594dbea4859f105b9ea34f32aa892628", "message": "Upgrade Kotlin"}, {"url": "https://api.github.com/repos/apache/camel/commits/e52425e6b9f70a7f59e5a2b6025330470049f0f0", "message": "CAMEL-12061: camel-ftp now forces a hard disconnect in case of rollback such as error during scanning files etc, to force a fresh client/login on next poll to mitigate any transient issues in the ftp client."}, {"url": "https://api.github.com/repos/apache/camel/commits/494e9d8027db61c2894cb78f798f34ea8b053752", "message": "Polished"}, {"url": "https://api.github.com/repos/apache/camel/commits/8b42f4ec031755f0c507dcbf8538b5c10adc59e4", "message": "CAMEL-12148: Reworked FileIdempontentRepository so LRUCache is only act as quick lookup. And in case of 1st-level miss the file store is checked. File store also writes the entries in the same order they are added."}, {"url": "https://api.github.com/repos/apache/camel/commits/ce3fe3883479475579db2fb203a4b217bc50f627", "message": "Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/1a9f3ecb9e973deded01ab465baca26977a95db4", "message": "CAMEL-12148: Reworked FileIdempontentRepository so LRUCache is only act as quick lookup. And in case of 1st-level miss the file store is checked. File store also writes the entries in the same order they are added."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/7842650", "body": "Hi\n\nThanks for adding this nice new functionality. Do you mind creating a patch and attach to a JIRA ticket over at Apache. This is the way ASF works for accepting patches.\n\nYou can read about contributing to ASF Camel here\nhttp://camel.apache.org/contributing.html\n\nAnd about using git with Apache here\nhttp://www.apache.org/dev/git.html\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842656", "body": "Can you close this pull requests now that it has been applied to the codebase?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842660", "body": "The component is in the codebase. Can this pull request be closed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045805", "body": "Thanks for your patches. Can this pull request be closed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045822", "body": "Thanks for this work, however camel-web is being removed from Camel in the future, eg Camel 3.0. The Camel team have no desire to build and maintain our own web-console. \n\nDo you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045970", "body": "Scott, can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045988", "body": "Thanks for the pull request. We decided to keep the code as is, so Camel is more secure out of the box.\n\nDo you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13423865", "body": "Thanks Scott I have committed your patch to the code base. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13423865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127587", "body": "We have upgraded to jackson 2. Can this request be closed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127712", "body": "This patch has been applied. Can you close this request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922617", "body": "Thanks for the patch. I has been applied to the source code. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922625", "body": "Thanks for the patch. I has been applied to the source code. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922830", "body": "Thanks I have upgraded the master to use scalatest 2.0.M5b. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922883", "body": "David, do you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922897", "body": "Lukasz, can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922908", "body": "Do you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/7670984", "body": "This has been fixed. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/7670984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9990483", "body": "Thanks for spotting I am fixing this now, would be good if you could test again with the fix.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9990483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jamesnetherton": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/183b0fae3ce9cd441675e8f2100562a1a3b6aef8", "message": "CAMEL-11907: Improve test coverage for pgevent component"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xldai": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/a37995cad32805bd47a615d96a354088f3951d4f", "message": "CAMEL-12149 minor fix"}, {"url": "https://api.github.com/repos/apache/camel/commits/8089a2ff011ef3cf5c6a2fca52ed996c451ef148", "message": "fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apupier": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/d848f6daf0f6c24701a37cba1b8a7691a6c544e2", "message": "Indicate new Maven version requirement 3.3.3 for Camel 2.20 build\n\nsee http://camel.apache.org/camel-2200-release.html#Camel2.20.0Release-Importantchangestoconsiderwhenupgrading\r\n\r\nSigned-off-by: Aur\u00e9lien Pupier <apupier@redhat.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "objectiser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/96b20a1988fd858e2443ed176a5ad1346e28c466", "message": "CAMEL-12153 Upgrade OpenTracing Java API version to 0.31"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tdiesler": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2180", "title": "[XChange] Add basic support for crypto currency ticker", "body": "Resolves CAMEL-12066", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/8441307", "body": "merci\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/8441307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9733599", "body": "This binds the ApplicationContextClassLoader to the TCCL of the thread that happens to call CamelContext.start(). IHMO, this is unlikely to be correct.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9733599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ramu11": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2166", "title": " \"CAMEL-12115:Camel-Consul: Upgrade to 1.0.0 consul client\"", "body": " \"CAMEL-12115:Camel-Consul: Upgrade to 1.0.0 consul client\"", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snurmine": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2156", "title": "CAMEL-12079: Bean language: support bean::function notation", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vspiliop": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2079", "title": "Salesforce composite api external ids in body support", "body": "Hope it is of use :-)\r\n\r\n1. Introducing support for Salesforce Composite REST API (https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_composite.htm). I could not find any related jira..\r\n\r\n2. Extending the salesforce maven plugin to generate of DTO(s) for doing updates via Salesforce External Ids in the \u201cbody\u201d json field. \r\n` \r\n         \"body\" : {\r\n              \"Account__r\":\r\n              {\r\n                \"External_Id_Of_Account__c\" : \"123456\"\r\n              } ,\r\n            \"AnotherField__c\":\"1234\"\r\n          }\r\n`\r\nRelated jira is https://issues.apache.org/jira/browse/CAMEL-10193. The implementation is the proposed solution mentioned in the discussion.\r\n\r\nThanks!!", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vrlgohel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2046", "title": "CAMEL-11780: camel-amqp - SSL Transport configuration", "body": "Added amqps support, upgrading the qpid-jms-client version. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/1996", "title": "CAMEL-11879: Upgraded lucene version to 7.0.0", "body": "https://issues.apache.org/jira/browse/CAMEL-11879\r\nUpgraded Lucene to latest version 7.0.0. \r\n\r\nPassed the iTests for Karaf and OSGi without issues, including the camel-lucene component tests. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johnpoth": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2007", "title": "Set org.apache.core as the jkd9 automatic module name for camel-core", "body": "This will be useful for people wanting to use Java 9's module system with camel-core. \r\n\r\nFrom Mark Reinhold's recommendation and common adoption, the module name should correspond to the principal exported API package:\r\n\r\n> Strongly recommend that all modules be named according to the reverse\r\n    Internet domain-name convention.  A module's name should correspond\r\n    to the name of its principal exported API package, which should also\r\n    follow that convention.  If a module does not have such a package, or\r\n    if for legacy reasons it must have a name that does not correspond to\r\n    one of its exported packages, then its name should at least start\r\n    with the reversed form of an Internet domain with which the author is\r\n    associated.\r\n\r\nThanks!", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koscejev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/1938", "title": "CAMEL-11658: test for RestletProducer handling unencoded headers", "body": "This is just a unit test showing how a header with characters that are not allowed in URI path will cause a failure within RestletProducer.\r\n\r\nCAMEL-11658: The regression is only for some characters (such as space). Other characters actually didn't work very well before (question mark \"?\" could cause other parts of path to become query, etc.).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zregvart": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/1450", "title": "CAMEL-10803 Base undertow component on http-common", "body": "# Please don't merge\r\n\r\nI would like some feedback on this first. Still to do:\r\n- [x] Make `UndertowComponent` and `UndertowEndpoint` extend `HttpCommonComponent` and `HttpCommonEndpoint`\r\n- [ ] Implement support for options from `http-common` component\r\n   - [x] `chunked`\r\n   - [ ] `disableStreamCache`\r\n   - [ ] `proxyHost`\r\n   - [ ] `proxyPort`\r\n   - [ ] `authMethodPriority`\r\n   - [ ] `connectionClose`\r\n   - [ ] `traceEnabled`\r\n   - [ ] `responseBufferSize`\r\n   - [ ] `ignoreResponseBody`\r\n   - [ ] `copyHeaders`\r\n   - [ ] `eagerCheckContentAvailable`\r\n   - [ ] `mapHttpMessageBody`\r\n   - [ ] `mapHttpMessageHeaders`\r\n   - [ ] `mapHttpMessageFormUrlEncodedBody`\r\n   - [ ] `okStatusCodeRange`\r\n   - [ ] `urlRewrite`\r\n   - [ ] `async` (though Undertow is heavily async, so may be ignored)\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Fabryprog": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/1190", "title": "CAMEL-10349, javaScript setHeader conversion fault", "body": "https://issues.apache.org/jira/browse/CAMEL-10349\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "valdar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12135459", "body": "Closed because\nApplied the patch into trunk, camel-2.10.x and camel-2.9.x branches\nVia SVN.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12135459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ddelangle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12596288", "body": "Instead of my previous try, use patch provided here https://issues.apache.org/jira/browse/CAMEL-5994. The endpoint is not put int he datamap anymore\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12596288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/12779258", "body": "Corrected in SVN by camel commiters\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12779258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "WillemJiang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12869878", "body": "Hi Luca\nThanks for the pull request. As you know ASF is using JIRA[1] to track the new features and bugs. \nPlease feel free to create a JIRA for it , you can add a link of this pull request, and we can take care of it.\n\n[1]https://issues.apache.org/jira/browse/CAMEL\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12869878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/6013215", "body": "I guess the next patch release of camel-2.13.x will be targeted to Jun.\n## \n\nWillem Jiang\n\nRed Hat, Inc.\nWeb: http://www.redhat.com\nBlog: http://willemjiang.blogspot.com (English)\nhttp://jnn.iteye.com (Chinese)\nTwitter: willemjiang  \nWeibo: \u59dc\u5b81willem\n\nOn April 15, 2014 at 11:23:37 AM, Bob Tiernay (notifications@github.com) wrote:\n\n> This is great! Any chance a new release will be made soon for this?\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apache/camel/commit/e2a680eb947820ccd4fe20949366df3f1a3c3a33#commitcomment-6011334  \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/6013215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/18812767", "body": "We are not supposed to use com.sun packages unless you have good explain of it.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/18812767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19066769", "body": "OK, I got it, we can treat the com.sun.mail as a third part jar. I will merged the code shortly.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19066769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19276518", "body": "Can we change the default pull delay time to save some test time?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19276518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/26436518", "body": "It looks like you just change the jdk version not the antrun plugin version.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/26436518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "lfoppiano": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12876784", "body": "Hi Willem,\n  I was not sure because I should have opened them before, but I will open\nthem.\n\nRegards\nLuca\n\nOn Wed, Jan 30, 2013 at 2:53 AM, Willem Jiang notifications@github.comwrote:\n\n> Hi Luca\n> Thanks for the pull request. As you know ASF is using JIRA[1] to track the\n> new features and bugs.\n> Please feel free to create a JIRA for it , you can add a link of this pull\n> request, and we can take care of it.\n> \n> [1]https://issues.apache.org/jira/browse/CAMEL\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/8#issuecomment-12869878.\n\n## \n\nLuca Foppiano\n\nSoftware Engineer\n+31615253280\nluca@foppiano.org\nwww.foppiano.org\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12876784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/12877104", "body": "Jira related: \n- pagination: https://issues.apache.org/jira/browse/CAMEL-6021\n- result per page: https://issues.apache.org/jira/browse/CAMEL-6022\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12877104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matteoredaelli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/13077824", "body": "Nice! I hope to have these features available in the next Camel release...\nThanks to lfoppiano and Camel team ...\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13077824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "grahamlittle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/13102416", "body": "No worries closing\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13102416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cabeaulac": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/13774091", "body": "Closing this pull request since passing session create/destroy events through the route was not an accepted approach. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13774091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mayn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/15553373", "body": "closing, code pulled by Willem (see https://issues.apache.org/jira/browse/CAMEL-5960)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/15553373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahaarrestad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/16493873", "body": "Jira issue: https://issues.apache.org/jira/browse/CAMEL-6293\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/16493873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922680", "body": "when is 2.11.1 scheduled for release?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/8652968", "body": "Personally I vote for deleting code, not commenting it out. Github keeps track of old code :-)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/8652968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "kzmeyao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/17575575", "body": "Also in JIRA: https://issues.apache.org/jira/browse/CAMEL-6343\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17575575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922720", "body": "Sure thing. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "FergusNelson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/4296908", "body": "This is a breaking change. If autoAck is false then the messages are never acknowledged. Need an ! added to the if.  Added a comment to the jira. Pull request to come.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/4296908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "btiernay": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/6011334", "body": "This is great! Any chance a new release will be made soon for this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/6011334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "akuhtz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/6820883", "body": "There is a typo in the method name: should be resolve, not reslove.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/6820883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "samized": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9377800", "body": "Hello,\nSince the latest SNAPSHOT I got following Error:\n\n```\norg.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'camelBeanPostProcessor' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.apache.camel.CamelContext]: : Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Initialization of bean failed; nested exception is java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Initialization of bean failed; nested exception is java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:232) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:615) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:465) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:321) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]\n    at ch.example.camel.RunApp.main(RunApp.java:77) [main/:na]\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Initialization of bean failed; nested exception is java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    ... 16 common frames omitted\nCaused by: java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.apache.camel.spring.boot.RoutesCollector.postProcessAfterInitialization(RoutesCollector.java:65) ~[camel-spring-boot-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1571) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    ... 26 common frames omitted\nCaused by: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:333) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:773) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104) ~[cxf-core-3.0.3.jar:3.0.3]\n    at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_45]\n    at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:122) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:83) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.camel.component.cxf.CxfEndpointUtils.createBus(CxfEndpointUtils.java:154) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.getBus(CxfEndpoint.java:865) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.setupServerFactoryBean(CxfEndpoint.java:367) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.createServerFactoryBean(CxfEndpoint.java:686) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:66) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:245) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2858) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2788) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2810) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:2687) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:831) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2663) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:763) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:397) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:311) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:722) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.spring.boot.RoutesCollector.postProcessAfterInitialization(RoutesCollector.java:63) ~[camel-spring-boot-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    ... 29 common frames omitted\n```\n\nThanks for helping.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9377800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9392800", "body": "Here an example with some apache code:\nhttps://github.com/samized/springboot-camel-bug\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9392800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9393864", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9393864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9626020", "body": "Assumption:  The `CamelContext` injection at `CamelAutoConfiguration#camelBeanPostProcessor` forces a creation of a `CamelContext` at wrong time during startup, which leads to the problem that other dependencies are not yet initialized...\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9626020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hekonsek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9377877", "body": "Hi,\n\nCan you send me the example reproducing the issue? I can't re-create it on my machine.\n\nCheers.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9377877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9393444", "body": "Hi,\n\nYou need to refer your custom bus (`cxf`) in the endpoint URI:\n\n```\nfrom(\"cxf:/incident?serviceClass=\" + IncidentService.class.getName() + \"&bus=#cxf\")\n```\n\nOtherwise Camel will try to create the bus for you. Unfortunately Camel refreshes Spring context while creating default bus, what collides a little bit with the Spring 4 application lifecycle.\n\nPlease try it and let me know how it works. BTW I will use your example as a base for Camel+CXF tests. I will also try to make camel-spring-boot and camel-cxf a bit smarter to handle bus registration nicely.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9393444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9631760", "body": "Hi,\n\nI'm out for the next week. I will take a look at this as soon as I'm back.\n\nCheers.\n\nOn Fri, Feb 6, 2015 at 5:46 PM, tedp notifications@github.com wrote:\n\n> Interesting and if I take the CamleContext parameter out of the method\n> CamelAutoConfiguration#camelBeanPostProcessor and instead add it as a class\n> variable like this\n> \n> @Autowired\n> CamelContext camelContext;\n> \n> Then my application starts up nicely!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9627509\n> .\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9631760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9754081", "body": "Hi,\n\nI'm back and kicking. :)\n\nI removed the CamelContext injection from the camelBeanPostProcessor\ndefinition. CamelBeanPostProcessor is smart enough to detect CamelContext\nby itself, even without the explicit injection. That should resolve the\ninitialization issues.\n\nIn case of further \"ApplicationEventMulticaster not initialized\" problems -\nyou know where to find me :) .\n\nCheers.\n\nOn Fri, Feb 6, 2015 at 9:58 PM, Henryk Konsek hekonsek@gmail.com wrote:\n\n> Hi,\n> \n> I'm out for the next week. I will take a look at this as soon as I'm back.\n> \n> Cheers.\n> \n> On Fri, Feb 6, 2015 at 5:46 PM, tedp notifications@github.com wrote:\n> \n> > Interesting and if I take the CamleContext parameter out of the method\n> > CamelAutoConfiguration#camelBeanPostProcessor and instead add it as a class\n> > variable like this\n> > \n> > @Autowired\n> > CamelContext camelContext;\n> > \n> > Then my application starts up nicely!\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9627509\n> > .\n> ## \n> \n> Henryk Konsek\n> http://henryk-konsek.blogspot.com\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9754081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9781628", "body": "Can you give it a try today? I suspect that there could be an old version\nof the snapshot in the repository.\n\nThanks for the reporting!\n\nOn Mon, Feb 16, 2015 at 10:16 AM, tedp notifications@github.com wrote:\n\n> I'm still getting the same problem:\n> \n> Caused by: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@93447b5: startup date [Mon Feb 16 09:01:52 GMT 2015]; root of context hierarchy\n>     at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344)\n>     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:307)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:181)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:141)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:67)\n>     at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getEntityInformation(MongoRepositoryFactory.java:141)\n>     at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getTargetRepository(MongoRepositoryFactory.java:83)\n>     at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:177)\n>     at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:239)\n>     at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:225)\n>     at org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean.afterPropertiesSet(MongoRepositoryFactoryBean.java:108)\n>     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)\n>     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)\n>     ... 60 more\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9758146\n> .\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9781628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9837076", "body": "Hi,\n\nOur snapshot repository contains some old snapshots. Can you try to build\nthe camel-spring-boot on your development box?\n\nCheers.\n\nOn Wed, Feb 18, 2015 at 10:45 AM, tedp notifications@github.com wrote:\n\n> Correct, it is an old version and still is. I've cleared out my repo but\n> still the code is the same after a build. I'll let you know when it comes\n> down.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9795888\n> .\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9837076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9990027", "body": "Great to hear that! In case of any further issues, just drop me a line.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9990027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "segalziv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9378608", "body": "Hi @dabdine-r7 , I've created a PR suggesting a minor enhancement in bulk index operation to elasticsearch. As you made the last PR in the same area, I thought it is relevant to get your attention on this. thanks.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9378608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9378621", "body": "opps, here it is:\nhttps://github.com/logshero/camel/compare/apache:master...master\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9378621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9381750", "body": "Thanks for your reply!\n\nI understand the backward compatibility considerations.\n\nAs I'm not that experience with Camel, I might be wrong, but can't that be\nsolve with type conversions? If someone will look for the list of id's, the\nBulkResponse can get converted to a List<> by calling something like\ngetBody(List.class) on the message?\n\nI feel that getting back only the list of id's loose important info, like\nthe index failure reason for example.\nOn 21 Jan 2015 20:22, \"Derek Abdine\" notifications@github.com wrote:\n\n> hey @segalziv https://github.com/segalziv! So though I think this\n> change is fine. I contemplated doing this with my original PR but\n> eventually decided against it to preserve existing behavior with bulk\n> requests.\n> \n> I'd consult @davsclaus https://github.com/davsclaus perhaps on how to\n> handle breaking changes (as anyone now relying on the existing behavior of\n> a list of IDs will now be getting an ES java client object back).\n> \n> Sorta on a similar line of thinking, I think this component's contract\n> needs to be a bit more consistent when it comes to responses. In some cases\n> it returns fields of an elasticsearch java response object (like the id, or\n> in the case of the bulk request, the list of ids) and in some cases it\n> returns the response object itself. By _not_ returning es-java objects it\n> allows someone to decouple themselves from using that library in their\n> downstream code that uses the component, though in certain cases (like bulk\n> requests) using the es java client is required (which was the original\n> reason for my PR).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/69de2e3dd8f9d0e61b3a9e6e5495e406c9159909#commitcomment-9381453\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9381750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dabdine-r7": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9381453", "body": "hey @segalziv! So though I think this change is fine. I contemplated doing this with my original PR but eventually decided against it to preserve existing behavior with bulk requests.\n\nI'd consult @davsclaus perhaps on how to handle breaking changes (as anyone now relying on the existing behavior of a list of IDs will now be getting an ES java client object back).\n\nSorta on a similar line of thinking, I think this component's contract needs to be a bit more consistent when it comes to responses. In some cases it returns fields of an elasticsearch java response object (like the id, or in the case of the bulk request, the list of ids) and in some cases it returns the response object itself. By _not_ returning es-java objects it allows someone to decouple themselves from using that library in their downstream code that uses the component, though in certain cases (like bulk requests) using the es java client is required (which was the original reason for my PR).\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9381453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/21726049", "body": "I'm wondering if it's better to do getBody() here with an instanceof instead. I'm concerned that with the type converters in place we'll try to coerce things when we shouldn't.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/21726049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/21797910", "body": "ill remove this author tag.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/21797910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tedp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9625269", "body": "Hi Henryk,\n\nI'm having a similar problem but not using CXF.  Can you help please?\n\n```\njava.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@3f6358b8: startup date [Fri Feb 06 15:11:06 GMT 2015]; root of context hierarchy\nat org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344)\nat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)\nat org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:307)\nat org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:181)\nat org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:141)\nat org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:67)\nat org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getEntityInformation(MongoRepositoryFactory.java:141)\nat org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getTargetRepository(MongoRepositoryFactory.java:83)\nat org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:177)\nat org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:239)\nat org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:225)\nat org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean.afterPropertiesSet(MongoRepositoryFactoryBean.java:108)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949)\nat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)\nat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)\nat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1202)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:523)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:512)\nat org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1052)\nat org.apache.camel.spring.boot.RoutesCollector.postProcessAfterInitialization(RoutesCollector.java:60)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1571)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949)\nat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813)\nat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)\nat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nat org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:232)\nat org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:615)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:465)\nat org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)\nat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)\nat org.springframework.boot.SpringApplication.run(SpringApplication.java:321)\nat org.springframework.boot.SpringApplication.run(SpringApplication.java:961)\nat org.springframework.boot.SpringApplication.run(SpringApplication.java:950)\nat uk.co.steria.hmpo.belt.Application.main(Application.java:49)\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9625269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9627509", "body": "Interesting and if I take the CamleContext parameter out of the method CamelAutoConfiguration#camelBeanPostProcessor and instead add it as a class variable like this \n\n```\n@Autowired\nCamelContext camelContext;\n```\n\nThen my application starts up nicely! Thanks\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9627509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9758146", "body": "I'm still getting the same problem:\n\n``` java\nCaused by: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@93447b5: startup date [Mon Feb 16 09:01:52 GMT 2015]; root of context hierarchy\n    at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344)\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)\n    at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:307)\n    at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:181)\n    at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:141)\n    at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:67)\n    at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getEntityInformation(MongoRepositoryFactory.java:141)\n    at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getTargetRepository(MongoRepositoryFactory.java:83)\n    at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:177)\n    at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:239)\n    at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:225)\n    at org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean.afterPropertiesSet(MongoRepositoryFactoryBean.java:108)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)\n    ... 60 more\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9758146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9795888", "body": "Correct, it is an old version and still is.  I've cleared out my repo but still the code is the same after a build.  I'll let you know when it comes down.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9795888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9912290", "body": "No need, it's now working from the repository version.\n\nThanks for your help\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9912290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "arnaudchotard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9989261", "body": "@davsclaus Currently testing camel-rabbit 2.15-SNAPSHOT with a request reply pattern, I found a regression with the replyTo basicPublish. The body message sent on the AMQP channel is the message before processing the exchange. We would like the message after processing the exchange. The correction consist of copy the 187-193 lines at 203 line.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9989261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/10001735", "body": "After testing, the fix is Ok. Thank you.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10001735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Tcharl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/10409430", "body": "Hi,\nI can be wrong but it looks like you've forgot the require-capability too: Require-Capability: osgi.extender;filter:=\"(osgi.extender=pax.cdi)\",org.ops4j.pax.cdi.extension;filter:=\"(extension=pax-cdi-extension)\", org.ops4j.pax.cdi.extension;filter:=\"(extension=deltaspike-core-api)\"\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/10409430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lburgazzoli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/8654794", "body": "Definitively, the comment is a mistake :-)\u2014\nSent from Mailbox for iPad\n\nOn Sat, Jan 4, 2014 at 9:28 PM, Asbj\u00f8rn Aarrestad\nnotifications@github.com wrote:\n\n> > @@ -58,6 +58,7 @@ public void setType(BindyType type) {\n> >          this.type = type;\n> >      }\n> > -    /*\n> >   Personally I vote for deleting code, not commenting it out. Github keeps track of old code :-)\n> >   ---\n> >   Reply to this email directly or view it on GitHub:\n> >   https://github.com/apache/camel/pull/83/files#r8652968\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/8654794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "yuruki": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/18436462", "body": "This check is unnecessary as prop is now initialized with new Properties().\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/18436462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "camann9": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/18815604", "body": "But then we can not find out if a folder is an IMAP folder and we can not call the specific methods we need for sorting (only IMAP supports sorting).\nThe dependencies I referenced are all part of the maven dependency javax.mail/mail, they are not dependent on the type of JDK/JRE we are running (even though they have the com.sun prefix).\nTo make it short: there is no way of implementing this functionality without using stuff from com.sun.mail. But I think in this situation it not a problem.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/18815604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "aaronjwhiteside": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056138", "body": "This seems incorrect, you should be asking to convert the payload into a byte[], not a BytesMessage which you already created on the previous line.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056182", "body": "This method needs to be modified to check all possible types of things that can be converted into a byte array.\nTo name a few:\nInputStream (this shouldn't be mapped to type Stream, that's incorrect)\nByteBuffer\nFile\nReader\netc..\n\nWhile you're at it you might want to fix up, the mapping of Collection to Map.. (Doesn't seem correct) and add more types that can be converted to Text, char[], char, Character, StringReader, etc.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060275", "body": "ByteBuffer is Bytes not Stream\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060276", "body": "File is Bytes not Stream.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060279", "body": "Reader is Bytes not Stream.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060289", "body": "This test doesn't test the type of JMS Message produced.. You should be asserting that a BytesMessage was produced. And that the contents of the Exchange.getIn().getBody() is a byte[].\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060293", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060303", "body": "Need to assert that a BytesMessage was created, and the type of class in Exchange.getIn().getBody() is byte[].class.\n\nAlso don't write files to the working dir, use the platforms temp directory (don't hardcore it, look at the methods in File)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060305", "body": "Need to assert that a ByteMessage was created, and the type of class in Exchange.getIn().getBody() is byte[].class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060308", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060310", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060311", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060283", "body": "No such JMS Message exists as Reader, not needed. Please revert this change.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060273", "body": "This isn't needed, Camel can convert a Reader into a byte[] array for you.. please remove this case statement.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "inakiabt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515014", "body": "Is that `Labguages` a typo?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "fluxlife": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515912", "body": "Grrr. yes\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "blommish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/24658783", "body": "Not a compaint or so, but is there some specific reason why you would use messageCount instead of just returning getConfig().consumableUsers().size() ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/24658783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "shreyaspurohit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/24773605", "body": "Yup, though both should ideally be the same, one is an assumption and another is a reality. In future if someone adds a logic to handle/unhandle exception then this logic does not need to be modified as it always signifies the real number of messages consumed, else it might creep in a bug if this logic isnt changed. Just a general practice I try to follow - fact vs assumption.  \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/24773605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}, "2": {"oscerd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/8cb4dd7f2c8887e9f6ac3b2569845c445b338db8", "message": "CAMEL-12158 - Camel-AWS DdbStream: Use a configuration for the options like the other AWS components"}, {"url": "https://api.github.com/repos/apache/camel/commits/12386c2ea0a9aaeb14f15ad98c32d8c5c4bbbdc8", "message": "CAMEL-12157 - Camel-Websocket Karaf feature installs bundles with different version of Jetty (9.4 and 9.3)"}, {"url": "https://api.github.com/repos/apache/camel/commits/8fd18164294ec1251698aa497580684c43301483", "message": "Upgrade Chronicle Bytes to version 1.10.6"}, {"url": "https://api.github.com/repos/apache/camel/commits/543ebd0c0257ca9745748dc29466f99d0cfe256f", "message": "Upgrade HttpCore to version 4.4.9"}, {"url": "https://api.github.com/repos/apache/camel/commits/a5ef1d27335b7e0cab76e1e5eb0a8e24fb66444d", "message": "Upgrade Undertow to version 1.4.22.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/4f091b10178a0d78aa6bed0f4eec442e19798883", "message": "Upgrade Atmosphere to version 2.4.19"}, {"url": "https://api.github.com/repos/apache/camel/commits/36084422a6ae6779d56d9c746a1d06b1685e7f03", "message": "Upgrade Rabbitmq Amqp client to version 5.1.2"}, {"url": "https://api.github.com/repos/apache/camel/commits/86d407b942556d902dd8b0ebe795147887d03a67", "message": "Camel AWS DDB - Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/65746540eec0b6fa1984bbd922f06ddee473e880", "message": "Camel AWS DDB - secretKey and accessKey are secret"}, {"url": "https://api.github.com/repos/apache/camel/commits/54a79828eb329eb4786026279c2b5fda383a5aaf", "message": "CAMEL-12152 - Camel-AWS DDB: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/83cf5246234538d58fec285df8dd9836427e8435", "message": "Camel-AWS CW - Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/f43488fd6b02ff95e7ec925a3385ca3f613d919b", "message": "Camel-AWS CW - accessKey and secretKey are secret"}, {"url": "https://api.github.com/repos/apache/camel/commits/c9666fe25bf082ea41364d2d97bddb9b35b6cd44", "message": "CAMEL-12151 - Camel-AWS CW: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/1a6a807c0f0cc0678ef83ef7f1c839283189879a", "message": "CAMEL-12150 - Camel-AWS EC2: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/1b23a30419cf847a78e749ebd450acb2b899c470", "message": "Upgrade OS Maven Plugin to version 1.5.0.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/d05ee46910859037bc9c1c6aa3935a997909d9f9", "message": "CAMEL-12147 - Camel-AWS MQ: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/abd022d7022e276d10ae45ff2cce87e1d7846307", "message": "Camel AWS Lambda - Regen Docs and SB"}, {"url": "https://api.github.com/repos/apache/camel/commits/a07dd961e77e22841467765013c46f80ed186658", "message": "Camel-AWS Lambda - Fixed the javadoc related to the LamdbaClient"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060363", "body": "I'll patch my errors. Sorry about this. I'm apologize.\nIl 09/nov/2014 19:10 \"Aaron Whiteside\" notifications@github.com ha\nscritto:\n\n> In\n> components/camel-sjms/src/test/java/org/apache/camel/component/sjms/typeconversion/JMSMessageHelperTypeConversionTest.java:\n> \n> > -        String p = \"Hello Camel\";\n> > -        StringReader test = new StringReader(p);\n> > -        template.sendBody(\"sjms:queue:start\", test);\n> > -        assertMockEndpointsSatisfied();\n> > -    }\n> >   +\n> > -    @Test\n> > -    public void testJMSMessageHelperChar() throws InterruptedException, FileNotFoundException {\n> > -        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"H\");\n> > -        char p = 'H';\n> > -        template.sendBody(\"sjms:queue:start\", p);\n> > -        assertMockEndpointsSatisfied();\n> > -    }\n> >   +\n> > -    @Test\n> > -    public void testJMSMessageHelperCharArray() throws InterruptedException, FileNotFoundException {\n> \n> Need to assert that a TextMessage was created, and the type of class in\n> Exchange.getIn().getBody() is String.class.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/pull/326/files#r20060311.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "davsclaus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/f40c728e414c087b37939cc0e30d020ec30f2e31", "message": "CAMEL-12156: Camel Karaf commands for routes should flip the order so camel context is first, so the route completion can use the selected camel context to only show routes from that context. And make both arguments as required as they should be."}, {"url": "https://api.github.com/repos/apache/camel/commits/ce4e54ed594dbea4859f105b9ea34f32aa892628", "message": "Upgrade Kotlin"}, {"url": "https://api.github.com/repos/apache/camel/commits/e52425e6b9f70a7f59e5a2b6025330470049f0f0", "message": "CAMEL-12061: camel-ftp now forces a hard disconnect in case of rollback such as error during scanning files etc, to force a fresh client/login on next poll to mitigate any transient issues in the ftp client."}, {"url": "https://api.github.com/repos/apache/camel/commits/494e9d8027db61c2894cb78f798f34ea8b053752", "message": "Polished"}, {"url": "https://api.github.com/repos/apache/camel/commits/8b42f4ec031755f0c507dcbf8538b5c10adc59e4", "message": "CAMEL-12148: Reworked FileIdempontentRepository so LRUCache is only act as quick lookup. And in case of 1st-level miss the file store is checked. File store also writes the entries in the same order they are added."}, {"url": "https://api.github.com/repos/apache/camel/commits/ce3fe3883479475579db2fb203a4b217bc50f627", "message": "Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/1a9f3ecb9e973deded01ab465baca26977a95db4", "message": "CAMEL-12148: Reworked FileIdempontentRepository so LRUCache is only act as quick lookup. And in case of 1st-level miss the file store is checked. File store also writes the entries in the same order they are added."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/7842650", "body": "Hi\n\nThanks for adding this nice new functionality. Do you mind creating a patch and attach to a JIRA ticket over at Apache. This is the way ASF works for accepting patches.\n\nYou can read about contributing to ASF Camel here\nhttp://camel.apache.org/contributing.html\n\nAnd about using git with Apache here\nhttp://www.apache.org/dev/git.html\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842656", "body": "Can you close this pull requests now that it has been applied to the codebase?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842660", "body": "The component is in the codebase. Can this pull request be closed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045805", "body": "Thanks for your patches. Can this pull request be closed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045822", "body": "Thanks for this work, however camel-web is being removed from Camel in the future, eg Camel 3.0. The Camel team have no desire to build and maintain our own web-console. \n\nDo you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045970", "body": "Scott, can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045988", "body": "Thanks for the pull request. We decided to keep the code as is, so Camel is more secure out of the box.\n\nDo you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13423865", "body": "Thanks Scott I have committed your patch to the code base. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13423865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127587", "body": "We have upgraded to jackson 2. Can this request be closed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127712", "body": "This patch has been applied. Can you close this request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922617", "body": "Thanks for the patch. I has been applied to the source code. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922625", "body": "Thanks for the patch. I has been applied to the source code. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922830", "body": "Thanks I have upgraded the master to use scalatest 2.0.M5b. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922883", "body": "David, do you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922897", "body": "Lukasz, can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922908", "body": "Do you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/7670984", "body": "This has been fixed. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/7670984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9990483", "body": "Thanks for spotting I am fixing this now, would be good if you could test again with the fix.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9990483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jamesnetherton": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/183b0fae3ce9cd441675e8f2100562a1a3b6aef8", "message": "CAMEL-11907: Improve test coverage for pgevent component"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xldai": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/a37995cad32805bd47a615d96a354088f3951d4f", "message": "CAMEL-12149 minor fix"}, {"url": "https://api.github.com/repos/apache/camel/commits/8089a2ff011ef3cf5c6a2fca52ed996c451ef148", "message": "fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apupier": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/d848f6daf0f6c24701a37cba1b8a7691a6c544e2", "message": "Indicate new Maven version requirement 3.3.3 for Camel 2.20 build\n\nsee http://camel.apache.org/camel-2200-release.html#Camel2.20.0Release-Importantchangestoconsiderwhenupgrading\r\n\r\nSigned-off-by: Aur\u00e9lien Pupier <apupier@redhat.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "objectiser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/96b20a1988fd858e2443ed176a5ad1346e28c466", "message": "CAMEL-12153 Upgrade OpenTracing Java API version to 0.31"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tdiesler": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2180", "title": "[XChange] Add basic support for crypto currency ticker", "body": "Resolves CAMEL-12066", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/8441307", "body": "merci\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/8441307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9733599", "body": "This binds the ApplicationContextClassLoader to the TCCL of the thread that happens to call CamelContext.start(). IHMO, this is unlikely to be correct.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9733599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ramu11": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2166", "title": " \"CAMEL-12115:Camel-Consul: Upgrade to 1.0.0 consul client\"", "body": " \"CAMEL-12115:Camel-Consul: Upgrade to 1.0.0 consul client\"", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snurmine": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2156", "title": "CAMEL-12079: Bean language: support bean::function notation", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vspiliop": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2079", "title": "Salesforce composite api external ids in body support", "body": "Hope it is of use :-)\r\n\r\n1. Introducing support for Salesforce Composite REST API (https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_composite.htm). I could not find any related jira..\r\n\r\n2. Extending the salesforce maven plugin to generate of DTO(s) for doing updates via Salesforce External Ids in the \u201cbody\u201d json field. \r\n` \r\n         \"body\" : {\r\n              \"Account__r\":\r\n              {\r\n                \"External_Id_Of_Account__c\" : \"123456\"\r\n              } ,\r\n            \"AnotherField__c\":\"1234\"\r\n          }\r\n`\r\nRelated jira is https://issues.apache.org/jira/browse/CAMEL-10193. The implementation is the proposed solution mentioned in the discussion.\r\n\r\nThanks!!", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vrlgohel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2046", "title": "CAMEL-11780: camel-amqp - SSL Transport configuration", "body": "Added amqps support, upgrading the qpid-jms-client version. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/1996", "title": "CAMEL-11879: Upgraded lucene version to 7.0.0", "body": "https://issues.apache.org/jira/browse/CAMEL-11879\r\nUpgraded Lucene to latest version 7.0.0. \r\n\r\nPassed the iTests for Karaf and OSGi without issues, including the camel-lucene component tests. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johnpoth": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2007", "title": "Set org.apache.core as the jkd9 automatic module name for camel-core", "body": "This will be useful for people wanting to use Java 9's module system with camel-core. \r\n\r\nFrom Mark Reinhold's recommendation and common adoption, the module name should correspond to the principal exported API package:\r\n\r\n> Strongly recommend that all modules be named according to the reverse\r\n    Internet domain-name convention.  A module's name should correspond\r\n    to the name of its principal exported API package, which should also\r\n    follow that convention.  If a module does not have such a package, or\r\n    if for legacy reasons it must have a name that does not correspond to\r\n    one of its exported packages, then its name should at least start\r\n    with the reversed form of an Internet domain with which the author is\r\n    associated.\r\n\r\nThanks!", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koscejev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/1938", "title": "CAMEL-11658: test for RestletProducer handling unencoded headers", "body": "This is just a unit test showing how a header with characters that are not allowed in URI path will cause a failure within RestletProducer.\r\n\r\nCAMEL-11658: The regression is only for some characters (such as space). Other characters actually didn't work very well before (question mark \"?\" could cause other parts of path to become query, etc.).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zregvart": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/1450", "title": "CAMEL-10803 Base undertow component on http-common", "body": "# Please don't merge\r\n\r\nI would like some feedback on this first. Still to do:\r\n- [x] Make `UndertowComponent` and `UndertowEndpoint` extend `HttpCommonComponent` and `HttpCommonEndpoint`\r\n- [ ] Implement support for options from `http-common` component\r\n   - [x] `chunked`\r\n   - [ ] `disableStreamCache`\r\n   - [ ] `proxyHost`\r\n   - [ ] `proxyPort`\r\n   - [ ] `authMethodPriority`\r\n   - [ ] `connectionClose`\r\n   - [ ] `traceEnabled`\r\n   - [ ] `responseBufferSize`\r\n   - [ ] `ignoreResponseBody`\r\n   - [ ] `copyHeaders`\r\n   - [ ] `eagerCheckContentAvailable`\r\n   - [ ] `mapHttpMessageBody`\r\n   - [ ] `mapHttpMessageHeaders`\r\n   - [ ] `mapHttpMessageFormUrlEncodedBody`\r\n   - [ ] `okStatusCodeRange`\r\n   - [ ] `urlRewrite`\r\n   - [ ] `async` (though Undertow is heavily async, so may be ignored)\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Fabryprog": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/1190", "title": "CAMEL-10349, javaScript setHeader conversion fault", "body": "https://issues.apache.org/jira/browse/CAMEL-10349\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "valdar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12135459", "body": "Closed because\nApplied the patch into trunk, camel-2.10.x and camel-2.9.x branches\nVia SVN.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12135459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ddelangle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12596288", "body": "Instead of my previous try, use patch provided here https://issues.apache.org/jira/browse/CAMEL-5994. The endpoint is not put int he datamap anymore\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12596288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/12779258", "body": "Corrected in SVN by camel commiters\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12779258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "WillemJiang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12869878", "body": "Hi Luca\nThanks for the pull request. As you know ASF is using JIRA[1] to track the new features and bugs. \nPlease feel free to create a JIRA for it , you can add a link of this pull request, and we can take care of it.\n\n[1]https://issues.apache.org/jira/browse/CAMEL\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12869878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/6013215", "body": "I guess the next patch release of camel-2.13.x will be targeted to Jun.\n## \n\nWillem Jiang\n\nRed Hat, Inc.\nWeb: http://www.redhat.com\nBlog: http://willemjiang.blogspot.com (English)\nhttp://jnn.iteye.com (Chinese)\nTwitter: willemjiang  \nWeibo: \u59dc\u5b81willem\n\nOn April 15, 2014 at 11:23:37 AM, Bob Tiernay (notifications@github.com) wrote:\n\n> This is great! Any chance a new release will be made soon for this?\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apache/camel/commit/e2a680eb947820ccd4fe20949366df3f1a3c3a33#commitcomment-6011334  \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/6013215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/18812767", "body": "We are not supposed to use com.sun packages unless you have good explain of it.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/18812767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19066769", "body": "OK, I got it, we can treat the com.sun.mail as a third part jar. I will merged the code shortly.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19066769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19276518", "body": "Can we change the default pull delay time to save some test time?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19276518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/26436518", "body": "It looks like you just change the jdk version not the antrun plugin version.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/26436518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "lfoppiano": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12876784", "body": "Hi Willem,\n  I was not sure because I should have opened them before, but I will open\nthem.\n\nRegards\nLuca\n\nOn Wed, Jan 30, 2013 at 2:53 AM, Willem Jiang notifications@github.comwrote:\n\n> Hi Luca\n> Thanks for the pull request. As you know ASF is using JIRA[1] to track the\n> new features and bugs.\n> Please feel free to create a JIRA for it , you can add a link of this pull\n> request, and we can take care of it.\n> \n> [1]https://issues.apache.org/jira/browse/CAMEL\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/8#issuecomment-12869878.\n\n## \n\nLuca Foppiano\n\nSoftware Engineer\n+31615253280\nluca@foppiano.org\nwww.foppiano.org\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12876784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/12877104", "body": "Jira related: \n- pagination: https://issues.apache.org/jira/browse/CAMEL-6021\n- result per page: https://issues.apache.org/jira/browse/CAMEL-6022\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12877104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matteoredaelli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/13077824", "body": "Nice! I hope to have these features available in the next Camel release...\nThanks to lfoppiano and Camel team ...\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13077824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "grahamlittle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/13102416", "body": "No worries closing\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13102416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cabeaulac": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/13774091", "body": "Closing this pull request since passing session create/destroy events through the route was not an accepted approach. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13774091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mayn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/15553373", "body": "closing, code pulled by Willem (see https://issues.apache.org/jira/browse/CAMEL-5960)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/15553373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahaarrestad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/16493873", "body": "Jira issue: https://issues.apache.org/jira/browse/CAMEL-6293\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/16493873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922680", "body": "when is 2.11.1 scheduled for release?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/8652968", "body": "Personally I vote for deleting code, not commenting it out. Github keeps track of old code :-)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/8652968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "kzmeyao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/17575575", "body": "Also in JIRA: https://issues.apache.org/jira/browse/CAMEL-6343\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17575575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922720", "body": "Sure thing. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "FergusNelson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/4296908", "body": "This is a breaking change. If autoAck is false then the messages are never acknowledged. Need an ! added to the if.  Added a comment to the jira. Pull request to come.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/4296908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "btiernay": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/6011334", "body": "This is great! Any chance a new release will be made soon for this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/6011334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "akuhtz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/6820883", "body": "There is a typo in the method name: should be resolve, not reslove.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/6820883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "samized": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9377800", "body": "Hello,\nSince the latest SNAPSHOT I got following Error:\n\n```\norg.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'camelBeanPostProcessor' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.apache.camel.CamelContext]: : Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Initialization of bean failed; nested exception is java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Initialization of bean failed; nested exception is java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:232) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:615) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:465) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:321) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]\n    at ch.example.camel.RunApp.main(RunApp.java:77) [main/:na]\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Initialization of bean failed; nested exception is java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    ... 16 common frames omitted\nCaused by: java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.apache.camel.spring.boot.RoutesCollector.postProcessAfterInitialization(RoutesCollector.java:65) ~[camel-spring-boot-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1571) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    ... 26 common frames omitted\nCaused by: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:333) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:773) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104) ~[cxf-core-3.0.3.jar:3.0.3]\n    at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_45]\n    at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:122) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:83) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.camel.component.cxf.CxfEndpointUtils.createBus(CxfEndpointUtils.java:154) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.getBus(CxfEndpoint.java:865) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.setupServerFactoryBean(CxfEndpoint.java:367) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.createServerFactoryBean(CxfEndpoint.java:686) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:66) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:245) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2858) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2788) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2810) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:2687) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:831) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2663) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:763) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:397) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:311) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:722) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.spring.boot.RoutesCollector.postProcessAfterInitialization(RoutesCollector.java:63) ~[camel-spring-boot-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    ... 29 common frames omitted\n```\n\nThanks for helping.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9377800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9392800", "body": "Here an example with some apache code:\nhttps://github.com/samized/springboot-camel-bug\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9392800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9393864", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9393864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9626020", "body": "Assumption:  The `CamelContext` injection at `CamelAutoConfiguration#camelBeanPostProcessor` forces a creation of a `CamelContext` at wrong time during startup, which leads to the problem that other dependencies are not yet initialized...\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9626020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hekonsek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9377877", "body": "Hi,\n\nCan you send me the example reproducing the issue? I can't re-create it on my machine.\n\nCheers.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9377877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9393444", "body": "Hi,\n\nYou need to refer your custom bus (`cxf`) in the endpoint URI:\n\n```\nfrom(\"cxf:/incident?serviceClass=\" + IncidentService.class.getName() + \"&bus=#cxf\")\n```\n\nOtherwise Camel will try to create the bus for you. Unfortunately Camel refreshes Spring context while creating default bus, what collides a little bit with the Spring 4 application lifecycle.\n\nPlease try it and let me know how it works. BTW I will use your example as a base for Camel+CXF tests. I will also try to make camel-spring-boot and camel-cxf a bit smarter to handle bus registration nicely.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9393444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9631760", "body": "Hi,\n\nI'm out for the next week. I will take a look at this as soon as I'm back.\n\nCheers.\n\nOn Fri, Feb 6, 2015 at 5:46 PM, tedp notifications@github.com wrote:\n\n> Interesting and if I take the CamleContext parameter out of the method\n> CamelAutoConfiguration#camelBeanPostProcessor and instead add it as a class\n> variable like this\n> \n> @Autowired\n> CamelContext camelContext;\n> \n> Then my application starts up nicely!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9627509\n> .\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9631760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9754081", "body": "Hi,\n\nI'm back and kicking. :)\n\nI removed the CamelContext injection from the camelBeanPostProcessor\ndefinition. CamelBeanPostProcessor is smart enough to detect CamelContext\nby itself, even without the explicit injection. That should resolve the\ninitialization issues.\n\nIn case of further \"ApplicationEventMulticaster not initialized\" problems -\nyou know where to find me :) .\n\nCheers.\n\nOn Fri, Feb 6, 2015 at 9:58 PM, Henryk Konsek hekonsek@gmail.com wrote:\n\n> Hi,\n> \n> I'm out for the next week. I will take a look at this as soon as I'm back.\n> \n> Cheers.\n> \n> On Fri, Feb 6, 2015 at 5:46 PM, tedp notifications@github.com wrote:\n> \n> > Interesting and if I take the CamleContext parameter out of the method\n> > CamelAutoConfiguration#camelBeanPostProcessor and instead add it as a class\n> > variable like this\n> > \n> > @Autowired\n> > CamelContext camelContext;\n> > \n> > Then my application starts up nicely!\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9627509\n> > .\n> ## \n> \n> Henryk Konsek\n> http://henryk-konsek.blogspot.com\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9754081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9781628", "body": "Can you give it a try today? I suspect that there could be an old version\nof the snapshot in the repository.\n\nThanks for the reporting!\n\nOn Mon, Feb 16, 2015 at 10:16 AM, tedp notifications@github.com wrote:\n\n> I'm still getting the same problem:\n> \n> Caused by: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@93447b5: startup date [Mon Feb 16 09:01:52 GMT 2015]; root of context hierarchy\n>     at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344)\n>     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:307)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:181)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:141)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:67)\n>     at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getEntityInformation(MongoRepositoryFactory.java:141)\n>     at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getTargetRepository(MongoRepositoryFactory.java:83)\n>     at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:177)\n>     at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:239)\n>     at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:225)\n>     at org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean.afterPropertiesSet(MongoRepositoryFactoryBean.java:108)\n>     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)\n>     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)\n>     ... 60 more\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9758146\n> .\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9781628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9837076", "body": "Hi,\n\nOur snapshot repository contains some old snapshots. Can you try to build\nthe camel-spring-boot on your development box?\n\nCheers.\n\nOn Wed, Feb 18, 2015 at 10:45 AM, tedp notifications@github.com wrote:\n\n> Correct, it is an old version and still is. I've cleared out my repo but\n> still the code is the same after a build. I'll let you know when it comes\n> down.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9795888\n> .\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9837076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9990027", "body": "Great to hear that! In case of any further issues, just drop me a line.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9990027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "segalziv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9378608", "body": "Hi @dabdine-r7 , I've created a PR suggesting a minor enhancement in bulk index operation to elasticsearch. As you made the last PR in the same area, I thought it is relevant to get your attention on this. thanks.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9378608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9378621", "body": "opps, here it is:\nhttps://github.com/logshero/camel/compare/apache:master...master\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9378621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9381750", "body": "Thanks for your reply!\n\nI understand the backward compatibility considerations.\n\nAs I'm not that experience with Camel, I might be wrong, but can't that be\nsolve with type conversions? If someone will look for the list of id's, the\nBulkResponse can get converted to a List<> by calling something like\ngetBody(List.class) on the message?\n\nI feel that getting back only the list of id's loose important info, like\nthe index failure reason for example.\nOn 21 Jan 2015 20:22, \"Derek Abdine\" notifications@github.com wrote:\n\n> hey @segalziv https://github.com/segalziv! So though I think this\n> change is fine. I contemplated doing this with my original PR but\n> eventually decided against it to preserve existing behavior with bulk\n> requests.\n> \n> I'd consult @davsclaus https://github.com/davsclaus perhaps on how to\n> handle breaking changes (as anyone now relying on the existing behavior of\n> a list of IDs will now be getting an ES java client object back).\n> \n> Sorta on a similar line of thinking, I think this component's contract\n> needs to be a bit more consistent when it comes to responses. In some cases\n> it returns fields of an elasticsearch java response object (like the id, or\n> in the case of the bulk request, the list of ids) and in some cases it\n> returns the response object itself. By _not_ returning es-java objects it\n> allows someone to decouple themselves from using that library in their\n> downstream code that uses the component, though in certain cases (like bulk\n> requests) using the es java client is required (which was the original\n> reason for my PR).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/69de2e3dd8f9d0e61b3a9e6e5495e406c9159909#commitcomment-9381453\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9381750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dabdine-r7": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9381453", "body": "hey @segalziv! So though I think this change is fine. I contemplated doing this with my original PR but eventually decided against it to preserve existing behavior with bulk requests.\n\nI'd consult @davsclaus perhaps on how to handle breaking changes (as anyone now relying on the existing behavior of a list of IDs will now be getting an ES java client object back).\n\nSorta on a similar line of thinking, I think this component's contract needs to be a bit more consistent when it comes to responses. In some cases it returns fields of an elasticsearch java response object (like the id, or in the case of the bulk request, the list of ids) and in some cases it returns the response object itself. By _not_ returning es-java objects it allows someone to decouple themselves from using that library in their downstream code that uses the component, though in certain cases (like bulk requests) using the es java client is required (which was the original reason for my PR).\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9381453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/21726049", "body": "I'm wondering if it's better to do getBody() here with an instanceof instead. I'm concerned that with the type converters in place we'll try to coerce things when we shouldn't.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/21726049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/21797910", "body": "ill remove this author tag.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/21797910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tedp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9625269", "body": "Hi Henryk,\n\nI'm having a similar problem but not using CXF.  Can you help please?\n\n```\njava.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@3f6358b8: startup date [Fri Feb 06 15:11:06 GMT 2015]; root of context hierarchy\nat org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344)\nat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)\nat org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:307)\nat org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:181)\nat org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:141)\nat org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:67)\nat org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getEntityInformation(MongoRepositoryFactory.java:141)\nat org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getTargetRepository(MongoRepositoryFactory.java:83)\nat org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:177)\nat org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:239)\nat org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:225)\nat org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean.afterPropertiesSet(MongoRepositoryFactoryBean.java:108)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949)\nat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)\nat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)\nat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1202)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:523)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:512)\nat org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1052)\nat org.apache.camel.spring.boot.RoutesCollector.postProcessAfterInitialization(RoutesCollector.java:60)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1571)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949)\nat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813)\nat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)\nat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nat org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:232)\nat org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:615)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:465)\nat org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)\nat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)\nat org.springframework.boot.SpringApplication.run(SpringApplication.java:321)\nat org.springframework.boot.SpringApplication.run(SpringApplication.java:961)\nat org.springframework.boot.SpringApplication.run(SpringApplication.java:950)\nat uk.co.steria.hmpo.belt.Application.main(Application.java:49)\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9625269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9627509", "body": "Interesting and if I take the CamleContext parameter out of the method CamelAutoConfiguration#camelBeanPostProcessor and instead add it as a class variable like this \n\n```\n@Autowired\nCamelContext camelContext;\n```\n\nThen my application starts up nicely! Thanks\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9627509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9758146", "body": "I'm still getting the same problem:\n\n``` java\nCaused by: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@93447b5: startup date [Mon Feb 16 09:01:52 GMT 2015]; root of context hierarchy\n    at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344)\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)\n    at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:307)\n    at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:181)\n    at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:141)\n    at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:67)\n    at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getEntityInformation(MongoRepositoryFactory.java:141)\n    at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getTargetRepository(MongoRepositoryFactory.java:83)\n    at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:177)\n    at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:239)\n    at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:225)\n    at org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean.afterPropertiesSet(MongoRepositoryFactoryBean.java:108)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)\n    ... 60 more\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9758146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9795888", "body": "Correct, it is an old version and still is.  I've cleared out my repo but still the code is the same after a build.  I'll let you know when it comes down.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9795888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9912290", "body": "No need, it's now working from the repository version.\n\nThanks for your help\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9912290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "arnaudchotard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9989261", "body": "@davsclaus Currently testing camel-rabbit 2.15-SNAPSHOT with a request reply pattern, I found a regression with the replyTo basicPublish. The body message sent on the AMQP channel is the message before processing the exchange. We would like the message after processing the exchange. The correction consist of copy the 187-193 lines at 203 line.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9989261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/10001735", "body": "After testing, the fix is Ok. Thank you.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10001735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Tcharl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/10409430", "body": "Hi,\nI can be wrong but it looks like you've forgot the require-capability too: Require-Capability: osgi.extender;filter:=\"(osgi.extender=pax.cdi)\",org.ops4j.pax.cdi.extension;filter:=\"(extension=pax-cdi-extension)\", org.ops4j.pax.cdi.extension;filter:=\"(extension=deltaspike-core-api)\"\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/10409430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lburgazzoli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/8654794", "body": "Definitively, the comment is a mistake :-)\u2014\nSent from Mailbox for iPad\n\nOn Sat, Jan 4, 2014 at 9:28 PM, Asbj\u00f8rn Aarrestad\nnotifications@github.com wrote:\n\n> > @@ -58,6 +58,7 @@ public void setType(BindyType type) {\n> >          this.type = type;\n> >      }\n> > -    /*\n> >   Personally I vote for deleting code, not commenting it out. Github keeps track of old code :-)\n> >   ---\n> >   Reply to this email directly or view it on GitHub:\n> >   https://github.com/apache/camel/pull/83/files#r8652968\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/8654794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "yuruki": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/18436462", "body": "This check is unnecessary as prop is now initialized with new Properties().\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/18436462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "camann9": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/18815604", "body": "But then we can not find out if a folder is an IMAP folder and we can not call the specific methods we need for sorting (only IMAP supports sorting).\nThe dependencies I referenced are all part of the maven dependency javax.mail/mail, they are not dependent on the type of JDK/JRE we are running (even though they have the com.sun prefix).\nTo make it short: there is no way of implementing this functionality without using stuff from com.sun.mail. But I think in this situation it not a problem.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/18815604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "aaronjwhiteside": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056138", "body": "This seems incorrect, you should be asking to convert the payload into a byte[], not a BytesMessage which you already created on the previous line.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056182", "body": "This method needs to be modified to check all possible types of things that can be converted into a byte array.\nTo name a few:\nInputStream (this shouldn't be mapped to type Stream, that's incorrect)\nByteBuffer\nFile\nReader\netc..\n\nWhile you're at it you might want to fix up, the mapping of Collection to Map.. (Doesn't seem correct) and add more types that can be converted to Text, char[], char, Character, StringReader, etc.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060275", "body": "ByteBuffer is Bytes not Stream\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060276", "body": "File is Bytes not Stream.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060279", "body": "Reader is Bytes not Stream.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060289", "body": "This test doesn't test the type of JMS Message produced.. You should be asserting that a BytesMessage was produced. And that the contents of the Exchange.getIn().getBody() is a byte[].\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060293", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060303", "body": "Need to assert that a BytesMessage was created, and the type of class in Exchange.getIn().getBody() is byte[].class.\n\nAlso don't write files to the working dir, use the platforms temp directory (don't hardcore it, look at the methods in File)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060305", "body": "Need to assert that a ByteMessage was created, and the type of class in Exchange.getIn().getBody() is byte[].class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060308", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060310", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060311", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060283", "body": "No such JMS Message exists as Reader, not needed. Please revert this change.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060273", "body": "This isn't needed, Camel can convert a Reader into a byte[] array for you.. please remove this case statement.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "inakiabt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515014", "body": "Is that `Labguages` a typo?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "fluxlife": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515912", "body": "Grrr. yes\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "blommish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/24658783", "body": "Not a compaint or so, but is there some specific reason why you would use messageCount instead of just returning getConfig().consumableUsers().size() ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/24658783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "shreyaspurohit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/24773605", "body": "Yup, though both should ideally be the same, one is an assumption and another is a reality. In future if someone adds a logic to handle/unhandle exception then this logic does not need to be modified as it always signifies the real number of messages consumed, else it might creep in a bug if this logic isnt changed. Just a general practice I try to follow - fact vs assumption.  \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/24773605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}