{"_default": {"1": {"karpet": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/lucy/commits/a1a61b7282ec5068b72dc5c912be26c508f0bbc8", "message": "Add sha512 explicit algorithm to file extension"}, {"url": "https://api.github.com/repos/apache/lucy/commits/488d6f4cfbf23faf79c52de193fc50de6152236e", "message": "Add test showing custom analyzer\n\n**Why**: User discussion on email list revealed our Analyzer docs\nneeded bolstering. This test demonstrates the simple custom\nanalyzer use case.\n\nRef https://lists.apache.org/thread.html/7e0f446bcccddf8faaffbb4fbb5a5265016a06f736f30757f0ee35af@%3Cuser.lucy.apache.org%3E"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nwellnhof": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/lucy/commits/598b4d074029998d30ad9a3b85190cc95aa00e0a", "message": "Fix handling of trailing double quotes in QueryParser\n\nFixes LUCY-325."}, {"url": "https://api.github.com/repos/apache/lucy/commits/b22794165abfcd33d5fd4e578397a6a1926f9c6b", "message": "Regen charmonizer.c for --rpath fix"}, {"url": "https://api.github.com/repos/apache/lucy/commits/5535d25f8a5b1ad86e2d5540589c6e46654e350e", "message": "Fix previous merge of 'improve-locking' branch\n\nI accidentally merged the first version of the 'improve-locking' branch.\nAdd changes to the 'v2' branch as separate commit."}, {"url": "https://api.github.com/repos/apache/lucy/commits/d7feb997003ae1fc84a348e8584ea97b69b02d95", "message": "Merge branch 'improve-locking'\n\nFixes LUCY-323.\n\n- Major rewrite of FilePurger, making it do less work.\n- Eliminate global deletion lock, making PolyReader and FilePurger\n  never wait for a lock.\n- Redesign Lock API in preparation for native locks.\n- Remove LockFactory.\n- Fix locking bug with non-default merge lock timeout.\n- Fix locking bug with concurrent BackgroundMergers.\n- Port some tests to C."}, {"url": "https://api.github.com/repos/apache/lucy/commits/a3cf33f1efc796a284d6a5761142f89a1319ac52", "message": "Merge branch 'master' into improve-locking"}, {"url": "https://api.github.com/repos/apache/lucy/commits/7a64a288c36f7d3e3b30fd0f0605d7570e0c5a5a", "message": "Create files with FILE_ATTRIBUTE_NOT_CONTENT_INDEXED\n\nMight avoid problems with the Windows Search Service, although my\nearlier testing suggests that the only reliable solution is to\nexclude the folder via Indexing Options in Control Panel."}, {"url": "https://api.github.com/repos/apache/lucy/commits/54d5093f51b938e55fd734fbb1d3162f390452be", "message": "Make FSFolder always use Windows API\n\nFixes LUCY-324."}, {"url": "https://api.github.com/repos/apache/lucy/commits/3b1b63e8d8f7fcdf30d4c2af7c9ee519c662569a", "message": "Use Windows API to delete and rename files\n\nDelete files on Windows by calling CreateFile with\nFILE_FLAG_DELETE_ON_CLOSE and closing the handle immediately. Unlike\nDeleteFile, this allows files opened with FILE_SHARE_DELETE to be\n(eventually) deleted.\n\nPart of LUCY-324."}, {"url": "https://api.github.com/repos/apache/lucy/commits/de646e69ebc74cde8536b2b4b1a85ee4d5a6c54c", "message": "Fix t/051-fsfile.t cleanup on Windows"}, {"url": "https://api.github.com/repos/apache/lucy/commits/291a3269312a29792f8294fdf1b1f68dbfd94a79", "message": "Avoid rescanning the index folder for latest snapshot\n\nEliminate up to four unnecessary scans in BackgroudMerger:\n\n- BGMerger_init\n- S_merge_updated_deletions (twice)\n- BGMerger_Prepare_Commit\n\nEliminate two unnecessary scans in Indexer:\n\n- Indexer_init\n- Indexer_Prepare_Commit"}, {"url": "https://api.github.com/repos/apache/lucy/commits/040bb290f12f8df015b1d9ae99758f1600a52f18", "message": "Improve Analyzer documentation\n\nDocument that Analyzer subclasses must override the Equals method.\nAdd synopsis with example classes to Perl POD."}, {"url": "https://api.github.com/repos/apache/lucy/commits/6e8538a8834a49da7e8cce8b94decc130467b0f3", "message": "Move LockFileLock to separate file"}, {"url": "https://api.github.com/repos/apache/lucy/commits/2bd2bc611325ee643f325ecfd11d5227319949a8", "message": "Move host ivar from Lock to LockFileLock"}, {"url": "https://api.github.com/repos/apache/lucy/commits/d23b560dc34d1c1cbc731fdc745b4e72324d8717", "message": "Release locks on destruction"}, {"url": "https://api.github.com/repos/apache/lucy/commits/35388cd22600cb3c202cf11c8c9afd661c8f4fe4", "message": "Port LockFileLock tests to C"}, {"url": "https://api.github.com/repos/apache/lucy/commits/e06cdbf63d3036c3a33e5265444d827065539e92", "message": "Don't hide I/O errors behind LockErr\n\nOnly return a LockErr if there's lock contention, not on unrelated\nI/O errors."}, {"url": "https://api.github.com/repos/apache/lucy/commits/38a33badb310ba9fea5bf9a923277da4a82ec369", "message": "Remove Lock_Is_Locked"}, {"url": "https://api.github.com/repos/apache/lucy/commits/de14d4ca31ab27fc1569966c1b182fa4829afd40", "message": "Change lock acquitision order in BGMerger_init\n\nObtain the merge lock before the write lock so that an already running\nbackground merger won't abort when failing to acquire the write lock\nduring commit.\n\nRelease the merge lock at the very end of BGMerger_Commit. It doesn't\nreally matter when we release the merge lock after we acquired the\nwrite lock in BGMerger_Prepare_Commit. I think it makes the code\nclearer to release it at the very end of BGMerger_Commit."}, {"url": "https://api.github.com/repos/apache/lucy/commits/4e6e5bbf2814e8e2a824b5ae1b91d068233cd248", "message": "Improve merge lock handling\n\nDon't check the merge lock with Is_Locked in\nFilePurger_Purge_Aborted_Merge. This prevented background mergers from\ncleaning up because they already held the merge lock. Require that\ncallers hold the merge lock instead.\n\nDon't check the merge lock with Is_Locked in Indexer_init. Since we\nhold the write lock, and the merge.json file from aborted merge has\nbeen removed, the presence of a merge.json file is a reliable indicator\nthat it belongs to an active background merger. Move the merge lock\nrequest form S_maybe_merge to Indexer_init.\n\nAlso, S_maybe_merge used to Obtain the merge lock instead of merely\nRequesting it. Waiting for a potentially long-running background merger\nslows things down unnecessarily and increases the chance for write lock\ncontention. This didn't affect the default configuration which has a\nzero merge lock timeout."}, {"url": "https://api.github.com/repos/apache/lucy/commits/5270b988c477a2e1c110e2069c66bb2d3f27a60f", "message": "Rework snapshot and deletion locks\n\nRequest exclusive or shared snapshot locks instead of the global\ndeletion lock. This removes the need to retry lock requests and\nreduces contention."}, {"url": "https://api.github.com/repos/apache/lucy/commits/79161a4b233ce3570ecf4c48745b469ccb50aec7", "message": "Don't allow double obtain/release"}, {"url": "https://api.github.com/repos/apache/lucy/commits/3e2298650d8fc0213ce25078cadeb4f22d45bb5f", "message": "Remove LockFactory and make Lock a private class\n\nIf there are users who really use custom locks, this can be reverted."}, {"url": "https://api.github.com/repos/apache/lucy/commits/1a8e02df0a0257e4ba70de4a41504507b0ba8a47", "message": "Always check for stale locks in Is_Locked\n\nNote that checking for stale locks isn't necessary when requesting\nshared locks."}, {"url": "https://api.github.com/repos/apache/lucy/commits/bb83d0d77bf99ed09b2bbad782c3c1d3b94f04a9", "message": "Merge SharedLock into LockFileLock\n\nSupplying the lock type when requesting a lock better matches other\nfile lock APIs. Merging the implementations allows to convert\nMaybe_Delete_File into a static function.\n\nMake shared and exclusive locks check for locks of the other type\nexcept for exclusive locks created with `exclusive_only`.\n\nClear_Stale is broken for shared locks but will be removed with the\nfollowing commit."}, {"url": "https://api.github.com/repos/apache/lucy/commits/2051451de456f51e35345f12206ca4cb0040dd7c", "message": "Separate purging of snapshots and aborted merges\n\nPurge aborted merge when starting an Indexer/BGMerger session and\npurge snapshots at the end of Commit.\n\nRework FilePurger to use a single hash for purged and spared files\nwhen purging snapshots. Optimize Folder handling assuming that\nSnapshots only contain entries local to the index folder.\n\nMake sure to list the contents of the real directory, not the\nvirtual compound file directory. CFReaderDirHandle lists both real\nand virtual files which might be a bug in itself.\n\nPort BGMerger tests to C.\n\nTODO: Move Perl BGMerge test to t/binding."}, {"url": "https://api.github.com/repos/apache/lucy/commits/5f15a92bde4c63e2b0d1c3d8b74a294ed8a3d1f0", "message": "Make FSFileHandle always use Windows handles\n\nSwitch FSFileHandle over to WinAPI for open/close/write.\n\nAdd sanity checks to FileHandle_do_open.\n\nFix minor bug in Unix Write method (-1 return value was added to file\nlength). Make Windows Read method use synchronous API and add an extra\ncheck for unexpected EOF.\n\nFixes LUCY-321."}, {"url": "https://api.github.com/repos/apache/lucy/commits/d14281228c3368386c3d98e211687ead916cee1c", "message": "Fix EasyAnalyzer_new default\n\nLucy::Analyzer::EasyAnalyzer->new segfaulted without arguments."}, {"url": "https://api.github.com/repos/apache/lucy/commits/85ca41becddfc4a47c684b7b74e3cc51fe2cf688", "message": "Remove useless code from SegWriter.c"}], "pull_requests": [{"url": "https://api.github.com/repos/apache/lucy/pulls/55", "title": "Remove Compiler ivars", "body": "Remove all instance variables from the Compiler base class.\r\n\r\n- Make Compiler inherit from Obj instead of Query.\r\n- Use per-subclass ivar for boost if needed.\r\n- Copy some relevant ivars from the respective Query.\r\n- Fetch Similarity from DataReader's schema.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/apache/lucy/issues/comments/96991923", "body": "> Curiously, the changes broke a test for segment merging -- but the test was faulty and had been passing accidentally before. I believe the issue was that the pivot changes to Sort_quicksort resulted in a different ordering for tied elements; the old order passed but the new order failed.\n\n@rectang I didn't get any test failures, but this commit could in fact change the order of tied elements:\n\nhttps://github.com/nwellnhof/lucy-clownfish/commit/67fb2ea43da223421b0f38279f7866eaa1901672\n\nI should have made that more clear by splitting it into two commits. The off-by-one error is actually in a part of the code below that isn't touched by that commit. The last element with a key equal to the pivot wasn't swapped, because the loop exit condition used `<` instead of `<=`. But the changes above make everything work as it should when using `<`.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/96991923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/191797253", "body": "Please merge.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/191797253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/203376235", "body": "I see that you avoided any type changes to instance variables or method parameters and return values. So what we have now is a couple of explicit but still unchecked casts from `size_t` to `uint32_t`. This shouldn't matter in practice, but part of me prefers to convert all these variables and parameters to `size_t`, including I32Array and BitVector. Also, when serializing a `size_t` as 32-bit value, 100% correct code should check for overflow like\n\n```\nsize_t size = Vec_Get_Size(vector);\nif (size > UINT32_MAX) {\n    THROW(...);\n}\nOutStream_Write_U32(outstream, (uint32_t)size);\n```\n\n(Or check before adding elements to such arrays.)\n\nOTOH, this seems silly for things like the number of PolyQuery children, document fields, or sort rules.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/203376235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/209410043", "body": "`Next_Hit` and `To_Array` still work with `int32_t` indices. For now, we should at least add a check like\n\n```\nif (ivars->cap > INT32_MAX) { THROW(...) }\n```\n\nIn the long run, I'd suggest to change the return value of `Next_Hit`, remove `To_Array`, and switch its users over to `Next_Hit`.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/209410043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/212793699", "body": ":+1: for doing this tedious work.\n\n(The build fails on Windows because Charmonizer doesn't support PRId32 yet.)\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/212793699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/213288815", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/213288815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/214684946", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/214684946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/217110874", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/217110874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/217629392", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/217629392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/lucy/comments/2314104", "body": "With this change, it's impossible to pass custom cflags via the command line, isn't it?\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/comments/2314104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/lucy/pulls/comments/58843541", "body": "I just realized that Perl switched from `I32` to `SSize_t` for array sizes in 5.20. Ideally, we should add a typedef depending on the Perl version and use it for `size` and `i`. But this can be done later.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/58843541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/59541301", "body": "The overflow check should be:\n\n```\nif (bit_size > SIZE_MAX - 7) {\n    return SIZE_MAX / 8 + 1;\n}\n```\n\nOr maybe an alternative implementation:\n\n```\nstatic CFISH_INLINE size_t\nSI_octet_size(size_t bit_size) {\n    if (bit_size == 0) { return 0; }\n    return (bit_size - 1) / 8 + 1;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/59541301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/60538825", "body": "I think this should be `OutStream_Write_CI32`.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/60538825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/61550957", "body": "Isn't the cast needed to avoid overflow in the multiplication?\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/61550957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/62415281", "body": "We should probably get rid of `%i8` and `%u8` (in Clownfish).\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/62415281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rectang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/lucy/issues/comments/96907430", "body": "I've checked over the `IxManager_Recycle` changes.  They look good to me.\n\nCuriously, the changes broke a test for segment merging -- but the test was faulty and had been passing accidentally before.  I believe the issue was that the pivot changes to Sort_quicksort resulted in a different ordering for tied elements; the old order passed but the new order failed.  Here is a patch to make the test robust against such fluctuations: https://gist.github.com/rectang/720462b157c884331b96\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/96907430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/96907490", "body": "All the commits on this pull request look good.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/96907490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/205525390", "body": "I agree with making I32Array and BitVector use size_t internally to match the other types. Once they are converted, it will make sense to go back and fix the unchecked-but-explicit casts.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/205525390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/206541824", "body": "The Go bindings need some more work for this changeset. I'll submit another version.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/206541824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/213116250", "body": "I'll add a couple small commits before merging to address those issues.  Thanks for the review!\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/213116250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/lucy/comments/2314197", "body": "Hmm, for the source files compiled with clownfish_params => source, yes.  FWIW, extra_compiler_flags still gets used when compiling the .xs files.\n\nMy goal here is to consolidate build stuff which is common across hosts into a shared structure so that it doesn't have to be duplicated across each host build.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/comments/2314197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/lucy/pulls/comments/61782155", "body": "Good catch -- I'll add a commit to this pull request reverting that line.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/61782155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "asfbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/lucy/issues/comments/105383853", "body": "Marvin Humphrey  on dev@lucy.apache.org replies:\n\n+1 to merge.\n\nMarvin Humphrey\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/105383853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/138748083", "body": "Marvin Humphrey  on dev@lucy.apache.org replies:\n\nI reviewed a diff of the generated POD before and after merging this branch\n(and the corresponding Clownfish branch). A summary of the changes is below my\nsig.\n\nUnsurprisingly for a change of this magnitude, there were a few glitches.\nThese are the ones I think we should to attend to:\n-   Restore documentation for several methods IndexSearcher inherits\n  from Searcher.  Same with PolySearcher (though it's a less important\n  class).\n-   Restore Doc#add_fields.\n-   IndexReader#offsets became IndexReader#_offsets and should be restored.\n-   The PostingList methods Next, Advance, and Get_Doc_ID should become\n  public.\n-   Restore BitCollector#collect\n-   Restore ANDQuery#add_child and ORQuery#add_child.\n\nMarvin Humphrey\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/138748083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/154602028", "body": "Marvin Humphrey  on dev@lucy.apache.org replies:\n\n+1 to merge.  Thank you for diving in!\n\nSortExternal is fairly large, fairly easy to make mistakes in, and not\nthat easy to keep in your head.  I scrutinized these commits closely\nenough to satisfy myself that I couldn't find any local mistakes in\nthe diffs, and that if there were any big conceptual mistakes, they\nwould probably have caused the whole module to blow up.\n\nMarvin Humphrey\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/154602028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}}, "2": {"karpet": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/lucy/commits/a1a61b7282ec5068b72dc5c912be26c508f0bbc8", "message": "Add sha512 explicit algorithm to file extension"}, {"url": "https://api.github.com/repos/apache/lucy/commits/488d6f4cfbf23faf79c52de193fc50de6152236e", "message": "Add test showing custom analyzer\n\n**Why**: User discussion on email list revealed our Analyzer docs\nneeded bolstering. This test demonstrates the simple custom\nanalyzer use case.\n\nRef https://lists.apache.org/thread.html/7e0f446bcccddf8faaffbb4fbb5a5265016a06f736f30757f0ee35af@%3Cuser.lucy.apache.org%3E"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nwellnhof": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/lucy/commits/598b4d074029998d30ad9a3b85190cc95aa00e0a", "message": "Fix handling of trailing double quotes in QueryParser\n\nFixes LUCY-325."}, {"url": "https://api.github.com/repos/apache/lucy/commits/b22794165abfcd33d5fd4e578397a6a1926f9c6b", "message": "Regen charmonizer.c for --rpath fix"}, {"url": "https://api.github.com/repos/apache/lucy/commits/5535d25f8a5b1ad86e2d5540589c6e46654e350e", "message": "Fix previous merge of 'improve-locking' branch\n\nI accidentally merged the first version of the 'improve-locking' branch.\nAdd changes to the 'v2' branch as separate commit."}, {"url": "https://api.github.com/repos/apache/lucy/commits/d7feb997003ae1fc84a348e8584ea97b69b02d95", "message": "Merge branch 'improve-locking'\n\nFixes LUCY-323.\n\n- Major rewrite of FilePurger, making it do less work.\n- Eliminate global deletion lock, making PolyReader and FilePurger\n  never wait for a lock.\n- Redesign Lock API in preparation for native locks.\n- Remove LockFactory.\n- Fix locking bug with non-default merge lock timeout.\n- Fix locking bug with concurrent BackgroundMergers.\n- Port some tests to C."}, {"url": "https://api.github.com/repos/apache/lucy/commits/a3cf33f1efc796a284d6a5761142f89a1319ac52", "message": "Merge branch 'master' into improve-locking"}, {"url": "https://api.github.com/repos/apache/lucy/commits/7a64a288c36f7d3e3b30fd0f0605d7570e0c5a5a", "message": "Create files with FILE_ATTRIBUTE_NOT_CONTENT_INDEXED\n\nMight avoid problems with the Windows Search Service, although my\nearlier testing suggests that the only reliable solution is to\nexclude the folder via Indexing Options in Control Panel."}, {"url": "https://api.github.com/repos/apache/lucy/commits/54d5093f51b938e55fd734fbb1d3162f390452be", "message": "Make FSFolder always use Windows API\n\nFixes LUCY-324."}, {"url": "https://api.github.com/repos/apache/lucy/commits/3b1b63e8d8f7fcdf30d4c2af7c9ee519c662569a", "message": "Use Windows API to delete and rename files\n\nDelete files on Windows by calling CreateFile with\nFILE_FLAG_DELETE_ON_CLOSE and closing the handle immediately. Unlike\nDeleteFile, this allows files opened with FILE_SHARE_DELETE to be\n(eventually) deleted.\n\nPart of LUCY-324."}, {"url": "https://api.github.com/repos/apache/lucy/commits/de646e69ebc74cde8536b2b4b1a85ee4d5a6c54c", "message": "Fix t/051-fsfile.t cleanup on Windows"}, {"url": "https://api.github.com/repos/apache/lucy/commits/291a3269312a29792f8294fdf1b1f68dbfd94a79", "message": "Avoid rescanning the index folder for latest snapshot\n\nEliminate up to four unnecessary scans in BackgroudMerger:\n\n- BGMerger_init\n- S_merge_updated_deletions (twice)\n- BGMerger_Prepare_Commit\n\nEliminate two unnecessary scans in Indexer:\n\n- Indexer_init\n- Indexer_Prepare_Commit"}, {"url": "https://api.github.com/repos/apache/lucy/commits/040bb290f12f8df015b1d9ae99758f1600a52f18", "message": "Improve Analyzer documentation\n\nDocument that Analyzer subclasses must override the Equals method.\nAdd synopsis with example classes to Perl POD."}, {"url": "https://api.github.com/repos/apache/lucy/commits/6e8538a8834a49da7e8cce8b94decc130467b0f3", "message": "Move LockFileLock to separate file"}, {"url": "https://api.github.com/repos/apache/lucy/commits/2bd2bc611325ee643f325ecfd11d5227319949a8", "message": "Move host ivar from Lock to LockFileLock"}, {"url": "https://api.github.com/repos/apache/lucy/commits/d23b560dc34d1c1cbc731fdc745b4e72324d8717", "message": "Release locks on destruction"}, {"url": "https://api.github.com/repos/apache/lucy/commits/35388cd22600cb3c202cf11c8c9afd661c8f4fe4", "message": "Port LockFileLock tests to C"}, {"url": "https://api.github.com/repos/apache/lucy/commits/e06cdbf63d3036c3a33e5265444d827065539e92", "message": "Don't hide I/O errors behind LockErr\n\nOnly return a LockErr if there's lock contention, not on unrelated\nI/O errors."}, {"url": "https://api.github.com/repos/apache/lucy/commits/38a33badb310ba9fea5bf9a923277da4a82ec369", "message": "Remove Lock_Is_Locked"}, {"url": "https://api.github.com/repos/apache/lucy/commits/de14d4ca31ab27fc1569966c1b182fa4829afd40", "message": "Change lock acquitision order in BGMerger_init\n\nObtain the merge lock before the write lock so that an already running\nbackground merger won't abort when failing to acquire the write lock\nduring commit.\n\nRelease the merge lock at the very end of BGMerger_Commit. It doesn't\nreally matter when we release the merge lock after we acquired the\nwrite lock in BGMerger_Prepare_Commit. I think it makes the code\nclearer to release it at the very end of BGMerger_Commit."}, {"url": "https://api.github.com/repos/apache/lucy/commits/4e6e5bbf2814e8e2a824b5ae1b91d068233cd248", "message": "Improve merge lock handling\n\nDon't check the merge lock with Is_Locked in\nFilePurger_Purge_Aborted_Merge. This prevented background mergers from\ncleaning up because they already held the merge lock. Require that\ncallers hold the merge lock instead.\n\nDon't check the merge lock with Is_Locked in Indexer_init. Since we\nhold the write lock, and the merge.json file from aborted merge has\nbeen removed, the presence of a merge.json file is a reliable indicator\nthat it belongs to an active background merger. Move the merge lock\nrequest form S_maybe_merge to Indexer_init.\n\nAlso, S_maybe_merge used to Obtain the merge lock instead of merely\nRequesting it. Waiting for a potentially long-running background merger\nslows things down unnecessarily and increases the chance for write lock\ncontention. This didn't affect the default configuration which has a\nzero merge lock timeout."}, {"url": "https://api.github.com/repos/apache/lucy/commits/5270b988c477a2e1c110e2069c66bb2d3f27a60f", "message": "Rework snapshot and deletion locks\n\nRequest exclusive or shared snapshot locks instead of the global\ndeletion lock. This removes the need to retry lock requests and\nreduces contention."}, {"url": "https://api.github.com/repos/apache/lucy/commits/79161a4b233ce3570ecf4c48745b469ccb50aec7", "message": "Don't allow double obtain/release"}, {"url": "https://api.github.com/repos/apache/lucy/commits/3e2298650d8fc0213ce25078cadeb4f22d45bb5f", "message": "Remove LockFactory and make Lock a private class\n\nIf there are users who really use custom locks, this can be reverted."}, {"url": "https://api.github.com/repos/apache/lucy/commits/1a8e02df0a0257e4ba70de4a41504507b0ba8a47", "message": "Always check for stale locks in Is_Locked\n\nNote that checking for stale locks isn't necessary when requesting\nshared locks."}, {"url": "https://api.github.com/repos/apache/lucy/commits/bb83d0d77bf99ed09b2bbad782c3c1d3b94f04a9", "message": "Merge SharedLock into LockFileLock\n\nSupplying the lock type when requesting a lock better matches other\nfile lock APIs. Merging the implementations allows to convert\nMaybe_Delete_File into a static function.\n\nMake shared and exclusive locks check for locks of the other type\nexcept for exclusive locks created with `exclusive_only`.\n\nClear_Stale is broken for shared locks but will be removed with the\nfollowing commit."}, {"url": "https://api.github.com/repos/apache/lucy/commits/2051451de456f51e35345f12206ca4cb0040dd7c", "message": "Separate purging of snapshots and aborted merges\n\nPurge aborted merge when starting an Indexer/BGMerger session and\npurge snapshots at the end of Commit.\n\nRework FilePurger to use a single hash for purged and spared files\nwhen purging snapshots. Optimize Folder handling assuming that\nSnapshots only contain entries local to the index folder.\n\nMake sure to list the contents of the real directory, not the\nvirtual compound file directory. CFReaderDirHandle lists both real\nand virtual files which might be a bug in itself.\n\nPort BGMerger tests to C.\n\nTODO: Move Perl BGMerge test to t/binding."}, {"url": "https://api.github.com/repos/apache/lucy/commits/5f15a92bde4c63e2b0d1c3d8b74a294ed8a3d1f0", "message": "Make FSFileHandle always use Windows handles\n\nSwitch FSFileHandle over to WinAPI for open/close/write.\n\nAdd sanity checks to FileHandle_do_open.\n\nFix minor bug in Unix Write method (-1 return value was added to file\nlength). Make Windows Read method use synchronous API and add an extra\ncheck for unexpected EOF.\n\nFixes LUCY-321."}, {"url": "https://api.github.com/repos/apache/lucy/commits/d14281228c3368386c3d98e211687ead916cee1c", "message": "Fix EasyAnalyzer_new default\n\nLucy::Analyzer::EasyAnalyzer->new segfaulted without arguments."}, {"url": "https://api.github.com/repos/apache/lucy/commits/85ca41becddfc4a47c684b7b74e3cc51fe2cf688", "message": "Remove useless code from SegWriter.c"}], "pull_requests": [{"url": "https://api.github.com/repos/apache/lucy/pulls/55", "title": "Remove Compiler ivars", "body": "Remove all instance variables from the Compiler base class.\r\n\r\n- Make Compiler inherit from Obj instead of Query.\r\n- Use per-subclass ivar for boost if needed.\r\n- Copy some relevant ivars from the respective Query.\r\n- Fetch Similarity from DataReader's schema.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/apache/lucy/issues/comments/96991923", "body": "> Curiously, the changes broke a test for segment merging -- but the test was faulty and had been passing accidentally before. I believe the issue was that the pivot changes to Sort_quicksort resulted in a different ordering for tied elements; the old order passed but the new order failed.\n\n@rectang I didn't get any test failures, but this commit could in fact change the order of tied elements:\n\nhttps://github.com/nwellnhof/lucy-clownfish/commit/67fb2ea43da223421b0f38279f7866eaa1901672\n\nI should have made that more clear by splitting it into two commits. The off-by-one error is actually in a part of the code below that isn't touched by that commit. The last element with a key equal to the pivot wasn't swapped, because the loop exit condition used `<` instead of `<=`. But the changes above make everything work as it should when using `<`.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/96991923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/191797253", "body": "Please merge.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/191797253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/203376235", "body": "I see that you avoided any type changes to instance variables or method parameters and return values. So what we have now is a couple of explicit but still unchecked casts from `size_t` to `uint32_t`. This shouldn't matter in practice, but part of me prefers to convert all these variables and parameters to `size_t`, including I32Array and BitVector. Also, when serializing a `size_t` as 32-bit value, 100% correct code should check for overflow like\n\n```\nsize_t size = Vec_Get_Size(vector);\nif (size > UINT32_MAX) {\n    THROW(...);\n}\nOutStream_Write_U32(outstream, (uint32_t)size);\n```\n\n(Or check before adding elements to such arrays.)\n\nOTOH, this seems silly for things like the number of PolyQuery children, document fields, or sort rules.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/203376235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/209410043", "body": "`Next_Hit` and `To_Array` still work with `int32_t` indices. For now, we should at least add a check like\n\n```\nif (ivars->cap > INT32_MAX) { THROW(...) }\n```\n\nIn the long run, I'd suggest to change the return value of `Next_Hit`, remove `To_Array`, and switch its users over to `Next_Hit`.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/209410043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/212793699", "body": ":+1: for doing this tedious work.\n\n(The build fails on Windows because Charmonizer doesn't support PRId32 yet.)\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/212793699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/213288815", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/213288815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/214684946", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/214684946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/217110874", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/217110874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/217629392", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/217629392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/lucy/comments/2314104", "body": "With this change, it's impossible to pass custom cflags via the command line, isn't it?\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/comments/2314104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/lucy/pulls/comments/58843541", "body": "I just realized that Perl switched from `I32` to `SSize_t` for array sizes in 5.20. Ideally, we should add a typedef depending on the Perl version and use it for `size` and `i`. But this can be done later.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/58843541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/59541301", "body": "The overflow check should be:\n\n```\nif (bit_size > SIZE_MAX - 7) {\n    return SIZE_MAX / 8 + 1;\n}\n```\n\nOr maybe an alternative implementation:\n\n```\nstatic CFISH_INLINE size_t\nSI_octet_size(size_t bit_size) {\n    if (bit_size == 0) { return 0; }\n    return (bit_size - 1) / 8 + 1;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/59541301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/60538825", "body": "I think this should be `OutStream_Write_CI32`.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/60538825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/61550957", "body": "Isn't the cast needed to avoid overflow in the multiplication?\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/61550957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/62415281", "body": "We should probably get rid of `%i8` and `%u8` (in Clownfish).\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/62415281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rectang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/lucy/issues/comments/96907430", "body": "I've checked over the `IxManager_Recycle` changes.  They look good to me.\n\nCuriously, the changes broke a test for segment merging -- but the test was faulty and had been passing accidentally before.  I believe the issue was that the pivot changes to Sort_quicksort resulted in a different ordering for tied elements; the old order passed but the new order failed.  Here is a patch to make the test robust against such fluctuations: https://gist.github.com/rectang/720462b157c884331b96\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/96907430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/96907490", "body": "All the commits on this pull request look good.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/96907490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/205525390", "body": "I agree with making I32Array and BitVector use size_t internally to match the other types. Once they are converted, it will make sense to go back and fix the unchecked-but-explicit casts.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/205525390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/206541824", "body": "The Go bindings need some more work for this changeset. I'll submit another version.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/206541824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/213116250", "body": "I'll add a couple small commits before merging to address those issues.  Thanks for the review!\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/213116250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/lucy/comments/2314197", "body": "Hmm, for the source files compiled with clownfish_params => source, yes.  FWIW, extra_compiler_flags still gets used when compiling the .xs files.\n\nMy goal here is to consolidate build stuff which is common across hosts into a shared structure so that it doesn't have to be duplicated across each host build.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/comments/2314197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/lucy/pulls/comments/61782155", "body": "Good catch -- I'll add a commit to this pull request reverting that line.\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/pulls/comments/61782155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "asfbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/lucy/issues/comments/105383853", "body": "Marvin Humphrey  on dev@lucy.apache.org replies:\n\n+1 to merge.\n\nMarvin Humphrey\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/105383853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/138748083", "body": "Marvin Humphrey  on dev@lucy.apache.org replies:\n\nI reviewed a diff of the generated POD before and after merging this branch\n(and the corresponding Clownfish branch). A summary of the changes is below my\nsig.\n\nUnsurprisingly for a change of this magnitude, there were a few glitches.\nThese are the ones I think we should to attend to:\n-   Restore documentation for several methods IndexSearcher inherits\n  from Searcher.  Same with PolySearcher (though it's a less important\n  class).\n-   Restore Doc#add_fields.\n-   IndexReader#offsets became IndexReader#_offsets and should be restored.\n-   The PostingList methods Next, Advance, and Get_Doc_ID should become\n  public.\n-   Restore BitCollector#collect\n-   Restore ANDQuery#add_child and ORQuery#add_child.\n\nMarvin Humphrey\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/138748083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/lucy/issues/comments/154602028", "body": "Marvin Humphrey  on dev@lucy.apache.org replies:\n\n+1 to merge.  Thank you for diving in!\n\nSortExternal is fairly large, fairly easy to make mistakes in, and not\nthat easy to keep in your head.  I scrutinized these commits closely\nenough to satisfy myself that I couldn't find any local mistakes in\nthe diffs, and that if there were any big conceptual mistakes, they\nwould probably have caused the whole module to blow up.\n\nMarvin Humphrey\n", "reactions": {"url": "https://api.github.com/repos/apache/lucy/issues/comments/154602028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}}}}