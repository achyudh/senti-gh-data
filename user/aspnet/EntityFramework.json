{"_default": {"1": {"eduherminio": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10722", "title": "Undesired restrictions are applied to composite indexes involving nullable FKs", "body": "### Issue description\r\n\r\nUndesired restrictions are applied to composite indexes/unique constraints when **nullable FKs** are involved.\r\n\r\n\r\nProviding the following restriction and `FK_TO_Entity2` being a nullable FK to another entity:\r\n```\r\n            modelBuilder.Entity<Sample>()\r\n                .HasIndex(entity => new { entity.field, entity.FK_TO_Entity2 })\r\n                .IsUnique();\r\n```\r\n\r\nIn SQLServer, the following index is created:\r\n```sql\r\n          CREATE UNIQUE NONCLUSTERED INDEX[IX_field_FK_TO_Entity2] ON[dbo].[Sample]\r\n          (\r\n            [field] ASC,\r\n            [FK_TO_Entity2] ASC\r\n          )\r\n          WHERE([field] IS NOT NULL AND [FK_TO_Entity2] IS NOT NULL)\r\n```\r\n\r\nThat uniqueness condition is intended to be applied even when `FK_TO_Entity2` is null, but the restriction doesn't allow that to happen.\r\n\r\nPD: `field` is a required property of `Sample`, I haven't tested if the behavior is the same with not-required but not FK fields (which would mean that the issue is related to all nullable fields) or the only restriction applied would only be `WHERE([field] [FK_TO_Entity2] IS NOT NULL` (and therefore, the issue would only have to do with nullable FKs)\r\n\r\n### Steps to reproduce\r\nA full example can be found in [this repo](https://github.com/eduherminio/EFCore-Issue10722).\r\nExpected behavior is fully explained there, with samples.\r\n\r\n### Workaround\r\nSince these undesired constraints are just filters, a workaround we found was to 'override' those filters, by adding a custom, meaningless filter.\r\n\r\nSince, as mentioned, `field` is a required field, unexpected behavior is avoided by using:\r\n```\r\n            modelBuilder.Entity<Sample>()\r\n                .HasIndex(entity=> new { entity.field, user.FK_TO_Entity2 })\r\n                .IsUnique()\r\n                .HasFilter(\"field is not null\");\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer (behaviour tested in Sqlite too)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10665", "title": "Allow direct access to discriminators' value using Fluent Api", "body": "### Issue description\r\nProviding TPH & the following, simplified  model:\r\n```c#\r\n    public class Organization\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n    public class Company : Organization { }\r\n    public class Department : Organization { }\r\n```\r\n`OnModelCreating`: the following restriction is applied to all Organizations, so two Departments with the same name cannot be created.\r\n\r\n```c#\r\n    modelBuilder.Entity<Company>()\r\n        .HasBaseType<Organization>();\r\n\r\n    modelBuilder.Entity<Company>()\r\n        .HasIndex(c => c.Name).IsUnique();\r\n```\r\n### Workaround\r\nWe've found the following workaround, using a custom filter:\r\n```c#\r\n    modelBuilder.Entity<Organization>()\r\n        .HasDiscriminator<int>(\"Discriminator\")\r\n        .HasValue<Company>(1)\r\n        .HasValue<Department>(2);\r\n\r\n    modelBuilder.Entity<Company>()\r\n        .HasIndex(c => c.Name).IsUnique()\r\n        .HasFilter(\"Discriminator IN (1)\");\r\n```\r\n\r\nHowever, a more direct way of configuring it would be desirable.\r\n\r\n### Further technical details\r\nEF Core version:  2.0.1\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "techniq": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10721", "title": "The binary operator AndAlso is not defined for the types 'System.Nullable`1[System.Boolean]' and 'System.Boolean'", "body": "While attempting to run an OData query with a `$filter` that contains 2 conditionals, one of which is on a boolean property, I am receiving the following exception.\r\n\r\n```\r\nException message: System.InvalidOperationException: The binary operator AndAlso is not defined for the types 'System.Nullable`1[System.Boolean]' and 'System.Boolean'.\r\n\r\nStack trace:\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n      Request starting HTTP/1.1 GET http://localhost:5000/odata/Employees?$filter=IsActive%20eq%20true%20and%20DepartmentId%20eq%2023&$top=25  \r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]\r\n      Executing action method Dashboard.Api.Controllers.EmployeesController.Get (Dashboard.Api) with arguments ((null)) - ModelState is Valid\r\ninfo: Microsoft.EntityFrameworkCore.Infrastructure[10403]\r\n      Entity Framework Core 2.1.0-preview1-28103 initialized 'DashboardContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None\r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor[1]\r\n      Executing ObjectResult, writing value Microsoft.AspNetCore.Mvc.ControllerContext.\r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]\r\n      Executed action Dashboard.Api.Controllers.EmployeesController.Get (Dashboard.Api) in 5.43ms\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]\r\n      An unhandled exception has occurred while executing the request\r\nSystem.InvalidOperationException: The binary operator AndAlso is not defined for the types 'System.Nullable`1[System.Boolean]' and 'System.Boolean'.\r\n   at System.Linq.Expressions.Expression.AndAlso(Expression left, Expression right, MethodInfo method)\r\n   at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.ProcessComparisonExpression(BinaryExpression binaryExpression)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression expression)\r\n   at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitWhereClause(WhereClause whereClause, QueryModel queryModel, Int32 index)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses(ObservableCollection`1 bodyClauses, QueryModel queryModel)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, IQueryModelGenerator queryModelGenerator, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n   at Remotion.Linq.QueryableBase`1.System.Collections.IEnumerable.GetEnumerator()\r\n   at Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSetSerializer.WriteResourceSet(IEnumerable enumerable, IEdmTypeReference resourceSetType, ODataWriter writer, ODataSerializerContext writeContext)\r\n   at Microsoft.AspNet.OData.Formatter.ODataOutputFormatterHelper.WriteToStream(Type type, Object value, IEdmModel model, ODataVersion version, Uri baseAddress, MediaTypeHeaderValue contentType, IWebApiUrlHelper internaUrlHelper, IWebApiRequestMessage internalRequest, IWebApiHeaders internalRequestHeaders, Func`2 getODataMessageWrapper, Func`2 getEdmTypeSerializer, Func`2 getODataPayloadSerializer, Func`1 getODataSerializerContext)\r\n   at Microsoft.AspNet.OData.Formatter.ODataOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.<Invoke>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\nwarn: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]\r\n      The response has already started, the error page middleware will not be executed.\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HLAUEM7BGG22\", Request id \"0HLAUEM7BGG22:00000001\": An unhandled exception was thrown by the application.\r\nSystem.InvalidOperationException: The binary operator AndAlso is not defined for the types 'System.Nullable`1[System.Boolean]' and 'System.Boolean'.\r\n   at System.Linq.Expressions.Expression.AndAlso(Expression left, Expression right, MethodInfo method)\r\n   at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.ProcessComparisonExpression(BinaryExpression binaryExpression)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression expression)\r\n   at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitWhereClause(WhereClause whereClause, QueryModel queryModel, Int32 index)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses(ObservableCollection`1 bodyClauses, QueryModel queryModel)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, IQueryModelGenerator queryModelGenerator, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n   at Remotion.Linq.QueryableBase`1.System.Collections.IEnumerable.GetEnumerator()\r\n   at Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSetSerializer.WriteResourceSet(IEnumerable enumerable, IEdmTypeReference resourceSetType, ODataWriter writer, ODataSerializerContext writeContext)\r\n   at Microsoft.AspNet.OData.Formatter.ODataOutputFormatterHelper.WriteToStream(Type type, Object value, IEdmModel model, ODataVersion version, Uri baseAddress, MediaTypeHeaderValue contentType, IWebApiUrlHelper internaUrlHelper, IWebApiRequestMessage internalRequest, IWebApiHeaders internalRequestHeaders, Func`2 getODataMessageWrapper, Func`2 getEdmTypeSerializer, Func`2 getODataPayloadSerializer, Func`1 getODataSerializerContext)\r\n   at Microsoft.AspNet.OData.Formatter.ODataOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.<Invoke>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Hosting.Internal.RequestServicesContainerMiddleware.<Invoke>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n      Request finished in 20.373ms 200 application/json; odata.metadata=minimal; odata.streaming=true; charset=utf-8\r\n```\r\n\r\nI saw the following related (and closed/merged) issues and PRs (and is the reason I tried the latest nightly, although it did not resolve the issue)\r\n- https://github.com/aspnet/EntityFrameworkCore/issues/5899\r\n- https://github.com/aspnet/EntityFrameworkCore/issues/7061\r\n- https://github.com/aspnet/EntityFrameworkCore/issues/9468\r\n- https://github.com/aspnet/EntityFrameworkCore/pull/10106\r\n\r\n### Steps to reproduce\r\nAttempt to use an OData query with at least 1 boolean property: `/Employees?$filter=IsActive eq true and DepartmentId eq 23&$top=25`\r\n\r\nI would have left an issue on [OData/WebApi](https://github.com/OData/WebApi/issues) but it appears to be specifically an EntityFrameworkCore issue\r\n\r\n### Further technical details\r\nEF Core version: `2.1.0-preview1-28103`\r\nDatabase Provider: `Microsoft.EntityFrameworkCore.SqlServer`\r\nOperating system: Mac\r\nIDE: Visual Studio for Mac / dotnet cli (2.0.3)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bricelam": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10719", "title": "Oracle: Only one column per table can be configured as 'Identity'.", "body": "AFAIK, this restriction shouldn't exist on Oracle...", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10718", "title": "Oracle Migrations: Column is already NOT NULL", "body": "When altering a non-nullable column, DDL like this is generated:\r\n\r\n``` sql\r\nALTER TABLE \"Entities\" MODIFY \"Int32Property\" NUMBER(10) NOT NULL\r\n```\r\n\r\nWhich results in the following error.\r\n\r\n> ORA-01442: column to be modified to NOT NULL is already NOT NULL", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a5a010e18934d61d236587f28869443e33bb34bf", "message": ":green_heart: React more to aspnet/Microsoft.Data.Sqlite#475\n\nFixes aspnet/Microsoft.Data.Sqlite#476"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/d7c350faaeace555c727a9b7cc38298e51d1cb46", "message": "Merge branch 'release/2.0.0' into dev\n\n# Conflicts:\n#\tsrc/EFCore.Relational.Specification.Tests/TransactionTestBase.cs\n#\ttest/EFCore.Sqlite.FunctionalTests/TransactionSqliteFixture.cs"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/984c2c87d67d996e2a3c578ff1a7e8e1c4e0da80", "message": ":green_heart: React to aspnet/Microsoft.Data.Sqlite#475"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e1fcb3a4720f1ebc725d2ea1099655bebaafb42a", "message": "Merge branch 'release/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3f802d209f7e50c5b3c1a01d82bf82fc55bf5b22", "message": "PMC Tools: Use File.ReadAllText to support PowerShell 3.0"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e1710e11abe2ee30d289b9fca63858bbc213689f", "message": "Migrations: Enhance DiffContext in MigrationsModelDiffer\n\nPairs model objects earlier to enable better diffing of subsequent objects."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/20619934aab66e54c0ec26e63f524e4bfa3fb2dd", "message": "Migrations: Test owned types, table splitting, and inheritance more\n\nFixes #9873, fixes #10099"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/af8ea3247f2d2122147a1a02a73f90315bb0e8cb", "message": "PMC Tools: Redirect standard error\n\nFixes #10338"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/131277966", "body": "Will revert. Using to test on AppVeyor.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/131277966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/36540043", "body": ":frowning: Looks like there's no way in KoreBuild to exclude things from [the targets](https://github.com/aspnet/Universe/blob/dev/build/_k-standard-goals.shade#L39-L52) that run npm, bower & grunt.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/36540043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136198764", "body": "Pretty sure we can remove this whole thing now...", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136198764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tlycken": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10717", "title": "Idempotent scripts aren't really idempotent - they fail the second time", "body": "We're using the `script --idempotent` feature to generate database migration scripts that our CI system can run without having detailed knowledge about what migrations to apply, and/or installing more tooling than `Invoke-SqlCmd` (which comes with the database installation anyway). However, we've discovered that in certain cases, they aren't idempotent - specifically, if one migration does multiple things, and any but the first ones fail, you're left in a \"in the middle of\" state that can be tricky to recover from without very manual intervention.\r\n\r\nFor example, consider a migration with two actions like this:\r\n\r\n* Add a new column\r\n* Do something that fails\r\n\r\n`dotnet ef migrations script --idempotent` will generate a script along the following lines:\r\n\r\n```\r\nIF EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20180117085558_MyMigration')\r\nBEGIN\r\n    ALTER TABLE [FooEntities] ADD [NewColumn] nvarchar(max) NULL;\r\nEND;\r\n\r\nGO\r\n\r\nIF EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20180117085558_MyMigration')\r\nBEGIN\r\n    -- do something that fails here      \r\nEND;\r\n\r\nGO\r\n\r\nGO\r\n\r\nIF EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20180117085558_MyMigration')\r\nBEGIN\r\n    INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])\r\n    VALUES  (N'20180117085558_MyMigration');\r\nEND;\r\n\r\nGO\r\n```\r\n\r\nWhen executing this script (e.g. with `Invoke-SqlCmd`, it will add the column, and then fail before adding a row to the migrations history. Thus, when running the script a second time, it will fail even earlier, when trying to add a column that already exists, and it will thus not be possible to recover by just fixing the broken migration step and trying again.\r\n\r\nI believe (but I might be incorrect here) that EF 6.x wraps each migration in a transaction, that ensure that you either apply the entire thing, or none of it. It seems (although I've just tested by running `dotnet ef database update` a couple of times) that the CLI tooling for EF Core does this as well. Would it be reasonable to implement that also in the generated scripts?\r\n\r\n---\r\n\r\nMy setup:\r\n\r\ndotnet --version: 2.1.4\r\nEF Core packages and tooling: 2.0.1\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AhmedRagheb": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10716", "title": "Get the values of Group by using MyGroup.ToList() Throw exception, Must select First", "body": "Get the values of Group by using grp.ToList() Throw exception I must Select First\r\n\r\n```\r\nException message:\r\nStack trace:\r\n```\r\nExpression of type 'System.Linq.IAsyncGrouping`2[x,y]' \r\ncannot be used for parameter of type 'System.Collections.Generic.IEnumerable`1[y]' \r\nof method 'System.Collections.Generic.List`1[y] \r\nToList[y](System.Collections.Generic.IEnumerable`1[y])'\r\nParameter name: arg0\r\n at System.Dynamic.Utils.ExpressionUtils.ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arguments, ParameterInfo pi, String methodParamName, String argumentParamName, Int32 index)\r\n   at System.Linq.Expressions.Expression.Call(MethodInfo method, Expression arg0)\r\n   at System.Linq.Expressions.MethodCallExpression1.Rewrite(Expression instance, IReadOnlyList`1 args)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(MemberAssignment node)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(MemberBinding node)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit[T](ReadOnlyCollection`1 nodes, Func`2 elementVisitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(MemberInitExpression node)\r\n   at System.Linq.Expressions.MemberInitExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(Expression expression, IQuerySource querySource, Boolean inProjection)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass24_0`1.<CompileAsyncQuery>b__0()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.System.Collections.Generic.IAsyncEnumerable<TResult>.GetEnumerator()\r\n   at System.Linq.AsyncEnumerable.<Aggregate_>d__6`3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n### Steps to reproduce\r\n\r\n```c#\r\nvar q =  await (\r\n              from t1 in _context.T1\r\n\t      join t2 in _context.T2 on t1.Id equals t2.Id\r\n              group t2 by t1 into grp\r\n              select new MyModel\r\n\t      {\r\n\t\t  T1 = grp.Key,\r\n\t\t  T2s = grp.ToList() // THROW exception .. should use  grp..Select(x => x).ToList() \r\n\t      }\r\n            ).ToListAsync();\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE:  Visual Studio 2017 15.4\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndriySvyryd": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10715", "title": "Inheritance validation should allow setting base to null", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10672", "title": "Merge ICoreConventionSetBuilder with IConventionSetBuilder", "body": "No reason to keep them separate anymore", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10671", "title": "Remove the static Build method on IConventionSetBuilder implementations", "body": "Dependency changes break it.\r\n\r\nWe should consider replacing it with a method that uses the `IServiceProvider` to avoid breaks and use the correct services, like the logger", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a26d3984be9a132ceae731a1a3e0681ed46bfd69", "message": "Consistently do a short-circuit check in logging extensions\n\nFixes #10637"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/40b344787ef24a6d6350f0711f757901f99c45da", "message": "Fix CSharpMigrationsGeneratorTest"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1d14dde3e509e8498b454c647ffaffc6ee9317a0", "message": "Add logging for conventions\n\nFixes #1171\nFixes #10661"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/0cc4127d04ec758044c196f55eb34d6ec9b8dfce", "message": "Add more logging to the model builder\n\nFixes #222"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a62607eead34942f857b02be32c3223d4bfdcc4b", "message": "Add logging to ExecutionStrategy\n\nFixes #6781"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10701", "title": "Small conventions optimization", "body": "Reuse last `ConventionNode` when empty\r\nMake read-only check debug-only\r\n\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/8865", "title": "Make concurrency check handle re-entrance", "body": "Fixes #7375\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FabioMorcillo": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10714", "title": "Sequence Decimal Data Type", "body": "Hello,\r\n\r\nData type sequence is decimal in SQL Server and i can\u00b4t change to int or other data type, when i try to savechanges() generate this error:\r\n\r\n\r\n\r\nSystem.ArgumentException occurred\r\n  HResult=0x80070057\r\n  Message=SQL Server sequences cannot be used to generate values for the property 'Id' on entity type 'Fiel' because the property type is 'decimal'. Sequences can only be used with integer properties.\r\n  Source=Microsoft.EntityFrameworkCore.SqlServer\r\n  StackTrace:\r\n   at Microsoft.EntityFrameworkCore.Metadata.SqlServerPropertyAnnotations.SetValueGenerationStrategy(Nullable`1 value)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerPropertyBuilderAnnotations.ValueGenerationStrategy(Nullable`1 value)\r\n   at Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo(PropertyBuilder propertyBuilder, String name, String schema)\r\n   at Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo[TProperty](PropertyBuilder`1 propertyBuilder, String name, String schema)\r\n   at Data.Context.OnModelCreating(ModelBuilder modelBuilder) in C:\\Users\\Fabio\\source\\repos\\OrmTest\\Data\\Context.cs:line 25\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer.Customize(ModelBuilder modelBuilder, DbContext context)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelCustomizer.Customize(ModelBuilder modelBuilder, DbContext context)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.<>c__DisplayClass5_0.<GetModel>b__0(Object k)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.<>c.<TryAddCoreServices>b__7_1(IServiceProvider p)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass22_0.<RealizeService>b__0(ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_InternalServiceProvider()\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()\r\n   at Microsoft.EntityFrameworkCore.DbContext.EntryWithoutDetectChanges[TEntity](TEntity entity)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState[TEntity](TEntity entity, EntityState entityState)\r\n   at Microsoft.EntityFrameworkCore.DbContext.Add[TEntity](TEntity entity)\r\n   at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Add(TEntity entity)\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\Users\\Fabio\\source\\repos\\OrmTest\\ConsoleApp1\\Program.cs:line 19\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: (e.g. Visual Studio 2017 15.3.3)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "imarkevych90": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10713", "title": "EF Core Include with FromSql extension without sub SELECT", "body": "I have some query to get companies from database like this:\r\n\r\n```C#\r\nvar fullTextSearchVal = \"test\";\r\nvar sql = $\"SELECT * FROM Companies WHERE CONTAINS(*, '\\\"*{fullTextSearchVal}*\\\"')\";\r\nvar result = _context.Companies.Include(i => i.Address).FromSql(sql).ToList();\r\n```\r\n\r\nIt works well, but have a little problem after I run Sql Server Profiler and check selector. It's look like this:\r\n\r\n```sql\r\nSELECT [i].[Id], [i].[AddressId], [i].[Email], [i].[Name], [i].[PhoneNumber], [i.Address].[Id], [i.Address].[Address], [i.Address].[City], [i.Address].[Country], [i.Address].[ZipCode]\r\nFROM (\r\n   SELECT * FROM Companies WHERE CONTAINS(*, '\"*test*\"')\r\n) AS [i]\r\nLEFT JOIN [Address] AS [i.Address] ON [i].[AddressId] = [i.Address].[Id]\r\n```\r\n\r\nThe problem is in selector. Can I get query like following using Include and FromSql extensions(without sub SELECT)?\r\n\r\n```sql\r\nSELECT [i].[Id], [i].[AddressId], [i].[Email], [i].[Name], [i].[PhoneNumber], [i.Address].[Id], [i.Address].[Address], [i.Address].[City], [i.Address].[Country], [i.Address].[ZipCode]\r\nFROM [Companies] AS [i]\r\nLEFT JOIN [Address] AS [i.Address] ON [i].[AddressId] = [i.Address].[Id]\r\nWHERE CONTAINS([i].*, '\"*test*\"')\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "viveknuna": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10712", "title": "How to create User defined functions using ef core 2.0 code first approach?", "body": "I want to create user-defined functions using code first approach. I'm able to create Stored Procedures by add example.sql inside EntityFrameworkCore\\Migrations\\Stored Procedures folder but not able to find a way to create UDF, so that I can add them to migration in C# code. So once I run update-database it will create UDF in DB.\r\n\r\nFurther technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.5.3", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zivillian": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10711", "title": "Support ArrayIndex expressions in where clause", "body": "Using an array index expression (`array[i]`) in a where clause results in client side evaluation.\r\n\r\n```c#\r\nvar values = new string[] {\"a\", \"b\"};\r\nvar exists = context.Entities.Any(x => x.Name == values[0]);\r\n```\r\nThe above code issues a warning (`The LINQ expression 'where ([x].Name == __values_0[0])' could not be translated and will be evaluated locally.`) and the generated SQL is missing the WHERE clause:\r\n```sql\r\nSELECT [x].[Name]\r\nFROM [Entities] AS [x]\r\n```\r\n\r\nIntroducing and using a local variable works as expected and the generated SQL contains the expected WHERE clause:\r\n```c#\r\nvar value = values[0];\r\nexists = context.Entities.Any(x => x.Name == value);\r\n```\r\n```sql\r\nSELECT CASE\r\n    WHEN EXISTS (\r\n        SELECT 1\r\n        FROM [Entities] AS [x]\r\n        WHERE [x].[Name] = @__value_0)\r\n    THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)\r\nEND\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.5.3\r\n\r\n### Steps to reproduce\r\nFull console app to reproduce the issue:\r\n```c#\r\nusing System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Linq;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.EntityFrameworkCore.Infrastructure;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var context = new TestContext())\r\n            {\r\n                var serviceProvider = context.GetInfrastructure();\r\n                var loggerFactory = (ILoggerFactory)serviceProvider.GetService(typeof(ILoggerFactory));\r\n                loggerFactory.AddProvider(new EFLoggerProvider());\r\n                context.Database.EnsureCreated();\r\n\r\n                var values = new string[] {\"a\", \"b\"};\r\n                var exists = context.Entities.Any(x => x.Name == values[0]);//broken\r\n                var value = values[0];\r\n                exists = context.Entities.Any(x => x.Name == value);//working\r\n            }\r\n        }\r\n    }\r\n\r\n    public class Entity\r\n    {\r\n        [Key]\r\n        public long Id { get; set; }\r\n\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class TestContext : DbContext\r\n    {\r\n        public DbSet<Entity> Entities { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=TestDb;Trusted_Connection=True;MultipleActiveResultSets=true;\");\r\n        }\r\n    }\r\n\r\n    public class EFLoggerProvider : ILoggerProvider\r\n    {\r\n        public ILogger CreateLogger(string categoryName)\r\n        {\r\n            if (categoryName == \"Microsoft.EntityFrameworkCore.Query\" || categoryName ==\"Microsoft.EntityFrameworkCore.Database.Command\")\r\n            {\r\n                return new EFLogger();\r\n            }\r\n            return new NullLogger();\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            // N/A\r\n        }\r\n\r\n        private class NullLogger : ILogger\r\n        {\r\n            public bool IsEnabled(LogLevel logLevel)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)\r\n            { }\r\n\r\n            public IDisposable BeginScope<TState>(TState state)\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        private class EFLogger : ILogger\r\n        {\r\n            public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)\r\n            {\r\n                if (logLevel == LogLevel.Warning || (logLevel == LogLevel.Information && eventId.Name.EndsWith(\"Executed\")))\r\n                Console.WriteLine(formatter(state, exception));\r\n            }\r\n\r\n            public bool IsEnabled(LogLevel logLevel)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            public IDisposable BeginScope<TState>(TState state)\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "granthoff1107": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10709", "title": "Unable to cast object of type 'System.Int32' to type 'System.Linq.Expressions.LambdaExpression'", "body": "I've already looked at this issue https://github.com/aspnet/EntityFrameworkCore/issues/10271,  \r\n\r\n\r\nI'm aware of the closure issues so I've referenced a variable registered in a singleton.\r\nYet, I still am getting an error \r\n\r\n> Unable to cast object of type 'System.Int32' to type 'System.Linq.Expressions.LambdaExpression'\r\n\r\n\r\nMicrosoft.EntityFrameworkCore -Version 2.0.1\r\n\r\n\r\nMy code:\r\n\r\n```C#\r\n    public class DbAuthorizationOptions\r\n    {\r\n        public ConstraintOptions ConstraintOptions { get; set; } = new ConstraintOptions();\r\n    }\r\n\r\n    public class ConstraintOptions\r\n    {\r\n        protected Dictionary<Type, LambdaExpression> queryConstrations = new Dictionary<Type, LambdaExpression>();\r\n\r\n        public void SetConstraint<T>(Expression<Func<T, bool>> constraint)\r\n        {\r\n            this.queryConstrations[typeof(T)] = constraint;\r\n        }\r\n\r\n        public Expression<Func<T, bool>> GetConstraint<T>()\r\n        {\r\n            return (Expression<Func<T, bool>>)this.queryConstrations[typeof(T)];\r\n        }\r\n\r\n        public IEnumerable<KeyValuePair<Type,LambdaExpression>> GetAllConstraints()\r\n        {\r\n            return this.queryConstrations;\r\n        }\r\n    }\r\n\r\n    public class ContextAuthorizationOptions : DbAuthorizationOptions<AstootContext>\r\n    {\r\n         \r\n         protected int _userId { get; set; } = 1;\r\n\r\n         public ContextAuthorizationOptions(IUserAuthenticationManager authenticationManager)\r\n         {\r\n             ConstraintOptions.SetConstraint<Conversation>(x => x.EmployeeUserId == this._userId);\r\n         }\r\n    }\r\n```\r\nStartup:\r\n\r\n```C#\r\n    services.AddSingleton<DbAuthorizationOptions<AstootContext>, ContextAuthorizationOptions>();`\r\n```\r\nAuthorized context:\r\n\r\n```C#\r\n    protected DbAuthorizationOptions _authorizationOptions;\r\n\r\n    public AuthorizedDbContext(DbContextOptions options, DbAuthorizationOptions authorizationOptions)\r\n    : base(options)\r\n     {\r\n         this._authorizationOptions = authorizationOptions;\r\n     }\r\n\r\n\r\n     protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n     {\r\n        var contraintOptions = this._authorizationOptions.ConstraintOptions;\r\n        foreach (var option in contraintOptions?.GetAllConstraints())\r\n        {\r\n            modelBuilder.Entity(option.Key).HasQueryFilter(option.Value);\r\n        }\r\n\r\n        base.OnModelCreating(modelBuilder);\r\n    }\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ErikEJ": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10708", "title": "2.0 provider compat with 2.1 runtime", "body": "Testing the SQLCE 2.x provider against the latest 2.1 preview build, I had to change the following code, I wonder if it is a Backwards compat issue?\r\n\r\nhttps://github.com/ErikEJ/EntityFramework.SqlServerCompact/commit/ddbab9fa9c8f3eb4cbb846bacfdf086439cc4f0e#diff-bd4bdd81fe651de7b5426b6578f5846dL75 \r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.1.0-preview1-28072\r\nDatabase Provider: SQLCE 2.0\r\nOperating system: \r\nIDE: Visual Studio 2017 15.5", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/9777", "title": "Update Tools Nuget package descriptions", "body": "fixes #9439\r\n\r\n-verified by building and inspecting generated packages with Nuget Package Explorer\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NoFear23m": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10707", "title": "CompareString in VB Project will be evaluated locally", "body": "Hy at all. Sorry for my bad english ;-(\r\n\r\nToday i was wondering about the logoutput from EF.\r\nI have the following code:\r\n\r\n```vb\r\nPublic Function GetAllViewModelAndEventDefaultValueValues(viewModelName As String, onEvent As String) As List(Of DefaultValueManager)\r\n        Dim q As IQueryable(Of DefaultValueManager) = ContextInternal.Set(Of DefaultValueManager)() \r\n        q = q.Where(Function(i) i.ViewModel = viewModelName)\r\n        q = q.Where(Function(i) i.OnEvent = onEvent)\r\n        q = q.Where(Function(i) i.IsActive)\r\n        q = q.Select(Function(s) New DefaultValueManager() With {.ClientId = s.ClientId, .WorkspaceId = s.WorkspaceId, .UserId = s.UserId, .DefaultValueManagerId = s.DefaultValueManagerId,\r\n                .DefaultValue = s.DefaultValue, .OnEvent = s.OnEvent, .PropertyName = s.PropertyName, .Title = s.Title, .ViewModel = s.ViewModel}).AsQueryable\r\n        Return q.ToList\r\n    End Function\r\n```\r\n\r\nEF Generates the following log:\r\n\r\n> Compiling query model: \r\n'from DefaultValueManager i in DbSet<DefaultValueManager>\r\nwhere int CompareString(\r\n    Left: [i].ViewModel, \r\n    Right: __$VB$Local_viewModelName_0, \r\n    TextCompare: False) == 0\r\nwhere int CompareString(\r\n    Left: [i].OnEvent, \r\n    Right: __$VB$Local_onEvent_1, \r\n    TextCompare: False) == 0\r\nwhere [i].IsActive\r\nselect new DefaultValueManager{ \r\n    ClientId = [i].ClientId, \r\n    WorkspaceId = [i].WorkspaceId, \r\n    UserId = [i].UserId, \r\n    DefaultValueManagerId = [i].DefaultValueManagerId, \r\n    DefaultValue = [i].DefaultValue, \r\n    OnEvent = [i].OnEvent, \r\n    PropertyName = [i].PropertyName, \r\n    Title = [i].Title, \r\n    ViewModel = [i].ViewModel \r\n}\r\n'\r\nOptimized query model: \r\n'from DefaultValueManager i in DbSet<DefaultValueManager>\r\nwhere int CompareString(\r\n    Left: [i].ViewModel, \r\n    Right: __$VB$Local_viewModelName_0, \r\n    TextCompare: False) == 0\r\nwhere int CompareString(\r\n    Left: [i].OnEvent, \r\n    Right: __$VB$Local_onEvent_1, \r\n    TextCompare: False) == 0\r\nwhere [i].IsActive\r\nselect new DefaultValueManager{ \r\n    ClientId = [i].ClientId, \r\n    WorkspaceId = [i].WorkspaceId, \r\n    UserId = [i].UserId, \r\n    DefaultValueManagerId = [i].DefaultValueManagerId, \r\n    DefaultValue = [i].DefaultValue, \r\n    OnEvent = [i].OnEvent, \r\n    PropertyName = [i].PropertyName, \r\n    Title = [i].Title, \r\n    ViewModel = [i].ViewModel \r\n}\r\n'\r\nThe LINQ expression 'where (CompareString([i].ViewModel, __$VB$Local_viewModelName_0, False) == 0)' could not be translated and will be evaluated locally.\r\nThe LINQ expression 'where (CompareString([i].OnEvent, __$VB$Local_onEvent_1, False) == 0)' could not be translated and will be evaluated locally.\r\nThe LINQ expression 'where [i].IsActive' could not be translated and will be evaluated locally.\r\n(QueryContext queryContext) => IEnumerable<DefaultValueManager> _InterceptExceptions(\r\n    source: IEnumerable<DefaultValueManager> _Select(\r\n        source: IEnumerable<ValueBuffer> _Where(\r\n            source: IEnumerable<ValueBuffer> _Where(\r\n                source: IEnumerable<ValueBuffer> _Where(\r\n                    source: IEnumerable<ValueBuffer> _ShapedQuery(\r\n                        queryContext: queryContext, \r\n                        shaperCommandContext: SelectExpression: \r\n                            SELECT [i].[ViewModel], [i].[OnEvent], [i].[IsActive], [i].[ClientId], [i].[WorkspaceId], [i].[UserId], [i].[DefaultValueManagerId], [i].[DefaultValue], [i].[PropertyName], [i].[Title]\r\n                            FROM [DefaultValueManagers] AS [i]\r\n                            WHERE [i].[IsActive] = 1, \r\n                        shaper: ValueBufferShaper), \r\n                    predicate: (ValueBuffer i) => int CompareString(\r\n                        Left: string TryReadValue(i, 0, DefaultValueManager.ViewModel), \r\n                        Right: string GetParameterValue(\r\n                            queryContext: queryContext, \r\n                            parameterName: \"__$VB$Local_viewModelName_0\"), \r\n                        TextCompare: False) == 0), \r\n                predicate: (ValueBuffer i) => int CompareString(\r\n                    Left: string TryReadValue(i, 1, DefaultValueManager.OnEvent), \r\n                    Right: string GetParameterValue(\r\n                        queryContext: queryContext, \r\n                        parameterName: \"__$VB$Local_onEvent_1\"), \r\n                    TextCompare: False) == 0), \r\n            predicate: (ValueBuffer i) => bool TryReadValue(i, 2, DefaultValueManager.IsActive)), \r\n        selector: (ValueBuffer i) => new DefaultValueManager{ \r\n            ClientId = Nullable<int> TryReadValue(i, 3, DefaultValueManager.ClientId), \r\n            WorkspaceId = Nullable<int> TryReadValue(i, 4, DefaultValueManager.WorkspaceId), \r\n            UserId = Nullable<int> TryReadValue(i, 5, DefaultValueManager.UserId), \r\n            DefaultValueManagerId = int TryReadValue(i, 6, DefaultValueManager.DefaultValueManagerId), \r\n            DefaultValue = string TryReadValue(i, 7, DefaultValueManager.DefaultValue), \r\n            OnEvent = string TryReadValue(i, 1, DefaultValueManager.OnEvent), \r\n            PropertyName = string TryReadValue(i, 8, DefaultValueManager.PropertyName), \r\n            Title = string TryReadValue(i, 9, DefaultValueManager.Title), \r\n            ViewModel = string TryReadValue(i, 0, DefaultValueManager.ViewModel) \r\n        }\r\n    ), \r\n    contextType: SPS.DMS.Repository.BusinessContext.BusinessContext, \r\n    logger: DiagnosticsLogger<Query>, \r\n    queryContext: queryContext)\r\nOpening connection to database 'SPS.DMS.DB' on server '192.168.0.50,1433'.\r\nOpened connection to database 'SPS.DMS.DB' on server '192.168.0.50,1433'.\r\nExecuting DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\r\nSELECT [i].[ViewModel], [i].[OnEvent], [i].[IsActive], [i].[ClientId], [i].[WorkspaceId], [i].[UserId], [i].[DefaultValueManagerId], [i].[DefaultValue], [i].[PropertyName], [i].[Title]\r\nFROM [DefaultValueManagers] AS [i]\r\nWHERE [i].[IsActive] = 1\r\nExecuted DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\nSELECT [i].[ViewModel], [i].[OnEvent], [i].[IsActive], [i].[ClientId], [i].[WorkspaceId], [i].[UserId], [i].[DefaultValueManagerId], [i].[DefaultValue], [i].[PropertyName], [i].[Title]\r\nFROM [DefaultValueManagers] AS [i]\r\nWHERE [i].[IsActive] = 1\r\nA data reader was disposed.\r\nClosing connection to database 'SPS.DMS.DB' on server '192.168.0.50,1433'.\r\nClosed connection to database 'SPS.DMS.DB' on server '192.168.0.50,1433'.[2018-01-14 15:09:52,414] [ValuesManagerBl] [1   ] [DEBUG] - The DataManager returns 2 defaultvalues for viewmodelname SearchBusinesspartnerVm and eventname Loaded\r\n\r\nIt the log i can see the following line for example:\r\n**The LINQ expression 'where (CompareString([i].ViewModel, __$VB$Local_viewModelName_0, False) == 0)' could not be translated and will be evaluated locally.**\r\n\r\n\r\nIs that a mistake from my side? If yes, what can i do?\r\n\r\nEF Version: 2.0.1\r\nVisual Studio 2017 (15.5.3)\r\nLanguage: VB.Net (!!) on .Net Standard 2.0\r\nEF Core version: (found in project.csproj or packages.config)\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10 Pro x64 (1709) Build 16299.19\r\n\r\nMany Thanks in advance\r\nSascha\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ileve": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10706", "title": "EF Core 2.0.1 AfterSaveBehavior for read-only identity column is set to PropertySaveBehavior.Save instead of PropertySaveBehavior.Throw", "body": "I noticed that in EF Core 2.0.1 an identity column which is not a primary key, has its `IProperty.AfterSaveBehavior` equal to `PropertySaveBehavior.Save`, although it has a read-only behavior.\r\n\r\nIt is based on my question in stackoverflow.\r\n\r\n[https://stackoverflow.com/questions/48244597/ef-core-2-0-1-aftersavebehavior-for-read-only-identity-column-is-set-to-property](url)\r\n\r\nException message: no exception message\r\nStack trace:\r\n\r\n\r\n### Steps to reproduce\r\nAs a proof of concept i created the following Xunit test. \r\n`step1`\r\nIn order to reproduce it, create xunit test in Visual Studio 2017, by selecting .NET Core -> xUnit Test Project (.NET Core).\r\n\r\n`step2:`\r\nIn order to execute the unit test, we have to install first, the EF Core 2.0.1 and the MSSQL provider by executing the following commands in package manager console.\r\n\r\n`Install-Package Microsoft.EntityFrameworkCore.Tools`\r\n`Install-Package Microsoft.EntityFrameworkCore.SqlServer`\r\n\r\nThe source code of Xunit test is:\r\n\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.EntityFrameworkCore.Metadata;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing Xunit;\r\n\r\n\r\nnamespace EFCoreIdentityColumn\r\n{\r\n    public class DataRecord\r\n    {\r\n        public int ID { get; set; }\r\n        public int IdentityField { get; set; }\r\n    }\r\n\r\n    class IdentityContext : DbContext\r\n    {\r\n        public IdentityContext() { }\r\n        public IdentityContext(DbContextOptions<IdentityContext> options) : base(options) { }\r\n        public DbSet<DataRecord> DataRecords { get; set; }\r\n\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            string conn = \"Server=(localdb)\\\\mssqllocaldb;Database=TESTIDENTITY;Trusted_Connection=True;MultipleActiveResultSets=true\";\r\n            optionsBuilder.UseSqlServer(conn);\r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity<DataRecord>()\r\n                .Property(i => i.ID)\r\n                .ValueGeneratedNever();\r\n\r\n            modelBuilder.Entity<DataRecord>()\r\n                .Property(i => i.IdentityField)\r\n                .UseSqlServerIdentityColumn();\r\n        }\r\n    }\r\n\r\n\r\n    public class IdentityColumnXunitTest\r\n    {\r\n        [Fact]\r\n        public void IdentitySaveBehaviorWithMSSQL()\r\n        {\r\n            using (var context = new IdentityContext())\r\n            {\r\n                //examine DataRecord.IdentityField property\r\n                var identityPropInfo = typeof(DataRecord).GetTypeInfo().DeclaredProperties.First(p => p.Name == \"IdentityField\");\r\n                var identityIProperty = context.Model.FindEntityType(typeof(DataRecord)).FindProperty(identityPropInfo);\r\n                Assert.Equal(ValueGenerated.OnAdd, identityIProperty.ValueGenerated);\r\n                Assert.Equal(PropertySaveBehavior.Save, identityIProperty.BeforeSaveBehavior);\r\n                Assert.Equal(PropertySaveBehavior.Save, identityIProperty.AfterSaveBehavior);\r\n                Assert.False(identityIProperty.IsReadOnlyAfterSave);\r\n                Assert.True(identityIProperty.SqlServer().ValueGenerationStrategy\r\n                    == SqlServerValueGenerationStrategy.IdentityColumn);\r\n                Assert.False(identityIProperty.IsNullable);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        void IdentityColumnSaveBehaviorWithMSSQL()\r\n        {\r\n            using (var context = new IdentityContext())\r\n            {\r\n                context.Database.ExecuteSqlCommand(\"TRUNCATE TABLE DataRecords\");\r\n\r\n                DataRecord rec1 = new DataRecord();\r\n                var entry1 = context.Add(rec1);\r\n                Assert.Equal(EntityState.Added, entry1.State);\r\n                Assert.Equal(1, context.SaveChanges()); //one record was added\r\n                Assert.Equal(0, context.DataRecords.First().ID);\r\n                Assert.Equal(1, context.DataRecords.First().IdentityField);\r\n\r\n                //primary key value is readonly after save and cannot be modified\r\n                rec1.ID = 10;\r\n                Assert.Throws<InvalidOperationException>(() => context.SaveChanges());\r\n\r\n            }\r\n\r\n            using (var context = new IdentityContext())\r\n            {\r\n                //we cannot supply a value for identity column\r\n                DataRecord rec2 = new DataRecord()\r\n                {\r\n                    ID = 323,\r\n                    IdentityField = 5\r\n                };\r\n\r\n                var entry2 = context.Add(rec2);\r\n                Assert.Equal(EntityState.Added, entry2.State);\r\n                Assert.Throws<DbUpdateException>(() => context.SaveChanges());\r\n            }\r\n\r\n            using (var context = new IdentityContext())\r\n            {\r\n                DataRecord rec = new DataRecord()\r\n                {\r\n                    ID = 299,\r\n                };\r\n\r\n                var entry = context.Add(rec);\r\n                Assert.Equal(EntityState.Added, entry.State);\r\n                Assert.Equal(1, context.SaveChanges()); //one record was added\r\n                Assert.Equal(299, context.DataRecords.First(i => i.ID == rec.ID).ID);\r\n                Assert.Equal(2, context.DataRecords.First(i => i.ID == rec.ID).IdentityField);\r\n                \r\n                //we cannot update identity column\r\n                Assert.True(context.Entry(rec).State == EntityState.Unchanged);\r\n                rec.IdentityField = 544;\r\n                Assert.True(context.Entry(rec).State == EntityState.Modified);\r\n                Assert.Throws<DbUpdateException>(() => context.SaveChanges());\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n```\r\nIn order to execute the above unit test, we must migrate and update database with the following commands:\r\n\r\n`Add-Migration migration_name`\r\n`Update-Database`\r\n\r\nThe test confirms that although the identity column is read-only in practice, the `AfterSaveBehavior` is set to `PropertySaveBehavior.Save` and `IsReadOnlyAfterSave` is set to `false`. There is a contradiction here.\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 7 SP1 x64\r\nIDE: Visual Studio 2017 15.3.1\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "codepb": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10703", "title": "Allow EF to call parameterized entity constructors", "body": "When trying to create classes with only readonly properties, you currently have to use properties with backing fields to be able to construct with Entity Framework, and it is required to have an empty constructor. It would be preferable if Entity Framework could construct the objects by passing the values to a constructor with a parameter of the same name (much like JSON.net can). This would allow truly readonly properties, and keep the class simpler.\r\n\r\n### Steps to reproduce\r\nIt would be preferable to support a class structured like the following:\r\n\r\n```c#\r\npublic class SampleClass\r\n{\r\n    public string Prop1 { get; }\r\n    public int Prop2 { get; }\r\n\r\n    public SampleClass(string prop1, int prop2)\r\n    {\r\n        Prop1 = prop1;\r\n        Prop2 = prop2;\r\n    }\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajcvickers": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10699", "title": "Package manager prompt hangs", "body": "Moved from https://github.com/aspnet/EntityFramework6/issues/434 since this is an EF Core scenario.\r\n\r\nFrom VS Feedback:\r\n\r\nPackage manager prompt is not restored after sucessfully completing add-migration or update-database operation.\r\n\r\nPM> update-database\r\ninfoinfo:\r\nApplying migration '20171216085326_IssueEditedBy'.\r\nDone.\r\n\r\nClosing the Package Manager Console does not help as it is greyed out on the View -> Other Windows list.\r\n\r\nHave to restart Visual Studio to get the functionality back.\r\n\r\nAfter running add-migration the prompt does not return.\r\nThis is because an instance of the dotnet process is still running.\r\nKilling this process using Task Manager completes the action in Visual Studio and the prompt is restored and I can continue to work without restarting Visual Studio.\r\nThe dotnet process is also left running after update-database from the VS package manager console.\r\n\r\nI am using MariaDb and the Pomelo.EntityFrameworkCore.MySql NuGet package in a EF Core / AspNet Core 2 solution.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10654", "title": "Test experience using 2.0 providers with 2.1 EF Core", "body": "The desired experiences are:\r\n* Existing apps using EF Core 2.0 will continue to work using EF Core 2.1 without updating the provider to a new version\r\n* Ideally, new features should work without provider changes, but this will not always be feasible\r\n* For cases where new features don't work, attempting to use the feature should generate a reasonable exception message\r\n\r\nFeatures to test:\r\n- [ ] Value conversions\r\n- [ ] Query types\r\n- [ ] Seeding\r\n- [ ] Lazy loading\r\n\r\n(List to be added to in triage...)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/641b571868614821eda8740887044164e0d22822", "message": "Allow mapping sql_variant on SQL Server\n\nIssue #7043\n\nThe type mapper will now map properties to sql_variant columns if:\n* The property is type object\n* The store type name is specified as sql_variant\n\nAlso #10633 - set min batch size to 1 for type mapping tests so that batching and non-batching are tested."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c5debcee4e2c9a7c89b15e8b2f4119f0a066003b", "message": "Try again on bad merge"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/677dc7a6e5d481e73e587e3cc458f436e27e82b1", "message": "Fix merge issue"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/cfc7b45f3af77d3cd4f0d66ed82727ded3d0659d", "message": "Change to handling value conversion annotations in code generation and more tests\n\nIssue #10638\n\nChange to serialize an actual, but non-functional, ValueConverter so that the type mapper works the same on the snapshot model as it does on the original model."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/ee0e850b259f22cd40201679e24b2bfdcd67b5a5", "message": "Handle value conversion annotations in code generation.\n\nIssue #10638\n\nAlso adds tests so that new annotations without any handling are detected.\n\nFor value conversions, only the store type is serialized since it is not possible to serialize an arbitrary ValueConveter. This is an area that will need more testing."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7ee6e3c1279b01881593701b1bcb51d04da2ff75", "message": "Allow RelationalTypeMapper to run in a legacy mode for 2.0 providers\n\nThe internals of RelationalTypeMapper have changed significantly to support type conversions. While this was done in a way that should not break 2.0 providers, it turns out that some 2.0 providers take an interesting approach involving throwing exceptions on methods that were not previously called but now can be. To workaround this, if the provider has not been updated--detected by still calling the obsolete constructor--then the RelationalTypeMapper falls back to working in a similar way to how it did before, which should be much less likely to cause issues. This means type conversions is a feature that needs a new provider, but in general that was already the case.\n\nSee also #10654"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a013066c063bd4939c5bdfa5a4494fda14c05e0d", "message": "Fix some compat issues running 2.1 EF with 2.0 provider\n\nAddresses #10545 plus some more newer breaks\n\n* Added a workaround for IUpdateSqlGenerator scope change to singleton\n* Added back internal method on IEntityMaterializerSource that in-memory provider is calling directly and renamed classes to avoid future confusion (I have some other changes coming to help mitigate this in the future.)\n* Made constructor injection of services behave better if context is not injected (only a problem for in-memory, due to above internal call issue)\n* Disabled some tests that can only work with a provider that supports type conversions"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/47d066d66156b7a5629634f84618abc93615565b", "message": "Initial implementation of lazy-loading and entities with constructors\n\nParts of issues #3342, #240, #10509, #3797\n\nThe main things here are:\n- Support for injecting values into parameterized entity constructors\n  - Property values are injected if the parameter type and name matches\n  - The current DbContext as DbContext or a derived DbContext type\n  - A service from the internal or external service provider\n  - A delegate to a method of a service\n  - The IEntityType for the entity\n- Use of the above to inject lazy loading capabilities into entities\n\nFor lazy loading, either the ILazyLoader service can be injected directly, or a delegate can be injected if the entity class cannot take a dependency on the EF assembly--see the examples below.\n\nCurrently all constructor injection is done by convention.\n\nRemaining work includes:\n- API/attributes to configure the constructor binding\n- Allow factory to be used instead of using the constructor directly. (Functional already, but no API or convention to configure it.)\n- Allow property injection for services\n- Configuration of which entities/properties should be lazy loaded and which should not\n\n### Examples\n\nIn this example EF will use the private constructor passing in values from the database when creating entity instances. (Note that it is assumed that _blogId has been configured as the key.)\n\n```C#\npublic class Blog\n{\n    private int _blogId;\n\n    // This constructor used by EF Core\n    private Blog(\n        int blogId,\n        string title,\n        int? monthlyRevenue)\n    {\n        _blogId = blogId;\n        Title = title;\n        MonthlyRevenue = monthlyRevenue;\n    }\n\n    public Blog(\n        string title,\n        int? monthlyRevenue = null)\n        : this(0, title, monthlyRevenue)\n    {\n    }\n\n    public string Title { get; }\n    public int? MonthlyRevenue { get; set; }\n}\n```\n\nIn this example, EF will inject the ILazyLoader instance, which is then used to enable lazy-loading on navigation properties. Note that the navigation properties must have backing fields and all access by EF will go through the backing fields to prevent EF triggering lazy loading itself.\n\n```C#\npublic class LazyBlog\n{\n    private readonly ILazyLoader _loader;\n    private ICollection<LazyPost> _lazyPosts = new List<LazyPost>();\n\n    public LazyBlog()\n    {\n    }\n\n    private LazyBlog(ILazyLoader loader)\n    {\n        _loader = loader;\n    }\n\n    public int Id { get; set; }\n\n    public ICollection<LazyPost> LazyPosts\n        => _loader.Load(this, ref _lazyPosts);\n}\n\npublic class LazyPost\n{\n    private readonly ILazyLoader _loader;\n    private LazyBlog _lazyBlog;\n\n    public LazyPost()\n    {\n    }\n\n    private LazyPost(ILazyLoader loader)\n    {\n        _loader = loader;\n    }\n\n    public int Id { get; set; }\n\n    public LazyBlog LazyBlog\n    {\n        get => _loader.Load(this, ref _lazyBlog);\n        set => _lazyBlog = value;\n    }\n}\n```\n\nThis example is the same as the last example, except EF is matching the delegate type and parameter name and injecting a delegate for the ILazyLoader.Load method so that the entity class does not need to reference the EF assembly. A small extension method can be included in the entity assembly to make it a bit easier to use the delegate.\n\n```C#\npublic class LazyPocoBlog\n{\n    private readonly Action<object, string> _loader;\n    private ICollection<LazyPocoPost> _lazyPocoPosts = new List<LazyPocoPost>();\n\n    public LazyPocoBlog()\n    {\n    }\n\n    private LazyPocoBlog(Action<object, string> lazyLoader)\n    {\n        _loader = lazyLoader;\n    }\n\n    public int Id { get; set; }\n\n    public ICollection<LazyPocoPost> LazyPocoPosts\n        => _loader.Load(this, ref _lazyPocoPosts);\n}\n\npublic class LazyPocoPost\n{\n    private readonly Action<object, string> _loader;\n    private LazyPocoBlog _lazyPocoBlog;\n\n    public LazyPocoPost()\n    {\n    }\n\n    private LazyPocoPost(Action<object, string> lazyLoader)\n    {\n        _loader = lazyLoader;\n    }\n\n    public int Id { get; set; }\n\n    public LazyPocoBlog LazyPocoBlog\n    {\n        get => _loader.Load(this, ref _lazyPocoBlog);\n        set => _lazyPocoBlog = value;\n    }\n}\n\npublic static class TestPocoLoadingExtensions\n{\n    public static TRelated Load<TRelated>(\n        this Action<object, string> loader,\n        object entity,\n        ref TRelated navigationField,\n        [CallerMemberName] string navigationName = null)\n        where TRelated : class\n    {\n        loader?.Invoke(entity, navigationName);\n\n        return navigationField;\n    }\n}\n```"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/d4bc77cd4be34ef6482cd48334c5bdd166306cc5", "message": "Add API and tests for value converters\n\nPart of issue #242\n\nAs always, fluent API names subject to change in API review.\n\nThis PR also makes a change to never pass nulls to value converters. This makes it significantly easier to write custom converters that compose well with built-in converters and can be used for both PKs and FKs where the nullability is different."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/5c46824f16cdc3074b989cc794d214ed74691d19", "message": "Adds common value conversions and mechanisms for type mapping to pick one\n\nPart of #242\n\nThis change means that providers do not need to add mappings involving conversions. Instead providers will only add mappings for specific types that they handle \"natively\" and if the mapping request for a different type is made, then the type mapper will find a conversion to a type that is supported and automatically use it.\n\nA converter is also automatically found if the model type and the store type specified in the model do not match.\n\nUltimately, any \"common\" type can always be converted to string or bytes, so as long as a provider can map at least one of these, then any common type can always be mapped. There are two tests for this that create type mappers for SQL Server that support only strings or only bytes. The database is then created and the tests are run against only nvarchar or only varbinary columns, even though the model contains all common types."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/8b74b43299cd38618f7f272cc2a1f96e3a3ce5fb", "message": "Test for pattern suggested by @greggbjensen in #7533\n\nUse both a public constructor for the typed options and a protected constructor for the un-typed options on a DbContext type that is intended to be both instantiated and inherited from in the same service provider."}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10720", "title": "Lazy-loading proxies package", "body": "Part of #10509, #3797.\r\n\r\nThis change adds a new package--Microsoft.EntityFrameworkCore.Proxies--that contains a lazy-loading proxy implementation making use of the EF lazy-loading infrastructure and the Castle.Core proxies package. Current plan is for this to ship on NuGet as an optional package for use with EF.\r\n\r\nTo use in a normal application, just add a call to `UseLazyLoadingProxies()` on the DbContext options builder.\r\n\r\nThere are also `context.CreateProxy()` methods for creating stand-alone proxy instances if needed.\r\n\r\nEntity types must be public and navigation properties must be virtual. Also, the entity type and constructor must be \"visible\" to the castle proxies assembly, which usually means public, but could mean internal if \"InternalsVisibleTo\" is used. Exceptions are thrown if these requirements are not met--you don't just not get a proxy like in EF6.\r\n\r\nNote that this is an optional package for EF that we chose to create because the infrastructure in place made it easy to do so. It does not preclude a Roslyn-based rewriting solution in the future.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429778", "body": "Changed to _identityMap\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429779", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Wain123": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10677", "title": "QueryClientEvaluation in Select doesn't throw when configured to throw", "body": "Say I have a Post-Blog model and the Post has a member function ViewCount() (which is not a mapped property or anything like that, just a plain old member function). My Context.OnConfiguring contains:\r\n`optionsBuilder.ConfigureWarnings(warning => warning.Throw(RelationalEventId.QueryClientEvaluationWarning));`\r\n\r\nI would expect the following line to throw a \"warning as exception, QueryClientEvaluation\". Instead it quietly evaluates ViewCount() on the client:\r\n`foreach(var count in ctx.Posts.Select(post => post.ViewCount())) { }`\r\n\r\nDuring the Evaluation of ViewCount(), the post is not yet in the context (i.e. just like usual QueryClientEvaluation, and something that should never happen if I disabled QueryClientEvaluation).\r\n\r\nEdit: Still no answer? I guess it'll be another Wednesday response of \"we discussed this in triage and came to the conclusion that it's by design\" :trollface:", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gregveres": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10673", "title": "EF on in-memory data crashes on Left Outer Join", "body": "I have a query that looks like this:\r\n\r\n```C#\r\nfrom user in db.UserTable\r\nfrom purchase in db.PurchaseTable.Where(p => p.UserId == user.Id).DefaultIfEmpty()\r\nWhere user.Id == 1\r\nselect new {\r\n    user = user.Id,\r\n    purchase = (int?)purchase.Id\r\n}.ToListAsync()\r\n\r\n```\r\nyou can define UserTable and PurchaseTable with just public int Id {get; set;}. \r\n\r\nWhen this is executed against the database, it creates a fairly efficient query and it executes without exception because purchase will be Null where the user does not have any purchases and in that case, the purchase value of the returned entry will be null. Fantastic. It works and the SQL is straight forward.\r\n\r\nBut if I then execute this against in-memory data, I get a crash when the in-memory provider is constructing the return value. Even though I can't see the source code in my debugger, I have been able to deduce that it is crashing on accessing Id of purchase because if I only pass in data where every user has a purchase, or if I comment out the purchase = (int?)purchase.Id line, then it works without the crash. \r\n\r\nI am seeing a NullRefereneException. The stack trace is:\r\n\r\n\r\n```\r\nesult StackTrace:\t\r\nat lambda_method(Closure , <>f__AnonymousType150`2 )\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at EntityFramework.Testing.InMemoryDbAsyncEnumerator`1.<MoveNextAsync>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions.<ForEachAsync>d__5`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at SquashSpider.Models.CourtBooking.CourtBookingPackageGroup.<FetchMinutesAvailableForUsers>d__26.MoveNext() in C:\\Users\\gregv\\Source\\Repos\\SquashSpider\\SquashSpider\\SquashSpider\\Models\\CourtBooking\\CourtBookingPackage.cs:line 98\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at SquashSpider.Tests.Models.CourtBooking.CourtBookingPackageTests.<FetchMinutesAvailableForUsers_Should_return_one_entry_for_player1_When_player1_has_one_purchase_of_30_minutes_with_no_usages>d__11.MoveNext() in C:\\Users\\gregv\\Source\\Repos\\SquashSpider\\SquashSpider\\SquashSpider.Tests\\Models\\CourtBooking\\CourtBookingPackageTests.cs:line 103\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nResult Message:\t\r\nTest method SquashSpider.Tests.Models.CourtBooking.CourtBookingPackageTests.FetchMinutesAvailableForUsers_Should_return_one_entry_for_player1_When_player1_has_one_purchase_of_30_minutes_with_no_usages threw exception: \r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n```\r\n\r\n### Steps to reproduce\r\nI will work on putting together a full listing. \r\n```c#\r\n\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 6.1.3\r\nDatabase Provider: EntityFramework.SqlServer v6.1.3 (I am not sure which package provides the in-memory provider)\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.4\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spallister": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10662", "title": "Cannot filter on Guid column with SQLite provider", "body": "Upon attempting to filter for a single record with a Guid PK, where such a record actually exists in a SQLite database, null is being returned.  The Guid PK value is being stored as a Blob in the SQLite database, and it seems that the way EF Core is generating SQL from LINQ queries, does not allow for querying using Guid values - I must first convert Guid values to strings for filtering to successfully work.\r\n\r\n### Steps to reproduce\r\n- Using the PowerShell Add-Migration and Update-Database commands together with the SQLite DB provider, create a table (e.g. `DbSet<Foo>`) having a Guid PK property named `Id`.\r\n\r\n- Add a new `Foo` entry with some Guid PK value, then attempt to query for that entry using (where `query` is some object with `Id` as a Guid property):\r\n    ```c#\r\n    var foo = _context\r\n        .Foos\r\n        .SingleOrDefault(f => f.Id == query.Id);\r\n    ```\r\n    ... and observe that foo is null.\r\n\r\n- Attempt to query for the entry using:\r\n    ```c#\r\n    var foo = _context\r\n        .Foos\r\n        .SingleOrDefault(f => f.Id.ToString() == query.Id.ToString());\r\n    ```\r\n    ... and observe that the non-null entry is returned.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nphmuller": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10660", "title": "Migrations: Allow access to IServiceProvider", "body": "Currently (as of version 2.0) when a migration is created with a non-empty constructor the following exception is thrown during migration:\r\n```\r\nSystem.MissingMethodException: No parameterless constructor defined for this object.\r\n````\r\n\r\nSince ConfigureServices is already called during migrations and the ServiceProvider is used to resolve the DbContext it would be really nice if the same ServiceProvider could be used to resolve the constructor of migrations.\r\n\r\nThis would make it possible to inject other services and run them during the migration.\r\n\r\n#### My use-case:\r\n\r\nWe use ElasticSearch as a search index on top of some of our ef model types. When the model scheme is changed, the search index scheme also has to be updated and sometimes data has to be reindexed.\r\n\r\nPreviously we simply used to Migration Id to check if the search index is at the same scheme as the database. If the search index migration id was not the same as the one in the database we simply recreated the index and reindexed all the data.\r\n\r\nRecently our data grow to a size that this is no longer feasonable. It would take way too long. So we only want to update the search index during migrations that would affect the parts of the scheme that are indexed.\r\n\r\nSo what I wanted to do is call the (for example) reindex method from an ef migration, when the search index should be updated. For this I would need the inject the ElasticSearch client into the migration, which is not supported atm. Hence the feature request.\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vslee": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10659", "title": "Creating a one to one relationship on a derived type doesn't work if the table name starts with a capital 'S'. ", "body": "Creating a one to one relationship on a derived type doesn't work if the table name starts with a capital 'S'. The index that is created for the foreign key is usually a conditional index with the filter: \"[RssImageRefId] IS NOT NULL\");. However, if the table name starts with a capital S, the filter does not get applied. It may be easier to understand by trying the simple program below. \r\n```\r\nSqlException: Cannot insert duplicate key row in object 'dbo.SBlogs' with unique index 'IX_SBlogs_RssImageRefId'. The duplicate key value is (<NULL>).\r\nThe statement has been terminated.\r\n```\r\n\r\n### Steps to reproduce\r\nUncommenting the commented line below fixes the problem. \r\n\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System;\r\n\r\nnamespace UniqueIndexTest\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tusing (var myContext = new MyContext())\r\n\t\t\t{\r\n\t\t\t\tvar rssBlog = new RssBlog();\r\n\t\t\t\tvar rssImage = new RssImage();\r\n\t\t\t\trssImage.RssBlogCurrent = rssBlog;\r\n\t\t\t\tmyContext.Add(rssBlog);\r\n\t\t\t\tmyContext.Add(rssImage);\r\n\t\t\t\tmyContext.SaveChanges();\r\n\t\t\t\tmyContext.Add(new Blog());\r\n\t\t\t\tmyContext.Add(new Blog());\r\n\t\t\t\tmyContext.SaveChanges();\r\n\t\t\t}\r\n\t\t\tConsole.ReadLine();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class MyContext : DbContext\r\n\t{\r\n\t\tpublic DbSet<RssImage> RssImages { get; set; }\r\n\t\t// the line below works if you change it to: \r\n\t\t//public DbSet<Blog> Blogs { get; set; }\r\n\t\tpublic DbSet<Blog> SBlogs { get; set; }\r\n\t\tpublic DbSet<RssBlog> RssBlogs { get; set; }\r\n\r\n\t\tprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n\t\t{\r\n\t\t\toptionsBuilder.UseSqlServer(@\"Data Source=\" + System.Environment.MachineName +\r\n\t\t\t\t\";Initial Catalog=uniqueIndexTest;\" + \"Integrated Security=True\" +\r\n\t\t\t\t\";Connect Timeout=15;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=False\");\r\n\t\t\toptionsBuilder.EnableSensitiveDataLogging();\r\n\t\t\toptionsBuilder.ConfigureWarnings(w => w.Log(\r\n\t\t\t\tMicrosoft.EntityFrameworkCore.Diagnostics.CoreEventId.SensitiveDataLoggingEnabledWarning));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class Blog\r\n\t{\r\n\t\tpublic int Id { get; set; }\r\n\t}\r\n\r\n\tpublic class RssBlog : Blog\r\n\t{\r\n\t\tpublic RssImage RssImageRef { get; set; }\r\n\t\tpublic int RssImageRefId { get; set; }\r\n\t}\r\n\r\n\tpublic class RssImage \r\n\t{\r\n\t\tpublic int Id { get; set; }\r\n\t\tpublic RssBlog RssBlogCurrent { get; set; }\r\n\t}\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer 2.0.1\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.5.2\r\n\r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SSkovboiSS": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10656", "title": "Incorrect translation of date substraction.", "body": "```\r\nvar delays = await db\r\n    .Set<Job>()\r\n    .Select(j => (j.StartJob - j.CreateDate).TotalHours)\r\n    .ToListAsync();\r\n```\r\n\r\nGets translated into:\r\n```\r\nSELECT [j].[StartJob] - [j].[CreateDate]\r\nFROM [Job] AS [j]\r\nWHERE [j].[IsDeleted] = 0\r\n```\r\n\r\nWhich in turn throws:\r\n```\r\nSystem.Data.SqlClient.SqlException (0x80131904): Operand data type datetime2 is invalid for subtract operator.\r\n   at System.Data.SqlClient.SqlCommand.<>c.<ExecuteDbDataReaderAsync>b__108_0(Task`1 result)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.<ExecuteAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<BufferlessMoveNext>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.<ExecuteAsync>d__7`2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<MoveNext>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext()\r\nClientConnectionId:c7a3cc04-ddbf-4aab-9957-7477083c909f\r\nError Number:8117,State:1,Class:16\r\n```\r\n\r\nThis query should either be translated into DateDiff if possible or perform subtraction on client but definitely not throw.\r\n\r\n## Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SQLServer\r\nOperating system: Windows 10 1703\r\nIDE: Visual Studio 2017", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anpete": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/06b77e463f4aaad4aa8aaf02dc6962b549109be5", "message": "Fixing Oracle build."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1325b6ec1816c4372b92de16bae4b5e811223a18", "message": "Query Types: CR feedback."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7bcbe543f18d111d52ab6033c1957e4a4ad41e01", "message": "Feature: 2.1: Initial impl. of Query Types.\n\nAdds Query Types to the type system. Query Types are like Entity Types but do not require a key to be defined and can only be used for querying. Query Types allow for ad-hoc querying (like anonymous types), but are more flexible because they allow mapping configuration to be specified. E.g. ToTable, HasColumnName etc. Many advanced mapping capabilities are supported, too, such as inheritance mapping and navigations (dependent -> principal only)."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219504", "body": "We are going to merge Core into Entity.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219571", "body": "This needs to be updated after assembly merge\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219578", "body": "Signed off with comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5285097", "body": "I need to re-add the proj file - It was ignored by default, which I constantly forget :-)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5285097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5298472", "body": "@Eilon, Yes, we use this to view log output such as generated SQL from test runners etc.\n@davidfowl, Want me to send a PR to Logging? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5298472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299048", "body": "Hello\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299057", "body": "@ajcvickers Fix it!!!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299758", "body": "@Eilon Will do.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5403975", "body": "Type, DeclaringType -> typo?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5403975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5424515", "body": "Not sure. @loudej implemented this separately in hosting. I would be fine with it in DI.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5424515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429115", "body": "ChangeTrackerEntry?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429271", "body": "Consider _identityMap or even _trackedEntities\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429307", "body": "Or, it could be that the convention based startup just sets the instance on to the config somehow...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429316", "body": "ChangeTracker is per-context. Not sure if it needs to be substitutable, but if so, we need a factory.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429325", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/06e5d9256963b8eca7decab7f8005feb249bcfb3", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/2fba6acf814f589082e9d7abed630392a0aa521c", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maumar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a588722e10f34a12b9cea3d655fd26aafd91051b", "message": "Fix to #10441 - Query: Derived include types not inferred for collections\n\nThere is a bug in the compiler that would cause it to not pick the correct overload for the ThenInclude method for collection navigations.\nFix is to remove the additional overloads and re-purpose the current ones, so that users can specify derived includes using them.\n\nPrevious declaration was:\n\ncustomers.Include(SpecialCustomer sc => sc.SpecialOrders).ThenInclude(SpecialOrder so => so.SpecialOrderDetails)\n\nNew declaration is:\n\ncustomers.Include(c => ((SpecialCustomer)c).SpecialOrders).ThenInclude(o => ((SpecialOrder)o).SpecialOrderDetails)\n\nalternatively, using \"as\" operator:\n\ncustomers.Include(c => (c as SpecialCustomer).SpecialOrders).ThenInclude(o => (o as SpecialOrder).SpecialOrderDetails"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10674", "title": "Fix to #9282 - Query: optimize queries projecting correlated collections, so that they don't result in N+1 database queries", "body": "This feature optimizes a number of queries that project correlated collections. Previously those would produce N+1 queries. Now, we rewrite queries similarly to how Include pipeline does it, producing only two queries and correlating them on the client.\r\nTo enable the feature the inner subquery needs to be wrapped around ToList() or ToArray() call.\r\n\r\nCurrent limitations:\r\n- only works for sync queries,\r\n- doesn't work if the parent query results in a CROSS JOIN,\r\n- doesn't work with result operators (i.e. Skip/Take/Distinct)\r\n- doesn't work if outer query needs client evaluation anywhere outside projection (e.g. order by or filter by NonMapped property)\r\n- doesn't work if inner query is correlated with query two (or more) levels up, (e.g. customers.Select(c => c.Orders.Select(o => o.OrderDetails.Where(od => od.Name == c.Name).ToList()).ToList())\r\n- doesn't work in nested scenarios where the outer collection is streaming (e.g. customers.Select(c => c.Orders.Select(o => o.OrderDetails.Where(od => od.Name != \"Foo\").ToList())) - to make it work, outer collection must also be wrapped in ToList(). However it is OK to stream inner collection - in that case outer collection will take advantage of the optimization.\r\n\r\nOptimization process:\r\n\r\noriginal query:\r\n\r\n```\r\nfrom c in ctx.Customers\r\nwhere c.CustomerID != \"ALFKI\"\r\norderby c.City descending\r\nselect (from o in c.Orders\r\n        where o.OrderID > 100\r\n        orderby o.EmployeeID\r\n        select new { o.OrderID, o.CustomerID }).ToList()\r\n```\r\n\r\nnav rewrite converts it to:\r\n\r\n```\r\nfrom c in customers\r\nwhere c.CustomerID != \"ALFKI\"\r\norder by c.City descending\r\nselect\r\n   (from o in orders\r\n    where o.OrderID > 100\r\n    order by o.EmployeeID\r\n    where c.CustomerID ?= o.CustomerID\r\n    select new { o.OrderID, o.CustomerID }).ToList()\r\n```\r\n\r\nwhich gets rewritten to (simplified):\r\n\r\n```\r\nfrom c in customers\r\nwhere c.CustomerID != \"ALFKI\"\r\norder by c.City desc, c.CustomerID asc\r\nselect CorrelateSubquery(\r\n    outerKey: new { c.CustomerID },\r\n    correlationPredicate: (outer, inner) => outer.GetValue(0) == null || inner.GetValue(0) == null ? false : outer.GetValue(0) == inner.GetValue(0)\r\n    correlatedCollectionFactory: () =>\r\n        from o in orders\r\n        where o.OrderID > 100\r\n        join _c in\r\n            from c in customers\r\n            where c.CustomerID != \"ALFKI\"\r\n            select new { c.City, c.CustomerID }\r\n        on o.CustomerID equals _c.GetValue(1)\r\n        order by _c.GetValue(0) descending, _c.GetValue(1), o.EmployeeID\r\n        select new\r\n        {\r\n            InnerResult = new { o.OrderID, o.CustomerID }\r\n            InnerKey = new { o.CustomerID },\r\n            OriginKey = new { _c.GetValue(1) }\r\n        }).ToList()\r\n```\r\n\r\nCorrelateSubquery is the method that combines results of outer and inner queries. Because order for both queries is the same we can perform only one pass thru inner query.\r\nWe use correlation predicate (between outerKey parameter passed to CorrelateSubquery and InnerKey which is part of the final result) to determine whether giver result of the inner query belongs to the outer.\r\nWe also remember latest origin key (i.e. PK of the outer, which is not always the same as outer key). If the origin key changes, it means that all inners for that outer have already been encountered.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/9928", "title": "[TINY] Fix to #9577 - Query Testing: Failure of assertion framework should give better information", "body": "Added some logic to TestHelpers.AssertResults to check for IComparable interface on the results that are about to be sorted by a default sorter (i.e. e => e)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5228826", "body": "Should we add public virtual IEnumerable (of TEntity) AddRange(params TEntity[] entities)?\n\nI always miss it when coding my tests\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5228826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136229667", "body": "unrealted?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136229667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "smitpatel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10592", "title": "[WIP] Add Microsoft.EntityFrameworkCore.DocumentDb package", "body": "Resolves #8443\r\n\r\nThis is WIP. Early feedback is welcome.\r\nTest time for functional tests on Emulator last time was ~5h.\r\n\r\nSimpleQueryTests are passing.\r\nIt translates Predicate to SQL correctly. It supports TPH through discriminator.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151535175", "body": "If someone can review this list. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151535175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151816157", "body": "We prefer expression bodies everywhere. We'll see how it goes and update as needed in future.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151816157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/111025148", "body": "netcore for win :trollface: ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/111025148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123395705", "body": "Unable to find package with just that.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123395705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123397201", "body": "Saw that. Is there a point of going backwards?\r\n> We are planning to keep the previous generation of images around until September 1st, 2017.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123397201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136233248", "body": "testing building of feature branches on travis", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136233248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "felixhacks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10454", "title": "Allows two type arguments for AddDbContext", "body": "To allow inheritance of DbContexts with Dependency Injection, extension methods are created that allow to specify an abstract type and an implementation type similar to `AddTransient`, `AddScoped` and `AddSingleton`.\r\n- `AddDbContext<TContext>()` calls `AddDbContext<TBaseContext, TContext>()` with `TContext` also being the `TBaseContext`\r\n- `AddDbContextPool<TBaseContext, TContext>` is not implemented since its implementation is not so trivial and I wanted some feedback first.\r\n\r\nFixes #10451", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KallDrexx": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10438", "title": "Added scaffold line argument to not put connection string in dbcontext", "body": "Current database-first workflows require running the `dotnet ef scaffold` command any time database updates have been done so the `DbContext` (and all associated POCOs) reflect the current schema.  \r\n\r\nHowever, the current scaffold command creates a `DbContext` that contains an `OnConfiguring()` method that contains the connection string that was used for context generation.  When running scaffold command after every update it is easy to forget to strip the connection string out prior to committing to source control.  It can also lead to accidental scenarios where the `DbContext` is using this connection string instead of the proper one for its environment (e.g. development database when it should be connecting to production).\r\n\r\nTo remedy this I added a command line option for the scaffold command of `--dont-add-connection-string`.  When this is provided it scaffolds the `OnConfiguring()` method (so users can see that the override exists) but it does not add the connection string to the generated code.\r\n\r\nThis will allow users to execute scaffolding without having to worry about sensitive information being checked into source control.\r\n\r\nReferences issue #10432\r\n\r\n\r\n**Please check if the PR fulfills these requirements**\r\n\r\n- [x] The code builds and tests pass (verified by our automated build checks)\r\n- [x] Commit messages follow this format\r\n```\r\n    Summary of the changes\r\n    - Detail 1\r\n    - Detail 2\r\n\r\n    Fixes #bugnumber\r\n```\r\n- [ ] Tests for the changes have been added (for bug fixes / features) **Not done since no scaffolding tests could be found**\r\n- [x] Code meets the expectations our engineering guidelines. https://github.com/aspnet/Home/wiki/Engineering-guidelines.\r\n\r\nPlease review the guidelines for CONTRIBUTING.md for more details.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tonysneed": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10356", "title": "Generate DbContext Class in a Different Location", "body": "Address #1836 by generating `DbContext` class to a different location.\r\n\r\nFor my first pass, I refactored `ReverseEngineeringScaffolder.Generate` to accept a `outputDbContextPath` parameter for specifying a different location for the `DbContext` class.\r\n\r\nNext I'll look at how to refactor [OperationExecutor.ScaffoldContext](https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore.Design/Design/OperationExecutor.cs#L417).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ralmsdeveloper": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10219", "title": "Migration Fix for Oracle", "body": "Resolves: https://github.com/aspnet/EntityFrameworkCore/issues/10380\r\n\r\n### Basics Implementations\r\n \r\n\u2714\ufe0fCreate Column\r\n\u2714\ufe0fCreate Index\r\n\u2714\ufe0fRename Table\r\n\u2714\ufe0fRename Column\r\n\u2714\ufe0fRename Index\r\n\u2714\ufe0fDrop Index\r\n\u2714\ufe0fDrop Column\r\n\u2714\ufe0fDrop Table\r\n\r\n### Simple SQL Example Generated from migrations!\r\n\r\n```sql\r\nDECLARE\r\n    v_Count INTEGER;\r\nBEGIN\r\n    SELECT COUNT(*) INTO v_Count FROM all_tables t WHERE t.table_name = N'__EFMigrationsHistory'\r\n    IF v_Count = 0 THEN\r\n        EXECUTE IMMEDIATE\r\n        '\r\n            CREATE TABLE \"__EFMigrationsHistory\" (\r\n                \"MigrationId\" NVARCHAR2(150) NOT NULL,\r\n                \"ProductVersion\" NVARCHAR2(32) NOT NULL,\r\n                CONSTRAINT \"PK___EFMigrationsHistory\" PRIMARY KEY (\"MigrationId\")\r\n            )\r\n        ';\r\n    END IF;\r\nEND;\r\nGO\r\n\r\nCREATE TABLE \"Product\" (\r\n    \"Id\" NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY,\r\n    \"Description\" NVARCHAR2(450) DEFAULT ('BOOK') NULL,\r\n    \"Quanty\" NUMBER(10) NOT NULL,\r\n    \"Price\" NUMBER(29,4) NOT NULL,\r\n    \"Date\" TIMESTAMP NOT NULL,\r\n    \"Logo\" BLOB NULL,\r\n    CONSTRAINT \"PK_Product\" PRIMARY KEY (\"Id\")\r\n)\r\nGO\r\n\r\n-- SEED DATA --\r\n\r\nBEGIN\r\nINSERT INTO \"Product\" (\"Id\", \"Date\", \"Description\", \"Logo\", \"Price\", \"Quanty\")\r\nVALUES (1, TO_DATE('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), N'Book EF Core', NULL, 100.0, 1000);\r\nEND;\r\nGO\r\n\r\nBEGIN\r\nINSERT INTO \"Product\" (\"Id\", \"Date\", \"Description\", \"Logo\", \"Price\", \"Quanty\")\r\nVALUES (2, TO_DATE('0001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), N'Book Asp.Net Core', NULL, 100.0, 1000);\r\nEND;\r\nGO\r\n\r\nBEGIN\r\n    EXECUTE IMMEDIATE 'CREATE INDEX \"Idx_Description\" ON \"Product\" (\"Description\")';\r\nEND;\r\nGO\r\n\r\nINSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\r\nVALUES (N'20171105004010_First', N'2.1.0-preview1-t000')\r\nGO\r\n\r\n-- RENAME COLUMN --\r\n\r\n\r\nALTER TABLE \"Product\" RENAME COLUMN \"Description\" TO \"Description2\"\r\nGO\r\n\r\nINSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\r\nVALUES (N'20171105004654_ChangeNameColumn', N'2.1.0-preview1-t000')\r\nGO\r\n\r\n-- RENAME INDEX -- \r\n\r\nALTER INDEX \"Idx_Description\" RENAME TO \"Idx_Description2\"\r\nGO\r\n\r\nINSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\")\r\nVALUES (N'20171105004836_ChangeNameIndex', N'2.1.0-preview1-t000')\r\nGO\r\n\r\n```\r\n\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/98145576", "body": ":+1: \nPlease also provide annotation for uniqueness constraint as a model `convention`, so we don't have to \"drop down\" to [manual model builder](https://github.com/aspnet/EntityFramework/pull/866#issuecomment-98000296) `configuration` probably like so:\n\n``` c#\n[Unique]\npublic int MySurrogateKey { get; set; }\n// here MySurrogateKey can be null as a unique value\n```\n\n``` c#\n[UniqueNotNull]\npublic int MySurrogateKey { get; set; }\n// here MySurrogateKey can not be null\n```\n\n``` c#\n[UniqueAllowNull]\npublic int MySurrogateKey { get; set; }\n// here MySurrogateKey can be null multiple times, but non-null values should be unique\n```\n\ncopy: @Tratcher, @davidfowl, @NTaylorMullen\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/98145576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/114485782", "body": "I'd like to voice my need for `ON DELETE SET NULL` support.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/114485782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/97934734", "body": "Could you please elaborate how to use it without configuring the dbcontext via model? Is it so that we can use it in model as follow:\n\n``` c#\n[Unique]\npublic int SomeSurrogateKey { get; set; }\n```\n\nIf such an attribute is available now, please consider putting it in some news highlight blog/article, because as far as I can tell, this feature (marking property as key using C# decorator in model) has high demand in ASP.NET MVC dev community.\n\nThanks in advance.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/97934734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/60868932", "body": "This is basically disconnected graph support.  How disconnected graph support is not Priorty numero uno I have no clue.  Just what applications being built keep their entities connected?  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/60868932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/269396418", "body": "So curious about when, if ever, this is going to be implemented. \r\n\r\nThis is a complete blocker for our adoption of EntityFramework Core, and obviously a blocker for a lot of other teams based on the commentary. I recognize the complexity of the problem, but this, along with lazy loading, are the reason we've stayed away from core in general.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/269396418/reactions", "total_count": 21, "+1": 14, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 7}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71396775", "body": "The old version of EF weakened the need for creating repository abstractions since DbContext and DbSet seem to function as the unit-of-work and repository.  The newer version of EF 7 takes this a step further with the introduction of nosql databases.  The repositories that developers created end up being a repository repository when its used in conjuction with EF.  \n\nUsing xml requires an extra layer of abstraction in order to switch between xml and EF currently, though that may not need to be the case. \n\nAn EF xml/whatever data provider (for lack of a better term at the moment) could be very useful for:\n- applications that start small\n- prototypes that are developed to show off to users in order to gain feedback quickly.\n- applications that ride the line of needing something small up to a sql database depending on the consumer.\n\nInmemory is only for testing purposes, at least that is my take from it. Maybe the storage doesn't have to be xml, but what I can see is that there is value in having a data provider between the levels of inmemory and sql-server.  \n\nAn application would no longer require an extra layer of abstraction and work just start off with something simple before moving towards using a database.  \n\nIt would give a developer peace of mind that they could  switch their application to using a database later with minimum effort and minimize the loss of work. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71396775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71468812", "body": "The primary two things that I'm looking at are building prototypes or just starting an application.  \n\nThese are times where one doesn't want to get too attached to the prototype, application, or schema.  With a sql database, there are extra mental processes and effort/time devoted to getting the schema right and sometimes wrestling with the quirks of the database.  You can also get caught up in fiddling too much with the schema migrations.  The more time you invest into any of the above, the harder it becomes to just throw it all away.  \n\nAlso you want the focus of your time to be on building out things that users are more interested in. \n\nIn these cases, dealing with SQL can be more of a hinderance. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71468812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71505094", "body": "That would be sufficient. \n\nIt would fall in line with opting into things as you need them. \n\nIt also would help startups to be more willing to throw away their prototypes in order to pivot. And it would free up those of us that work on side projects to focus more on the creative side of things than dealing with the DAL too much upfront.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71505094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/162982953", "body": "@divega, @rowanmiller, wouldn't it make sense to keep this issue opened and add a label <kbd>up for grabs</kbd>. This looks pretty blunt in a wrong way to close the issue when clearly many consumers are asking for `IndexAttribute` feature. At least keep the discussion open to avoid duplicate issues (currently there are 5 closed issues on which people are +1'ing the same feature.. https://github.com/aspnet/EntityFramework/issues/107#issuecomment-162855173).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/162982953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/163888718", "body": "@rowanmiller, should https://github.com/aspnet/EntityFramework/issues/2675 be reopened?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/163888718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/107819088", "body": "Sorry for that answer so late, ok for me with the latest nightly build.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/107819088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125653546", "body": "~~Having the same issue with Visual Studio 2013 Update 5. Any fix avl. for that?~~\nOk, this looks like this is another issue.\nWhen I install Visual Studio 2015 Update 5, then \"Entity Framework 5.dll\" can't be found by Add-Migration and Update-Database command.\n\n``` powershell\nPM> Add-Migration test\nException calling \"CreateInstanceFrom\" with \"8\" argument(s): \"Could not load file or assembly 'EntityFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' or one of its \ndependencies. Das System kann die angegebene Datei nicht finden.\"\nAt C:\\Source\\pegasus7\\packages\\EntityFramework.5.0.0\\tools\\EntityFramework.psm1:431 char:5\n+     $domain.CreateInstanceFrom(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : FileNotFoundException\n\n```\n\nWokraround: add Entity Framework 5.dll\" to GAC\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125653546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/126881595", "body": "Is this fixed and shipped with beta6 and VS2015 RTM? \nIn which case should this be closed as resolved?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/126881595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/121758952", "body": "I really dislike the name change. I guess I need to understand the SXS issue and the rationale behind people wanting to do it. To me it seems completely nuts and is asking for trouble. \n\nFurthermore, I believe that this will strongly set the wrong precedence for other package authors and generally make a mess of NuGet. Major version changes will no longer be discoverable through NuGet instead increasing reliance on blogs etc. \n\nDoesn't Entity Framework 7 v1.0.0 seem just a bit odd? \n\nPlease, for the love of the community, don't do this. \n\n:-1:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/121758952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/121087922", "body": "I autocreated a code based model from a datasource. There was a VARCHAR column marked as NOT NULL from the datasources schema, which EF translated into a string field with a RequiredAttribute. However, for this field, EF converts an empty string value to a null value, which then cause validation to fail. Adding the AllowEmptyStrings option to the RequiredAttribute then also requires adding the ConvertEmptyStringToNull option to the DisplayFormatAttribute in order for EF to just leave the value alone even when being set only from code (never displayed); i.e. null is NULL, and different from an empty string being a NON NULL zero length VARCHAR. I suppose adding those two options is not exactly difficult.\n\nMy question is, will EF7 also assume an empty string is the same thing as a null string unless otherwise explicitly told not to via 2 or more Attributes? It's not intuitive that the default behavior when setting a field to an empty string in code, is for EF to then convert it to NULL and then complain a required field does not have a value, when it did and its value was an empty string.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/121087922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/124800379", "body": "Thank you kindly for articulating.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/124800379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125496729", "body": "Also persist on dnx beta7-12275 with entityframework beta7-13844\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125496729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125674128", "body": "I delete the migration files for each update of entity framework.\nIn the new migration files is missing an using on the assembly which include the SqlServerIdentityStrategy. \nI use the command dnx . ef migration add initial\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125674128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/126197468", "body": "Exactly, i have added the ToString() for each SqlServerIdentityStrategy.IdentityColumn because IdentityColumn is of type enum.\n\nCompilation all right but when applied the migration file with\n\n```\n dnx . ef migration apply initial\n```\n\nI have the error below\n\n```\ndnx.exe : System.InvalidCastException: Le cast sp\u201acifi\u201a n'est pas valide.At line:1 char:1\n+ dnx . ef migration apply initial\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (System.InvalidC...est pas valide.:String) [], RemoteException\n    + FullyQualifiedErrorId : NativeCommandError\n\n   \u2026 Microsoft.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.ColumnDefinition(String schema, String table, String name, String type, Boolean nullable, Object defaultValue, String defau\nltValueSql, String computedColumnSql, IAnnotatable annotatable, IModel model, SqlBatchBuilder builder)\n   \u2026 Microsoft.Data.Entity.Migrations.Sql.MigrationSqlGenerator.ColumnDefinition(AddColumnOperation operation, IModel model, SqlBatchBuilder builder)\n   \u2026 Microsoft.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(CreateTableOperation operation, IModel model, SqlBatchBuilder builder)\n   \u2026 CallSite.Target(Closure , CallSite , Object , Object , IModel , SqlBatchBuilder )\n   \u2026 System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid4[T0,T1,T2,T3](CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3)\n   \u2026 Microsoft.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(IReadOnlyList`1 operations, IModel model)\n   \u2026 Microsoft.Data.Entity.Migrations.Migrator.ApplyMigration(Migration migration)\n   \u2026 Microsoft.Data.Entity.Migrations.Migrator.ApplyMigrations(String targetMigration)\n   \u2026 Microsoft.Data.Entity.Commands.MigrationTool.ApplyMigration(String migrationName, String contextTypeName, String startupAssemblyName)\n   \u2026 Microsoft.Data.Entity.Commands.Program.<>c__DisplayClass13_0.<ApplyMigration>b__0()\n   \u2026 Microsoft.Data.Entity.Commands.Program.Execute(String startupProject, Func`1 invoke)\n   \u2026 Microsoft.Data.Entity.Commands.Program.ApplyMigration(String migration, String context, String startupProject)\n   \u2026 Microsoft.Data.Entity.Commands.Program.<>c__DisplayClass10_3.<Main>b__9()\n   \u2026 Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.Execute(String[] args)\n   \u2026 Microsoft.Data.Entity.Commands.Program.Main(String[] args)\n--- Fin de la trace de la pile \u2026 partir de l'emplacement pr\u201ac\u201adent au niveau duquel l'exception a \u201at\u201a lev\u201ae ---\n   \u2026 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   \u2026 Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   \u2026 Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   \u2026 Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n--- Fin de la trace de la pile \u2026 partir de l'emplacement pr\u201ac\u201adent au niveau duquel l'exception a \u201at\u201a lev\u201ae ---\n   \u2026 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   \u2026 Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   \u2026 dnx.host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\n   \u2026 dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n   \u2026 dnx.host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\n```\n\nI think that the string \"1\" is unrecognized by the Annotation method, may be \"IdentityColumn\" ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/126197468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153131281", "body": "Hummm... I have 79 classes and i don't know these that throw the exception :(\nI will load the entity framework into visual studio 2015 and break the methods above.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153131281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153617918", "body": "Well, once loading the entity framework in the solution, i have a new exception in the EntityFramework.Commands \n\n```\ndnx.exe : System.TypeInitializationException: Une exception a \u201at\u201a lev\u201ae par l'initialiseur de type pour 'Microsoft.Data.Entity.Commands.Program'. ---> System.IO.FileLoadException: Impossible de charger le fichier \nou l'assembly 'Microsoft.Extensions.PlatformAbstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' ou une de ses d\u201apendances. Un assembly avec un nom fort est requis. (Exception de \nHRESULT : 0x80131044) ---> System.IO.FileLoadException: Un assembly avec un nom fort est requis. (Exception de HRESULT : 0x80131044)At line:1 char:1\n+ dnx ef migrations add initial --context MediagralV2Entities\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (System.TypeInit...T : 0x80131044):String) [], RemoteException\n    + FullyQualifiedErrorId : NativeCommandError\n\n   --- Fin de la trace de la pile d'exception interne ---\n   \u2026 Microsoft.Data.Entity.Commands.Program..cctor()\n   --- Fin de la trace de la pile d'exception interne ---\n   \u2026 Microsoft.Data.Entity.Commands.Program..ctor()\n\nSystem.IO.FileLoadException: Impossible de charger le fichier ou l'assembly 'Microsoft.Extensions.PlatformAbstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' ou une de ses d\u201apendances. \nUn assembly avec un nom fort est requis. (\nException de HRESULT : 0x80131044)\nNom de fichier\u00ff: 'Microsoft.Extensions.PlatformAbstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' ---> System.IO.FileLoadException: Un assembly avec un nom fort est requis. (Exception \nde HRESULT : 0x80131044)\n   \u2026 Microsoft.Data.Entity.Commands.Program..cctor()\n\n\nSystem.IO.FileLoadException: Un assembly avec un nom fort est requis. (Exception de HRESULT : 0x80131044)\n```\n\nThe Microsoft.Extensions.PlatformAbstractions assembly or one dependencies required an assembly with a strong name.\nHow can i debug the program ? otherwise an archive which contain the entities and MediagralV2Entities that's the dbContext [Entities](http://uptobox.com/y4xd43z6kekz)\n\nUPDATE \nAfter a complete update of the whole package and a pull of entity framework, the exception not occurred\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153617918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153640733", "body": "I deleted the hierarchies proceeding by step to detect an eventually intermediate error without success, now the migration no generate errors, but the entities are very ugly :(\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153640733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153712213", "body": "Ok i find the entities which throw the exception, they are the entities of base class product and entity,\nI don't declare of discriminator for these classes.\n\nThe exception is throw in Generate of CSharpMigrationOperationGenerator line 39\n\nMy latest migration with any error is 7.0.0-rc1-15945, i think it is just before that the migration verify the root in the declaration of discriminator.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153712213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/158637301", "body": "Well, the exception occurred because i have the same property into two derived classes and the fluent api use an discriminator for the base class. Just added the entity name and the property name in the message that simplifying research.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/158637301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/159499432", "body": "Oops, I was on the beta 8 for the test, after correction the error appear still on the rc1.\nAnd also I have the error, describe above, on rc1 that seeks to apply the discriminator on all tables with base class without discriminator defined by the fluent api.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/159499432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/162447698", "body": "Yes, it's a dupe of [#3061](https://github.com/aspnet/EntityFramework/issues/3061)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/162447698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/163879242", "body": "The issue is closed but l don't see throw exception code in the command operation to know which table and column is already added, i tested with rc2. I find useful, right ? \nI started the changes in the class because I need it, I can send you by modifcations pull request? if you are interested.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/163879242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/168260137", "body": "@rowanmiller That is just what I wanted thanks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/168260137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/168681412", "body": "How would I be able to detect if the property (using the method above) was an `autoincrement` like the traditional id field?\n\nI can find out if it was a `primary key`, but that does not mean it will `autoincrement`. The reason I would like that information is so that I can flag up a validation error in my application if a value is not supplied for that field, however if its an `autoincrement` I do not need to error since the DB will handle that. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/168681412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/193190848", "body": "@alexkeh (Oracle Corp.), could you please provide some sort of hint whether Oracle team is interested in / working on delivering the EF7 provider sometime around the EF7 RTM (which is pretty soon now)? Is there anything the community can do to expedite this feature request?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/193190848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5227881", "body": "Are you going to call it Entity or Core?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5227881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290827", "body": "I had to manually delete everything that messed up things recently. So yes we should do this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5293287", "body": "The console logging would also probably be part of the logging assembly. It's pretty fundamental.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5293287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5418699", "body": "Should this go in the DI library?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5418699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5424669", "body": "Seems pretty useful generally @loudej ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5424669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "Eilon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290511", "body": "Would be interesting to tie this into the general tracing discussions that at some point need to happen. I don't think anyone has even started to look at it yet because the general tracing feature is not for alpha. I assume that in the meantime it's useful to have _something_ in the Data stack just for debugging purposes?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290532", "body": "Just wondering - is our MyGet feed \"poisoned\" by having a 0.1-pre-\\* of this package in there? I'm not sure if the Data package was pushed already to MyGet. I could imagine this might cause some issues with SemVer at some point. If needed, we can go delete the poison packages from MyGet.\n\nBTW I think we said in the doc we wanted to use 0.1.0-alpha-\\* for the versions. Not sure it makes any practical difference but it might be good to be consistent on these anyway. (For all I know, _all_ our packages have this wrong right now.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5297563", "body": "@pranavkm do you want to work with @anpete to figure out what might need to be deleted with the feed? Me, @loudej  and @davidfowl have access to delete stuff from the feed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5297563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299720", "body": "Yeah I think this might be good to put in the Logging repo, even if it's not fully designed for the breadth of scenarios that we need. I think even just having a placeholder would be good - and that way when the next person who needs logging looks for something, they'll have something to poke at.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9278832", "body": "FYI we'll end up having a common DotSetting file across all repos, but this is probably fine for now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9278832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "pranavkm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290818", "body": "There's a couple of -pre packages on MyGet now. We'll need to remove them if we want -alpha to work correctly. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "divega": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299063", "body": "Rename to FirstClass? :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299068", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "kuhlenh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151559503", "body": "remove the `true`. Valid syntax is  ```csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151559503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151560644", "body": "If you only want expression bodied members on single-line methods you can use ```when_on_single_line:suggestion```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151560644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151570290", "body": "you can combine all of these into one applicable_kinds:\r\n\r\n```\r\n# Classes, structs, methods, interfaces, enums, events, properties must be PascalCase\r\ndotnet_naming_rule.class_naming.symbols = class_symbol\r\ndotnet_naming_rule.class_naming.style = pascal_case_style\r\ndotnet_naming_rule.class_naming.severity = warning\r\n\r\ndotnet_naming_symbols.class_symbol.applicable_kinds = class, struct, interface, enum, method, property, event\r\ndotnet_naming_symbols.class_symbol.applicable_accessibilities = *\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151570290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151570557", "body": "You don't need this rule grouping for parameters if you have the one below.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151570557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151571669", "body": "You'll need to pull out interfaces though. Sorry I missed that.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151571669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151817523", "body": "this is actually \"always\"\r\nhttps://github.com/dotnet/roslyn/blob/160c4098fa90cff36fadad616eab2ae967ad2563/src/Workspaces/Core/Portable/CodeStyle/AccessibilityModifiersRequired.cs#L8-L15", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151817523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "rowanmiller": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/64304669", "body": "I would write something more like\n\n> Ideally include a complete code listing that we can run to reproduce the issue. Alternatively, you can provide a project/solution that we can run.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/64304669/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/64305103", "body": "I would combine these two, templates that have these (such as our Connect system) always get paired statements like \"The entity is added\"/\"The entity is not added\" - which is not useful. Maybe more like...\n\n```\n### The issue\n\nDescribe what is not working as expected. If you are seeing an exception, include the full exceptions details (message and stack trace).\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/64305103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/64304392", "body": "This shouldn't be needed as we have a bot that posts info when a CLA is needed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/64304392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/36541084", "body": "Discussed and agreed we should move this to a separate repo. I think once we RTM we may want to split all the benchmark stuff out to a separate repro anyway since we'll be testing various versions and not just the current dev branch.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/36541084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mikeharder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123395609", "body": "Why is the `sources` element needed?  I think just `packages\\libunwind8` should be sufficient.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123395609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123395920", "body": "Yeah, I found this issue: https://github.com/travis-ci/travis-ci/issues/4780.  CC: @natemcmaster ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123395920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123397279", "body": "@natemcmaster: Docker deps still installs libunwind8 so I assume it's required: https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/runtime-deps/stretch/Dockerfile#L16.  Also the CLI install scripts block if libunwind not installed: https://github.com/dotnet/cli/blob/release/2.0.0-preview2/scripts/obtain/dotnet-install.sh#L194.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123397279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "natemcmaster": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123396929", "body": "libunwind8 shouldn't be required for .NET Core 2.0 IIRC", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123396929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123397034", "body": "Try adding this instead:\r\n```yml\r\ngroup: deprecated-2017Q2\r\n```\r\n\r\nTravis changed the trusty images today: https://blog.travis-ci.com/2017-06-21-trusty-updates-2017-Q2-launch", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123397034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123397554", "body": "You're right. Looks like these are still required on debian.\r\n\r\n![image](https://user-images.githubusercontent.com/2696087/27412136-6112c878-56a7-11e7-91d2-4223d6c56d5e.png)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/123397554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136158031", "body": "https://github.com/aspnet/EntityFrameworkCore/issues/9207", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136158031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136200384", "body": "Ok, I'll update this PR to take care of this too.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136200384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ryanbrandenburg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136156444", "body": "Is there an issue filed about fixing this?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/136156444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}