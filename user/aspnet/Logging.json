{"_default": {"1": {"softwaretecture": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/752", "title": "ILoggingBuilder on part of Logging.Abstractions", "body": "Any reason why ILoggingBuilder.cs is not part of the Logging.Abstractions namespace but rather a part of the implementation assembly?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "henkmollema": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/751", "title": "Windows EventLog package for .NET Core", "body": "The Windows compatibility pack provides a preview [Windows EventLog](https://www.nuget.org/packages/System.Diagnostics.EventLog/) package for .NET Core/.NET Standard 2.0. Are there any plans to integrate this package in the existing EventLog implementation? I successfully did so locally and it compiles cleanly. \r\n\r\nHowever, the compatibility package is still in preview. Are there any timeframes for this?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skec0912": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/749", "title": "ILogger log.Error in AppInsights cannot log Dictionary<string,string>", "body": "I have problem when I want to log Dictionary or my custom class in app insights.\r\nMy code is :\r\n\r\nloggerFactory.AddApplicationInsights(app.ApplicationServices);\r\n       try\r\n            {\r\n                throw new Exception(\"This is a test exception for app insights.\");\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                logger.LogError(ex, \"Exception message\",new Dictionary<string, string>() { {\"Controller\",\"Error\" } });\r\n throw;\r\n}\r\n\r\n\r\nAny idea?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "leastprivilege": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/748", "title": "Input data can create exception", "body": "Are there any best practices to sanitize input data - see this issue\r\n\r\nhttps://github.com/IdentityServer/IdentityServer4/issues/1931", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msmolka": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/746", "title": "Consider moving BatchingLogging to Logging", "body": "Batching logging is nice implementation for concurrent and heavy log messages. It would be useful to put this implementation outside Azure logging. \r\nThen it would be easy reused for File logging, database and other external providers.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/745", "title": "Flaky test: TestLogWritesToGlobalLogFile", "body": "As seen [here](http://aspnetci/viewLog.html?buildId=367315&tab=buildResultsDiv&buildTypeId=XPlat_Windows_Win10Universe#testNameId-1444600581581225772).\r\n\r\n```\r\nSystem.IO.IOException : The directory is not empty.\r\n```\r\nSeems like something about our cleanup here isn't robust enough.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/c89917b7ebbfa01fd2eac929b6725201670113f4", "message": "Add missing baselines"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/72823a8cf495afe7aefb10714b307b527c0fc105", "message": "Make tests newline agnostic"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/49ab4f3c378cc8c812f7523e8b842939eab28a83", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/a42605cc0c51b36ac3dda10401e7ffea05c8d848", "message": "Add RepositoryRoot"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/442d4bfddd659724f3bfd5ac91f9f52efbf2555d", "message": "Update bootstrappers"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Costo": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/742", "title": "AppService logging to BlobStorage can lead to memory exhaustion ", "body": "We recently updated our web app to Asp.Net Core 2.0 (from 1.1). After we deployed this change to AppService in Azure, we started to see high memory usage and OutOfMemoryExceptions after a while (a few hours). Only a restart would temporarily fix the problem.\r\n\r\nHere is what we were seeing with  App Service diagnostics:\r\n<img width=\"735\" alt=\"napkin 17-12-06 5 14 33 pm\" src=\"https://user-images.githubusercontent.com/46972/33688307-ee21b870-daa8-11e7-946f-14f559536eb0.png\">\r\n\r\nAfter some time we noticed that the Blob Storage application logging level was set to \"Verbose\": \r\n\r\n![screen shot 2017-12-06 at 10 22 03 am](https://user-images.githubusercontent.com/46972/33688080-3fbddb7e-daa8-11e7-9c86-e58419e39510.png)\r\n\r\nThis was not intentional, so we reverted the level to \"Warning\". After this change, the memory problem disappeared.\r\n\r\nSo my question is: Is this a bug, or is this by design? The logging level should not have been set to \"Verbose\" in the first place and this was our error. But clearly this problem didn't exist with Asp.Net Core 1.1\r\n\r\nThank you.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pakrym": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/736", "title": "Remove/obsolete AzureAppServicesDiagnosticsSettings.OutputTemplate", "body": "It's not used since we moved off Serilog.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/712", "title": "Finalize logging analyzers", "body": "Consider adding analyzers for `DefineMessage`\r\nReference analyzers from our projects\r\nDecide how are they going to be shipped\r\n\r\n/cc @glennc ", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/707", "title": "Consider having an attribute to mark methods that take message template with arguments", "body": "So people can write tooling (in particular analyzers) independently of logging library/interface used as long as it has attribute.\r\nSee https://github.com/aspnet/Logging/pull/702#issuecomment-329930327 for additional information.\r\n\r\nSimilar to `StringFormatMethod` attribute ReSharper provides\r\n/cc @davidfowl ", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/af9377ad2de9fa7351f49940bd660e66f3aa5d19", "message": "EventLog Scopes (#741)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/000418aca3936a317309352c0a627c1b512f2c95", "message": "External scope storrage (#723)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/42ba2626b1a9e6327a43318e5888ed406e3f90da", "message": "Fix logger provider configuration reload after adding section (#725)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9f7800d51153ed82a529a82e4711e7ffcc726946", "message": "Use TryAddEnumerable to prevernt adding logger provider multiple times (#719)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/cc350d7ef616ef292c1b4ae7130b8c2b45fc1164", "message": "Add a way to get configuration section associated with logger provider (#706)\n\n* Add a way to get configuration section for provider\r\n\r\n* Doc comments, deduplicate code\r\n\r\n* Better things\r\n\r\n* Properties file"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/24c6620f288fc80956c23c3a8370593d1dc4ec65", "message": "Use xunit runner config only for analyzers (#710)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glatzert": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/735", "title": "Proposal: LogLevel triggered buffered LoggerDecorator", "body": "We had a situation, where our normal logging level of warning did not provide enough information, but the information logs would show the information. Unfortunately information logs will generate lots more of output, which might or might not be useful.\r\n\r\nSo my proposal is that there should be a logger which will:\r\n - Create a Log-Buffer for every incomming request\r\n - Write into that buffer\r\n - when an log message of level x (e.g. ERROR) is sent to the logger, it will flush all messages of level y to whatever Logger is decorated by the buffered-log-level-triggered-LoggerDecorator.\r\n - when no log message of level x is received, all messages are silently discarded.\r\n\r\nX and Y could be configured as well as the logger it decorates.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "malachib": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/734", "title": "Warning C4691 when building a C++/CLI executable", "body": "As the title reads, I am attempting to utilize the logging library from a C++/CLI (.NET Framework 4.6) executable.  Original MSDN thread with artifacts [here](https://social.msdn.microsoft.com/Forums/vstudio/en-US/fae48caa-7746-4c8f-9c44-839bd23ed128/warning-c4691-when-building-a-ccli-executable-referencing-microsoftextensionslogging-via-nuget?forum=vcgeneral)\r\n\r\nIt actually works quite well, but I am experiencing concerning warnings inclusive of the following:\r\n\r\n```\r\n>c:\\projects\\ucpro\\application\\ucpront\\logging.h(33): warning C4691: 'System::Exception': type referenced was expected in unreferenced assembly 'System.Runtime', type defined in current translation unit used instead\r\n>c:\\projects\\ucpro\\application\\ucpront\\logging.h(33): note: This diagnostic occurred while importing type 'Microsoft::Extensions::Logging::ILogger ' from assembly 'Microsoft.Extensions.Logging.Abstractions, Version=1.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n>c:\\projects\\ucpro\\application\\ucpront\\logging.h(33): warning C4691: 'System::Func': type referenced was expected in unreferenced assembly 'System.Runtime', type defined in current translation unit used instead\r\n>c:\\projects\\ucpro\\application\\ucpront\\logging.h(33): note: This diagnostic occurred while importing type 'Microsoft::Extensions::Logging::ILogger ' from assembly 'Microsoft.Extensions.Logging.Abstractions, Version=1.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n```\r\n\r\nAs you can see in the warnings, the logging package versions are 1.1.2\r\n\r\nExact steps for recreating the issue are outlined in the MSDN thread, but to summarize, merely opening and compiling SW-132 project in [SW-132v2](https://www.dropbox.com/s/9261ina8p4gyce1/SW-132v2.zip?dl=0) exhibits the issue.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kencharos": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/732", "title": "Question: AzureAppServicesDiagnosticsSettings.OutputTemplate is not available in core 2.0 ? ", "body": "Hello.\r\n\r\nI use AspNetCore2.0 in azure apps with Microsoft.Extensions.Logging.AzureAppServices 2.0.0\r\n\r\nI want to output custom format log in Azure apps application logs and log streaming.\r\nSo that, I configure  AzureAppServicesDiagnosticsSettings.OutputTemplate.\r\n\r\nFollowing my startup.cs \r\n\r\n```\r\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n        {\r\n\r\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n            loggerFactory.AddAzureWebAppDiagnostics(\r\n                new AzureAppServicesDiagnosticsSettings\r\n                {\r\n                    OutputTemplate = \"{Timestamp:yyyy-MM-dd HH:mm:ss zzz} [{Level}] {RequestId}-{SourceContext}: {Message}{NewLine}{Exception}\"\r\n                }\r\n            );\r\n```\r\n\r\nbut, Application log doesn't output above format.\r\n\r\nAnd I find  that OutpuTemplate doens't use at [AzureAppServicesLoggerFactoryExtensions.cs](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.AzureAppServices/AzureAppServicesLoggerFactoryExtensions.cs) .\r\n\r\nPlease tell me AzureAppServicesDiagnosticsSettings.OutputTemplate is available ? \r\n\r\nThanks.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/732/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anurse": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/730", "title": "Consider demystifying exceptions by default in Console logger", "body": "See https://github.com/benaadams/Ben.Demystifier\r\n\r\nUsing that library may be tricky but we could share code or something. Async stack traces are so bad and this makes them much much cleaner", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/730/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/4c59cc4c098603dbab31d0689c0f39a042316d13", "message": "fix sheared xunit log messages by buffering the message (#744)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/f6e08b390370ad944f6a8661d9415e90f7d0d328", "message": "[Logging.Testing] Drop test logging level down to Trace (#743)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkArtak": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/728", "title": "Discussion: Extended support for custom ILogger-s", "body": "Hi.\r\n\r\nI'm looking for ways to extend the capabilities of the ILogger interface. Here is the full scenario I'm seeking support for.\r\n\r\nI have an ILogger implementation for AppInsights's TelemetryClient. The ILogger.Log<TState> method implementation calls into the TrackTrace method of the underlying TelemetryClient instance. **Beside that, I also want to have a mechanism to expose the telemetryClient.LogMetric API**.\r\n\r\nMy proposal is to change the ILoggerFactory.CreateLogger(string categoryName) method to be generic, maybe like the below one:\r\n    **`T CreateLogger<T>(string categoryName) where T : ILogger;`**\r\n\r\nI understand this would require some internal changes in the LoggerFactory class, but this would enable custom interface based telemetry support. In other words, I would be able to define a new interface:\r\n\r\n```\r\n    public interface IExtendedLogger : ILogger\r\n    {\r\n        void LogMetric(string metricName, double value);\r\n    }\r\n```\r\nand get an instance for that still using the ILoggerFactory as usual.\r\nThe TelemetryClient wrapping logger would then implement this interface instead, and would allow me to properly expose both LogMetric and Log methods.\r\n\r\nSo the classes using ILogger, which need to also be able to use the new API will need to be updated to use IExtendedLogger instead. But with that only change (on the consumer/client side) my existing logging code would just work as is, plus I would be able to also use the new LogMetric API wherever I need to.\r\n\r\nAnyway, bringing this up for discussion - would be glad to hear your feedback on this.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/728/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "squaredinfinity": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/727", "title": "CreateLogger<T>() design change proposal", "body": "Hi there,\r\n\r\nCurrently I can create a logger for a type using .CreateLogger<T>() extensions method.\r\nThis method calls .CreateLogger(Type) of the ILoggerFactory and wraps the result in Logger\\<T>().\r\n\r\nhttps://github.com/aspnet/Logging/blob/42ba2626b1a9e6327a43318e5888ed406e3f90da/src/Microsoft.Extensions.Logging.Abstractions/LoggerFactoryExtensions.cs#L25\r\n\r\nThis wrapper (Logger\\<T>) essentially makes it impossible to access wrapped logger directly, which from the end user is fine, but makes writing custom LoggerFactory/Logger bit harder for certain scenarios.\r\n\r\nWould it be possible to change this slightly and, for example, introduce IGenericLoggerFactory with .CreateLogger\\<T>() method? .CreateLogger<T>(this ILoggerFactory loggerFactory) extension method could then check if loggerFactory is IGenericLoggerFactory and use it to create generic wrapper or continue as before otherwise ?\r\n```\r\npublic interface IGenericLoggerFactory\r\n{\r\n  public ILogger<T> CreateLogger<T>();\r\n}\r\n\r\npublic static ILogger<T> CreateLogger<T>(this ILoggerFactory factory)\r\n{\r\n    if (factory == null)\r\n    {\r\n         throw new ArgumentNullException(nameof(factory));\r\n    }\r\n    \r\n    if(factory is IGenericLoggerFactory genericFactory)\r\n    {\r\n          return genericFactory.CreateLogger<T>();\r\n    }\r\n    else\r\n    {\r\n          return new Logger<T>(factory);\r\n    }\r\n}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "daniel-white": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/726", "title": "Context method and Always trace level", "body": "Love the abstractions that this suite offers. However, my last company had a couple nice features in our logging library that I would see as beneficial to this library as well.\r\n\r\n* `BeginContext` would be similar to `BeginScope` but would take a key and a potentially formattable value. This value would be carried though to each log message within the scope of the context `IDisposable`. This would avoid passing certain things around in the code. This is similar to #717  For instance:\r\n\r\nWithout `BeginContext`:\r\n```\r\nGuid correlationId = ...\r\nusing (logger.BeginScope(\"Process started {correlationId}\", correlationId))\r\n{\r\n    MyMethodThatTracesLotsOfThings(correlationId, ...);\r\n}\r\n\r\nvoid MyMethodThatTracesLotsOfThings(Guid correlationId, ...)\r\n{\r\n    logger.LogInformation(\"We did something here with {correlationId}\", correlationId); \r\n}\r\n```\r\n\r\nWith `BeginContext`\r\n```\r\nGuid correlationId = ...\r\nusing (logger.BeginContext(\"correlationId\", correlationId)\r\nusing (logger.BeginScope(\"Process started\"))\r\n{\r\n    MyMethodThatTracesLotsOfThings(...);\r\n}\r\n\r\nvoid MyMethodThatTracesLotsOfThings(...)\r\n{\r\n    logger.LogInformation(\"We did something here\"); \r\n}\r\n```\r\n\r\nThe logger can use this for the tracing at will. `BeginScope` adds some of this facility, but is really tied to a single message.\r\n\r\n* `TraceLevel.Always`. This would potentially be a breaking change with `TraceLevel`, but I sometimes want to unconditionally trace something. I know the logger implementations can still reject it, but I want to try from my application code to trace. `TraceLevel.None` should be `Int32.MinValue` and `TraceLevel.Always` should be `Int32.MaxValue`. \r\n\r\nThoughts?\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dangershony": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/720", "title": "ConsoleLoggerProvider thread leaks ", "body": "Hi I am on the stratis platform team (we are developing the blockchain in C#).  \r\nJust wanted to let you know that we have an issue where when we create two instances of ConsoleLoggerProvider we observed thread leaks (thread count grows indefinitely until the system halts)\r\n\r\nSee an print out form the diagnostics tool:\r\n\r\n```\r\nNot Flagged\t\t505824\t290\tWorker Thread\t<No Name>\tSystem.Private.CoreLib.dll!System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout\tNormal\r\n\r\n \t \t \t \t \t \tSystem.Private.CoreLib.dll!System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, System.Threading.CancellationToken cancellationToken)\t \r\n \t \t \t \t \t \tSystem.Private.CoreLib.dll!System.Threading.SemaphoreSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)\t \r\n \t \t \t \t \t \tSystem.Collections.Concurrent.dll!System.Collections.Concurrent.BlockingCollection<Microsoft.Extensions.Logging.Console.Internal.LogMessageEntry>.TryTakeWithNoTimeValidation(out Microsoft.Extensions.Logging.Console.Internal.LogMessageEntry item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken, System.Threading.CancellationTokenSource combinedTokenSource)\t \r\n \t \t \t \t \t \tSystem.Collections.Concurrent.dll!System.Collections.Concurrent.BlockingCollection<Microsoft.Extensions.Logging.Console.Internal.LogMessageEntry>.GetConsumingEnumerable(System.Threading.CancellationToken cancellationToken)\t \r\n \t \t \t \t \t \tMicrosoft.Extensions.Logging.Console.dll!Microsoft.Extensions.Logging.Console.Internal.ConsoleLoggerProcessor.ProcessLogQueue()\t \r\n \t \t \t \t \t \tMicrosoft.Extensions.Logging.Console.dll!Microsoft.Extensions.Logging.Console.Internal.ConsoleLoggerProcessor.ProcessLogQueue(object state)\t \r\n \t \t \t \t \t \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\t \r\n \t \t \t \t \t \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)\t \r\n \t \t \t \t \t \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\t \r\n```\r\nHere is the code that caused the issue (this was the second instance of ConsoleLoggerProvider.  \r\nhttps://github.com/stratisproject/StratisBitcoinFullNode/blob/b9069a1fed5b776b11ac82e64595da848f44200a/Stratis.Bitcoin/Utilities/PrefixLogger.cs#L40", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cyrusjamula": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/717", "title": "What is the Microsoft logging equivalent of Serilog.LogContext.PushProperty", "body": "I need to add Context properties;\r\nWhat is the microsoft equivalent for this.\r\n\r\nBeginScope does not write our these values when used with Serilog", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benaadams": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/714", "title": "Don't set AsyncLocal for scope if not included", "body": "Adding ConsoleLogger disturbs the `ExecutionContext` even if scopes aren't being used and causes allocations to wildly increase.\r\n\r\nWithout ConsoleLogger (no-changes to AsyncLocal)\r\n![](https://aoa.blob.core.windows.net/aspnet/tasks-action.png)\r\n\r\nWith ConsoleLogger and no scopes - but not logging anything to Console (changes to AsyncLocal)\r\n![](https://aoa.blob.core.windows.net/aspnet/async-local.png)\r\n\r\nYou can see the allocations of `Action` and `MoveNextRunner` disproportionately increase", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/715", "title": "Don't set AsyncLocal for scope if not included", "body": "Don't disturb the `ExecutionContext` if scopes aren't being used as it wildly increases allocations\r\n\r\nWithout ConsoleLogger (no changes to AsyncLocal)\r\n![](https://aoa.blob.core.windows.net/aspnet/tasks-action.png)\r\n\r\nWith ConsoleLogger and no scopes - but not logging anything (changes to AsyncLocal)\r\n![](https://aoa.blob.core.windows.net/aspnet/async-local.png)\r\n\r\nYou can see the allocations of `Action` and `MoveNextRunner` disproportionately increase; prior to this change\r\n\r\nResolves https://github.com/aspnet/Logging/issues/714\r\n\r\n/cc @davidfowl \r\n\r\nYou are right @anurse, logging allocations make me sad \ud83d\ude22 ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kierenj": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/704", "title": "No AddEventLog overload w/MinLevel for new DI-friendly logger?", "body": "I can no longer do `.AddEventLog(minLevel: LogLevel.Warning);` when using `ILoggerBuilder`, is this by design?  Is there a suggested alternative?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andrewlock": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/695", "title": "Question: Is the ConsoleLogger safe to use in production?", "body": "I was configuring the logging for a new ASP.NET Core app, and I had the vague memory that the `ConsoleLogger` was not supposed to be used in production. \r\n\r\nSearching around, all I could find was a couple of comments on [this issue](https://github.com/aspnet/IISIntegration/issues/245#issuecomment-238666662) that suggested that a global lock in the `ConsoleLogger` library could cause performance issues. \r\n\r\nComparing the `ConsoleLogger`  code between 1.0 and 2.0, it looks like a previous `lock()` usage has been removed. \r\n\r\nDoes that mean the `ConsoleLogger` is now safe to use in production, or were these comments referring to a different global lock?\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwaclaw": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/692", "title": "System.Diagnostics.Tracing.EventSource.GenerateManifest throws with LoggingEventSource", "body": "This happens with Asp.Net Core 2.0:\r\n\r\nWhen EventSource.GenerateManifest() is called with a LoggingEventSource type as first argument an exception is thrown with message: \"Unsupported type ExceptionInfo in event source\".\r\n\r\nIt seems only primitive types are allowed as WriteEvent arguments on the event source.\r\n\r\nThe code that generates the exception is at line 198 of:\r\nhttps://github.com/dotnet/coreclr/blob/7ca2692405f255ce4a87d2c3ec263d938cf274fc/src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs\r\n\r\nI am using a library called [EtwStream](https://github.com/neuecc/EtwStream) to function as an event sink.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glennc": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/689", "title": "A mode of Console logger that outputs JSON", "body": "This allows an app to output logs to the console that are redirected to a file or read by another process that can then parse the JSON to maintain structured logs.\r\n\r\nThe canonical example of this is a side-car container on a Docker host. The side car picks up all Docker logs and sends them to an external logging sink, like app insights or sending to an ELK stack.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/97274a21360e3e045ef147c2ce023c8a9a88770c", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/8f205be462b2e7b8353a2375b477a43e92d23a9c", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d62cbc29c134227a2d93264f4269d7f2d95954ee", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ceb907addc52a079117ca03edd1f1f5b5247f249", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/0b3c3f4b7579c5144ec356b6af4e89161e07f642", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/735ed14078cbf9e0987cac33472f1fa6d64df2d5", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/7e08df080e1fe26e75a43c49d64b974ff0bf2e03", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/71e619a5599af7bdf903061ac011ed2c6f62a744", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c02afe9ac3c66a942741d7bd96d5d09ba20acae8", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/db31d8533814a98e95fc5a23f7333fe0b042a28d", "message": "Target netcoreapp2.1 in tests and samples"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/7f4bcd95ba1d0c982ad42cc78426a23fd5065f39", "message": "Run Analyzer tests in a separate group"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/8434201", "body": "Sure. I know it is / was one of @Eilon's pet peeves.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434209", "body": "Ok, didn't see the diff. The idea would be to make this `private sealed`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434257", "body": "Maybe add a bit of summary as to what the intent of this method is\n\n> `Returns a string that represents the <see cref=\"ILoggerStructure\" /> that is used for ...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434509", "body": "Sorry, I'm an idiot. I thought you had removed the `private` qualifier. What you have works :100: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/10779852", "body": "Yeah - plus it looks it's for parsing media type headers - why do we care about that?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/10779852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/10929327", "body": "Any chance we could not abbreviate this - `BeginScopeImplementation` \\ `BeginLoggerScope`  etc?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/10929327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "natemcmaster": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/0dccc54d959dab3709ddfac493d28f9c0c5d8c03", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/e8e3e707f5131e22d7d27fce6bfcefdda1dbb817", "message": "Upgrade dependencies to aspnetcore 2.1.0-preview1-27475 and build tools to 2.1.0-preview1-15549\n\n[auto-updated: dependencies]\n[auto-updated: buildtools]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/97c26fc5ce54e4a9c879bce898557ca548280cc4", "message": "Pin tools and package versions to make builds more repeatable"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotalik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/af314d54058389c8685dbaeb360c9aa9caea0af5", "message": "Increase Minimum Version of Visual Studio to 15.3.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mhenry07": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/6fb7bc284368383bc1fe9a9185b3ba73b6051fd3", "message": "Fix #656 - issue parsing format string w/ group separator (#657)\n\n* Fix issue parsing format string w/ group separator\r\n\r\nFixes #656\r\n\r\nFix issue parsing log message format strings with placeholders containing a format string with a comma \",\", such as \"{setupTime:#,#}\" which uses a custom numeric format string with a group separator. This fix uses the index of the first first comma \",\" or colon \":\" found as the delimiter instead of ignoring the colon \":\" if a comma \",\" was found.\r\n\r\n* Add test for #656 - numeric group separator bug\r\n\r\nAdd test for custom numeric format string with group separator that fails if #656 is not fixed\r\n\r\nAddresses #656\r\nPull request #657\r\n\r\n* Merge custom numeric format test case\r\n\r\nMerge LogValues_With_CustomNumericFormat test case with LogValues_With_Basic_Types\r\n\r\n* Add additional group separator test case\r\n\r\nAs requested by @pakrym"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gfoidl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/2eb498eb7395a008e0495ae19dbe1d7f05f7d3e8", "message": "Removed unnecessary indirection in starting the consumer in ConsoleLoggerProcessor (#660)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bojanrajkovic": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/739", "title": "Don't use Task.Factory.StartNew, it's dangerous", "body": "Using `Task.Factory.StartNew`, without specifying a task scheduler or\r\ndenying child attach or any of a half dozen non-obvious flags/parameters\r\ncan cause undesired behavior from the task. This hidden behavior causes\r\nany uses of the console logger in Xamarin Workbooks to hijack the main thread,\r\npreventing further execution, regardless of the workbook platform (.NET Core,\r\niOS, Desktop .NET all exhibit this issue at slightly different points).\r\n\r\nSee this article for some of the dangers of `Task.Factory.StartNew`,\r\nparticularly around not using `DenyChildAttach`, and why `LongRunning`\r\nis unnecessary: https://blog.stephencleary.com/2013/08/startnew-is-dangerous.html.\r\nThis PR replaces `Task.Factory.StartNew` with `Task.Run`, which is semantically more\r\ncorrect, functionally equivalent, and more importantly, does not cause any main\r\nthread hijacking.\r\n\r\nWould be nice if this could make it into 2.1.0. :)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndreasBieber": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/733", "title": "Fix config loading to be case insensitive", "body": "Hi,\r\n\r\nthis PR files an issue with loading filter configuration. The configuration section `LogLevel` and the category name as well were read case-sensitive while the Microsoft.Extensions.Configuration is case-insensitive, which leads to an unexpected behavior.\r\n\r\nsee:\r\nhttps://github.com/aspnet/Logging/blob/71e619a5599af7bdf903061ac011ed2c6f62a744/src/Microsoft.Extensions.Logging.Configuration/LoggerFilterConfigureOptions.cs#L33\r\n\r\nhttps://github.com/aspnet/Logging/blob/71e619a5599af7bdf903061ac011ed2c6f62a744/src/Microsoft.Extensions.Logging.Configuration/LoggerFilterConfigureOptions.cs#L58\r\n\r\nCheers,\r\n Andy", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drungrin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/729", "title": "Adding extensions to defer calculation of the log message", "body": "Logging can add quite a overhead if you need to put expensive information on the message, or if you ommit them may affect the purpose of the message.\r\n\r\nSpreading conditionals based on the level can bloat the code easily.\r\n\r\nUsing a lambda, the expensive operations don't affect the production code and solve the above issues.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CodeCharm": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/718", "title": "Corrected documentation spelling, typos, formatting. ", "body": "Very minor revisions for clarity. No code change.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mertsch": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/703", "title": "Use EventLog InstanceId instead of (deprecated) eventID to prevent exceptions with IDs > 65535", "body": "EventID is marked as obsolete http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/EventLogEntry.cs#183\r\n```\r\n        /// <devdoc>\r\n        ///    <para>\r\n        ///       Gets the application-specific event indentifier of this entry.\r\n        ///\r\n        ///    </para>\r\n        /// </devdoc>\r\n        [\r\n        MonitoringDescription(SR.LogEntryEventID),\r\n        Obsolete(\"This property has been deprecated.  Please use System.Diagnostics.EventLogEntry.InstanceId instead.  http://go.microsoft.com/fwlink/?linkid=14202\")\r\n        ]\r\n        public int EventID {\r\n            get {\r\n                // Apparently the top 2 bits of this number are not\r\n                // always 0. Strip them so the number looks nice to the user.\r\n                // The problem is, if the user were to want to call FormatMessage(),\r\n                // they'd need these two bits.\r\n                return IntFrom(dataBuf, bufOffset + FieldOffsets.EVENTID) & 0x3FFFFFFF;\r\n            }\r\n        }\r\n```\r\nand API immediatly throws when event ID is greater then 65535 http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/EventLogInternal.cs#1616\r\n```\r\n        public void WriteEntry(string message, EventLogEntryType type, int eventID, short category,\r\n                               byte[] rawData) {\r\n \r\n            if (eventID < 0 || eventID > ushort.MaxValue)\r\n                throw new ArgumentException(SR.GetString(SR.EventID, eventID, 0, (int)ushort.MaxValue));\r\n```\r\nLuckily there is a replacement\r\nhttp://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/EventLog.cs#1432\r\n```\r\n        [ComVisible(false)]\r\n        public void WriteEvent(EventInstance instance, byte[] data, params Object[] values) {\r\n            m_underlyingEventLog.WriteEvent(instance, data, values);\r\n        }\r\n```\r\n\r\nNote this issue has not been a problem with ASP.NET Core 1.x, but since 2.0 EF Core starts logging message with IDs like 2005000 for `The LINQ expression 'First()' could not be translated and will be evaluated locally.`\r\n\r\nSo this is pretty critical for anyone using 2.0", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anpete": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/608", "title": "Fix #607 - Implements equality members on EventId.", "body": "cc @ajcvickers ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/8505789", "body": "Um, yes. Please use JetBrains.Annotations. :+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8505789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "sgryphon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/529", "title": "Documentation comments (no code changes) for console logger", "body": "The doc comments are mostly added to the configuration extension methods and settings classes, and detail how to use them, in particular how category settings are inherited and the special 'Default' category.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sajayantony": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/36799115", "body": "There are some capabilities for ETW that you want to consider which make the trace usable in production. For e.g. correlation is one concept that you want to bake in early if you do care about it. Implementing correlation as a trace specific implementation might prove harder and so having the abstraction actually support them might be something worth considering early on. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/36799115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ajcvickers": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/41817307", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/41817307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/46507759", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/46507759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/46602963", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/46602963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/52949144", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/52949144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/42329949", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/42329949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53289744", "body": "Keep K10 around for now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53289744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53291613", "body": "Addition to. I'm going to do a sweep to clean up all repos later\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53291613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57268288", "body": "While we're at it, should we call WriteCore Write/Log?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57268288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/7412558", "body": "Ummm no\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/7412558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8073414", "body": "lowercase s\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8073414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434035", "body": "sealed? wut\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434068", "body": "Isn't being private enough in this case? I'm not sure we used sealed anywhere else.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434499", "body": "@pranavkm thats so pointless though. @SonjaKhan it's the same AFAIK\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8483107", "body": "Um, no. This isn't used anywhere outside of the EF repo :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8483107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/9492965", "body": "This doesn't look right at all. Why are you using the package on all platforms?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/9492965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/12593198", "body": "Singleton?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/12593198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001419", "body": "ugh really\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001432", "body": "This needs to go somewhere useful :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495669", "body": "remove k10 from the tests\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530209", "body": "Why do you need test?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530708", "body": "Nuke the stop and just use the disposable.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530755", "body": "Change this to \n\n``` C#\npublic static IDisposable BeginScope(this Logger logger, object state)\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573391", "body": "You can remove this comment\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573393", "body": "Fix the formatting here (AKA update your VS)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573394", "body": "None of the tests work on k10 right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579242", "body": "There's no point ifdeffing the tests\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848554", "body": "Wont this break EF?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848598", "body": "private\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849031", "body": "Why is this even here\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849053", "body": "private\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14850026", "body": "EF still cross compiles so this will break them at the moment\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14850026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "bendbro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/47695912", "body": "@davidfowl @yishaigalatzer @rynowak \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/47695912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/47714171", "body": "@davidfowl @yishaigalatzer @rynowak \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/47714171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50808265", "body": "@rynowak @loudej \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50808265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50822954", "body": "81016a2f3301d2cd11de64690629ea6445618850\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50822954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14429337", "body": "Should be WriteStop, not WriteEnd\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14429337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/15670213", "body": "Forgot the header, and system was not used, thought i'd do a fix.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/15670213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "rynowak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/48252127", "body": "Merged\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/48252127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/48794919", "body": "/cc @saggysanctum to understand the impact on your work\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/48794919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50822781", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50822781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53613433", "body": "You would probably implement this with an `ILoggerProvider` that goes async using fire and forget (`async void`)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53613433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489851", "body": "Put this on the `NullLogicalOperation` class in a public readonly field. This way if multiple consumers need it they don't all have their own copy\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489921", "body": "add a k10 configuration so the next guy doesn't have to do it.\n\n`\"k10\": { }`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489975", "body": "These should probably go in a sub-namespace so they're not in the face of everyone using logging. @davidfowl do you guys have a preference on the naming?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495169", "body": "'start event'\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495184", "body": "Writes a start event to the log\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495191", "body": "newlines\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495200", "body": "Writes a stop event\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495222", "body": "Test this condition, and use `Assert.Same(...)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495266", "body": "to verify that something isn't called (for your other test)\n\n`mock.Verify(expr, Times.Zero())`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579194", "body": "ya, I just didn't want him to make work for the next person.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579253", "body": "then if someone does add tests that can run on k10, then they also need to add the ifdefs - that's what I was getting at\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/15665545", "body": "Creates a new ILogger instance using the **full** name of the given type.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/15665545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849113", "body": "vs generates dat SWAG now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Tratcher": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/49460792", "body": "Postponed until we can figure out how to do this without breaking EF.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/49460792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/10779079", "body": "You can't add this dependency, it breaks the repo layering, even in test projects.\n/cc @pranavkm \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/10779079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Praburaj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/51414128", "body": "This also contains a reference to OWIN: \n\nhttps://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging/ILogger.cs#L15\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/51414128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/9504035", "body": "hmm. I tried including the package at top level `dependencies` node and it seemed to work - I mean build.cmd completed successfully without build errors. Though I did not see any other sample doing this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/9504035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "bricelam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53291259", "body": "@davidfowl instead of or in addition to aspnetcore50?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53291259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53292311", "body": "@davidfowl I just did the minimal change for now (rename net45 to aspnet50). This is all we really need on EF to move forward. Will this break dependent repos that still target net45? If so, I'll just wait for your sweep.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53292311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53641911", "body": "Tested it, and this breaks dependents that still target net45. I'll wait for the sweep.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53641911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/7412009", "body": "Until we differentiate between net45 on CLR vs KLR, this breaks Desktop/MSBuild projects. NuGet is going to resolve the net45 Logging assembly which contains AssemblyNeutral types which can't be found at runtime on the CLR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/7412009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/7412023", "body": "It's also broken on KLR if I have a net45 project that references a portable project compiled against the portable version of Logging.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/7412023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Eilon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/55142725", "body": "The NLog provider here is just a sample, not production code. We don't intend to ship this ever.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/55142725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57266754", "body": "Specifically, in this interface: https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging.Interfaces/ILogger.cs\n\n`WriteCore` needs to be focused on just _writing_ log messages. It should not need to return a `bool` to indicate success or enabled status. We should add a new `IsEnabled` method (not sure if it needs the severity param...) to check specifically whether the log is enabled.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57266754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57266783", "body": "@SonjaKhan \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57266783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269066", "body": "@SonjaKhan \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269069", "body": "@SonjaKhan \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269072", "body": "@SonjaKhan \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57543540", "body": ":shipit: !\n\nPlease make sure you rebase/merge correctly instead of using the Big Green Button.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57543540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/8434608", "body": "I _prefer_ the `sealed` because it indicates that nowhere else, even within the containing class, is the type derived from. For trivial nested types it doesn't help much with readability. But in a large class that contains many nested types, it can make it significantly easier to read. But if it's done, definitely `private sealed` instead of `sealed private`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/10932549", "body": "`Impl` is a fairly common abbreviation considering the full word is super long, so I don't have any particular problem with _that_. The main issue is that the name is so... ugly... :smile: but that's kind of on purpose so far.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/10932549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/11122009", "body": "This PR is from half a year ago, I don't think that `LogLevel` value existed! The current code at https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging.NLog/NLogLoggerProvider.cs#L67-L71 looks right to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/11122009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "SonjaKhan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57691299", "body": "I am not sure how the other issue got committed to this pull request...\n\nEDIT: managed to get rid of the unrelated commit\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57691299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/8434062", "body": "@pranavkm suggested I make it sealed, though I'm not sure what class would try to inherit from this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434477", "body": "what's the difference between `private sealed` and `sealed private`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434551", "body": "ok, so I'm still unsure about whether the `sealed` should be included. I'm leaning towards no...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "victorhurdugaci": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/8547793", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8547793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8722095", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8722095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kichalla": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/12593832", "body": "Yeah, I considered it but its problematic in the following scenario:\nExample:\n- My type 'A' gets an logger injected `ILogger<A>` in its constructor\n- In method `GetItems`()\n\n``` c#\nIList<string> GetItems()\n{\n    using(_logger.BeginScope(\"Scope1\"))\n    {\n        ....some logic here\n    }\n\n       ...some logic here\n\n    using(_logger.BeginScope(\"Scope2\"))\n    {\n        ....some logic here\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/12593832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "lodejard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848957", "body": "I was wondering about that - which is why I copied the portable target definition in the project.json also...\n\nThe assumption there is that if you're not using vnext from EF, and you're not our host, in you'll end up with the PCL version of Microsoft.Framework.Logging.Interfaces that has the interfaces sitting there as plain old types...\n\nI'm hoping that will keep EF working until we sort out the \"now ANI works all over the place\" questions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14850054", "body": "I'll check with them before merging, but we should [AN] things sooner rather than later if we think it'll cause problems\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14850054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}