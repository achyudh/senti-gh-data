{"_default": {"1": {"Matthew-Bonner": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/767", "title": "Add a bind method that creates object instance to allow for readonly properties", "body": "Something like the following:\r\n\r\n`public static void Bind<Type>(this IConfiguration configuration);`\r\n\r\nSo that we can do:\r\n```\r\nconfiguration.GetSection(\"Paths\").Bind<Paths>();\r\n\r\npublic class Paths\r\n{\r\n    public string OriginalImage { get; }\r\n    public string CacheDirectory { get; }\r\n    public string CacheFileDirectory { get; }\r\n    public string CacheFileName { get; }\r\n}\r\n```\r\n\r\nThis will make the application more robust by preventing the accidental change of a property during the application execution.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pakrym": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/766", "title": "Add KeyVault provider overload that uses MSI to authenticate", "body": "https://anthonychu.ca/post/secrets-aspnet-core-key-vault-msi/ for a sample  ", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/cfe8c9ee015588a56455c8c1f8aa8c0f1f55cd2c", "message": "Add KeyVault overloads with MSI support (#761)\n\n* Add KeyVault overloads with MSI support\r\n\r\n* Add nullref check and test"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "markolbert": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/765", "title": "Bug: Default Value of LoggerCallbackHandler.UseDefaultLogging Causes Flood of Console Messages", "body": "This is a follow-up to issue #763, which I have closed.\r\n\r\nI believe there is a bug in the default value for LoggerCallbackHandler.UseDefaultLogging. It is currently set to true, which results in a flood of logging messages related to accessing the Azure key vault. This is a problem when an app has its own logging system, because the key vault messages get handled by the app's logging system.\r\n\r\nI think the default value of this property should be false. The in-depth logging messages should only be visible if requested.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chikien276": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/764", "title": "[Questions] How to use `AddDockerSecrets` and double underscores to configurate ASP .NET core project", "body": "I explored that there are extensions to configure docker secret in AspNet project in [here](https://github.com/aspnet/Configuration/tree/rel/2.0.0/src/Microsoft.Extensions.Configuration.DockerSecrets). But there is no way can I make it work in my project although I've imported MetaPackages (v2.0.0) in `.csproj` file and all I could find about these packages is a unlisted package [here](https://www.nuget.org/packages/Microsoft.Extensions.Configuration.DockerSecrets/).\r\nMy expectation is \r\n```\r\nWebHost.CreateDefaultBuilder(args)\r\n                .ConfigureAppConfiguration((context, config) =>\r\n                {\r\n                    config.AddDockerSecrets();\r\n                })\r\n                .UseKestrel()\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n```\r\nOne more thing that I discovered that if my configuration use environment variables and if a variable has key has double underscores characters, like `foo__bar`, `__` will be replaced by `:` so in the code I can use `Configuration[\"foo:bar\"]`. I use it to override my configurations in my `.json` file. The question is it intended by ASP .NET team and it will not break in future releases?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "and85": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/759", "title": "Does GetChildKeys from ConfigurationProvider work correctly?", "body": "Hi, \r\nI think there is a bug in method GetChildKeys of https://github.com/aspnet/Configuration/blob/dev/src/Config/ConfigurationProvider.cs.\r\n\r\nAccording to the documentation, it supposes to return the list of keys for this provider.\r\n\r\nLet's imagine that I have a provider that contains keys with names which contain semicolon in their name, e.g. part1:part2:part3\r\nthen if I do something like  \r\n\r\n```\r\nvar result = new List<string>();\r\nforeach (var provider in Configuration.Providers)\r\n{\r\n\tforeach (var key in provider.GetChildKeys(Enumerable.Empty<string>(), null))\r\n\t{                        \r\n\t\tresult.Add(key);\r\n\t}\r\n}\r\nreturn result;\r\n```\r\n\r\nIt will return me just part1, cutting of the rest of the key name because of the delimiter.\r\nSo it doesn't return a full list of keys for this provider, but just names of parent \"nodes\" of the data used to populate a provider.\r\n\r\nIf this is expected, how do I iterate through a full key names then?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "votrubac": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/757", "title": "Variables expansion (e.g. %DataRootFolder%).", "body": "### Scenario\r\nappsettings.json contains multiple configuration keys that share a common part (e.g. a root folder). This common part changes per a deployment/customer.\r\n```\r\n\"Options\": {\r\n  \"DictionaryFilePath\": \"%DataRootFolder%\\\\Policy\\Component\\\\dictionary.tsv\",\r\n  \"SpellerFilePath\": \"%DataRootFolder%\\\\Policy\\\\Component\\\\entities.tsv\"\r\n}\r\n```\r\nIn the launchSettings.json, there is an environment variable that defines that common part.\r\n```\r\n\"environmentVariables\": {\r\n  \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n  \"DataRootFolder\": \"C:\\\\inetpub\\\\customer1\"\r\n}\r\n```\r\n### Current Implementation\r\nCurrently, we need to add a post-processing code to iterate through all options and call Environment.ExpandEnvironmentVariables. This does not support option re-loading. Alternatively, we can use our own IConfigurationProvider but it requires an extension method for each configuration source type.\r\n### Proposal\r\nExtend the IConfigurationSource and IConfigurationProvider interfaces to accept a delegate to perform a post-processing after an option is loaded.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/757/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemcmaster": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/755", "title": "[2.0.x] Set LocalUserSecrets project capability ", "body": "Port #750 to the next 2.0.x UserSecrets package to enable VS tooling.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/079ca6e16acb0e51a43e922dc24b1fb63527308e", "message": "Set the LocalUserSecrets project capability when UserSecrets is referenced (#750)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c5829d3d1a1ea429d3f60868b677749af330540b", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6cc477ed493e5b0da3c8f609488d667dc65a5576", "message": "Pin tool and package versions to make builds more repeatable"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/43f5720ae60a2e7309a437c7025939761f17707b", "message": "Use PackageLineup to manage PackageReference versions"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9cafdf2592dada55b87680e1048a72a3e6cc4a4f", "message": "Use Directory.Build.props/targets (#717)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7405009c24b4fbbc33e872cf7fbff98a9fa946e4", "message": "Upgrade to xunit 2.3.0-beta4"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/dc6fbde39f532bf154ee1eb02d8be08a0a1605e4", "message": "Shorten folder names"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "whitebear-gh": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/754", "title": "UsersSecrets tool doesn't work with F# projects", "body": "Hi,\r\n\r\nWhen I try to use user secrets in my F# project I get following error: \r\n```\r\nABC\\.nuget\\packages\\microsoft.extensions.configuration.usersecrets\\2.0.0\\build\\netstandard2.0\\Microsoft.Extensions.Configuration.\r\nUserSecrets.targets(37,5): error MSB3712: Code for the language \"F#\" could not be generated.  [ABC\\ABC.fsproj]\r\n```\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <UserSecretsId>ABC</UserSecretsId>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n```\r\n\r\nIs there something wrong with my fsproj or maybe you just don't support F# projects?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bdovaz": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/752", "title": "Can't read a XML list", "body": "The following code:\r\n\r\n```csharp\r\nprivate static string content = @\"\r\n<?xml version='1.0' encoding='utf-8'?>\r\n<data>\r\n  <value>123</value>\r\n  <items>\r\n    <item name='0'>a</item>\r\n    <item name='1'>b</item>\r\n  </items>\r\n</data>\r\n        \";\r\n\r\n[DataContract(Name = \"data\", Namespace = \"\")]\r\npublic class Test {\r\n\r\n    [CollectionDataContract(Name = \"items\", ItemName = \"item\", Namespace = \"\")]\r\n    public class CustomList : List<string> { }\r\n\r\n    [DataMember(Name = \"value\")]\r\n    public int Value { get; set; }\r\n\r\n    [DataMember(Name = \"items\")]\r\n    public CustomList Items { get; set; }\r\n}\r\n\r\n\r\nstatic void Main(string[] args) {\r\n    string path = Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location);\r\n    string filePath = Path.Combine(path, \"data.xml\");\r\n\r\n    File.WriteAllText(filePath, content.Trim());\r\n\r\n    IServiceCollection services = new ServiceCollection();\r\n    IConfigurationRoot configuration = new ConfigurationBuilder()\r\n        .AddXmlFile(filePath)\r\n        .Build();\r\n\r\n    services.AddOptions();\r\n\r\n    services.Configure<Test>(configuration);\r\n\r\n    IServiceProvider serviceProvider = services.BuildServiceProvider();\r\n\r\n    Test data = serviceProvider.GetRequiredService<IOptions<Test>>().Value;\r\n\r\n    Console.WriteLine(data.Value);\r\n    Console.WriteLine(data.Items.Count);\r\n    Console.WriteLine(data.Items[0]);\r\n    Console.WriteLine(data.Items[1]);\r\n\r\n    Console.ReadLine();\r\n}\r\n```\r\n\r\nWill crash because \"Items\" is deserialized with 0 values. Why is that? How can I do it properly?\r\n\r\nThis example is very simple but my model has more depth and more classes with dictionaries and collections.\r\n\r\nI also tried to do this without luck:\r\n\r\n```csharp\r\n    services.AddSingleton(provider => {\r\n        Test.CustomList list = new Test.CustomList();\r\n\r\n        configuration.Bind(\"items\", list);\r\n\r\n        Test value = new Test {\r\n            Value = configuration.GetValue<int>(\"value\"),\r\n            Items = list\r\n        };\r\n\r\n        return Options.Create(value);\r\n    });\r\n```\r\n\r\nIf I do it in json format I don't have any problems but I need it in XML format.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rudithus": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/751", "title": "Plans on DockerSecrets", "body": "I've looked around but I couldnt find a planned release date on dockersecrets configuration. Would love to know if there are planned changes or a release date.\r\n\r\nFurthermore, I would like to start a discussion on the neccesity of this package. Should the app really care wheter its receiving configuration from a container? I'm leaning towards to thinking apps should not care if they are hosted in a container or not. Perhaps  a different approach would be more beneficial.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glennc": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/747", "title": "Aggressive throwing of exceptions in CommandLineArgs configuration", "body": "This PR adds the CommandLine config source to the default builder created by the templates: https://github.com/aspnet/MetaPackages/pull/241\r\n\r\nOne limitation that annoyed me when we did this is that you cannot pass a single switch to turn on a value. In my case I wanted to pass `-i` to mean interactive=true. But I couldn't find a way to make that work, and the config provider throws if it cannot parse the arguments. So I end up needing to process arguments before passing them to the config provider, stripping out anything it cannot handle.\r\n\r\nPerhaps a change to make the provider not throw if it can't handle an arg would be appropriate? I would be ok with a feature that let me map `-i` to `key=true` as well, but I could see that as a different feature request.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40986306", "body": "duplicate of #26\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40986306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276663", "body": "We should add indexers to IConfiguration and ConfigurationContainer\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9296079", "body": "Would we be happy with JSON even without comments?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9296079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9315269", "body": "My EYES!\n\nAlternatively we could do something with convention I suppose:\n\n```\n{\n  \"Databases\" {\n    \"comment\" : \"The default connection string\",\n    \"Default: {\n      \"ConnectionString\":\"aiwfhawilfhlwiefhawilefhlaeihf\",\n      \"Provider\":\"SqlClient\"\n    },\n    \"comment\" : \"The default connection string\",\n    \"Employees\": {\n      \"ConnectionString\":\"r1237hofijqo3irjqo23r\",\n      \"Provider\":\"SqlClient\"\n    }\n  }\n}\n```\n\nWe would just have to ignore all comments when parsing, I think I've seen this somewhere before. Another option might be to effectively use a YAML parser but stick to the JSON subset with YAML comments. Another might be to just use the comments that JSON.NET can support. Really all we are talking about is some default config sources, and this one is parsed by JSON.NET and supports everything it does.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9315269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9363985", "body": "We went down the path of dropping the verbs from a bunch of configuration methods in EF6, but in the end we added them back. People just expected them to be there and it felt strange not to have them. Though there are arguments for both ways.\n\nHow do you see the AddOverrides method working?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9363985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kyschouv": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/746", "title": "Make IKeyVaultClient public and provide a way to specify a custom implementation in AzureKeyVaultConfigurationExtensions", "body": "I wanted to build a custom implementation of IKeyVaultClient to load active secret versions, but since it's internal, I'm unable to. My only option is to build my own version of the entire configuration provider just to support secret versions.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amoerie": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/745", "title": "Support repeated elements in XML configuration", "body": "### When repeating an element in appsettings.xml, an exception occurs because a duplicate key will be produced\r\n\r\n### Functional impact\r\n*Configuration that is possible from JSON is not always possible from XML, for example configuring Serilog sinks are configured as an array in JSON. Arrays in XML are not supported by the XmlConfigurationProvider.*\r\n\r\n### Minimal repro steps\r\n\r\n1. Create a .NET Core 2.0 application with an appsettings.xml file\r\n2. Fill in the appsettings.xml file like this:\r\n\r\n```xml\r\n          <settings>\r\n            <DefaultConnection>\r\n                <ConnectionString>TestConnectionString1</ConnectionString>\r\n                <Provider>SqlClient1</Provider>\r\n            </DefaultConnection>\r\n            <DefaultConnection>\r\n                <ConnectionString>TestConnectionString2</ConnectionString>\r\n                <Provider>SqlClient2</Provider>\r\n            </DefaultConnection>\r\n          </settings>\r\n```\r\n\r\n3. Load this file with the following snippet in Program.cs or Startup.cs\r\n\r\n```csharp\r\nnew ConfigurationBuilder()\r\n      .SetBasePath(Directory.GetCurrentDirectory())\r\n      .AddXmlFile($\"appsettings.xml\")\r\n      .Build();\r\n```\r\n\r\n4. Startup the application\r\n\r\n\r\n### Expected result\r\n*Unique keys should be produced for each entry in the XML settings*  \r\n\r\nI would expect the following output:\r\n\r\n```\r\n\"DefaultConnection:0:ConnectionString\"=\"TestConnectionString1\"\r\n\"DefaultConnection:0:Provider\"=\"SqlClient1\"\r\n\"DefaultConnection:1:ConnectionString\"=\"TestConnectionString2\"\r\n\"DefaultConnection:1:Provider\"=\"SqlClient2\"\r\n```\r\n\r\n### Actual result\r\n\r\n```\r\nSystem.FormatException occurred\r\n  HResult=0x80131537\r\n  Message=A duplicate key 'DefaultConnection:ConnectionString' was found.\r\n  Source=<Cannot evaluate the exception source>\r\n```\r\n\r\n### Further technical details\r\n\r\nI took the liberty of actually implementing something like this, the full source code is available at https://github.com/amoerie/configuration.xml\r\n\r\nI've added extra unit tests to cover the various scenarios (turns out there's a magical 'Name' attribute with some special rules there) and all tests seem to be green. \r\n\r\nI refrained from immediately creating a pull request, because nobody (besides myself) was asking for this and it is actually a considerable refactoring of the existing code, so it seemed better to start a conversation first. Thank you for your consideration.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/745/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flowdopip": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/744", "title": "Replace setting through Environment Variables", "body": "Hi,\r\n\r\nI don\u00b4t know if this is the right place to post this issue. If not please sorry!\r\n\r\nI have a application in .net core 2.0 and i\u00b4ve created a folder for application settings\r\n/config/servicediscovery.json\r\n\r\nSample\r\n{\r\n\"Discovery\": {\r\n\"Enabled\": true,\r\n\"Url\": \"http://localhost:8500\",\r\n\"ServiceId\": \"service\",\r\n\"ServiceName\": \"service\",\r\n\"ServiceUrl\": \"http://localhost\",\r\n\"ServicePort\": \"53489\",\r\n\"HealthCheck\": \"http://localhost:53489/ping\",\r\n\"HealthCheckInterval\": 5\r\n}\r\n}\r\n\r\nThis file has the default settings to communicate with service discovery application and by default has the values to run in localhost.\r\n\r\nAfter create the image i\u00b4m trying to run the application with docker\r\n\r\ndocker run --rm -it -p 5000:80 --name ServiceName Repository:Service:2.0.17298.133 --env ASPNETCORE_ENVIRONMENT=Production -e Discovery:HealthCheck=\"htttp://www.microsoft.com\"\r\n\r\nbut this doesn\u00b4t apply the environment setting.\r\n\r\nThis is correct? There\u00b4s another way to do this?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Zonciu": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/743", "title": "Mapping environment variables", "body": "Is there any way to map environment variable to custom key? Like command line SwitchMappings.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ig-sinicyn": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/742", "title": "Configuration.AzureKeyVault 2.0.0 incompatible with Microsoft.IdentityModel.Clients.ActiveDiretory 3.17", "body": "Current version of `Configuration.AzureKeyVault` is incompatible with `Microsoft.IdentityModel.Clients.ActiveDirectory 3.17.0` package.\r\n\r\nAttempt to build config fails with\r\n```\r\nSystem.MissingMethodException: Method not found: 'System.Threading.Tasks.Task`1<Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult> \r\nMicrosoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(System.String, Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)'.\r\n   at Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.<GetTokenFromClientSecret>d__2.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.GetTokenFromClientSecret(String authority, String resource, String clientId, String clientSecret)\r\n   at Microsoft.Azure.KeyVault.KeyVaultCredential.<PostAuthenticate>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Azure.KeyVault.KeyVaultCredential.<ProcessHttpRequestAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Azure.KeyVault.KeyVaultClient.<GetSecretsWithHttpMessagesAsync>d__66.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Azure.KeyVault.KeyVaultClientExtensions.<GetSecretsAsync>d__49.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Extensions.Configuration.AzureKeyVault.AzureKeyVaultConfigurationProvider.<LoadAsync>d__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Extensions.Configuration.AzureKeyVault.AzureKeyVaultConfigurationProvider.Load()\r\n   at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/742/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sschleicher208": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/740", "title": "UserSecrets not working correctly under Live Unit Testing", "body": "I have UserSecrets working correctly on my .NET 2.0 Core Web API. I also have it working correctly for my integration test suite against this same web API using the test server based on the function below (all tests pass). The problem occurs when I use the new live testing feature. I am already using the new extension method that was previously documented to handle this type of bug, so I'm not sure what else to change. If I move the settings back to the regular appsetting.json and remove the AddUserSecrets call, live testing works as expected (but obviously I don't want to do that).\r\n```\r\npublic static TestServer CreateServer()\r\n{\r\n     var server = new TestServer(new WebHostBuilder()\r\n     .ConfigureAppConfiguration(config => config.AddUserSecrets<Startup>())\r\n     .ConfigureServices((context, services) => services.AddOptions()\r\n     .Configure<AppSettings>(context.Configuration.GetSection(\"AppSettings\")))\r\n     .UseStartup<Startup>());\r\n     return server;\r\n}\r\n```\r\nMessage: System.InvalidOperationException : Could not find 'UserSecretsIdAttribute' on assembly 'RouteManager.Core.Server'.\r\nCheck that the project for 'RouteManager.Core.Server' has set the 'UserSecretsId' build property.\r\nIf the 'UserSecretsId' property is already set then add a reference to the Microsoft.Extensions.Configuration.UserSecrets package.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johnkors": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/739", "title": "dotnet publish includes a bunch of Framework assemblies", "body": "Probably missing something from @terrajobst netstandard/netcore videos here :/\r\n\r\nI've a console app targeting `net461`, referencing `Microsoft.Extensions.Configuration.Json` v.2.0.0: \r\n\r\n```\r\n<PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.0.0\" />\r\n```\r\n\r\n`Microsoft.Extensions.Configuration.Json` version 2.0.0 is a `netstandard2.0` class library. What I don't get is why I get a full list of system.* assemblies (looks like allof NETStandard.Library of some version) for this setup. I thought these were supposed to be type forwarded to it's full framework equivalents, since we'd probably run on the full framework versions of these..?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grahamehorner": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/738", "title": "ConfigurationBuilder support for byte array/stream", "body": "Please consider supporting/adding loading configuration from a byte array/stream; for example ServiceFabric service context is passed InitializationData as a byte array loading this data into using the ConfigurationBuilder \r\n\r\nConfigurationBuilder builder = new ConfigurationBuilder();\r\nbuilder.AddJsonFile([stream/bytearray]); ", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simonporter": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/737", "title": "AzureKeyVaultConfigurationProvider deadlocks in Load()", "body": "AzureKeyVaultConfigurationProvider Load uses ConfigureAwait on the LoadAsync call but not on the subsequent async calls.\r\nhttps://github.com/aspnet/Configuration/blob/dev/src/Config.AzureKeyVault/AzureKeyVaultConfigurationProvider.cs#L41\r\nThis would happen in any win forms app, WCF or xunit test.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajcvickers": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/736", "title": "nvalidOperationException: Unable to resolve service for type 'Microsoft.Extensions.Configuration.IConfigurationRoot' while attempting to activate My Clas", "body": "Moved from https://github.com/aspnet/EntityFrameworkCore/issues/9938 by @tanmaymandal\r\n\r\nI am making a .net core webapi project where i have a config file appsettings.json. it's very normal \r\n```json\r\n{\r\n  \"Logging\": {\r\n    \"IncludeScopes\": false,\r\n    \"Debug\": {\r\n      \"LogLevel\": {\r\n        \"Default\": \"Warning\"\r\n      }\r\n    },\r\n    \"ConnectionStrings\": {\r\n      \"DefaultConnection\": \"Server=.;Database=;UID=;PWD=;\"\r\n    },\r\n    \"My\": {\r\n      \"Infrastructure\": {\r\n        \"CacheInterval\": 0,\r\n        \"ConnectionString\": \"Server=;Database=;UID=;PWD=;\",\r\n\r\n        \"EmailAddressFrom\": \"support@dzt.com\",\r\n        \"EmailAddressFromName\": \"DZT Support\",\r\n        \"SMTPHost\": \"smtp.sendgrid.net\",\r\n        \"SMTPPort\": 465,\r\n        \"SMTPUseSSL\": true,\r\n        \"SMTPUser\": \"apikey\",\r\n        \"SMTPPassword\": \"\"\r\n\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nIn start up i have mapped\r\n```C#\r\nservices.AddSingleton<My.Infrastructure.IConfiguration, My.Configuration.InfrastructureConfiguration>();\r\n```\r\nI have put where my interface is implemented , so it should take the configuration and parse accordingly\r\n\r\nHere is my configuration class\r\n```C#\r\npublic class InfrastructureConfiguration : **ConfigurationBase**, My.Infrastructure.IConfiguration\r\n    {\r\n        protected readonly IConfigurationSection _configurationSection;\r\n\r\n        protected override IConfigurationSection ConfigurationSection\r\n        {\r\n            get {  return _configurationSection; }\r\n        }\r\n\r\n        public InfrastructureConfiguration(IConfigurationRoot configurationRoot)\r\n        {\r\n            try\r\n            {\r\n                // _configurationSection = configurationRoot?\r\n                //.GetSection(\"My\")?\r\n                //    .GetSection(\"Infrastructure\");\r\n                _configurationSection =  new ConfigurationBuilder().AddJsonFile(\"appsettings.json\", optional: true).Build().GetSection(\"My\").GetSection(\"Infrastructure\");\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n\r\n            }\r\n        }\r\n\r\n        public int CacheInterval { get { return Get<int>(); } }\r\n        public string ConnectionString { get { return Get(); } }\r\n\r\n        public string EmailAddressFrom { get { return Get(); } }\r\n        public string EmailAddressFromName { get { return Get(); } }\r\n        public string SMTPHost { get { return Get(); } }\r\n        public int SMTPPort { get { return Get<int>(); } }\r\n        public bool SMTPUseSSL { get { return Get<bool>(); } }\r\n        public  string SMTPUser { get { return Get(); } }\r\n        public string SMTPPassword { get { return Get(); } }\r\n    }\r\n```\r\n .**ConfigurationBase** has implementation of get() etc methods \r\nNow problem is when i am running it's showing me error \r\nAn unhandled exception occurred while processing the request.\r\n\r\n> InvalidOperationException: Unable to resolve service for type  Microsoft.Extensions.Configuration.IConfigurationRoot' while attempting to activate 'MY.Configuration.InfrastructureConfiguration'.\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type serviceType, Type implementationType, ISet<Type> callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound)\r\n\r\n`\r\n> InvalidOperationException: Unable to resolve service for type 'Microsoft.Extensions.Configuration.IConfigurationRoot' while attempting to activate 'DZT.Configuration.InfrastructureConfiguration'.\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type serviceType, Type implementationType, ISet<Type> callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(Type serviceType, Type implementationType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(ServiceDescriptor descriptor, Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type serviceType, Type implementationType, ISet<Type> callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(Type serviceType, Type implementationType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(ServiceDescriptor descriptor, Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type serviceType, Type implementationType, ISet<Type> callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(Type serviceType, Type implementationType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(ServiceDescriptor descriptor, Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceProvider.CreateServiceAccessor(Type serviceType, ServiceProvider serviceProvider)\r\nSystem.Collections.Concurrent.ConcurrentDictionaryExtensions.GetOrAdd<TKey, TValue, TArg>(ConcurrentDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TArg, TValue> valueFactory, TArg arg)\r\nMicrosoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\nMicrosoft.Extensions.Internal.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, bool isDefaultParameterRequired)\r\nlambda_method(Closure , IServiceProvider , Object[] )\r\nMicrosoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider+<>c__DisplayClass4_0.<CreateActivator>b__0(ControllerContext controllerContext)\r\nMicrosoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider+<>c__DisplayClass5_0.<CreateControllerFactory>g__CreateController0(ControllerContext controllerContext)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeInnerFilterAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()\r\n\r\n### Further technical details\r\nProject file  may help to know what is referred \r\n```xml\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nDatabase Provider: SQL server\r\nOperating system: \r\nIDE: (e.g. Visual Studio 2017)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andreyshade": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/734", "title": "Problem with GetSection().AsEnumerable(). It returns additional element.", "body": "I have some records in config like this:\r\n`\"Option\": [ \"A\", \"B\"],`\r\nThen if i try to get value:\r\n`_configuration.GetSection(\"Option\").AsEnumerable()`\r\nI receive collection with 3 items, and collection starts with `null` value element", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "astef": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/733", "title": "Add wrapping configuration source", "body": "The problem described in this question: https://stackoverflow.com/questions/46466300/how-to-place-a-configuration-source-to-a-certain-configuration-section-to-avoid\r\n\r\nI think it would be handy to solve such problems with the following extension method:\r\n\r\n```\r\nvar cfg = new ConfigurationBuilder()\r\n\t.AddConfiguration(\"Users\", derivedConfigurationBuilder =>\r\n\t{\r\n\t\tderivedConfigurationBuilder.AddJsonFile(\"users.json\");\r\n\t})\r\n\t.AddJsonFile(\"connections.json\")\r\n\t.Build();\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vanillajonathan": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/731", "title": "ConfigurationBinder: Support the [Required] attribute", "body": "The `ConfigurationBinder` should look for the `RequiredAttribute` on all the properties it aims to bind.\r\n\r\nExample:\r\n```cs\r\n    services.Configure<MyOptions>(Configuration);\r\n```\r\nWhere\r\n```cs\r\n    public class MyOptions\r\n    {\r\n        [Required]\r\n        public string Foo { get; set; }\r\n    }\r\n```\r\n\r\nThen if nothing in the configuration can be found that can be bound to `Foo` then it should throw some kind of exception.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/731/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jackbond": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/730", "title": "Microsoft.Extensions.Configuration v2 is incompatible with System.Net.Http", "body": "I have a solution with several projects which use the System.Net.Http Nuget package. I have a test project which uses Microsoft.Extensions.Configuration and Microsoft.Extensions.Configuration.Json Nugets. When I upgrade to v2 of these Nugets (from v1.1.2), when I perform a build, an older version of System.Net.Http.Dll gets copied to the output directory and causes runtime errors. I'd like to switch over to the newer Configuration libraries, but as it stands, I cannot until this incapability is resolved.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "serbrech": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/721", "title": "AddEnvironmentVariables : Expose the Environment Target parameter through the configuration source", "body": "Currently on windows, only process variables can be loaded (default target)\r\nConsider exposing EnvironmentVariableTarget parameter.\r\n\r\n[netcore-2.0 doc](https://docs.microsoft.com/en-us/dotnet/api/system.environment.getenvironmentvariables?view=netcore-2.0) \r\n\r\npseudo code : \r\n```\r\nconfigurationBuilder.AddEnvironmentVariables(config => {\r\n    config.Prefix = \"my-prefix:\";\r\n    config.Target = \"User\";\r\n});\r\n```\r\n\r\nor even :\r\n```\r\nconfigurationBuilder.AddEnvironmentVariables(config => {\r\n    config.Prefix = \"my-prefix:\";\r\n    config.Target = EnvironmentVariableTarget.User;\r\n});\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anurse": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/705", "title": "Docker Secrets config provider should support prefixes", "body": "To make the Docker Secrets config provider more flexible, we should allow the user to specify a prefix to be removed when converting Docker Secret names to Config keys.\r\n\r\nThis makes it easier to use secrets for multiple services, for example, you may have a secret named `backend.foo` which you want to appear as `foo` in the config system. This remapping can be achieved with docker configuration, but it's good to allow flexibility here.\r\n\r\nAlso, when rolling secrets in Docker Swarm, you may want to have a prefix representing the \"version\" of the secrets, which is updated by an Environment Variable. That allows two secrets with the same \"name\" to be present during a rolling upgrade, but ensure that the correct one is loaded in to the app. For example, you may have `v1.foo` and `v2.foo` secrets and a `SECRET_PREFIX=v1` environment variable (which you update to `SECRET_PREFIX=v2`, when adding `v2.*` secrets)\r\n\r\nProposed new APIs:\r\n\r\n```csharp\r\npublic class DockerSecretsConfigurationSource\r\n{\r\n    // ...\r\n    // add the following:\r\n    public string SecretPrefix { get; set; }\r\n}\r\n\r\npublic static class DockerSecretsConfigurationBuilderExtensions\r\n{\r\n    // ...\r\n    // add the following overloads\r\n    public static IConfigurationBuilder AddDockerSecrets(this IConfigurationBuilder builder, string secretsPath, bool optional, string secretPrefix);\r\n}\r\n```\r\n\r\nNote: I'd kinda like to be able to have `AddDockerSecrets(string secretPrefix)`, but we already have `AddDockerSecrets(string secretsPath)`. The latter seems much less commonly used, but it's there in 2.0 so it'd be a breaking change :(\r\n\r\n/cc @glennc ", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/3c2eccf24621ed49908921f67bf25dd2a0c7eadc", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/2ba3a05af48c83f3471abc771d9fb03f39e09000", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6ea15fafccfd17935d91cc55b04f819b00348f72", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9ca263557d6340cd69c0d5153629ff10b349cb28", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/4a28632fb49fc52251a07d5f20ce3c0560959da8", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/098684ad4e787e263cd809d8e154a4fbcdf2d0b5", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlexandreArpin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/c27b6b4685f38d151c419c2e54ae71ddf8ed12f4", "message": "Prevent Deadlock in AzureKeyVaultProvider Load (#753)\n\n- Add additional ConfigureAwait(false)\r\n\r\nAddresses #737"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/50b913fc4b0fe3333ba9ba1ad5c29f9d85c07010", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/117c679f7a95a99733329db79467fa2da4312064", "message": "Add RepositoryRoot"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/78fd1d534d8da3361412c25a0db3b8f053d5b472", "message": "Update bootstrappers"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/d7e63abc52bb3550589dd2ea70b06675252d2788", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/0b3b04fd123d90714713ba3ca7e21917b8679475", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/e2450a6a46aaab4bad86be2043d5508b2f6da41e", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/89a790862f1bcc07acfbec9fabfbce5dcabc2c92", "message": "Target netcoreapp2.1 in tests and samples"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576737", "body": "Braces\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576788", "body": "Ctors before properties?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "akamyshanov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/94a5f9e3d122cf1b01c3621130f70739efec1fb2", "message": "Modify ConfigurationBinder to use IDictionary<> setter instead of \"Add\" method (#735)\n\n* Modify ConfigurationBinder to use IDictionary<> setter instead of \"Add\" method.\r\n\r\nCopy-pasted the code from the issue, credit goes to @cwe1ss\r\n\r\nAddresses #565\r\n\r\n* Try to fool xUnit analysis:\r\n\r\n\"Do not use Assert.Equal() to check for collection size.\"\r\n\r\nHowever, such an assert is used in other test."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotalik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/0b325261756518314e6b52b48ae0900ac0e117e5", "message": "Increase Minimum Version of Visual Studio to 15.3.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HaoK": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/b5e0142e8b04c46d531b4cce204d14c11af7fc18", "message": "Fix breaking change"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/875a72d74a8e45c48470baeacfa2af01857d6566", "message": "AddConfiguration(IConfiguration) to chain (#719)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/fdf7f51bde0bff4d449dff7493ce259b864ece2b", "message": "Move baselines to right place"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/0e8caf974159d871e4948d4efcf6a0462873ac50", "message": "Add baselines for AzureKeyValue/UserSecrets (#711)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JunTaoLuo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/6419734d8d55a5c9b27764c95dab766a34f67848", "message": "Ensure fallback to curl after failed wget"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/64323f9f02ca24f0a267734fe817e01070af1495", "message": "Update __get_remote_file logic"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "heku": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/725", "title": "Return out value instead of querying from dictionary again", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "duckblaster": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/720", "title": "Allow changing the alternative keyDelimiter in environment variables", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JefferyZh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/714", "title": "Reduce the times of calling Environment.GetEnvironmentVariable", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdkelley": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/702", "title": "Trim unintended Environment.NewLine from docker secret contents before adding to Configuration", "body": "Docker secrets created on a Linux swarm using `echo \"secret contents\" | docker secret create test-secret -` will append a newline on the end of the secret contents. In a dotnetcore app running in a dockerized service with this secret exposed to the service, the `DockerSecretsConfigurationProvider` reads the secret with the newline character into the Configuration (resulting in something like \"secret contents\\n\"). This is clearly not the intended secret contents.\r\n\r\nAddresses Issue #701", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ChristopherHaws": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/697", "title": "Add additional connection string prefixes for Azure AppServices", "body": "Azure AppServices has a dropdown list for different connection string types. This PR adds support for the 7 missing connection string types:\r\n* REDISCACHECONNSTR_\r\n* APIHUBCONNSTR_\r\n* DOCDBCONNSTR_\r\n* EVENTHUBCONNSTR_\r\n* NOTIFICATIONHUBCONNSTR_\r\n* POSTGRESQLCONNSTR_\r\n* SERVICEBUSCONNSTR_", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sgryphon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/561", "title": "Expand doc comments (no code changes) with details of how command line config switches work", "body": "Expand doc comments (no code changes) with details of the command line switch formats supported, and how switchMappings works.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andrewlock": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/522", "title": "Add GetRequiredValue() method", "body": "Add `GetRequiredValue()` and `GetRequireValue<T>()`\n- Adds string `GetRequiredValue` extension method over `IConfiguration`\n- Adds strongly typed `GetRequiredValue<T>` extension methods that don't take default values\n- Throws if value is null - empty and whitespace are ok\n\nAddresses #341 \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Eilon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34011261", "body": "@Tratcher already has a separate PR for a config prototype. Are we ditching one in favor of the other?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34011261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/37266778", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/37266778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/38999419", "body": "Another `#ifdef` bites the dust, nice!\n\n:shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/38999419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39616967", "body": "This is :shipit: for me but I'd like @lodejard to sign off as well because he knows this area better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39616967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39913870", "body": "Looks good to me minus removing the whitespace check, so once that's fixed :shipit: And please remember not to use the green button to merge! Other folks on the team can help you do the \"clean\" commit pattern.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39913870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40445171", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40445171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40567103", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40567103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40567165", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40567165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40682943", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40682943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40911818", "body": "The code looks :shipit: to me - I'm not seeing anything missing here. I think this is fine to check in but should see what else @lodejard thinks ought to be here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40911818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40995267", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40995267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41078066", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41078066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576310", "body": "I find it a bit odd to ignore command line args that don't have `=` in them and to fully accept _all_ command line args that _do_ have `=` in them. I can't say that I have a better suggestion right now, but I think there's something to figure out here in terms of which command line args are valid and which are not.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576629", "body": "Use `static readonly` instead of `const`? I do tend to agree that it's something we can't _really_ change later (after v1) because everything else in the world would break, but we nevertheless tend to reserve `const` for universal truths as opposed to conventions.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576649", "body": "These interface are being asked to be split out into multiple files. They don't like to share :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576686", "body": "Is it meaningful to have a concept of removing a key from config? Or perhaps unsetting a value? Or perhaps how to \"override\" an inherited value with an empty value? E.g. let's say someone set `debug=verbose` in the config and I want to make it be `debug=<empty/null>`. Or I wonder if the way to do that is by convention of setting a key to have a null/empty value? If that's the case, then I think this code would ignore an \"unset\" / \"removed\" value by accepting only the first non-empty value. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10060245", "body": "Yeah C# 6 I heard lets you do `IEnumerable<T>` params, right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10060245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13302383", "body": "Did you mean to comment in a PR?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13302383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9296945", "body": "No comments certainly sounds like a non-starter to me. Where do we put the FWLinks with more info? Where does the customer put their own contact info for the IT admin to contact in case of a problem?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9296945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9297528", "body": "New format: XSON:\n\n```\n<\n  \"Databases\": <\n    \"Default: <\n      \"ConnectionString\":\"aiwfhawilfhlwiefhawilefhlaeihf\",\n      \"Provider\":\"SqlClient\"\n    >,\n    \"Employees\": <\n      \"ConnectionString\":\"r1237hofijqo3irjqo23r\",\n      \"Provider\":\"SqlClient\"\n    >\n  >\n>\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9297528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327001", "body": "I forget - are these supposed to be internal?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327112", "body": "Need to add `readonly` no? I assume we don't want other people setting it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327135", "body": ":question: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10350357", "body": "Oh wait I forget - are they're supposed to get stripped out of the assembly eventually anyway? (Maybe we don't actually do that yet.) @davidfowl is the `AssemblyNeutral` attribute supposed to be public or internal?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10350357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10350381", "body": "Maybe log a bug for this instead?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10350381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "dougbu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012286", "body": "Nope this is temporary.  As the comment says, just enough for the Universe to build.  More specifically these files are needed for `.\\build install` to get past this repo.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012683", "body": "Hopefully we won't need this soon.  But today `.\\build install` fails consistently.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012612", "body": "Not sure we need this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/37466813", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/37466813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39921896", "body": "@ChengTian could you take a look at this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39921896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40313704", "body": "You have to change the folder name as well\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40313704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40623822", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40623822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/5567647", "body": "GetSubKeys?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5567647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10055718", "body": "Why is it an array?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10055718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10673129", "body": "Hah! :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10673129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704160", "body": "Why didn't we call it GetSections?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704161", "body": ".Any()?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13574920", "body": "Funny that every token we implement uses cancellation token internally :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13574920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13574922", "body": "Maybe this should be a property?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13574922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276174", "body": "Ini file? An example of the format in a comment might help.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276302", "body": "Need to think about hierarchy. A.B.C\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9295709", "body": "I like it (especially the json one)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9295709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9297432", "body": "Our default can be ini then. Anything but xml :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9297432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9320250", "body": "@glennc learn to github https://help.github.com/articles/github-flavored-markdown\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9320250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9352578", "body": "I prefer IConfigurationSource for the individual sources and DefaultConfiguration for the object (if Configuration conflicts with the namespace).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9352578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "loudej": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39769154", "body": "Conceptual variants\n\n``` xml\n<settings Port=\"8008\">\n  <!-- \"Data:DefaultConnection:ConnectionString\" \"awefoijawefioaweif\" -->\n  <!-- // Data:DefaultConnection:Provider etc -->\n\n  <Port>8008</Port>\n\n  <Data>\n    <DefaultConnection>\n      <ConnectionString>awefoijawefioaweif</ConnectionString>\n      <Provider>SqlClient</Provider>\n    </DefaultConnection>\n    <Inventory>\n      <ConnectionString>xofjo239fjo3jf</ConnectionString>\n      <Provider>MySql</Provider>\n    </Inventory>\n  </Data>\n\n  <Data>\n    <DefaultConnection\n      ConnectionString=\"awefoijawefioaweif\"\n      Provider=\"SqlClient\" />\n    <Inventory\n      ConnectionString=\"xofjo239fjo3jf\"\n      Provider=\"MySql\" />\n  </Data>\n\n  <Data>\n    <DefaultConnection Provider=\"SqlClient\">\n      <ConnectionString>awefoijawefioaweif</ConnectionString>\n    </DefaultConnection>\n    <DefaultConnection Provider=\"MySql\">\n      <ConnectionString>xofjo239fjo3jf</ConnectionString>\n    </DefaultConnection>\n  </Data>\n\n  <Data Name=\"DefaultConnection\" >\n    <ConnectionString>awefoijawefioaweif</ConnectionString>\n    <Provider>awefoijawefioaweif</Provider>\n  </Data>\n  <Data Name=\"Inventory\" >\n    <ConnectionString>MySql</ConnectionString>\n    <Provider>xofjo239fjo3jf</Provider>\n  </Data>\n\n  <Data Name=\"DefaultConnection\"\n        ConnectionString=\"awefoijawefioaweif\"\n        Provider=\"SqlClient\" />\n  <Data Name=\"Inventory\"\n        ConnectionString=\"xofjo239fjo3jf\"\n        Provider=\"MySql\" />\n\n</settings>\n\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39769154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39769640", "body": "Added two notes, then :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39769640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39816638", "body": ":no_good: the original spec from #17 is incomplete\n\n`SQLAZURECONNSTR_db1`=`cs1` should result in the pairs `Data:db1:ConnectionString`=`cs1` and `Data:db3:ProviderName`=`System.Data.SqlClient`\n\n`SQLCONNSTR_db2`=`cs2` should result in the pairs `Data:db2:ConnectionString`=`cs2` and `Data:db2:ProviderName`=`System.Data.SqlClient`\n\n`MYSQLCONNSTR_db3`=`cs3` should result in the pairs `Data:db3:ConnectionString`=`cs3` and `Data:db3:ProviderName`=`MySql.Data.MySqlClient`\n\n`CUSTOMCONNSTR_db4`=`cs4` should result in the single pair `Data:db4:ConnectionString`=`cs4`\n\nSee also https://github.com/projectkudu/kudu/blob/master/Kudu.Core/Infrastructure/SettingsProcessor.cs provided by @davidebbo \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39816638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579456", "body": "Added `#warning TODO - this is a placeholder algorithm which must be replaced`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579459", "body": "these are placeholders until [NotNull] is available\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579645", "body": "yep, after followup sounds like investing Get and Enumerate methods with the ability to stop data will cover this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579656", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579665", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579672", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293247", "body": "Yeah, even if it's not ini file format it should have a name to disambiguate it from other file formats. Like SettingsFileConfiguration\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293274", "body": "Should be called Configuration instead of ConfigurationContainer. Doesn't need to implement the interface. Interface should be named IConfigurationSource or IConfigurationProvider.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293395", "body": "straw man, hierarcy like registry structure, flatten paths, with an established delimiter like :\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293587", "body": "value = Get(key) representation\n\n```\nGet(\"Databases:Default:ConnectionString\") == \"aiwfhawilfhlwiefhawilefhlaeihf\"\nGet(\"Databases:Default:Provider\") == :SqlClient\"\nGet(\"Databases:Employees:ConnectionString\") == \"r1237hofijqo3irjqo23r\"\nGet(\"Databases:Employees:Provider\") == \"SqlClient\"\n```\n\nini file representation\n\n```\n[Databases:Default]\nConnectionString=aiwfhawilfhlwiefhawilefhlaeihf\nProvider=SqlClient\n\n[Databases:Employees]\nConnectionString=r1237hofijqo3irjqo23r\nProvider=SqlClient\n```\n\njson file representation (?)\n\n```\n{\n  \"Databases\" {\n    \"Default: {\n      \"ConnectionString\":\"aiwfhawilfhlwiefhawilefhlaeihf\",\n      \"Provider\":\"SqlClient\"\n    },\n    \"Employees\": {\n      \"ConnectionString\":\"r1237hofijqo3irjqo23r\",\n      \"Provider\":\"SqlClient\"\n    }\n  }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9352699", "body": "The interface assumes the configuration object, and the souces that are added, are implementing the same contract. In the end they won't.\n\nWe should consider changing the namespace, or changing the class to be called Settings. The app does know the difference between a single config and a collection and there's no reason to make it look like the two layers are fungible.\n\n```\nvar conf = new Configuration();\nconf.AddIniFile(\"app.ini\");\nconf.Add(new CustomSource());\nconf.AddOverrides(new Dictionary<string,string>() {\n  {\"Foo:Bar\", \"forty-two\"}\n});\n```\n\nMethods to add particular sources should be extension methods and return the collection class.\n\n```\nvar conf = new Configuration()\n  .AddIniFile(\"app.ini\")\n  .Add(new CustomSource())\n  .AddOverrides(new Dictionary<string,string>() {\n    {\"Foo:Bar\", \"forty-two\"}\n  });\n```\n\nTo be honest, I'd even be okay dropping the \"Add\" from the ext method name, but I'm sure we'll want to keep the verb-centricity.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9352699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333249", "body": "they're acting as part of an external assembly, so i'm not sure if they can be\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333253", "body": "was pasted from the source of truth, in any case\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333263", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333271", "body": "fragment left from a class-move... removing\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ChengTian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39999794", "body": "@loudej The new implementation based on a complete spec is committed. Please help to review when you have time.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39999794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40430279", "body": "Folder names are already changed:\nMicrosoft.AspNet.Configuration.Json -> Microsoft.AspNet.ConfigurationModel.Json\nMicrosoft.AspNet.Configuration.Json.Test -> Microsoft.AspNet.ConfigurationModel.Json.Test \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40430279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40516122", "body": "@loudej Please help to review when you have time. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40516122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40516349", "body": "@Eilon @loudej Please help to review when you have time. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40516349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40623707", "body": "@davidfowl Please sign off if you think it is Ok.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40623707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "lodejard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41078635", "body": "Checking other examples... Various formats we want to support by default:\n\n`--hello world` becomes `[\"hello\"] == \"world\"`\n`--hello:world` same\n`--hello=world` same\n`/hello world` becomes `[\"hello\"] == \"world\"`\n`/hello:world` same\n`/hello=world` same\n\nThe command line arguments source should also have a constructor that take an options model class. That options model class should enable the used to map long or short switches to configuration keys, and also define short names, if the user wants to determine those exactly.\n\n```\nnew OptionModel {\n  new OptionItem(\"-p\", \"port\")\n  new OptionItem(\"--port\", \"port\")\n  new OptionItem(\"--db\", \"Data:DefaultConnection:ConnectionString\")\n}\n```\n\nIn this case, options starting with `--` are long option names, and should also match `/`. In other words, `--db 5000` and `/db 5000` both match the `--db` option\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41078635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41079038", "body": "For quotes around values, verify if those are removed or not before they are passed into the args string[]\n\nIf they are removed before being passed into the string[], then we don't need to remove them ourselves. So quoted options would look like:\n\n`--hello \"the world\"`, `\"--hello:the world\"`, or `\"--hello=the world\"`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41079038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/5567789", "body": "Sure\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5567789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "victorhurdugaci": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/8547799", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/8547799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/8721706", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/8721706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "troydai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/10674766", "body": "Shame ...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10674766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "kirthik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704188", "body": "@HaoK filed a bug for this to get it reviewed - https://github.com/aspnet/Configuration/issues/269\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13302320", "body": "I kept `GetPrefix` method here and in set below so we don't have to check for Path being empty or non-empty in two places. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13302320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "divega": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/12707444", "body": "I updated the title of #269 to include `GetSections()` in our considerations.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12707444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12707544", "body": "@davidfowl as I explained in a previous comment `GetSection(key)` can be used to retrieve a section at any arbitrary level with a relative key path while `GetChildren()` can only be used to retrieve the direct descendants of the current node. You can think of `GetChildren()` as `GetChildSections()` although as I also explained in a previous comment these are the names we have agreed upon with a larger group (including the BCL folks) so I want us to stick to these names in this PR and not change them until we have a chance to further discuss them again.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12707544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9369359", "body": "I don't think we can be sure of what people expect :) but in EF6 we mainly wanted to maintain consistency with our previous APIs although we knew the general wisdom was to drop verbs and prepositions that add little value from fluent interfaces. This is actually something that we might revisit this in EF/E.\n\nA more interesting angle IMO is that if this class is supposed to resemble a collection on dictionary, then it will probably have multiple members with add, remove, get and update/override semantics. Then perhaps it is better to keep the verbs to make it easier to distinguish among them.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9369359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "Fosol": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/12935301", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12935301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Tratcher": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321714", "body": "- A class named Configuration would conflict with the namespace.\n- I think implementing the interface is a good thing. Your app doesn't need to know the difference between a single config and a collection of configs.  Or would we add different functionality to the collection?\n- Naming TBD depending on functionality.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321781", "body": "FlatConfigurationFile?\nIniConfigurationFile?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321837", "body": "Indexers are redundant with the Get methods. We should choose one or the other.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}