{"_default": {"1": {"ajaybhargavb": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1943", "title": "Build server: Get tag helper discovery and code generation working end to end", "body": "Meta issue - https://github.com/aspnet/Razor/issues/1921\r\n\r\nWe want it to be off by default for now.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/eb107092d9aa0304ed33b86b42d55464193332a7", "message": "Upgrade dependencies"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d238c0dcfc742b5d8128aae806fc401c649016d3", "message": "Some pre-requisites for for Razor build server"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/1941", "title": "Build server working end to end", "body": "#1943 \r\nMeta issue - #1921 \r\n\r\nThe build server now takes care of both discovering tag helpers and generating Razor CSharp documents. This saves about 1.8s of build time when the server is warm. (Perf data: https://github.com/aspnet/Razor/issues/1921#issuecomment-358096928)\r\n\r\n- Added a switch to enable/disable server compilation\r\n- Limited PipeName length to workaround limitations of socket length in Unix systems\r\n- Some more general cleanup\r\n\r\n\r\nThings that need to be done in a future PR: (Checklist here https://github.com/aspnet/Razor/issues/1921#issue-286973192)\r\n- Currently there is code duplication between `GenerateTool`, `TagHelperTool` and `Razor.Tools`. Need to unify them\r\n- Figure out when/how server shutdown should happen\r\n- More cleanup around `BuildProtocol`\r\n\r\nFYI @mkArtakMSFT ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rynowak": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1921", "title": "Meta: Add Razor build server", "body": "Checklist:\r\n\r\n- [ ] Get tag helper discovery and code generation working end to end (off by default)\r\n- [ ] Resolve how many/what tools we have\r\n- [ ] Server timeout after a certain time\r\n- [ ] Server should support different Razor toolset versions at the same time\r\n- [ ] Include more data as part of the inputs to the server\r\n- [ ] Logging cleanup\r\n- [ ] Integrate in to the build\r\n- [ ] Turn it on by default when it is in good shape\r\n- [ ] Tests\r\n- [ ] Get automated perf measurements working", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1912", "title": "RazorGenerate and RazorCompile can't be invoked directly with multi-targeting", "body": "You can't call these targets at the command line using `dotnet msbuild /t:RazorGenerate` if the project does multi-targeting", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1892", "title": "Consider whether Razor MSBuild support should be an SDK", "body": "This might deliver a better UX than building a 'fat' package.\r\n\r\nThis wouldn't prevent us from shipping compiler updates OOB or using nightlies.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1888", "title": "Flaky Test: RazorGenerate_BuildsIncrementally", "body": "This failed on Travis (Mac): https://travis-ci.org/aspnet/Razor/jobs/322388123", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1888/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1849", "title": "Meta-issue: Potential Razor Changes in 15.7", "body": "We're not planning any big IDE features for Razor in 15.7, but we will need to do an insertion if we make any language/feature changes that are user-visible. \r\n\r\nThis item tracks any changes that we need to ship in 15.7.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1847", "title": "Move path munging in Microsoft.AspNetCore.Razor.GenerateTool into MSBuild ", "body": "Right now `Microsoft.AspNetCore.Razor.GenerateTool` does a bunch of path manipulation to figure out what view engine paths and generated file names should be used. This should all live in MSBuild so it can be reused by a future design time build from Razor.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1846", "title": "Figure out the story for Design Time Builds + Microsoft.AspNetCore.Razor.Design", "body": "We need to add a test to verify that we're not regressing design time builds with any of our targets. The best way to test this might be to run a design time build but add `/clp:PerformanceSummary` and verify that our targets don't show up.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1844", "title": "Make Razor.Design work well with MvcPrecompilation installed", "body": "Discussed with @Eilon and @DamianEdwards \r\n\r\nThe main concern here is that both `Razor.Design` and `MvcPrecompilation` will be part of the metapackage, so we need to ensure that both of these packages can coexist.\r\n\r\nThe desire that that `Razor.Design` would become the new default experience for *Razor-on-Publish*, but that we can fall back to `MvcPrecompilation` if the developer has done anything explicit to customize it.\r\n\r\n-----\r\n\r\nSome notes about what we need to address:\r\n- [x] How do we no-op when a user wants to use MvcPrecompilation\r\n- [x] Exclude view files from publishing \r\n- [x] Exclude ref assemblies from publishing\r\n- [ ] `Razor.Design` should compile on publish by default\r\n- [ ] Should `Razor.Design` use a different assembly name?\r\n\r\nThis looks like the main delta between the two systems.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1829", "title": "Razor MSBuild needs to handle linked files properly", "body": "Creating an item to track this because we don't do this correctly today for precompilation. \r\n\r\nThis is fundamentally a problem because precompilation looks at files on disk, rather than where a file is linked into the project. \r\n\r\nLinks 'just work' when you use runtime compilation, we need to make sure this works well at build-time and in VS.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1828", "title": "Get rid of MvcTemplateEngine", "body": "I've been doing some thinking about the interface between Project -> Engine -> TemplateEngine. \r\n\r\nWe need to provide similar kinds of extensibility to these concepts as the Engine has. \r\n\r\nThe implementation choice for MVC to replace the TemplateEngine rather than customize facets of it means that we need to bring a few new concepts to the top level with dedicated extensibility.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1782", "title": "Try simplifying our workarounds for ProjectReference", "body": "See the set of workarounds here: https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/a70d5e6687ac818a85fe8c9760f0caf5a78dce99/StyleCop.Analyzers/StyleCop.Analyzers.Vsix/StyleCop.Analyzers.Vsix.csproj#L47-L53\r\n\r\nThis might be better than what we're currently doing to make our VSIX work with project references.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/eaa201703db7abc44ff8bf85943870c24e77a222", "message": "Fix build break\n\nWe didn't have a test for the case where RazorCompileOnPublish is false\nand Publish is being called. This is breaking the precompilation repo."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d1cfc51c9d9b087af7c4cb3e0fb276e7d8541618", "message": "Add a property so the web sdk can know that the Razor compiler is available."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/0584fe3ecfd95c451502b749029dd524dfac48a6", "message": "Make RazorCompileOnPublish the default"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/627696677ce5b4eeabe71866b58bbee0b62ab742", "message": "Split up Razor SDK logic (#1934)\n\n* Split up Razor SDK logic\r\n\r\nSplitting the fragile parts of code generation into its own file. We're\r\npossibly separating the Razor SDK into a part that ships in the dotnet\r\nSDK and part that ships in a nupkg with the compiler.\r\n\r\nThis means defining more of a fixed lifecycle in the main file, and\r\ntreating our actual work as more like extensibility."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/e8af1141cb6d65b769cad14d3706bd75c0acb006", "message": "Attempt to fix Razor CI flakiness\n\nWe're seeing some test failures on the CI where the build has no output.\nSure enough, using Process.Exited is trap. It doesn't guarantee that all\nof the output has been written when it's trigger.\n\nThis is a different approach that shouldn't suffer from the same\nproblem."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8c1623695a0c06e138a8d21c50179d9f4eed4a06", "message": "Update deps"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b5554a8038cb9a5e8a7e60503cdda4e1f8588a49", "message": "Make Razor SDK support refs and views on publish\n\nThese are default behaviors for precompilation."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d1984aa44ba7434c8b57f8a3993a8f451f5bee5c", "message": "Add hook for precompilation"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/14cea3c1b9b913d2ec23c25e3e595be418303a86", "message": "Move properties"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f0c3843a5b2cefa791eace25d1aec7b6783eefa9", "message": "Implment support for publish"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/07a63d2dddb65e574c5646ccbc38de0a6d1f5805", "message": "Add tests for RazorCompile target\n\nThis target should be callable on its own without using Build so it\ndeserves a few tests."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/e0d876deb9db29efbd438079e6bacda8b6214e66", "message": "Skip flaky test on OSX"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/2555c5bab1a6a76a3b6bbd0d83e55595919649f5", "message": "WIP"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6bab1c682d0c021e50df2961afb738ae547dcbed", "message": "Fix a build break introduced by new SDK\n\nThis is failing on the CI due to an issue with a newer build of the SDK.\nI opened https://github.com/dotnet/sdk/issues/1854 to track the SDK bug.\n\n- update korebuild\n- upgrade deps\n- remove System.Diagnostics.DiagnosticSource from test projects"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/5f501710aaad63acc13318ff4f2262119bdc3dd7", "message": " Make Razor targets noop with no razor files"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/bb0aa9464af4b14019fe249263dae5fe1664455b", "message": "Add support and tests for Pack and P2P reference"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/34954c36684ffc4cefc8beb4dad130326008d7c3", "message": "Code dump of WIP razor compiler server\n\nThis builds, but isn't fully implemented yet.t"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/03dea86c4e4f4b19a3379f0c1b9f6ff40bd1edec", "message": "Adding more tests and clarity around file paths\n\nI noticed we were really undertesting all of the things that handle\npaths and file names. I gave this some love and a little clean up where\nwe weren't doing the right thing in RazorSourceDocument.\n\nAlso changed the template engine tests to use the\nFileSystemRazorProject. These tests are already using the files on disk\nas inputs. I turned off checksums for these since they now have the full\nfile path, and that would not be portable."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/fbb73bccd055b31037c41557ca520909bc06d213", "message": "Update our version of the RazorCoreCompile\n\nUpdating RazorCoreCompile to be based on a much newer\nversion of the Core.CSharp.targets.\n\nThis adds support for some things we're missing like determinism and\nanalzyers."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/595d05965af9fa6c70c5bec0e018997ac680a94d", "message": "Rename some things"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b7415502bfedf811851ad43739548d2b80c7c502", "message": "Add RelativePhysicalPath\n\nThe FilePath property on RPI isn't what we want for use in the compiler,\nit's more of a view engine concept. Adding a property that does what we\nwant."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827765", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33839960", "body": "your picture is disappointingly small\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33839960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400707", "body": "\"Todo\" items should be work items in Jira not in comments; if it's important open a work item.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400836", "body": "Should these objects also have access to the context?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400875", "body": "nitpick: consider just _context here for symmetry with the properrty.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400922", "body": "Why is this added? consider putting whatever type needs this in .Generator\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "JeanCollas": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1898", "title": "Consider adding HTML templates", "body": "Would adding custom local HTML templates not be a good option to consider?\r\nSomething similar to the following would be an option for the implementation:\r\n\r\n```\r\n\r\n@functions{\r\n    IHtmlContent DispItem(string id, string name, string description)\r\n    {\r\n        <li>\r\n            <a href=\"/manage/@id\">@name</a>\r\n            <span>@description</span>\r\n        </li>\r\n    }\r\n}\r\n...\r\n<ul id=\"list1\">\r\n    @foreach(var item in items1)\r\n    {\r\n        DispItem(item.Id, item.Name, item.Description)\r\n    }\r\n</ul>\r\n\r\n<ul id=\"list2\">\r\n    @foreach(var item in items2)\r\n    {\r\n        DispItem(item.Id, item.Name, item.Description)\r\n    }\r\n</ul>\r\n\r\n\r\n```\r\n\r\nCreating a separate file and model for this kind of display is sometimes too much as compared as what it intends to do. \r\nSimplifying this by allowing local templates would be helpful. \r\n\r\nExcept if I missed it, it is not possible at this time (except by using html strings concat or external sub-pages/components).\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkArtakMSFT": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1884", "title": "seal the RestrictChildrenAttribute attribute", "body": "This results in a lot of non-supported scenario requests, so we should close the gap by marking the class as sealed.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1884/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1809", "title": "Improve support for precompilation of razor views in class libraries (embedded ui)", "body": "_From @evil-shrike on October 17, 2017 15:31_\n\nAs continue of https://github.com/aspnet/MvcPrecompilation/issues/187\r\n\r\nThe problem: I need a class library with embedded UI. \r\nCurrently it's hard implement such setup when a class library in a solution contains pre-compilable razor views. Lloading views from embedded resource is another option and it works fine. \r\n\r\nAt the end of the mentioned discussion (#187) there was posted a link to blog post about how to implement embedded UI - https://dzone.com/articles/self-contained-ui-running-one-aspnet-core-mvc-site \r\nIt seems to work well. But looks hacky, too much cleaver things should be done in csproj. Another problem it's not documented in official docs.\r\n\r\nSo this issue is an suggestion to have more simplified approach for \"embedded UI\", i.e. keeping razor views in class libraries and automatically compile **and** deploy them.\r\n\r\nSome nuances which should be elaborated:\r\n* a solution with app and lib both can contain views and identical routes (like \"Home/Index\")\r\n* solution should start with F5/CtrlF5 in VS (views should be compiled and deploy)\r\n* on deployment assemblies with pre-compiled views should be deployed correctly\r\n* ideally there shouldn't be required to make a library project \"runnable\" (set `Sdk=\"Microsoft.NET.Sdk.Web\"` and declare `static Main` method) but it's not critical indeed, at least it should be documented\r\n\r\nCurrently (aspnetcore2.0) we have to do the following (thanks to @dasMulli for describing it in this comment - https://github.com/aspnet/MVCPrecompilation/issues/71#issuecomment-282494937)\r\n\r\n1.\r\n```\r\n\t\t<MvcRazorCompileOnPublish>true</MvcRazorCompileOnPublish>\r\n```\r\n2. \r\n```\r\n\t<Target Name=\"SetMvcRazorOutputPath\">\r\n\t\t<PropertyGroup>\r\n\t\t\t<MvcRazorOutputPath>$(OutputPath)</MvcRazorOutputPath>\r\n\t\t</PropertyGroup>\r\n\t</Target>\r\n\t<Target Name=\"_MvcRazorPrecompileOnBuild\" DependsOnTargets=\"SetMvcRazorOutputPath;MvcRazorPrecompile\" AfterTargets=\"Build\" Condition=\" '$(IsCrossTargetingBuild)' != 'true' \" />\r\n\t<Target Name=\"IncludePrecompiledViewsInPublishOutput\" DependsOnTargets=\"_MvcRazorPrecompileOnBuild\" BeforeTargets=\"PrepareForPublish\" Condition=\" '$(IsCrossTargetingBuild)' != 'true' \">\r\n\t\t<ItemGroup>\r\n\t\t\t<_PrecompiledViewsOutput Include=\"$(MvcRazorOutputPath)$(MSBuildProjectName).PrecompiledViews.dll\" />\r\n\t\t\t<_PrecompiledViewsOutput Include=\"$(MvcRazorOutputPath)$(MSBuildProjectName).PrecompiledViews.pdb\" />\r\n\t\t\t<ContentWithTargetPath Include=\"@(_PrecompiledViewsOutput->'%(FullPath)')\" RelativePath=\"%(_PrecompiledViewsOutput.Identity)\" TargetPath=\"%(_PrecompiledViewsOutput.Filename)%(_PrecompiledViewsOutput.Extension)\" CopyToPublishDirectory=\"PreserveNewest\" />\r\n\t\t</ItemGroup>\r\n\t</Target>\r\n```\r\n\r\nOff the top of my head I'd suggest to introduce `MvcRazorCompile=true`.\n\n_Copied from original issue: aspnet/MvcPrecompilation#214_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1809/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NTaylorMullen": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1876", "title": "Add API to RazorSourceLineCollection to enable better understanding of lines in a RazorSourceDocument", "body": "Today the `RazorSourceLineCollection` has too minimal of an API to get enough information about a source document. For instance, you can't go from line Index => line content; this is primarily driven by not being able to get the start position of a given line index.\r\n\r\nTried using this API to improve on our indentation facts service but it didn't have enough information.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1841", "title": "Re-think some of the core concept of the RazorSyntaxTree", "body": "Points of concern here are:\r\n- [ ] Removing chunk generators. Today they're only used as markers to generate IR.\r\n- [ ] Re-think how edit handlers work.\r\n- [ ] Change provisional parsing to be represented in the SyntaxTree. Instead of changing the meaning of provisional items in the SyntaxTree we should represent those items as having dual states (markup or code depending on the interaction).", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1840", "title": "Change BackgroundParser to not be stateful and not spin up threads.", "body": "I imagine this being a way for a user to await a parse. Aka `await FooBGParser.DoAParseOrSomething()`", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1838", "title": "Add IDE service focused integration tests", "body": "These tests would be a lot like our existing baseline tests where they would indicate how a specific service would act at a certain point in the document.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1835", "title": "Publish Razor Addin mpack to a feed.", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1826", "title": "Re-discover TagHelpers when dependent project builds", "body": "In Tooling if you have the following structure:\r\n\r\n```\r\nWebApp\r\n- Index.cshtml\r\n\r\nTestLib\r\n- TestTagHelper.cs\r\n```\r\n\r\nAnd `WebApp` depends on `TestLib`. When you build TestLib after changing `TestTagHelper` the available TagHelpers in `Index.cshtml` aren't refreshed.\r\n\r\nIn order to get refreshed TagHelpers you must build `WebApp` directly.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1824", "title": "ProjectManagerSnapshot infrastructure doesn't work at runtime in VS for Mac", "body": "This is because the IDE doesn't update the Roslyn representations of the world; it just forwards all calls to creation of documents, projects etc. to their own structures and don't bidirectionally show that data. Aka, Roslyn's Workspace will show 0 projects but the Ide's workspace (not Roslyn based) will show all the active projects.\r\n\r\nCreating this issue for tracking purposes.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1813", "title": "Consume new C# completion APIs to avoid loading Razor binaries in non-Razor scenarios", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1760", "title": "Make TagHelperDescriptorFactory errors provide more information", "body": "For instance, when a `TagHelper`s tag name or attribute name is null or whitespace we don't provide the TagHelper type that we're looking at. If we put that information in the error it would be much easier to diagnose issues.\r\n\r\nFor instance: https://github.com/aspnet/Mvc/issues/7029", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/49a3b6bcae7b39b04655a2f8657cd15178c7afe0", "message": "Use ZipArchive task instead of powershell.\n\n#1937"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/968e033e4bc1a437c3a7bf8f1c886ca0f4800a9f", "message": "Make Block and Span cache Length.\n\n- Part of caching length required the `Span`'s `ReplaceWith` method to propagate its changes to its parent so that it can propogate the change to invalidate all parent length caches.\n- Added Span and Block tests to validate the interaction of caching.\n\n#1927"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f025a27f042e13d0a753d559f2f2e9cec8ae0a1c", "message": "Unify how AdhocWorkspace is constructed.\n\n- Created a new `TestWorkspace` type to lock on `AdhocWorkspace` construction. This type can't be constructed/changed in parallel.\n- Updated test usages of `AdhocWorkspace` to make use of `TestWorkspace`.\n- Added a `Microsoft.CodeAnalysis.Razor.Workspaces.Test.Common` project to have the `TestWorkspace` type.\n\n#1913"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8d6b86c76a17067b8fce656cfbab03750b779b15", "message": "Add `RazorLanguage.CoreContentType`.\n\n#1852"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/e2703fe5f6f1cdcb158fbe867e2724655ebf7308", "message": "Added version constant so WebTooling can consume.\n\n- Updated the VS for mac versions to 7.5.\n\n#1918"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/1907", "title": "[Design] Add RazorProjectEngine abstractions to replace template engine.", "body": "- Added initial designs for a non-template engine project engine that owns the processing of a Razor view and allows external pieces to configure it.\r\n- Updated existing usages to use the new RazorProjectEngine to flesh out requirements.\r\n\r\n#1828 \r\n\r\nFYI @mkArtakMSFT ", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33838015", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33838015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33840651", "body": "That's the : shipit: (without the first space) symbol :smiley: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33840651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35014533", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35014533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36162955", "body": "Decided to get the core code change in first, working on Test modifications now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36162955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36714820", "body": "Just realized that when I merged this I overrwrote the changes I made on my laptop -_- at work which is why things are still missing.  GAH, re-doing them\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36714820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36715231", "body": "Have the code re-done, will CR in person tomorrow with @pranavkm or @yishaigalatzer \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36715231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37623256", "body": "Yup can definitely do that\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37623256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37678437", "body": "@Eilon that'd be tough because we need to have parity with the view engine.  The generated signature needs to match the abstract RazorView class.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37678437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37765956", "body": "@Eilon Completely agree.  It's something we need to tackle, for now I've filed an issue to discuss it and make changes in the near future.  We'll also need to make changes to allow writes to be async if the user wants because in todays world\n\n```\n@await Foo()\n```\n\nis not valid which is a very valid use case (same thing will also have to be talked about for helpers etc.).  Sooo that being said this PR is the initial piece of the asynchrony work which we are revisiting to address your concerns.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37765956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/7883013", "body": "Full link\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/7883013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468825", "body": "It's for testing and internal use.  In testing we pass property info all over the place and internally we just pass the `PropertyInfo` to the descriptor when we find it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/9290344", "body": "errors won't be `null`. Might be being too protective here.\n\nAlso:\n\n`!errorSink.Errors.Any()`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/9290344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/11166016", "body": "Should leave comment as to why we're wrapping it in a block. Also, the comment above this should probably be inside the block by the code outputting it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/11166016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400504", "body": "Even though in the future we will be generating this 90% of the time in the runtime I think it should still be here.  Undoubtedly we'll still allow an option to pre-compile views resulting in physical files where this comment will be convenient. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400608", "body": "Why's this class in-line?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400846", "body": "The work-item is there, it's just more generic.  There's an overwhelming amount of TODO's from the CodeTree creation so the work-item is more of a catchall.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9401176", "body": "No need for the whole Context when they only need to know the sourcefile.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9401176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9401282", "body": "For the CodeBuilder\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9401282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9403687", "body": "It is but why is it in the test lol\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9403687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9403770", "body": "Talked with Ryan and having the whole context is a good idea for the following reason:\n\nIn the future for extensibleness reasons we will have people provide Visitors to add features to Razor so we should create an abstract base type that requires the context.  This way Visitors always have \"enough\" information.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9403770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9404108", "body": "Def not a bad idea.  Not to mention there really isn't tooo much external API in Razor\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9404108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9435995", "body": "@pranavkm changed the acceptance criteria to list of chunks from code tree prior because of the name so I renamed it to AcceptTree.  Not a huge fan of the name but couldn't think of anything better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9435995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9444918", "body": "Intellisense on the CodeWriter within the visitor and allowing us to do Writer.Write(\"...\").Write(\"...\") but with CSharpCodeWriter specific methods. .\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9444918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9597044", "body": "Not sure it's worth capturing the \"=>\" as a constant, what would be the benefit?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9597044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9597631", "body": "CodeTree.cshtml is more or less a \"temp\" file and is used in a test that always fails (for now).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9597631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "davidhunt135": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1871", "title": "HtmlConventions -  optional or customizable", "body": "I am currently trying to setup angular 5 with Razor and Asp.Net Core and have some issues with directives not working due to casing of the rendered html. Newer version of angular have updated directives from kebab case to camel case, i.e ng-if is now ngIf and it appears that all html is transformed to lower case by Razor. (I believe its done by HtmlConventions.ToHtmlCase).\r\n\r\nWould it be possible to have some way of disabling or customizing html conventions?", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TessenR": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1818", "title": "Local functions break parsing if followed by html tags", "body": "I'm using VS 15.5.1\r\n\r\n**Steps to reproduce**:\r\n\r\n1. Create default ASP.NET MVC project using VS\r\n2. Change C# language version in web.config to 7\r\n3. Modify about.cshtml to the following:\r\n\r\n```\r\n@{\r\n  ViewBag.Title = \"About\";\r\n\r\n  void Local() { WriteLiteral(\"<strong>Foo</strong>\"); }\r\n  <strong>Bar</strong>\r\n  Local();\r\n}\r\n<h2>@ViewBag.Title.</h2>\r\n<h3>@ViewBag.Message</h3>\r\n\r\n<p>Use this area to provide additional information.</p>\r\n```\r\n\r\n4. Run the project. You'll get the following error:\r\n```\r\nCompilation Error\r\nDescription: An error occurred during the compilation of a resource required to service this request. Please review the following specific error details and modify your source code appropriately.\r\n\r\nCompiler Error Message: CS1525: Invalid expression term '<'\r\n\r\nSource Error:\r\n\r\nLine 2:    ViewBag.Title = \"About\";\r\nLine 3:  \r\nLine 4:    void Local() { WriteLiteral(\"<strong>Foo</strong>\"); }\r\nLine 5:    <strong>Bar</strong>\r\nLine 6:    Local();\r\n\r\nSource File: ..\\Views\\Home\\About.cshtml    Line: 4 \r\n```\r\n\r\n5. Note that local functions which are not directly followed by html tags are parsed correctly and work as expected as you can check by moving the html tag below the local function invocation. I.e. the following code does not have any compilation errors:\r\n```\r\n@{\r\n  ViewBag.Title = \"About\";\r\n\r\n  void Local() { WriteLiteral(\"<strong>Foo</strong>\"); }\r\n  Local();\r\n  <strong>Bar</strong>\r\n}\r\n<h2>@ViewBag.Title.</h2>\r\n<h3>@ViewBag.Message</h3>\r\n\r\n<p>Use this area to provide additional information.</p>\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anurse": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1749", "title": "Add EventSource/EventCounter tracing and metrics for Razor", "body": "Some events listed below. The goal is to add events that will help users solve problems so if these aren't going to do that job, feel free to suggest/discuss others!\r\n\r\n* `Microsoft-AspNetCore-Razor` EventSource\r\n    * `ParseStart` event - Triggered when Razor parsing begins\r\n    * `ParseStop` event - Triggered when Razor parsing ends\r\n    * `ParseFailure` event - Triggered when an error in parsing occurs.\r\n    * `ParseDuration` counter - Measures duration of Razor parsing\r\n    * Would it be worth having separate \"Parse\" and \"CodeGen\" events or just one all-up \"Parse&CodeGen\" event?\r\n\r\nSee https://gist.github.com/anurse/af1859663ac91c6cf69c820cebe92303 for some guidance on adding EventSources and EventCounters to ASP.NET projects.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RandyBuchholz": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1747", "title": "Design-Time Directive [Language Feature Proposal]", "body": "This is to open some discussion about an idea for a new language construct in Razor.\r\n## Background\r\nWhile most of what we do is focused on compile and run time resolution, some \"dynamic\" things are better handled at design time. This proposal is to create a design-time directive in the Razor language.  The design time directive indicates that the file contents following the directive will be modified by some process. The design-time directive provides hooks and extension points into a cshtml file to enable actions to take place at design time. These can be trigged manually, by Visual Studio, or other processing.\r\n## Design-Time Directive\r\nThe design-time directive is used to communicate with parsers, file processors, and the Razor Engine.\r\n\r\n- It takes the general form: `@[...]`\r\n- It can take parameters: `@[parser, action, parameters]`\r\n- It can have scope: `@[...]{  ...  }`\r\n\r\nThe design-time directive indicates to a process (external or internal) that an area of the file will/can be modified by the process. The directive has no impact on it's own.\r\n\r\nIt is removed at compile time by the Razor Engine from the resulting html.\r\n## Examples\r\n\r\n### Substitution\r\nThe most trivial use of the directive is to insert a group of characters into the file.\r\nGiven - `@[myText] = \"This is some text to repeat.\"`\r\nUsing - `@[myText]`\r\nProduces => `This is some text to repeat.`\r\nThe directive isn't actually replaced. The text is inserted after the directive.\r\nAny characters can be used - text, tags, code.\r\nIn initial cshtml:\r\n```\r\n  @[myText] \r\n```\r\nAfter the substitution process runs, in cshtml:\r\n```\r\n  @[myText]\r\n  This is some text to repeat.\r\n```\r\nIn html:\r\n```\r\n  This is some text to repeat.\r\n```\r\nChanging the text in the assignment changes the results in all files using the directive when the process runs again. Though the directive doesn't technically have impact on it's own, some features like substitution would be built into the environment.\r\n\r\n### Merging\r\nRazor is especially interesting because it can be a mix of many languages - cs, css, js, html. Setting aside the \"correctness\" of putting css or js in an cshtml file, they provide fair examples. In an html/cshtml file, we can include `<script></script>` and `<style></style>` blocks. For the sake of argument, let's say we have a compelling reason to include content inside them in the file. Writing the code in the page is messy, and can be problematic. Worse, many of us prefer Less and Typescript, which we can't write in-page. The `@[]` directive helps.\r\n\r\nWe can write our css in a Less file - `styles.less`, that compiles into `styles.css`, and our js in `scripts.ts`, that compiles into `scripts.js`. We get full editor and intellisense support. In our `Page.cshml` we can include the results.\r\n```\r\n  @[style, \"~/styles.css\"]\r\n     ... The contents of styles.css are copied into the page here, in a <style> block.\r\n  @[script, \"~/scripts.js]\r\n     ... The contents of scripts.js are copied into the page here in a <script> block.\r\n```\r\nThis happens during design - the file content is modified, triggered manually, by the IDE, or an extension. For example, after Web Essentials compiles a Less file into css, it could also update the pages that reference the css file through design-time directives. Though the end result is much like `@render`, we get a local copy that provides access to the internals, and allows modification if we turn \"auto-update\" off.\r\n\r\nSelectors help keep files small. If we just need a couple of styles or functions, we can only copy them.\r\n```\r\n  @[style, \"~/styles.css\", { .form-controls-block, .nav-link } ]\r\n  @[script, \"~/scripts.js\", { datepicker } ]\r\n```\r\nThis would pull the two styles and single function out of the files, and insert them into the page inside`<style>` and `<script>` blocks. This can be helpful in building small, self-contained, and lightweight components.\r\n\r\n### Templates\r\nHtml Templating is another other possibility. This can be used in regular files or in template/scaffolding engines. An overly simple example is the common label-input-validation set - \r\n  `<label asp-for=\"ModelProperty\"><input asp-for=\"ModelProperty\"></input><...validationstuff...`\r\nThere are many ways to approach this, but one could be (in a cshtml) \r\n```\r\n@[]{\r\n  form-line = \"<label asp-for=\"@[param]\" ... \" \r\n}\r\n\r\n@[form-line, param=\"ModelProperty\"]\r\n   ... Fragment is expanded here, with replacement.\r\n```\r\nTemplates are like advanced, dynamic Snippets, and can be defined in the page or in shared files. They can auto update, or be manually triggered.\r\n\r\n### Targeting\r\nWhen we know we are running a file processor over the file, we can define targets. This can make the processor more efficient, and the file easier to parse. The processor can look for tagged areas to process, or even exclude.\r\n```\r\n  @[fileProcessorName, processingAction, exclude] {\r\n       ... This section is skipped by fileProcessorName when executing processingAction \r\n         - if it is aware of design-time directives.\r\n  }\r\n```\r\n## Discussion Scope\r\nThis proposal isn't about any of the specific examples, but about the concept of being able to provide information to processes that manipulate code files. And if so, is `@[]` a good construct to use? More and more, we run processes against these files - from built-in formatting processes, to refactoring, to analysis processes. A standard way to communicate with these processors might be valuable. \r\n\r\n## Outside the Proposal\r\nThe concept can also extend into other languages.\r\nThough advanced, this could allow things like name refactoring for related items in different technologies. For example, a C# class and Typescript class could have a design-time association. Changing one triggers changes to the other. This is a design-time change - the files are modified directly. The association doesn't exist at compile or run time. This would be a long time coming, but shows possible potential of the overall concept. \r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/ecb323b5dcb9abb760db6c55d64197a03302236f", "message": "Use FilePath if RelativePhysicalPath on RazorProjectItem is null"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827827", "body": "Yes, both the build from VS and .\\build.cmd work. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34102483", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34102483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34217293", "body": "If the CodeTree is generally stable, it might be worthwhile to start looking at writing unit tests for this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34217293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34217312", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34217312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34677426", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34677426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34947259", "body": "@yishaigalatzer There's tests in Mvc around the MvcCsharpRazorHost that need to be revived. This doesn't affect @inherit\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34947259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35037142", "body": ":sheep: it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35037142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36163405", "body": ":sheep: it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36163405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36591810", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36591810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37605503", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37605503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616653", "body": "@Eilon  given that these are warnings would appear during view compilation, I assumed the user is probably not going to see them. But if we really wanted to suppress it: \n\n``` C#\n#pragma warning disable 1998\npublic async Task Execute()\n{\n   ...\n}\n#pragma warning restore 1998\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402252", "body": "I think the next round of cleanup would be to flatten namespaces? We have one per directory now which I'm not a big fan of. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402282", "body": "That's the generated output :100: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402372", "body": "Maybe. It does make it so that we don't have to modify these methods every time we need to pass in extra stuff\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9444738", "body": "Is there a benefit to making it this complicated?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9444738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9470142", "body": "Could we call this currentTargetWriterName\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9470142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9470312", "body": "Wouldn't the corresponding cs file also need to be updated? Plus are we losing coverage for the @helper function or does it get covered by replacing the CodeDOM tests?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9470312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656030", "body": "+1. We need to flatten the namespaces from this assembly. What's our recommended strategy:\n1. One namespace per assembly (Well two because we might have some in the .Internal namespace)\n2. Namespaces per feature area (Microsoft.AspNet.Razor.Parser, Microsoft.AspNet.Razor.CodeGenerator)\n3. Alternatives? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656038", "body": "// Arrange, Act, Assert\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656048", "body": "Probably don't named named parameters given that they're quite obvious here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656067", "body": "You could pull this into a PropertyData since it's repeated for the next test\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656092", "body": "Is there any significance to the 4 / 5 padding values in these two tests? Maybe a comment about it would be nice\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "natemcmaster": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/8c7c486641d7fb61d6bf97baadbe989da9a5b0a7", "message": "Update build tools to 2.1.0-preview1-15670 and update list of exclusions for Razor.Design"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dougbu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827423", "body": "Nice.  Only question is whether all removed usings will also be unused when building other `#if'd` branches.  Have you built all configurations?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/5262820", "body": "nit: StyleCop won't like two blank lines in a row :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/5262820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/7497460", "body": "remove default initialization\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/7497460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/7524048", "body": "typo on this line?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/7524048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8029695", "body": "nit: format this property and VS will add the missing space\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8029695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8030790", "body": "don't use markdown syntax (backquotes) in resources.  the bare directive name is fine here and at line 121.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8030790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8030876", "body": "as @pranavkm mentioned elsewhere, don't check arguments in test code except to `Assert` they have expected values.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8030876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8032440", "body": "not sure why I thought this was test code.  correct comment (about throwing `ArgumentException`) is visible in the PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8032440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036303", "body": "\"user's\" (add apostrophe)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036312", "body": "nits:\n- try to use \"generate\" and its derivatives at least 2 fewer times :smile_cat:\n- IntelliSense (capitalize correctly)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036337", "body": "restore this blank line\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468017", "body": "use `string.Equals()` to avoid potential NREs\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468050", "body": "close.  either \"instance of the ... class\" or \"instance of ...\".  i.e. either add \"the\" or remove \"class\".\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468074", "body": "still not sure why this overload exists.  doesn't save the caller much.  e.g. is this for testing?  either remove or add `<remarks>` about its reason for being.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8560501", "body": ":shipit: though I see you already have (39accef1ad1e50968cdf965fddbbbbc14e6a838d)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8560501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526789", "body": "use `Assert.Throws<ArgumentException>()` overload that takes the parameter name\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526802", "body": "pass parameter name in and include it when you create the `ArgumentException`.  an `ArgumentException` or subclass with `ParamName == null` is very sad (:crying_cat_face:).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526813", "body": "still think `Lookahead()`'s handling of `count==0` is confusing and unhelpful.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/9851708", "body": "child -> other everywhere\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/9851708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/10195095", "body": "hmm, guess VS still doesn't know how to nicely wrap an auto-property with an initializer.  how about\n\n``` c#\npublic static ICollection<char> InvalidNonWhitespaceNameCharacters { get; } =\n    new HashSet<char>(new[] { '@', '!', '<', '/', '?', '[', '>', ']', '=', '\"', '\\'' });\n```\n\nor (better if it fits)\n\n``` c#\npublic static ICollection<char> InvalidNonWhitespaceNameCharacters { get; } = new HashSet<char>(\n    new[] { '@', '!', '<', '/', '?', '[', '>', ']', '=', '\"', '\\'' });\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/10195095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/10225843", "body": "teensy nit: hit `<Enter>` after `_writer` and let VS do the aligning.  this will just make it harder to change later.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/10225843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/10244598", "body": "specify the `CultureInfo`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/10244598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/10249947", "body": "trailing whitespace?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/10249947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34887957", "body": "I like it :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34887957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/5263037", "body": "nit: StyleCop is stupid\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/5263037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "yishaigalatzer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34946882", "body": "Is this change fighting with @inherits ? Or is it supporting both inherit and basetype from the view engine?\n\nIs there a test to verify this change?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34946882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35966348", "body": "Good to go\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35966348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9471530", "body": "is the \" => \" something we should encapsulate in constants?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9471530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9652512", "body": "readonly?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9652512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9652605", "body": "1. we typically don't build up all these extra namespaces\n2. Not sure what compiler means? We are not doing any compilations in this assembly\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9652605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Eilon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616329", "body": "Question: How do we plan to prevent (or avoid?) the compiler warning regarding not using `await` in an `async` method?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616767", "body": "@pranavkm I'm pretty sure users will want to see compiler warnings in their views - it's code just like any other code really. The `#pragma` block will definitely work but we should carefully evaluate if it's the correct solution. For example, in theory we might be able to be super smart and maybe use Roslyn to determine if the method _needs_ the `await` keyword and then selectively apply it. Or something like that.\n\n@NTaylorMullen do you want to log an issue to track this? I just want to make sure we don't lose track of this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37664781", "body": "(BTW what I _actually_ meant in my previous comment was to use Roslyn to determine whether the `async` keyword was needed, not `await`.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37664781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37716601", "body": "I'm concerned about correctness here. Unconditionally disabling the warning for the whole `Execute` method sounds dangerous. For example, the user might have other code in there (such as declaring delegates) that could be async, and they would presumably want to know that they forgot to put an `await` within that delegate. But if we disable the warning, they'll never know.\n\nI'm not doubting the difficulty ( :smile: ) but I think for this feature to match a user's expectations, we have to be cautious about how the user might be affected by it (especially if they unknowingly have a bug in their code because of something that we did).\n\nHere's the totally realistic code I'm thinking of (but you can easily imagine more realistic code that they might have):\n\n```\nFunc<int, Task<int>> x = async z => z + 1;\n```\n\nAnd that normally produces this warning:\n\n> 1>c:\\Program.cs(13,38,13,54): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.\n\nAnd I think it's fair to argue that a user would want to see this warning if they wrote that code in a Razor page.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37716601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/10850370", "body": "Looks a bit difficult to parse... Is the second sentence really `The '{2}' property of the tag attribute must match the key it is added with.`? Just because an word in the error message happens to match a parameter name doesn't mean it's really `nameof(thatParameterName)`. I think in this case it's just the word \"key\" as opposed to the parameter \"key\" for the `{2}`.\n\nSo in full: `Cannot add an attribute with the key '{1}' and the name '{3}'. The '{2}' property of the tag attribute must match the key it is added with.`\n\n(And then get rid of `{0}`.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/10850370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "victorhurdugaci": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/8547877", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8547877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8722154", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8722154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}}}}