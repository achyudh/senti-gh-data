{"_default": {"1": {"Eilon": {"issues": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/621", "title": "THIS ISSUE TRACKER IS CLOSED - use the Home repo issue tracker", "body": "Hello, this issue tracker is no longer used. Please log new issues here: https://github.com/aspnet/Home/issues\r\n\r\nFor information about this change, see https://github.com/aspnet/Announcements/issues/283", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/addc292a9d5302c9b0d8929490ed3642f61cc892", "message": "Create ISSUE_TEMPLATE.md"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d5e5aa703297b164b21ba4ad3fdff81c854ce009", "message": "Add missing doc comments (#581)\n\nAdd missing doc comments\r\nhttps://github.com/aspnet/DependencyInjection/issues/568\r\n* Remove empty NoWarn"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9969044", "body": "Snooze == lose :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9969044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10460461", "body": "Or in general, it is bad etiquette to dispose something you didn't create.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10460461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10482284", "body": "@davidfowl explained this to me in great detail: he said it's something for tooling and not to ask anymore questions :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10482284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10573678", "body": "Super minor: the default value of an `int` field is `0` anyway.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10573678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/23add1812c5248f35e8a217452ae3c8f3845da9a", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/01de8b81c86dfa0e5eb12d8a3c4944d075016e78", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/da64773270c2891158e09915af5c415f69c38101", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bce660c1b31e49c8d21a20b476d6e31e6d362b82", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/b86a7dc8b6d30234e3c6e45d42ab73859893bf4d", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/549ed5fe3e544af3d6ec804ef64a8a1339e02073", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/93158506f5770ab1700353ac0731ec31ba97d60a", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pakrym": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8e1f92f95c885a4b046f50f085d47c539e6f6792", "message": "Use new common benchmark config (#620)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/958e821ba0dff1ca0c885bd8d158c7e936105a4f", "message": "PrivateAssets=All for source package (#598)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/17c67b4ebdca17c76c689cda0e86cfe55d01920a", "message": "[WIP] Use new benchmarking package (#594)\n\n* Use new benchmarking package\r\n\r\n* Unto temp changes"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5a549d6a1ad59633b2e766423c13299190c89f5f", "message": "Fix benchmarks and move them to benchmarks directory (#593)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/da684cf584de04a06e7d00d2122b3bfd31462f12", "message": "Allow lazy containers to pass DisposesInReverseOrderOfCreation (#590)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/46b4590811334a3eb9b833e8a5373d62dae70be4", "message": "Revert test change from #569 (#571)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rick-Anderson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a0467de767febbf86b7d401abe012da8434fa7d7", "message": "Update ServiceCollectionContainerBuilderExtensions.cs (#615)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c81de4e8853af45ee710999820d9c78a8937eed4", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/247cfc78e57b0f12ae9292130808bd93c24e7246", "message": "Add RepositoryRoot"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/014749e55c9c06ffd328adb6c14f59bafc5ece95", "message": "Update bootstrappers"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ffca98b5e1e8d88832ec272c56e6ca19ac90daa9", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f4f5b7242c49f0a70bba2587a716857ff5d0981c", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e7c46c17237f9e94ae32de89c939ee47efa63113", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e198a2cdbf8fe6b2cd4a342f11c8c3557d2ec029", "message": "Target netcoreapp2.1 in tests and samples"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582356", "body": "named params?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582358", "body": "string (casing)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582365", "body": "Resx file. Perhaps a TODO comment if you aren't ready to introduce resx.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8056267", "body": "The backing property on `ServiceDescriptor` is a `Func<IServiceProvider, object>`. To make this work, I think you'd have to use type constraints on `TService : class` which it makes it unwiedly for value types. @halter73, would you be ok with that?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8056267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9590638", "body": "Is the plan to eventually fill up these doc comments?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9590638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10477624", "body": "This seems new. What's the purpose of this attribute? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10477624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10477684", "body": "If they're supposed to be the same instance, use Assert.Same\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10477684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "natemcmaster": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6ba4dfe5d4533e76406f0d46b2f22623089cd0ad", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/88297e3c1116f952aa22013172ef2f9396f716e0", "message": "Pin tool and package versions to make builds more repeatable\n\nPart of making builds reproducible. See aspnet/Universe#575"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4ea859efade2e218798a05f7cb722fbcc95fa959", "message": "Use PackageLineup to manage PackageReference versions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adam-knights": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4942355da3e5f4b7bdeaac9bcd6fbf527a8834e3", "message": "Fix typo in return xml for ServiceCollectionContainerBuilderExtensions that resulted in no spacing between 'the' and return type (#607)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndreyTretyak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e365cabaaaa0955d39a3732fae887b08ba3d3244", "message": "Typo fix in AmbiguousConstructorException resource (#600)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e1890da02685465e0184e8a38a6e1cc4d42c2ef3", "message": "Circular dependency exception improve (#592)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotalik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/b6f605a65ba8c68b47e75bb3e9251676797a975d", "message": "Increase Minimum Version of Visual Studio to 15.3.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ENikS": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/622", "title": "Unity added support for Microsoft.Extensions.DependencyInjection", "body": "Please add Unity to the list of compatible containers", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "khellang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/619", "title": "Add method to replace services with a new implementation type", "body": "I exposed `TryGetDescriptors` as well. It's a method that I've found useful a number of times. Let me know if you want to make it private instead.\r\n\r\nCloses #618", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dougbu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34025863", "body": "Won\u2019t this problem just go away once Mvc.Razor fills out a bit?  Code in that assembly should be responsible for configuring the services provided in the default case.\n\nFrom: Ryan Nowak [mailto:notifications@github.com]\nSent: Monday, February 3, 2014 18:41\nTo: aspnet/DependencyInjection\nSubject: [DependencyInjection] Magic Service discovery (#1)\n\nRight now we have a bunch of services in mvc that don't live in mvc assembly - they live in assemblies that depend on mvc. The problem with this is that in the absence of a clever solution you need code like the following, and right now there's no place to put this code but in the user's project (which references both MVC and MVC.Razor)\n\n```\n        serviceProvider.AddInstance<IFileSystem>(new PhysicalFileSystem(appRoot));\n\n        serviceProvider.Add<IVirtualFileSystem, VirtualFileSystem>();\n\n        serviceProvider.AddInstance<IMvcRazorHost>(new MvcRazorHost(\"Microsoft.AspNet.Mvc.Razor.RazorView<dynamic>\"));\n\n        serviceProvider.Add<ICompilationService, CscBasedCompilationService>();\n\n        serviceProvider.Add<IRazorCompilationService, RazorCompilationService>();\n\n        serviceProvider.Add<IVirtualPathViewFactory, VirtualPathViewFactory>();\n\n        serviceProvider.Add<IViewEngine, RazorViewEngine>();\n```\n\nThe alternative is some kind of configuration system, which means more required boilerplate (think views/web.config). So I'm spitballing a solution to spark discussion. All of the above code would be replaced with lines like this (inside mvc):\n\nvar services = new MvcServices();\n\nservices.DiscoverDefaults();\n\nGiven this kind of solution, I think a few restrictions probably apply:\n1. The assembly that provides a default service should be the one that defines the service type. This intentionally limits the set of possible error cases. Any condition where multiple assemblies attempt to default the same service would be really bad for the app developer.\n1. ```\n    We should think carefully about whether or not it's meaningful to allow 'override' with attributes as well. Right now it seems bad to allow overrides from attributes because of the same problem with multiples.\n   ```\n2. ```\n    These issues could potentially be solved with a 'resolve service' delegate of some kind, but that seems kludgy. At that point why not write your own code that put the service you want in the container.\n   ```\n\n---\n\nYou can merge this Pull Request by running\n\n  git pull https://github.com/aspnet/DependencyInjection magic\n\nOr view, comment on, or merge it at:\n\n  https://github.com/aspnet/DependencyInjection/pull/1\n\nCommit Summary\n-   Updated common build\n-   Added k10 and net45 build.\n-   Added solution folder\n-   Updated build.\n-   Updated project file\n-   Updated the build system.\n-   Remove csproj files.\n-   Skip the cache for KoreBuild\n-   Added nuget.config\n-   Updated build.cmd\n-   Removed the clear for sources.\n-   Updated build files.\n-   Updating build script to use cached nuget.exe\n-   Mock of magical service discovery\n\nFile Changes\n-   M .gitignorehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-0 (21)\n-   M DependencyInjection.slnhttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-1 (32)\n-   A NuGet.Confighttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-2 (13)\n-   M build.cmdhttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-3 (25)\n-   D build/_k-build.shadehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-4 (17)\n-   D build/_k-clean.shadehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-5 (13)\n-   D build/_k-restore.shadehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-6 (7)\n-   D build/_k-standard-goals.shadehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-7 (46)\n-   D build/_k.shadehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-8 (31)\n-   A src/Microsoft.AspNet.DependencyInjection/DefaultServiceAttribute.cshttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-9 (19)\n-   A src/Microsoft.AspNet.DependencyInjection/DefaultServiceDiscovery.cshttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-10 (19)\n-   D src/Microsoft.AspNet.DependencyInjection/Microsoft.AspNet.DependencyInjection.csprojhttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-11 (52)\n\nPatch Links:\n-   https://github.com/aspnet/DependencyInjection/pull/1.patch\n-   https://github.com/aspnet/DependencyInjection/pull/1.diff\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/DependencyInjection/pull/1.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34025863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34031950", "body": "@rynowak (Now we know not to reply to GitHub emails in Outlook.)\nI wasn't suggesting we make each assembly responsible for the services it owns.  Microsoft.AspNet.Mvc.Razor.dll sits at the top of the heap, has dependencies on the assemblies you mention, and can configure the services along with the rest of the user's default MVC environment.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34031950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "rynowak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34029896", "body": "@dougbu \n\nIf you make each assembly responsible for adding the services it owns, you still need to bootstrap that somehow.\n\n``` C#\nMicrosoft.AspNet.Mvc.Razor.Services.Add(services);\nMicrosoft.AspNet.Mvc.Rendering.Services.Add(services);\nMicrosoft.AspNet.Mvc.ModelBinding.Services.Add(services);\nMicrosoft.AspNet.Mvc.ViewHost.Services.Add(services);\n```\n\netc.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34029896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37496896", "body": "#33 is to make ActivatorUtilities go away, which is blocked on us being blocked by this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37496896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38135755", "body": "dupe of #40 :sunglasses: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38135755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9410642", "body": "Yeah, I can see that. We could potentially do something smart at compile time but it's conceptually equivalent.\n\nHaving to imperatively configure the DI container is going to bloat our startup code, which is what I'm concerned about. \n\nAn idea that Yishai put forth would be generate a configuration file/embedded resource at build time that we can use to resolve these kinds of things. It could be good if it's not in the user's face.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9410642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9938976", "body": "Is the intent of this class that providers in the pipeline can replace the result? (That's what this api says to me). Just wondering the purpose as opposed to passing T around directly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9938976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936701", "body": "why two flavors of invoke? that just seems clumsy\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936710", "body": "You can easily wrap a sync provider in an async one, so it should be possible to support adding sync and async providers to the same async manager, though it seems like clutter to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9938931", "body": "I guess my comment is that if some of the work is async (for a particular interface) it might as well all be async. Having both InvokeAsync and Invoke on the same manager just seems awkward.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9938931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34035094", "body": "I was thinking that we'd have another assembly that references all dependencies needed to wire up the default stack. Basically the code in the sample would be in the default MVC wire up stack would be implemented away from user code. \n\nWe also need to think about the cross framework scenario. Remember there's a single container for Mvc, SignalR, Data, etc. \n\nEach of those frameworks will provide default services into some container:\n\n``` C#\npublic class Startup\n{\n    public void Configuration(IBuilder builder)\n    {\n       var provider = new ServiceProvider();\n\n       // This code can be cleaned up but it shows the idea\n       Mvc.PopulateServices((interfaceType, implType, singleton) => provider.Add(interfaceType, implType));\n       Data.PopulateServices((interfaceType, implType, singleton) => provider.Add(interfaceType, implType));\n       SignalR.PopulateServices((interfaceType, implType, singleton) => provider.Add(interfaceType, implType));\n\n       // Wire up the provider that will be used for middleware\n       builder.UseServiceProvider(provider);\n\n       var routes = new RouteTable();\n\n      var mvcConfiguration = new MvcConfiguration(serviceProvidr);\n\n       routes.MapMvcRoute(...., mvcConfiguration);\n       builder.MapSignalR();\n       builder.UseRoutes(routes);\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34035094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34598287", "body": "Looks good :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34598287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35839445", "body": "This feels like it should be shared code. Doesn't feel like part of the DI library.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35839445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36828864", "body": "There's some great feedback from @yishaigalatzer and @loudej on the method naming here https://github.com/aspnet/WebFx/pull/44#discussion_r10332557\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36828864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37734662", "body": "Turns out this is injected by the hosting layer but just found an interesting problem. If you use ITypeActivator with a chained container it needs to be redefined since it will only work on the service provider that defined it.\n\nAt least that's the case with the default service provider\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37734662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37891702", "body": "You need to update all of the code that I fixed last week before pushing this \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37891702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37891767", "body": "Or do the change in 2 stages, first is to leave the FallbackServices settable for now so code doesn't break\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37891767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37901830", "body": "I think the implementation should be in hosting. Should it also be neutral?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37901830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37952855", "body": "This has nothing to do with Helios or dependency injection. See this thread for more context aspnet/WebFx#86\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37952855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38128908", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38128908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5581622", "body": "I think we need an overload that doesn't take one of these\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5581622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582371", "body": "Yess!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5706590", "body": "Zomg much better\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5706590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5721639", "body": ".Any()?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5721639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5752179", "body": "Nuke .Table from the namespace across the board.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5752179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8212755", "body": "Why?!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8212755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583269", "body": "Few pieces of feedback:\n- The interface needs to be assembly neutral\n- Bury it in a namespaces that makes it hard to find it (we don't want people using it)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583277", "body": "This shouldn't be in here. The service table should be manifestable :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583282", "body": "This shouldn't exist. Let the things that need a service manifest implement them on their own. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583289", "body": "@HaoK also nuke all the fallback code!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583293", "body": "Get rid of all the fallback stuff in here. And this never needs to generate a manifest either.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8691732", "body": "paste\\* :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8691732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644414", "body": "@HaoK @lodejard @yishaigalatzer @divega \n\n![image](https://cloud.githubusercontent.com/assets/95136/6100318/898e25d8-afc2-11e4-821b-19ae9aaf4fb9.png)\n\nIt looks pretty confusing seeing AddScopedInstance next to AddScoped when they are completely unrelated :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9410394", "body": "I think as a trend of things we want to avoid/cutdown as much as possible across the board is the amount of different places we scan for things app domain wide.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9410394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9412864", "body": "We shouldnt build anything that depends on build time alone. Anything we do at \"build time\" is solely an optimization.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9412864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "yishaigalatzer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34258441", "body": "Need to be careful with setting default services in individual assemblies, as long term the assemblies we build will be consumed by other frameworks as well. \nAlso need to worry about initialization order, where magic because sometimes too much.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34258441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35699435", "body": "@lodejard ended up with two manager interfaces (assuming sync and async providers are explicitly separated), the manager is an implementation detail that can be separated as well. I didn't want to keep moving stuff around until we agree on the design.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35699435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35841179", "body": "The current plan is that the manager is auto injected upfront as an open generic, so its usable from everywhere and no one needs to register it. Hence it is currently in the DI library.\n\nIt's intended to be consumed by both users and framework developers, Lou and I chatted last week about putting it in the DI for now, but it's open to discussion and can be moved elsewhere\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35841179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37479120", "body": "@halter73 got an ETA on this?\n\n@davidfowl should ActivatorUtilities public static class just go away?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37479120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644757", "body": "Agree, this is really sugar code for no one. The framework(s) that depend on it already add it and the code is rather trivial, not to mention it has the annoying and completely wrong default parameter.\n\n``` C#\n        public static IServiceCollection AddScopedInstance([NotNull]this IServiceCollection services, IConfiguration config = null)\n        {\n            var describe = new ServiceDescriber(config);\n            services.TryAdd(describe.Scoped(typeof(IScopedInstance<>), typeof(ScopedInstance<>)));\n            return services;\n        }\n```\n\nLets just get rid of it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644787", "body": "#173\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936909", "body": "It's intentionally not wrapping the two together, because I think the user should explictly register the AsyncProvider, the common scenario is non async.\n\nRead the comment above, this is just a detail, the key thing is how the interfaces and behavior should be, once we agree to that I can finish this up. Not inclined to keep iterating for no reason\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936922", "body": "There are no two flavors\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9954460", "body": "The pattern is that the user does not even see the manager (and thus is why I'm saying it's currently an implementation detail).\n\nWe register an open generic IManager<> & IManagerAsync<> the user gets one, and they materialize over the specific T. Hence the user only sees the sync or async versions.\n\nThe reason this is still in a single class, is to discuss the registration and behavior pattern\n\none option: User explicitly registers providers as sync or async, and calling the sync manager iterates just the sync providers, calling async manager iterates just the async providers\nanother option: User still explicitly registers, but the async manager calls both the sync and async versions.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9954460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9976754", "body": "Lets follow up on this next week, I don't want to start sprinkling this for every await. We need to figure out if this is ever used outside of projectK and in a Gui application (my current guess is not, and hence not making the change)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9976754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "loudej": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34798334", "body": "Testing\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34798334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37483465", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37483465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37620743", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37620743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37623462", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37623462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38252865", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38252865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9803735", "body": "We should add unit tests to verify \"implementation instance\" descriptor also\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9803735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459233", "body": "does autofac allow two \"as\" calls on the same registertype? if not, should there be a type for each interface instead of both on the same type?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459271", "body": "resolve IServiceProvider from ILifetimeScope\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459276", "body": "call dispose on lifetime scope\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459341", "body": "don't dispose the ilifetimescope or icomponentcontext that is ctor injected - it owns you rather than the other way around\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547622", "body": "Populate will change when ServiceCollection appears, so no point in overloading or fine-tuning\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547650", "body": "use `_fallbackServiceProvider` instead of `IServiceProvider provider`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547769", "body": "don't re-describe descriptors - if someone gives you an IServiceDescriptor it is already correct\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547960", "body": "move BuildServiceProvider to a ServiceCollection extension method, the extension method should be in a Microsoft.AspNet.DependencyInjection.Fallback namespace\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10548230", "body": "add `IServiceProvider FallbackServices` property to `ServiceCollection` rather than taking as build or populate method argument... \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10548230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lodejard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34799293", "body": "Another test\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34799293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583475", "body": "Yeah...\n- the ServiceProvider class should no longer have a concept of fallback service provider at all..\n- the KRE will have a hard-coded implementation of the list interface returning typeof(A), typeof(B)\n- the Hosting dll will also have a hard-coded implementation of the interface returning typeof(A), typeof(B) that it knows about\n- Neither ServiceProvider (nor anything we publish) would create that list for you\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "halter73": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36933107", "body": "I agree. The new naming is _much_ better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36933107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36933908", "body": "Merged. https://github.com/aspnet/DependencyInjection/commit/2927f2e49c391753b107017d3afc70f7eb601dda\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36933908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38129227", "body": "@davidfowl I don't want to merge this until https://github.com/aspnet/DependencyInjection/pull/47 is in. The tests would fail without it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38129227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38252307", "body": "Most of this is rewritten in https://github.com/aspnet/DependencyInjection/pull/54\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38252307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10544366", "body": "Should we just create another method that _only_ takes the fallback IServiceProvider? We could call it `Chain` or something.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10544366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "AndriySvyryd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37247256", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37247256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9968090", "body": "Use ConfigureAwait(continueOnCapturedContext: false) on all await calls\nhttp://msdn.microsoft.com/en-us/magazine/jj991977.aspx\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9968090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "victorhurdugaci": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053421", "body": "Shouldn't the argument be `Func<IServiceProvider, TService>`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053470", "body": "Type safe parameters? `Func<IServiceProvider, TService>` instead of `Func<IServiceProvider, object>`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053479", "body": "Type safe params?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8547801", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8547801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8721818", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8721818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "bricelam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8213035", "body": "Reverted. Turned out to be unrelated to what I was trying to fix.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8213035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "HaoK": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583158", "body": "cc @lodejard @davidfowl @divega @halter73 \n\nPrototype IServiceManifest, overload for BuildServiceProvider and Import functionality\n\nDoesn't look too bad so far, I assume we can nuke all of the fallback code that lives in ServiceProvider?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644771", "body": "I was about to suggest the same. +1 to just can the sugar method for registering. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "NTaylorMullen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9968092", "body": "You beat me!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9968092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "anpete": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10309015", "body": "Consider making this class immutable and enforcing the type/instance invariant with separate ctors. See [this](https://github.com/aspnet/Data/blob/dev/src/Microsoft.Data.Entity/Services/ServiceDescriptor.cs) example.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10309015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}