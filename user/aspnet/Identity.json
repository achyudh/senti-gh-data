{"_default": {"1": {"simont789": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1576", "title": "Using EntityFramework Core to store Identity Database in Azure sql", "body": "Hi Community,\r\n\r\nAs mentioned, I'm trying to store all my Identity information in Azure Sql using Ef Core. Thought it would have been smooth but I've been facing a lot of difficulties. Research online has shown me ways to edit the migration file, since there are some wrong data type when it is mapped. However I'm still stuck with the \"System.Data.SqlClient.SqlException (0x80131904): String or binary data would be truncated.\" message. \r\n\r\nBefore I show my problem to the community, just wondering if there is a proper tutorial to teach us how to map your Identity core to a database with Entity Framework Core? Or if there is an easier way to do things? All I wanna do is just saving my Identity info on the cloud for my asp.net core app. Really just using the default settings at the moment. \r\n\r\nIf these information does not solve the problem I will post my code up and try to solve the bug with you guys. \r\n\r\nCheers for the help!\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ruslan-Ba": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1575", "title": "ASP.NET Core 2.0 Identity Expiration", "body": "Please, see: \r\nhttps://github.com/aspnet/Identity/issues/1478\r\n\r\nAccessDeniedPath  is ignored", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1574", "title": "Functional test discovery fails on build", "body": "Fails both locally and on the CI. From http://aspnetci/viewLog.html?buildId=387311&buildTypeId=Lite_Identity&tab=buildLog&_focus=407#_state=407: \r\n\r\n```C#\r\n[Step 4/6] [xUnit.net 00:00:00.2707368] Exception discovering tests from Microsoft.AspnetCore.Identity.Service.FunctionalTests: System.BadImageFormatException: Could not load file or assembly 'Microsoft.AspnetCore.Identity.Service.FunctionalTests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'. An attempt was made to load a program with an incorrect format.\r\n[13:07:57]\t[Step 4/6] File name: 'Microsoft.AspnetCore.Identity.Service.FunctionalTests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n[13:07:57]\t[Step 4/6] at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, IntPtr ptrLoadContextBinder)\r\n[13:07:57]\t[Step 4/6] at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, IntPtr ptrLoadContextBinder)\r\n[13:07:57]\t[Step 4/6] at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\r\n[13:07:57]\t[Step 4/6] at Xunit.Sdk.ReflectionAssemblyInfo..ctor(String assemblyFileName) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Reflection\\ReflectionAssemblyInfo.cs:line 31\r\n[13:07:57]\t[Step 4/6] --- End of stack trace from previous location where exception was thrown ---\r\n[13:07:57]\t[Step 4/6] at Xunit.AppDomainManager_NoAppDomain.CreateObject[TObject](AssemblyName assemblyName, String typeName, Object[] args) in C:\\Dev\\xunit\\xunit\\src\\xunit.runner.utility\\AppDomain\\AppDomainMan\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1558", "title": "Port fix to broken link in individual auth template", "body": "While porting changes to Identity UI, we need to port the fix to https://github.com/aspnet/templating/issues/226 over.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/330823bed80c5915c595d60dcd5b3b661211e25a", "message": "Make options registerations post configure"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e44cba9b752cf54ef75504051d291ae299a17779", "message": "Split showing and generating recovery codes"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ce88212f49395b077d1466af47082927df9975cb", "message": "Use AuthenticatorUrl generated on the server in EnableAuthenticator pages"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/1e53a61983a729b14e1a0ce4a924067f6b7969ec", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c352a9b8dc07283f07aaeb5645bbc8d0174d6b57", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/66aa93540fc79a088744c0ae9c2e9cfe53af6f31", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/8681324", "body": "Getter-only auto-properties should continue to work\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8681324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359457", "body": "ROT26 encryption!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "javiercn": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1572", "title": "Improve the extensibility of the default identity UI", "body": "Support changing the user type from IdentityUser to TUser while using the default UI.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1571", "title": "Bundle and minimize javascript and CSS assets for the default identity UI", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1570", "title": "Add functional tests to the default embedded UI", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1550", "title": "Productionize IEmailSender interface", "body": "We need to refactor the interface that we had on the template (now on the UI package) into a shape that we like, and find the right place for it. (probably the M.A.I package).\r\n\r\nMy proposal\r\n```csharp\r\npublic interface IEmailSender \r\n{\r\n    Task SendAsync(Email email);\r\n}\r\n\r\npublic class Email\r\n{\r\n    public IList<string> To { get; }\r\n    public string Subject { get; set; }\r\n    public string Body { get; set; }\r\n}\r\n```\r\n\r\nThe idea of using a class is to allow for adding new members if necessary in the future without causing breaking changes.\r\n\r\n/cc: @HaoK ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1477", "title": "Create IdentityClient for querying user data from a client application", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1476", "title": "Support discovery for provisioning client credentials at runtime", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/07bf52ec0d20ef5a95233c7bf2029bd449d71872", "message": "Fix fixed dependency"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/56158b4fb024ccde78fe5b6b4bbb9d8421a7b19b", "message": "Remove unnecessary dependencies (#1548)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/7ccc463f6d6240684e1af37cb5e5d2cd51e5f095", "message": "Remove .vscode files"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/93016c602ad8a89e9cd37f74b1f9589370e3d30e", "message": "Add .vscode to the .gitignore"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/4b49f2b482d9be35dc62ebaba5b6c299293d4539", "message": "Revert \"Revert Move identity into an Area in a library (using Razor Pages) (#1537)\"\n\nThis reverts commit d612d2034471a04a2372298773fcacaa0b77a44c."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2964515d8556e90fb88bcb6dcacc9f762965bba1", "message": "Adds support for a default UI for identity.\n\n* The default UI uses its own Area (Identity).\n* The default UI requires MVC and StaticFiles to be present on the\n  request processing pipeline.\n* The default UI requires the user to provide a '_LoginPartial ' partial\n  view in their application in a location that the view engine will find\n  it. This location is tipically /Pages/Shared or /Views/Shared\n* Current limitations:\n  * The UI is self-contained and non-customizable (outside of things possible with Razor pages).\n  * Customizing the User, role, etc. is not supported at this time."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sebastianbk": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1568", "title": "Expose ASP.NET Identity via LDAP interface (.NET Core 2.0)", "body": "I have an ASP.NET Core 2.0 application where I am using the stock implementation of ASP.NET Identity to manage and authenticate my users.\r\n\r\nI would like to use my application as an identity provider for 3rd party service that I am planning on using. The only issue is that this service can only communicate with identity providers over LDAP.\r\n\r\nIs there a way to stand up an LDAP server as part of my ASP.NET Core application?\r\n\r\nI know there is an option to do so in Java by using UnboundID LDAP SDK. However, I cannot find a .NET alternative to this.\r\n\r\nHow should I go about exposing my ASP.NET Identity users via LDAP?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grahamehorner": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1565", "title": "Improve test ability of TOTP", "body": "IMHO TOTP needs to use ISystemClock to allow for testing to skew clock outside TOTP TimeStep, also at present the TimeStep is fixed at 3 mins which result in a window of 9 mins either side of the time the code was issued, this should be configurable with a note that a larger worn is less secure and a smaller windows is more prone to expire.\r\n\r\nie. when using an authenticator application a small windows of 2 mins is suffice\r\n     while using email/phone TOTP systems a larger window is required due to delays in communication of the code to the user", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1564", "title": "RFC6238 Pin Length", "body": "IMHO the service should allow for a configurable PIN length 6/8 and be public; the GenerateCode/ValidateCode should also return/accept a string; the length of the pin is important\r\nis current controlled by the RFC6238 as a const, service which may result in a number that requires padding with 0s and a consumer of the service many not realise resulting in the wrong length code getting passed up the call stack.\r\n\r\npublic static int GenerateCode(byte[] securityToken, string modifier = null)\r\npublic static bool ValidateCode(byte[] securityToken, int code, string modifier = null)\r\n\r\nsee: https://tools.ietf.org/html/rfc6238 for reference\r\n\r\nstring generateTOTP\r\n..\r\nwhile (result.length() < codeDigits) {\r\n             result = \"0\" + result;\r\n         }\r\n return result;\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Wayne-Mather": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1556", "title": "Identity 2.0 and sub domains", "body": "Hi,\r\n\r\nI have several sites on the same server just using a different subdomain. An example may look like this:\r\n\r\n- sales.contoso.com\r\n- customers.contoso.com\r\n- invoicing.contoso.com\r\n\r\nI cannot use an identity server because while these sites are also replicated (SQL Server) to remote sites in remote areas (behind a satellite).\r\n\r\nWhat I want to be able to do is to allow the authenticated cookie to be shared on contoso.com. How can this be achieved using ASP.NET Core 2.0 when Identify is used? I want to  use something like Cookie.Domain = \".contoso.com\" and the identity cookie to be stored as such.\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aneequrrehman": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1549", "title": "Changing the primary key of IdentityUserClaim<> and IdentityRoleClaim<>", "body": "Well, I have updated everything necessary to change all the Identity tables' primary keys to be `Guid`s, but I couldn't find any way to change the primary keys' types for `IdentityUserClaim<>` and `IdentityRoleClaim<>` tables. \r\n\r\nI have added this line in `ApplicationUser.cs`\r\n\r\n    public virtual ICollection<IdentityUserClaim<Guid>> Claims { get; } = new List<IdentityUserClaim<Guid>>();\r\n\r\n\r\nThere should be some way to change the default primary keys (`int`s) for `IdentityUserClaim<>` and `IdentityRoleClaim<>`?. Or am I missing something?\r\n\r\nPerhaps something like `IdentityUserClaim<TKey, TUserKey>` instead of `IdentityUserClaim<TKey>` (the name **TKey** is misleading as well unless one looks at the summary, IMHO)?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HaythemJ": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1543", "title": "Aspnet Core 2.0 Authorization issues after deploying to IIS", "body": "I have a Aspnet Core 2.0 application. I configured both Identity and Jwt as below:\r\n\r\n      `// Register identity framework services and also Mongo storage. \r\n            services.AddIdentityWithMongoStores(settings)\r\n                .AddDefaultTokenProviders();\r\n            services.ConfigureApplicationCookie(options =>\r\n            {\r\n                options.LoginPath = \"/Account/Login\";\r\n                options.Cookie.HttpOnly = true;\r\n                options.Events = new CookieAuthenticationEvents\r\n                {\r\n                    OnRedirectToLogin = ctx =>\r\n                    {\r\n                        if (ctx.Request.Path.StartsWithSegments(\"/api\"))\r\n                        {\r\n                            ctx.Response.StatusCode = (int)System.Net.HttpStatusCode.Unauthorized;\r\n                        }\r\n                        else\r\n                        {\r\n                            ctx.Response.Redirect(ctx.RedirectUri);\r\n                        }\r\n                        return Task.FromResult(0);\r\n                    }\r\n                };\r\n            });\r\n\r\n             services.AddAuthentication().AddJwtBearer(cfg =>\r\n            {\r\n                cfg.RequireHttpsMetadata = false;\r\n\r\n                cfg.SaveToken = true;\r\n\r\n                cfg.TokenValidationParameters = new TokenValidationParameters\r\n                {\r\n                    ValidIssuer = Configuration[\"JwtSecurityToken:Issuer\"],\r\n                    ValidAudience = Configuration[\"JwtSecurityToken:Audience\"],\r\n                    //ValidateIssuerSigningKey = true,\r\n                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[\"JwtSecurityToken:Key\"])),\r\n                    //ValidateLifetime = true,\r\n                    //ClockSkew = TimeSpan.MaxValue // remove delay of token when expire\r\n                };\r\n            });\r\n\r\n\r\n            // Add application services.\r\n            services.AddTransient<IEmailSender, EmailSender>();\r\n\r\n            ///Instead of services.AddMvc(), we need to asjust the AuthenticationSchema\r\n            ///in order to support both Identity Cookies and Jwt\r\n            services.AddMvc(\r\n                config =>\r\n            {\r\n                var defaultPolicy = new AuthorizationPolicyBuilder(new[] { JwtBearerDefaults.AuthenticationScheme, IdentityConstants.ApplicationScheme })\r\n                                 .RequireAuthenticatedUser()\r\n                                 .Build();\r\n                config.Filters.Add(new AuthorizeFilter(defaultPolicy));\r\n                config.Filters.Add(new AutoValidateAntiforgeryTokenAttribute());\r\n            }\r\n            )\r\n                .AddJsonOptions(options => options.SerializerSettings.ContractResolver = new DefaultContractResolver());\r\n`\r\nEverything runs ok on Visual Studio and I have both Identity Cookies and Jwt enabled.\r\n\r\nbut once deployed to IIS on my Machine, the calls are all Unauthorized 401 HTTP Code.\r\n\r\nI debugged using Remote Debugger on IIS and I was able to see that the user was authenticated and authorized in the below method:\r\n\r\n           `public async Task<IActionResult> Login(AuthenticationViewModel model, string returnUrl = null)\r\n        {\r\n            ViewData[\"ReturnUrl\"] = returnUrl;\r\n            if (ModelState.IsValid)\r\n            {\r\n                // This doesn't count login failures towards account lockout\r\n                // To enable password failures to trigger account lockout, set lockoutOnFailure: true\r\n                var result = await _signInManager.PasswordSignInAsync(model.UserName, model.Password, \r\n                model.RememberMe, lockoutOnFailure: false);\r\n                if (result.Succeeded)\r\n                {\r\n                    _logger.LogInformation(1, \"User logged in.\");\r\n                    return RedirectToAction(nameof(AppController.App), \"App\");\r\n                    //return RedirectToLocal(returnUrl);\r\n                }\r\n                \r\n                if (result.IsLockedOut)\r\n                {\r\n                    _logger.LogWarning(2, \"User account locked out.\");\r\n                    return View(\"Lockout\");\r\n                }\r\n                else\r\n                {\r\n                    ModelState.AddModelError(string.Empty, \"Invalid login attempt.\");\r\n                    return View(model);\r\n                }\r\n            }`\r\n\r\n![image](https://user-images.githubusercontent.com/9905290/34362420-a0ee2d6a-ea73-11e7-9075-2e5520e18cd2.png)\r\n\r\n\r\nBut when executing this instruction `return RedirectToAction(nameof(AppController.App), \"App\");` where I am redirecting to the main page it returns 302 HTTP:\r\n\r\n![image](https://user-images.githubusercontent.com/9905290/34362426-b675ac8a-ea73-11e7-904a-96f82255d556.png)\r\n\r\nI don't know why in VS it is working well and not in IIS.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samarmir": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1542", "title": "sample project needs more ", "body": "I find it dissapointing that the sample code does not show how to extend the applicationuser with extra properties. ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fe-c": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1541", "title": "User name and email confusing", "body": "Hello!\r\nI was created ASP.Net Core project with individual accounts.\r\nAfter user registration User Name and Email are same.\r\nI was edit Profile page to change User Name, becouse I want to display user name, not email in top navbar.\r\nAt now I cant login, cause signInManager.PasswordSignIn need user_email in user name field.\r\nWhen I change user email, I still need to signin with user_name=old_user_email.\r\nIt's very confusing users and developers.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zmjack": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1539", "title": "How can I make the Identity working correctly thought a reverse proxy server?", "body": "I run a demo MVC project which using ASP.NET Identity under a private network (192.168.200.1). And I setup a reverse proxy server (192.168.200.201) to visit it.\r\n\r\nI use IIS 6.1 with Application Request Routing (ARR) 2.5 as the reverse proxy server.\r\n\r\nIn the Identity library, the default LoginPath is **\"/Account/Login\"**. I don't change it, but when I visit some Actions which need Authorized in **192.168.200.201**, it always redirect to **\"192.168.200.1/Account/Login\"**. It's going wrong! The correct redirect address is **\"192.168.200.201/Account/Login\"**.\r\n\r\nWhat's wrong with it? I look forward to your reply. Thank you!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemcmaster": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1538", "title": "Add xmldocs for Microsoft.AspNetCore.Identity.UI", "body": "A fit-n-finish item TODO before RTM.\r\n\r\ncc @javiercn ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/0a8389625bb9c830c144027bd9e1ac0b1455059c", "message": "Merge branch 'release/2.0.0' into dev\n\nFor real this time"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/79de498dcb740f9930adb2218f75df3babec2ba6", "message": "Merge branch 'release/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/becf1df9c5a3b908e28ec3c1272b072d8801e3dc", "message": "Mark Identity service packages as IsPackable=false"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/145f645bcf578c1cf9861b03b68844d2b9019297", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config (#1506)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Biarity": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1524", "title": "How to customize GenerateUserTokenAsync token lifespan? What about brute-force protection? ", "body": "I'm using `GenerateUserTokenAsync` and `VerifyUserTokenAsync` with `provider=\"Email\"`. How can I customize token expiry so tokens last longer/shorter before they aren't valid?\r\n\r\nAdditionally, how would you implement token lockout to prevent someone from brute-forcing the token? With `provider=\"Email\"`, the tokens are just 6 digits which should be easy to brute-force (<1 million possibilities, ~11 minutes on a core i3 laptop).", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "michaelkaye": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1514", "title": "Enhancement: Provide more information in the result from the UserManager.Verify*TokenAsync() methods", "body": "Hi there,\r\n\r\nAs an enhancement, I'd like to see more information returned from the Verify*Token methods on UserManager, such that richer information on failures can be recorded in metrics, or the flow updated to ease user interactions. \r\n\r\nRather than returning a boolean true/false from UserManager.verifyUserToken(), I'd be interested in a richer object that's a pair of true/false + some sort of status string / error code / something to provide more details.\r\n\r\nI think there'll only be one token provider for any given call, so it shouldn't need to have multiple status strings returned (eg, if multiple providers needed to say 'no' in different ways)\r\n\r\nThe sort of failure information we could see passed back would allow:\r\n\r\n- Being able to find out if the TOTP code is ahead/behind but nearly valid (user may need to be pushed to a flow to obtain multiple codes to handle authentication token resync)\r\n- An one-use token was valid but already been used (please ask for another or contact an admin to investigate if you didn't use it)\r\n- A time-limited token was valid but has timed out (ask for another token)\r\n\r\nAnd additionally we would start storing metrics on the above, so we can see if the time delay on tokens is too short; if there's something confusing in the flows, or if some odd spike of failures is indicating an attacker trying it on.\r\n\r\nFor those providing public signups, exposing the exact details of the failure to the users may have a security impact, so I wouldn't make displaying information part of any templates.\r\n\r\nIn a corporate environment, re-sending a expired code to a phone automatically (rather than require the user to re-start the password reset flow) could reduce the support load of these sorts of security features.\r\n\r\nHopefully that makes sense,\r\nMichael", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Triwaters": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1497", "title": "multiple nvarchar(450) fields unsuitable for clustered indexes", "body": "The worst offender is dbo.AspNetUserLogins, with three (3) nvarchar(450) fields making up the primary key. SQL Server balks at this and it's a design flaw that contents that can legally fit in these fields could (together) make the record unsavable, due to a violation of the 900-byte maximum length for clustered indexes.\r\n\r\nI can imagine this is all rather baked into the system at this point, but it's a design flaw in two ways:\r\n1) it can lead to legal record data-wise not being saved due to index violations, and\r\n2) For larger sets of data, it's horribly inefficient\r\n\r\nAll that having been said, I suppose in practice \"this will never be a problem\" with regard to (1), since the fields in practice are populated with relatively small guids, and \"this will never be a problem\" with regard to (2) because most systems don't have more than a few thousand logins, and often fewer than 100, I suppose.\r\n\r\nThe other two tables affected by this (as in, SQL Server throws a fit when you try to create the index) are:\r\ndbo.AspNetUserRoles (requesting 1,800 bytes in index space per record)\r\ndbo.AspNetUserTokens (requesting 1,800 bytes in index space per record)\r\n\r\nMy recommended solution is that fields be reduced to more ordinary sizes, going forward, and primary keys be defaulted to integers.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkArtak": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1496", "title": "[Question] HttpContext?.User?.Identity?.Name casing differs when run on Mac OS vs Windows", "body": "Hi.\r\n\r\nI have a controller action, which uses current user's name internally. While running on Windows, I got used to getting the result of HttpContext?.User?.Identity?.Name in uppercase. However, just discovered, that the same API returns the value in lowercase on Mac.\r\n\r\nThe project runs on the latest ASPNET Core framework.\r\n\r\nIs this by design ?\r\n\r\nThanks,\r\nArtak", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HaoK": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/f1ed482c26df6e242b1e4eca0948dc77ba5b8fa9", "message": "Add PersonalData tab/functionality"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/435ab653dbb7611c0e936e91279f3337d4071622", "message": "Update initial migration for DefaultUI sample (#1561)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/b07a95dd09b07b5ab6d2a9b1f2b1fcfa08c2f0b0", "message": "Add Store.MaxLengthForKeys (#1555)\n\n* Add Store.MaxLengthForKeys\r\n\r\nIf set this will set max length of things we use for composite keys in\r\nUserTokens/Logins\r\n\r\nNeeded for https://github.com/aspnet/templating/issues/62"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/85f8a49aef68bf9763cd9854ce1dd4a26a7c5d3c", "message": "Shorten folder names"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1562", "title": "Initial EncryptPersonalData support", "body": "- new StoreOptions.EncryptPersonalData setting\r\n- new IPersonalDataEncryptor and IEncryptedUserStore interfaces that live in core\r\n- new `AddPersonalDataEncryptor<MyEncryptor>()` helper method on IdentityBuilder\r\n- The two concrete user stores in EF now implement IEncryptedUserStore\r\n- UserManager ctor throws if EncryptPersonalData is true if store is not IEncryptedUserStore, or if IPersonalDataEncryptor service not found\r\n- base IdentityUserContext hooks up ValueConverter using IPersonalDataEncryptor on UserName, NormalizedUserName, Email, NormalizedEmail, PhoneNumber columns when EncryptPersonalData is true.\r\n\r\nSo all of the normal store tests except one pass when turning this on with a dummy reverse encryptor. \r\n There's a test that that directly uses the DbSet as an IQueryable to look for users like so: `UserManager.Users.Count(u => u.UserName.StartsWith(\"CanFindUsersViaUserQuerable\"))` which fails because this probably bypasses the converters... @ajcvickers ?\r\n\r\ncc @blowdart @javiercn ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1442", "title": "[WIP] Add Identity.SignIn[.Cookies]", "body": "Work for https://github.com/aspnet/Identity/issues/1409\r\n\r\n- Moves SignInManager into new Identity.SignIn package\r\n- Moves Identity auth cookie configuration into Identity.SignIn.Cookies\r\n- Main identity package depends on Identity.SignIn but not SignIn.Cookies since AddIdentity needs to continue to work as it did before\r\n\r\nNew startup code for refactored identity:\r\n\r\n```C#            \r\nservices.AddIdentityCore<ApplicationUser>()\r\n                .AddRoles<IdentityRole>()\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddSignIn() // Adds SignInManager (works against IdentityConstant schemes)\r\n                .AddDefaultCookies() // Adds and configures default cookie auth\r\n                .AddDefaultTokenProviders();\r\n```\r\n\r\nYou can also directly add the identity cookies you want via new extension methods on `AuthenticationBuilder` which is useful if you want to exclude some of the cookies\r\n\r\n```C#\r\nservices.AddAuthentication()\r\n         .AddApplicationCookie(o => { })\r\n         .AddExternalCookie(o => { })\r\n         .AddTwoFactorRememberMeCookie(o => { })\r\n         .AddTwoFactorUserIdCookie(o => { })\r\n```\r\n\r\nThoughts @ajcvickers @davidfowl @blowdart ?", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1435", "title": "Always validate email", "body": "Fixes https://github.com/aspnet/Identity/issues/1189\r\n\r\n@ajcvickers ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1351", "title": "TFA cookies now validate security stamp", "body": "Part of https://github.com/aspnet/Identity/issues/1342\r\n\r\nWhen security stamp is updated, the TFA remember me cookie will be invalidated\r\n\r\n@ajcvickers @Tratcher @blowdart ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1262", "title": "[Design] Add ClientManager/Store/interfaces into Core - Iteration 1", "body": "Issue: https://github.com/aspnet/Identity/issues/1244\r\n\r\n## Iteration 1\r\n- I'm starting on these PRs now to make sure we have all the support we need in core identity to do this later. \r\n- We can also use these PRs to review each of the interfaces/methods as we are adding them to core.\r\n- The main change other than moving stuff was renaming Application => Client (new placeholder name, open to other ideas).\r\n- This iteration focuses on pulling everything in from Microsoft.AspNetCore.Identity.Service.EntityFrameworkCore and also will focus on defining the surface area of ClientManager/ClientStore/IdentityClient and associated related entities. (aka the low level building blocks)\r\n- The next iteration will flesh out registration AddIdentity overloads, and how to opt into/out of Roles/Client functionality/schema, and absorbing the IdentityServiceSpecfication tests. (aka make it all work again)\r\n\r\n## New types\r\n`Microsoft.Extensions.Identity.Core`:\r\n+ `IdentityBuilder` <= `Microsoft.AspNet.Identity`\r\n+ `ClientManager`\r\n+ `IClientStore`\r\n+ `IClientClaimsPrincipalFactory`\r\n+ `IClientClaimStore`\r\n+ `IClientRedirectUriStore`\r\n+ `IClientScopeStore`\r\n+ `IClientSecretStore`\r\n+ `IClientValidator`\r\n+ `IQueryableClientStore`\r\n\r\n`Microsoft.Extensions.Identity.Stores`:\r\n+ `ClientStoreBase`\r\n+ `IdentityClient`\r\n+ `IdentityClientClaim`\r\n+ `IdentityClientRedirectUri`\r\n+ `IdentityClientScope`\r\n\r\n`Microsoft.AspNet.Identity.EntityFrameworkCore`:\r\n+ `ClientStore`\r\n\r\n@javiercn take a look when you have a chance, since you basically followed the existing manager/store patterns, most of the classes were moved as is with some slight renaming + refactoring.\r\n\r\nI did have a question about Application's ClientId/UserId.  Today Application's have both a TKey id and a clientId, but clientId's must be unique since you can look them up via the Store API.  So Is there any reason we can't just use the ClientId as the key?  Its much nicer since its always a string so it eliminates a generic.  Also are all Applications tied to a single user since there's a FindByUserId as well?\r\n\r\ncc @ajcvickers @danroth27 @blowdart \r\n\r\n\r\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34366992", "body": "I was actually just testing out how to create a pull request, hence I didn't add anything other than the directory.  The DI change is an actual change I want to make :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34366992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34376591", "body": "pushed to dev\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34376591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37064012", "body": "@GrabYourPitchforks Switched to DataProtection instead of Rfc2898 now, can you review?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37064012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37318535", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37318535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37458524", "body": "@Eilon Updated with fixes from PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37458524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37970890", "body": "Changes are already in\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37970890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38233213", "body": "This was a bug specific to the 2.0.0 release\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38233213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38233249", "body": "There are no sync extensions in K\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38233249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39520477", "body": "Merged as part of another PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39520477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39900081", "body": ":shipit: Will this cause any issues with Dev12 VS? (Do I need to install new tooling?)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39900081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/6654098", "body": "If we do that, we could just kill the base interface since the enum is what's defining the strings currently.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654128", "body": "So as it stands today, that would mean we only use this for things that go into IdentityResult (strings), and leave exception messages alone?  We actually throw very few exception messages in identity core, so what appears to be an 'exception message' most likely gets turned into a failure inside of a IdentityResult.  Its the Stores that tend to throw exceptions, and are not part of this change.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/8960010", "body": "Fair enough, filed https://github.com/aspnet/Identity/issues/287\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8960010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/9812763", "body": "No the authorize attribute just moved from MVC to Security\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/9812763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/10177933", "body": "Broke music store. Razor has user as I principal. Can't change this until Mvc fixes that. I filed an issue in Mvc. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/10177933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360104", "body": "@Eilon How about if we just do something silly like just using the HashCode as a string: \n\n```\nreturn password.GetHashCode().ToString();\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360341", "body": "@Eilon Well then I have to comment out all my unit tests since we require a PasswordHasher (no easy way to store plain text passwords, unless you write a no-op passwordhasher like this).  None of the password related apis will work if the default passwordhasher throws...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10362400", "body": "@Eilon I would rather just #if def the entire passwordhasher class and leave the property null in UserManager if we are in k10 instead of having methods throw.  The only value in implementing this class was for the unit tests so they were already running before I got Crypto working.  We can just wait to enable everything at once instead(passwordhasher with crypto)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10362400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10482897", "body": "@Eilon These are meant to be only English, so if someone wanted to support non English digit/lower/upper they would override this to do the appropriate thing for their language.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10482897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10484807", "body": "@Eilon So that's what we had in identity 1.0, the idea was that they would implement their own UserValidator/PasswordValidator to do anything different.  That option is still available in 2.0, but we were trying to make things public/virtual where it made sense, so developers can also extend/override for reuse.  In K, we will be using DI to fetch the IUserValidator and IPasswordValidator as you mention, but they might still find it useful to derive from the basic validators we provide to start.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10484807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/fbb0dde2a4c32eca8a4f0c11ea49609a3107b3a0", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f15e49fa99cd65e1dc7404b9f5496e3995e9c7d3", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f3c1ab6b0c92c34ead9ce43a54074ef86ae3892a", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f05baec284760b9450739a5a905b4bc033a2d245", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/6204b822e516cc7bba7d3f001703c094afe62446", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d79018aca6ea1ded7cfb3aa76a1884da1fc9dfbc", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rynowak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/0baa738120084472c5388901fec11ec58ff61c99", "message": "Merge pull request #1551 from aspnet/rynowak/allow-pages\n\nReact to breaking change in MVC"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/de9a35cec68190e7cb8be0dbdf365f7bb3da80cc", "message": "React to breaking change in MVC\n\n/cc @javiercn"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pakrym": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/d612d2034471a04a2372298773fcacaa0b77a44c", "message": "Revert Move identity into an Area in a library (using Razor Pages) (#1537)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/f3ff51f1130d822700a621b5f5b19ef551d9a051", "message": "Update bootstrappers"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkulubya": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1557", "title": "Fix small typo in method docs", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "reaction1989": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1545", "title": "Remove IConfiguration from use development certificate error page", "body": "fixes #1221", "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1544", "title": "make Logger non virtual in UserManager", "body": "Fixes #1441 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "neyromant": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1512", "title": "Additional verifications in IdentityBuilder", "body": "Summary of the changes:\r\n - IdentityBuilder.AddPasswordValidator<TValidator> method was updated: a verification that TValidator implements IPasswordValidator<{UserType}> has been added.\r\n - IdentityBuilder.AddUserStore<TStore> method was updated: a verification that TStore implements IUserStore<{UserType}> has been added.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmerkel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1499", "title": "Password validation failure does not propagate", "body": "If validation fails, but no errors were returned in the Errors collection, add a default so the failure result propagates.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bchavez": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1400", "title": "House Cleaning - Spell check and grammar.", "body": "House Cleaning - Spell check and grammar. :shower:\r\n\r\n:ear_of_rice: :stew: ***[\"Out here in the fields... I fight for my meals... It's only teenage wasteland...\"](https://www.youtube.com/watch?v=IXWNSb4nUDY)***\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DamirAinullin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1399", "title": "Fix for couple of obvious typos", "body": "Fix for couple of obvious typos.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mxa0079": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1377", "title": "Fixes issue #1370", "body": "As described in the issue #1370 -- the method `SignInManager.IsSignedIn(ClaimsPrincipal)` throws when the request has a Windows Identity attached to it.\r\n\r\nThe root cause for this is described in Ph1ll's comment on [this issue](https://github.com/aspnet/IISIntegration/issues/231). \r\n\r\nI believe this proposed solution keeps the expected behavior of the method, while fixing a relevant issue for applications on the enterprise.\r\n\r\nThis issue is blocking adoption of ASP.NET Core as it is preventing the deployment to production of an application in a Fortune 500 pharmaceutical company.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "denis32000": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1087", "title": "Added verification and password reset by phone", "body": "Modified GeneratePasswordResetTokenAsync and ResetPasswordAsync.\r\n\r\nAdded VerifyPhoneResetPasswordTokenAsync.\r\n\r\nAdded GeneratePhoneConfirmationTokenAsync, ConfirmPhoneNumberAsync, VerifyConfirmPhoneNumberTokenAsync for phone confirmation.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RainingNight": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1055", "title": "Add FindByPhoneNumberAsync", "body": "Used to phonenumber login.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "devhammer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1003", "title": "Update UserManager docs for spelling/clarity", "body": "Updated /// comments for several method definitions for spelling/clarity.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Eilon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34011722", "body": "Do you need a project.json for this? Also I'm not sure how to run unit tests in K builds right now... maybe @davidfowl has ideas?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34011722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34382790", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34382790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/36319171", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/36319171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37490089", "body": "Minutes a couple of tpyos, :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37490089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39765314", "body": "General note: Would be good to put a _little_ more info in the commit description (and the PR) description. E.g. why are we removing what we're removing?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39765314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/6656411", "body": "There's a much bigger feature here that we will likely want to support across all of vNext. Can we skip doing this now until we can discuss more broadly? MVC needs this as well, and we don't even have any story at all for how app developers will localize their apps.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656546", "body": "Yeah I'd love to see what we can come up with. I think a programmatic approach seems rather complex relative to the simplicity of the task at hand. Having a more conventional approach based more directly on resources could be both easier to implement as well as easier for users to work with.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6664116", "body": "I can set up a localization LaB and include this as a topic. Shall I?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6664116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6665040", "body": "There's some thinking here that it might all just be one problem with one solution. For example, if by default we used a super simple approach to localization such as PO files, the user could just tweak whatever they want for whatever language they want, including easily adding new languages. We would still no doubt have a \"resource manager\" story for more advanced programmatic scenarios, such as reading strings from a database or other format, but I think this is still all one solution.\n\nI agree we should chat. Will stop by in a bit.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6665040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/9124049", "body": "Might want to look at the consistency of these errors. Sometimes `UserName`, sometimes `User name`; same goes for `Role name`. I recommend the purely English variations, such as `user name` and `role name` because this is an error message to a site visitor, not the developer.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/9124049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/9890461", "body": "Might as well split these out into one top-level class per file.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/9890461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359397", "body": "Should we just have this throw NotImplementedException for now? Otherwise this kind of worries me...\n\nAnd we can log a bug to track implementing it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359493", "body": "@pranavkm you are officially a :trollface: :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360153", "body": "Is there a reason we need to do anything at all? Is there a downside to throwing an exception?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360397", "body": "Can we #ifdef the unit tests? I want to make all our code is always @GrabYourPitchforks -approved (Levi).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10364419", "body": "Ultimately, I defer this kind of thing to @GrabYourPitchforks in terms of whether it's OK to have it checked in. But then ultimately it's up to you if you just don't want to do it at all just yet :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10364419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10458342", "body": "Any reason for these methods to be virtual? How could someone override this with any other implementation?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10458342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10483684", "body": "I see. The very concept of \"uppercase and lowercase\" does not apply to most languages, though. Should there instead be a password complexity verification service, of which we have but one default implementation? And then someone else can just go plug in their own implementation that does whatever they want? I'm not sure these specific virtual methods are very useful on their own because they're already far too culturally-specific.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10483684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10500270", "body": "I chatted with @divega and I think it's fine to leave for now - I'm sure we'll later revisit our extensibility story.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10500270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535583", "body": "This class sounds like a \"Util\" class, which is an anti-pattern (\"junk pile\"). Would a more specific name be something like `IdentityResultAssert` with these methods?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535612", "body": "Style: Would it be easier to read with each attribute on one line?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535673", "body": "This test isn't actually using the `input` parameter :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535724", "body": "A unit test should be testing only one thing. This could probably be structured as a Theory test with flags to control which behaviors are expected.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535774", "body": "The test name should be clearer about what it is testing and what it is expecting to happen. (I think a few other tests could have their names polished a bit too.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535844", "body": "I think we're starting to build up several of these other assertion helpers. I'd love for someone to volunteer to aggregate some of these into a new library that all our tests can use...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10549679", "body": "Tpyo :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10549679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10549686", "body": "File name has a tpyo :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10549686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10683784", "body": "We generally bracket each attribute in its own square brackets so that they are more easily copy-pastable. Might want to do a pass on these to clean up.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10683784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "GrabYourPitchforks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/36965981", "body": "We shouldn't get in the habit of checking in placeholder insecure code.  These unfortunately have a nasty habit of making their way into finished products and causing grief for us and our customers after release.\n\nI have a pending pull request in the DataProtection library that exposes a replacement for RNGCryptoServiceProvider and Rfc2898DeriveBytes.  You can use these APIs if you want.  See https://github.com/aspnet/DataProtection/pull/6 for more information.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/36965981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37072763", "body": "@HaoK looks good - thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37072763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38136301", "body": "ConfigureAwait(false) is a no-op going forward since none of the hosts will have a sync context.  (There's still an open question as to whether the sync context class even exists in K, which would render this whole thing moot.)\n\nI have a separate thread with Eric where we're working on ways to flow culture across await boundaries.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38136301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "bricelam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37244184", "body": ":shipit: Although you may want a second pair of eyes with more Identity knowledge.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37244184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37247389", "body": "@AndriySvyryd lol, seems weird for someone not from the Identity team to be involved. I'll wait for one of them to sign-off too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37247389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10454254", "body": "Could surround with #if NET45 to keep coverage on net45\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10454254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "AndriySvyryd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37247275", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37247275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37719153", "body": ":shipit: Tho it doesn't merge anymore\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37719153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39914752", "body": "@HaoK yes you do (hopefully it won't cause issues). Check out https://github.com/aspnet/Tooling/blob/master/README.md\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39914752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/10177894", "body": "Porque?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/10177894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/10178461", "body": "Let's just fix MVC.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/10178461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/12681587", "body": "Uh wtf?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/12681587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/12681589", "body": "ah\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/12681589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "divega": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37878854", "body": ":shipit: but please squash your commits before you push\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37878854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38127197", "body": "I say :shipit: based on my current understanding and bugs like http://aspnetidentity.codeplex.com/workitem/2060. It would be good to get other eyes into it though, e.g. @GrabYourPitchforks, @AndriySvyryd, @davidfowl and try to arrive to a common way to handle this in K as much as possible. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38127197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39271536", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39271536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39515763", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39515763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39605429", "body": ":shipit:  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39605429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40252979", "body": "Besides the suggestion to add a few TODOs, this looks :shipit: to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40252979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/6654049", "body": "Isn't this more of an exception message that would halt the application rather than a text we display in the page? I think we should only do this for the later, but I see some things in this list that to me look like they are exception messages.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654056", "body": "I would prefer to have a separate virtual method for each error message we want to replace instead of creating a separate enum.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656507", "body": "Hao and I met today and discussed a different approach. I would like him to try that without committing. I think it can be a useful input to that discussion.\n\nSent from my Windows Phone\n\n---\n\nFrom: Eilon Liptonmailto:notifications@github.com\nSent: \u00fd6/\u00fd12/\u00fd2014 18:42\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Initial resource manager changes (92b721f)\n\nThere's a much bigger feature here that we will likely want to support across all of vNext. Can we skip doing this now until we can discuss more broadly? MVC needs this as well, and we don't even have any story at all for how app developers will localize their apps.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/commit/92b721fab6ecca2995bee0bfaaddbd636f5eb1a9#commitcomment-6656411.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656562", "body": "I am not sure what we are cooking is what you have in mind, but I don't I understand what you you have in mind :)\n\nSent from my Windows Phone\n\n---\n\nFrom: Eilon Liptonmailto:notifications@github.com\nSent: \u00fd6/\u00fd12/\u00fd2014 19:04\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Initial resource manager changes (92b721f)\n\nYeah I'd love to see what we can come up with. I think a programmatic approach seems rather complex relative to the simplicity of the task at hand. Having a more conventional approach based more directly on resources could be both easier to implement as well as easier for users to work with.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/commit/92b721fab6ecca2995bee0bfaaddbd636f5eb1a9#commitcomment-6656546.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6664389", "body": "This is where I am not sure we are talking about the same thing... The main problem we need to address for Identity is not localization of all our resources but customization of the messages shown in the UI. Not saying that the localization problem doesn't exist or that there can't be an overlap in the solution but if we optimize for simple customization of UI messages for a framework such as Identity we can define the problem very well, and most likely a programmatic solution aligns better with everything we are doing regarding extensibility and services/DI.\n\nAt this point I think it would be better to chat to decide whether we need a meeting.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6664389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/8092501", "body": "@SonjaKhan this is where I mentioned we added EF's NullLoggerFactory to Identity tests. We should fix when the class get's moved to Logging.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8092501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/8203822", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8203822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10500442", "body": "It would be good to leave something we can track about this, e.g. a TODO comment.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10500442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10779729", "body": "Nit: some of the non-essential changes in this PR make it hard to review. Next time please consider splitting :smile:   \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10779729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11181809", "body": "We should be aware that having this on a method of an interface will have limited effects, e.g.: \n- For someone consuming the an instance typed as the interface, it will look like an optional parameter. \n- Also, when we ask the IDE to implement the interface it will conveniently copy the default value into our method\n- However, this does not force an implementation of the interface to have the parameter as optional nor to have the same default value\n\nGive that, if this interface is not generally consumed or implemented by user code directly it could possibly be simpler to just leave the cancellation token as non-optional.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11181809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11181892", "body": "On the other hand, if the interface is commonly implemented or consumed by user code I have no reservations on leaving it as is. In either case I don't feel very strongly about it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11181892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182185", "body": "Is there a compelling reason not to add cancellationToken.ThrowIfCancellationRequested() at the top of these methods? It would give you an excuse to write new tests :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "dougbu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38869217", "body": ":ship: it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38869217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "anpete": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/5300881", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/5300881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ajcvickers": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/6664427", "body": "+1 to what @divega said.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6664427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "SonjaKhan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/8100162", "body": "@divega thanks for pointing this out!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8100162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "victorhurdugaci": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/8547811", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8547811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/8722042", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8722042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "idrayv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/8675720", "body": "Did it worked in the past? \u043e_0\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8675720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "giggio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/8941959", "body": "This is confusing. I was getting an ArgumentNullException on the `optionAccessor`, and could not understand why, as it was not null. I had to read the source to understand what was going on.\nPlease don't throw an ArgumentNullException if the problem is that a property in the argument is null, not the argument itself, throw something else, maybe an ArgumentException.\nThis anti-pattern is happening in several places in this class (maybe in this project).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8941959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "MisterFantastic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/9803318", "body": "Was there any code changes related to these namespace additions ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/9803318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}