{"_default": {"1": {"Eilon": {"issues": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/313", "title": "THIS ISSUE TRACKER IS CLOSED - use the Home repo issue tracker", "body": "Hello, this issue tracker is no longer used. Please log new issues here: https://github.com/aspnet/Home/issues\r\n\r\nFor information about this change, see https://github.com/aspnet/Announcements/issues/283\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/FileSystem/commits/38d6c55300fb1d48cf93432d559879725af19d00", "message": "Create ISSUE_TEMPLATE.md"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37144965", "body": "Good point. But I'm not sure that it needs to be web specific, assuming we will use this interface in console apps and so forth. For a brief moment I was thinking IAppFileSystem (or similar) but I'm not sure it's true that this can read _only_ files from within the app's root...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37144965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37146670", "body": "I'm predicting that very little (if any) of our code will use System.IO directly for actual IO (as opposed to merely calling `Path.GetExtension`, etc.) because we'll want to unit test our code, and customers will too. As such, I suspect that reading _and_ writing will be important because we'll probably end up with something like today's Web API's MIME multipart reader that can optionally write to disk. And you could imagine a disk-based caching implementation. These might be _different_ `I***FileSystem` interfaces, though...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37146670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37153381", "body": "I remember once hearing of such a system that has many of these abstractions... something about not seeing the forest for the trees... a grove, perhaps? :smile: \n\nYes, if this interface is meant to be very specific, I can understand that, but then does it belong in the very general FileSystem assembly?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37153381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/52511826", "body": "This is an MVC bug, nothing to do with physical path handling.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/52511826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/56318358", "body": "Scenario? I want to make sure we design it right for whatever is needed. I assume something to do with pre-compilation, but more details would be good.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/56318358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/comments/6306888", "body": "Hi @SLaks these interfaces are probably one of the earliest prototypes in the codebase, so they are not yet fleshed out. The interfaces are very limited right now, as you can probably tell. Would you like to file a bug to start a discussion on this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/6306888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/8801597", "body": "Exception tests need to verify the message of the exception to ensure that the correct exception was thrown. If you change this to use string resources then you can assert against the string resource (instead of hard-coding the strings).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/8801597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/8802824", "body": "The code _today_ might not have any other code in it, but part of the point of unit tests is to prevent regressions.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/8802824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/FileSystem/commits/642f88383c8ade6aaccf655ef3363feb126b90e1", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/c67de8ff4eaf063e798ea276f8cdc83394599a05", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/7af495a453d990b39f2cdd33510b942435955c70", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/a4e2a667ce620b60cc5ba311a2a679a4a504d14b", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/77adc4c94f4f38ebed055e6b7eb8ab029cd8e0c9", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/7e6e3453fdc7b7baf4063e20129fee08f7dcd155", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/FileSystem/commits/f2d4883db499ec642390b4e17adb7f2ec069d65f", "message": "Clean up NPV.json and update deps"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/c04796fbe9ae22c08e5fe2898c9e58d7bfd5aeb8", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/2341bfa42515c9e7335657dfda39a490616a7244", "message": "Add RepositoryRoot"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/84425dfe11e60dc13a0609bbf9acda16eb7073fc", "message": "Update bootstrappers"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "javiercn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/FileSystem/commits/0d1ca6f660c33a22d8c3c4ddd7ec9383f3dbc065", "message": "Fix broken tests"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/a91742e8b9bb73e537c445cdea6dd61199bb3891", "message": "Fix manifest generation issues and fix default manifest name constant value"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/af6fa5abe701e62d6f3ef5e6ff336c5da293e5a8", "message": "Adds ManifestEmbeddedFileProvider\n* Adds an embedded file provider that uses a manifest to reconstruct the\n  original structure of the file system at the time the files were\n  embedded.\n* The file system is case-insensitive.\n* Manifests containing files with different casing are not supported.\n* The operating system path separators are used, for cross-platform code\n  the recommended path separator to use is '/'"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/2d01f63b9ab6962132fe936f6f74ce78893d6e03", "message": "Fixes to the Embedded file provider MSBuild task"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/d5998f1306ae529e125e951eefda4d5060ae6463", "message": "Add an MSBuild Task for creating a manifest from embedded files:\n* Generates an XML manifest respecting the original structure of the\n  file system at the time the files were embedded in the assembly.\n* `<GenerateEmbeddedFilesManifest>true</GenerateEmbeddedFilesManifest>`\n  enables the feature.\n* Supports changing the manifest name with the EmbeddedFilesManifestFileName\n  property.\n* Supports excluding specific files from the manifest using the attribute\n  ExcludeFromManifest=true on the EmbeddedResource item.\n* Supports changing the path to the file using the LogicalName property\n  on the embedded resource."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/FileSystem/commits/f43b1752543786ee0ca7b7ab69aad7e24793f8ae", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/9ac5925f780b0ccf2093127d32fdeb644d771f6d", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/34590f1172e4187c179989f545f04d278b4c9020", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/d3c4e7978ef19d91ae99fb82f9183692711f5c0c", "message": "Target netcoreapp2.1 in tests and samples"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/52360820", "body": "To expand on this, it would be useful to have more interesting features on `IFileSystem` that match what we had with `VirtualFile` \\ `VirtualPathUtility` gives us. Specifically, it would help to be able to\n1. Generate root-relative paths\n2. Convert absolute paths to root-relative paths\n3. Determine if a path is a subdirectory to the app-root.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/52360820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/52951551", "body": "This should be resolved via changes to #12.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/52951551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/53066334", "body": "It wasn't. For *nix, some of the test data would (such as this - https://github.com/aspnet/FileSystem/pull/13/files#diff-2704e087354ec0adca0e1db93c424eddR83) would need  to be modified to adapt to the behavior of GetFullPath\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/53066334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/53341101", "body": "@davidfowl updated and verified this works on *nix\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/53341101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/55200242", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/55200242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/comments/16645482", "body": "See https://github.com/aspnet/FileSystem/pull/169#discussion_r55793374\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/16645482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061659", "body": "Moved to a sources project.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061662", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/9525805", "body": "This is to try out our CI dependencies. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/9525805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/16609532", "body": "Probably. Presumably we should base this on the OS (`Environment.OSVersion`)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/16609532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/16610268", "body": "Tracking separately via https://github.com/aspnet/FileSystem/issues/16\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/16610268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17691082", "body": "Would it make sense to make it symmetric to `CreateReadStream` so that it returns a writeable stream? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17691082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17695726", "body": "While we're refactoring these, could you also make these types public? There's not much of a reason for them to be private inner types, is there?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17695726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17695904", "body": "AFAIK, the suggestion was to pass in app relative paths. This way, the semantics of this method remains the same. That said, we should probably put a check for `Path.IsRooted` here to verify you don't pass in an absolute path.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17695904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891239", "body": "Does this need a `#if ASPNET50 || ASPNETCORE50`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891261", "body": "System namespaces go first.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891346", "body": "Sort usings.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891389", "body": "Remove this. You'll get this transitively.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891397", "body": "Remove this. You'll get this transitively.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891405", "body": "Do you need this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "natemcmaster": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/FileSystem/commits/7a28a76f209dbf5799b31f22f49c6c791c9183f8", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/51e14a624c5f32bd2df62adf06dbe558574b4b11", "message": "Pin tool and package versions to make builds more repeatable\n\nPart of aspnet/Universe#575"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/f31fee6a12a974bd3dded3f8219a36e3af04a1ef", "message": "Use PackageLineup to manage PackageReference versions"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/cb0527b33185ca9e4ae05704dd9b83a4d16c2501", "message": "Upgrade to xunit 2.3.0-beta4"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/4469deec5530812def4043c4705acd1e8890a193", "message": "Use Directory.Build.props/targets"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/e469b8f244e38c346ab6a64f363df4d638cf5cee", "message": "Shorten folder names (#289)"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/314", "title": "Handle flaky OnRenamed events more gracefully", "body": "In some conditions, System.IO.FileSystemWatcher will raise OnRenamed without the new file name. This causes an ArgumentException when attempting to determine if this file change should trigger a change token.\r\n\r\nResolves https://github.com/aspnet/Home/issues/2536\r\n\r\ncc @dpoole73", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/comments/22666337", "body": "\ud83d\ude06 ", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/22666337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "grahamehorner": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/FileSystem/commits/bd96038a174eb960b2fdd3f160636aa09b1f98af", "message": "Update EmbeddedFileProvider.cs\n\nUpdate of constructor comment to avoid confusions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotalik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/FileSystem/commits/8a5bec1ea068eb12c61fcc282c061fcf78c6d4f4", "message": "Increase Minimum Version of Visual Studio to 15.3.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JunTaoLuo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/FileSystem/commits/185877fd12b0ce189e47a039ae1281d4b44fc2bf", "message": "Ensure fallback to curl after failed wget"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/commits/8380b4a8b326bbb42894b36cc7748aa2b59e05b2", "message": "Update __get_remote_file logic"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yp87": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/305", "title": "Fix crash when OnFileSystemEntryChange is called with root path", "body": "It is possible for `OnFileSystemEntryChange` to be called with root path. In that case, `ReportChangeForMatchedEntries` would be called with an empty string leading to a crash.\r\n\r\nAddresses #299\r\n  \r\n  ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nguerrera": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/35361132", "body": "Note that GetCallingAssembly is not coming back. It's slow and causes hassle for the JIT. You should pass an explicit assembly, but I left it there for now as I'm unsure what callers are out there. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/35361132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/35437617", "body": "Great. Can one of you remove it? In general, I'm going to send these pull requests for things I spot, but would rather let you as owners of the code make the final tweaks unless there's something really objectionable in my changes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/35437617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/35363851", "body": "@nguerrera we can nuke it. It's a poor assumption anyways.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/35363851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37146561", "body": "Thing is, it's readonly and it's only used for a small subset of scenarios. There's still regular System.IO for the bulk of other stuff. Also I'm not sure which part of the system is going to be creating these? Is it the web host or is it the klr host?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37146561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/46821531", "body": "It only exists in core clr it's not on the full .NET framework\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/46821531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/53021588", "body": "Was this tested on mono?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/53021588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/55471025", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/55471025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/56325586", "body": "Unrelated by related question: Should the view engine be able to enumerate view locations so the precompiler doesn't need to bake that logic in?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/56325586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/comments/9454795", "body": "always use named parameters when you pass null, true/false or numbers (see the coding guidelines :smile: )\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/9454795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/14879143", "body": "What? Add comments please.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/14879143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061646", "body": "Our env variables are `ASPNETCORE_*`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061647", "body": "why\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061648", "body": "wuat\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061652", "body": "Should look like System.Runtime.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/17061652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/18459682", "body": "for nuget?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/18459682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17488986", "body": "Can we nuke this entire function and dictate absolute paths instead? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17488986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17489581", "body": "Path.GetFullPath is relative to what though? Doesn't it assume current directory?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17489581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17490016", "body": "Ok how about we add a check for rooted paths? This way we can make sure it won't mess up the relative path resolution.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17490016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17913144", "body": "singleton?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17913144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "lodejard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/35367059", "body": "Yep!\n\n---\n\nFrom: David Fowlermailto:notifications@github.com\nSent: \u00fd2/\u00fd18/\u00fd2014 12:54 AM\nTo: aspnet/FileSystemmailto:FileSystem@noreply.github.com\nSubject: Re: [FileSystem] Reduce scope of #if NET45 to just the methods that need it. (#3)\n\n@nguerrerahttps://github.com/nguerrera we can nuke it. It's a poor assumption anyways.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/FileSystem/pull/3#issuecomment-35363851.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/35367059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "loudej": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37152913", "body": "It sounds like what you're describing is a general-purpose interface between any code and file IO. I agree that's good, and we'll want one for IClock also. But this particular interface has a more specific purpose that isn't clear from the name, so we should call it something more specific and establish a different IFileSystem for abstracting file io.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37152913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37153612", "body": "Nope, probably not, the assembly and interface would likely change together.\n\nWhich brings up the next question - where to keep interfaces that are for reaching platform features like file system, clock, maybe network, and maybe process? Anything else that should be shimmed for testability? Environment variables? Command line?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/37153612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "davkean": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/43397679", "body": "The current name of this is very problematic. It's feature set isn't even close to a full-feature file system API and because it's interface based, unless you get it correct now, you can't add to it without breaking changes. I would either consider working with the .NET Framework team that owns IO (ie my team) if you would like an abstraction here (we have considered it for other reasons) or rename it to something completely different to make it clear that this is not a framework feature.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/43397679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ajcvickers": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/46596034", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/46596034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "moonpeng": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/46812399", "body": "what's the ApplicationContext's namespace? I con't find it with framework 4.0.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/46812399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Tratcher": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/52955563", "body": "Add relevant tests showing how to traverse both up and down a directory structure without relying on the IFileInfo.PhysicalPath property or doing any manual path manipulation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/52955563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/53342552", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/53342552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/55439497", "body": "Updated.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/55439497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/55959242", "body": "What feature are you working on that depends on these changes?\n\nHave you tried updating up StaticFiles yet? I suspect the TryGet APIs were easier to use there than the new version.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/55959242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/16609383", "body": "Linux paths are case sensitive, no? Should we be accounting for that here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/16609383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17489426", "body": "GetFullPath is still called for normalization (slash direction, resolve ..\\ segments, etc.). Later we do a path.StartsWith(Root...) so the format needs to be precise.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17489426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17489847", "body": "True. We can't choose which normalizations it does for us, and trying to filter out different kinds of relative paths before calling it is error prone.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17489847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17692226", "body": "Typo: \"Returns ____ if file does not exist.\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17692226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17692748", "body": "Why not delete the directory?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17692748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17692857", "body": "Inconsistent naming, `MissingResourceFileInfo` vs `NotFoundDirectoryContents`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17692857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17692903", "body": "`RestrictedFileInfo` duplicates `MissingResourceFileInfo`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17692903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17693077", "body": "Razor (or MVC) was using this. What's the plan here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17693077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17693238", "body": "\" Folders will be created if needed. \"?\nCopy-paste error?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17693238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17693246", "body": "\"Delete\"?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17693246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17694142", "body": "Does this update FileInfo.Exists?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17694142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17694461", "body": "Do we need an IsReadOnly property?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/17694461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "yishaigalatzer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/56323149", "body": "Scenario - I want to traverse a tree of folders, the API is available in System.IO and it avoids writing recursive code unnecessarily.\n\nExample:\nPrecompilation - Find all the .cshtml files in a site.\n\nBut really any time you want to traverse a folder structure you are forced to write boiler plate and potential buggy code.\n\nEnumeration + Traversal allows for writing linq select/where clauses.\n\nSo this makes two issues simple:\n1. You can directly write linq statements over the result without using an ugly `out` parameter\n2. No need to write potentially buggy boiler plate traversal code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/56323149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/56327781", "body": "My current plan is for precompiler to live side by side with the view engine in `Microsoft.AspNet.Mvc.Razor`, but since the view engine is dynamic and the precompiler is not, I plan to precompile all the available .cshtml files and make them available to the view engine's compiler cache to pickup at startup. \n\nThis way there might be a bit more compilation that the view engine can actually reach (but that's just the same as dead code in normal C# files). And if the view engine is customized with expanders, the precompiler keeps working.\n\nAs a secondary enhancement it will be possible to provide the precompiler with a a collection of folders to enumerate through, to limit what is dynamic or precomiled (but I think it's a premature discussion). I also think we could provide a call back to remap file paths, such that views can be provided by multiple class library projects.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/issues/comments/56327781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "SLaks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/comments/6306854", "body": "Why aren't these async?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/6306854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "victorhurdugaci": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/comments/8547804", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/8547804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/8721921", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/8721921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Praburaj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/comments/8801987", "body": "Verifying exception messages did not look more interesting in this specific test as there is no piece of code in these methods/properties which could throw InvalidOperationException. I also fixed the exception messages to use nameof(..) for both type name and method/property name as suggested by Pranav. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/8801987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/9265037", "body": "Ah.. Looks like I pushed a wrong set of changes to the repo which is still in code review. I'm going to revert the last 3 commits. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/9265037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/9265256", "body": "@Tratcher signed off on this PR (https://github.com/aspnet/FileSystem/pull/31#issuecomment-69795621). So I'm not reverting this change now. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/9265256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891423", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891482", "body": "The package is not building for net45 any more (only aspnet50 and aspnetcore50). So this change is not required. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/pulls/comments/20891482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "MartinJohns": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/comments/16637689", "body": "Why are you moving from the fields to the literals?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/16637689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "BrennanConroy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/comments/18459765", "body": "Yeah https://github.com/aspnet/FileSystem/issues/212\n", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/18459765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dazinator": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/FileSystem/comments/22666312", "body": "Ah \"Pubternal\".. i'll have to remeber that :-)\nPubternal definately sounds better than internublic. ", "reactions": {"url": "https://api.github.com/repos/aspnet/FileSystem/comments/22666312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}}}}