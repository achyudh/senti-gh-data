{"_default": {"1": {"dylanede": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/266", "title": "How are projections meant to be handled?", "body": "I'm trying to see how to take a given map (with styling), \"render\" it to a vector tile, then load that vector tile in as a data source and render an image. This last step requires that the data sources of the map style are edited to point to the vector tile layer data sources. I have this mostly working - I get a rendered image, but the projection is wrong. It looks like I must alter the projections in the layers as well.\r\n\r\nAs an example, I have an original map that renders like so, with a **longlat** projection:\r\n\r\n![image](https://user-images.githubusercontent.com/10339269/34569341-650ffd2a-f160-11e7-9a2e-6bf28eb2471d.png)\r\n\r\nAfter writing it to a vector tile (using `create_tile`, passing in the extent of the map) and loading it back in then correcting the map layers to point to the vector tile data sources, I get this output:\r\n\r\n![image](https://user-images.githubusercontent.com/10339269/34569392-8a99f4f6-f160-11e7-8178-c31320be57e8.png)\r\n\r\nIt appears that as well as being projected wrong (despite still specifying **longlat**), the geometry is getting clipped - the southern tip of the Faroe islands is now not visible at all, and less of France is visible.\r\n\r\nI suspect that the problem is due to me using\r\n\r\n```c++\r\nstd::make_shared<tile_datasource_pbf>(layer, 0, 0, 0)\r\n```\r\n\r\nto create the data sources, since it appears that the `x`, `y` and `z` parameters are specific to web mercator tiling.\r\n\r\nWhat do I need to do to get this to render correctly in longlat, with tiles also generated in longlat? I would like to retain the ability to specify tile extents explicitly in whatever projection I choose. Would this require a custom data source implementation?\r\n\r\nAlso, what coordinate system are the vector tiles stored in? Is it the same as the input map?\r\n\r\nThanks in advance.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lihuadong1988": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/265", "title": "mapnik-vector-tile is very slow when data is too big?", "body": "", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "remster": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/261", "title": "build error (box2d.hpp changed location)", "body": "with the basic flow: clone + make\r\n```\r\nIn file included from ../src/vector_tile_raster_clipper.cpp:1:0:\r\n../src/vector_tile_raster_clipper.hpp:8:10: fatal error: mapnik/geometry/box2d.hpp: No such file or directory\r\n #include <mapnik/geometry/box2d.hpp>\r\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\nwhen i fix the location of box2d.hpp this is immediately followed with:\r\n```\r\nIn file included from ../src/vector_tile_processor.ipp:6:0,\r\n                 from ../src/vector_tile_processor.cpp:2:\r\n../src/vector_tile_strategy.hpp: In member function \u2018void mapnik::vector_tile_impl::transform_visitor<TransformType, NextProcessor>::operator()(const mapnik::geometry::polygon<double, mapnik::geometry::rings_container>&)\u2019:\r\n../src/vector_tile_strategy.hpp:217:33: error: there are no arguments to \u2018begin\u2019 that depend on a template parameter, so a declaration of \u2018begin\u2019 must be available [-fpermissive]\r\n         for (auto const& ring : geom)\r\n\r\n```\r\nWhat seem to be able to see is a version mismatch, the polygon in my mason_packages/.link/include/mapnik/geometry.hpp:\r\n```\r\ntemplate <typename T, template <typename> class InteriorRings = rings_container>\r\nstruct polygon\r\n{\r\n    using coord_type = T;\r\n    using rings_container = InteriorRings<T>;\r\n    linear_ring<T> exterior_ring;\r\n    rings_container interior_rings;\r\n\r\n    inline void set_exterior_ring(linear_ring<T> && ring)\r\n    {\r\n        exterior_ring = std::move(ring);\r\n    }\r\n\r\n    inline void add_hole(linear_ring<T> && ring)\r\n    {\r\n        interior_rings.emplace_back(std::move(ring));\r\n    }\r\n\r\n    inline bool empty() const { return exterior_ring.empty(); }\r\n\r\n    inline std::size_t num_rings() const\r\n    {\r\n        return 1 + interior_rings.size();\r\n    }\r\n};\r\n```\r\nIs not iterable, whilst on mapnik master it [migrated to mapbox geometry](https://github.com/mapnik/mapnik/blob/master/include/mapnik/geometry/polygon.hpp#L35).\r\nIs this a known issue?", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/261/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "haoziluo": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/260", "title": "0.6.x polygon clip error", "body": "when clip polygon geometry to vt is error with boundary, I convert vt to geojson, like this:\r\n![2017-11-28 16 00 45](https://user-images.githubusercontent.com/2647388/33308478-90b1193c-d455-11e7-883c-eb5015114f75.png)\r\nbut clip polyline geometry is ok.\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rinigus": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/258", "title": "vector tiles from sqlite datasource - getting rid of rowid", "body": "I am generating vector tiles using tilelive copy (from bridge to mbtiles). Data is served from SQLite database(s) that were generated from OSM data (ogr2ogr) and preprocessed to arrange for simplifying import. While tiles seem to be fine, all layers have an additional `rowid` key that seem just to waste space in the tile. I wonder whether I am missing some parameter in Mapnik XML to disable rowid propagation into the generated tile. \r\n\r\nUsed Mapnik XML:\r\n\r\n```\r\n<?xml version='1.0' encoding='utf-8'?>\r\n    <!DOCTYPE Map>\r\n    <Map srs=\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over\">\r\n  <Parameters>\r\n    <Parameter name=\"attribution\">Data (c) OpenStreetMap (and) contributors, ODbL</Parameter>\r\n    <Parameter name=\"bounds\">-180,-85.0511,180,85.0511</Parameter>\r\n    <Parameter name=\"center\">0,20,4</Parameter>\r\n    <Parameter name=\"format\">pbf</Parameter>\r\n    <Parameter name=\"maxzoom\">20</Parameter>\r\n    <Parameter name=\"minzoom\">0</Parameter>\r\n  </Parameters>\r\n  <Layer name=\"landcover\" srs=\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over\">\r\n    <Datasource>\r\n      <Parameter name=\"file\">data/europe-estonia.sqlite</Parameter>\r\n      <Parameter name=\"key_field\">rowid</Parameter>\r\n      <Parameter name=\"table\">(SELECT rowid, geometry, class, subclass FROM\r\nosm_landcovers\r\nORDER BY area DESC\r\n) AS data</Parameter>\r\n      <Parameter name=\"type\">sqlite</Parameter>\r\n      <Parameter name=\"use_spatial_index\">true</Parameter>\r\n    </Datasource>\r\n  </Layer>\r\n</Map>\r\n```\r\n\r\n`tileinfo --verbose example.pbf`:\r\n\r\n```\r\nmessage: gzip compressed\r\nlayer: landcover\r\n  version: 2\r\n  extent: 4096\r\n  keys: class,rowid,subclass\r\n  values: grass,1547,park,441,meadow,wood,28343,forest,2428,28567,26360,28322,483,28319,28873,29816,rock,29068,bare_rock,28327,2426,29702,31058,39964,28803,28815,28309,38198,28872,32711,28310,28870,28337,28308,28311,wetland,28554,28345,32993,32989,29386,29375,980,35723,29704,39536,32983,32984,29376,33629,34250,32987,35716,32244,28871,33681,28335,35728,28778,34251,35720,32991,28338,38463,35721,33641,35730,32985,29418,33647,31800,29661,32986,33648,38462,32243,32990,28606,35731,34252,33244,35733,29383,38469,35734,33676,29531,30333,32992,29379,33680,33624,35724,32601,33622,33241,32995,35713,29378,28804,652,33653,29663,29377,35710,29381,28816,33626,35744,28809,28607,33628,28802,29385,33247,32996,38461,35747,28321,30334,33242,35676,34248,33643,34249,32994,38495,33673,34088,35675,30335,33649,33636,650,38497,28814,38775,35748,38776,33665,33243,33677,33620,33679,35749,38498,35735,29382,33246,33618,35630,35718,35714,651,33675,33664,33682,35729,38471,32519,33668,33672,38489,35742,1081,33625,33655,1250,38481,33619,33634,29380,38492,38491,38482,28320,30022,33645,35743,33238,38487,28808,33237,38484,33621,33632,32988,1249,38488,33667,33251,33674,32804,33638,33631,33630,29384,33644,38483,33654,32997,33663,38485,33627,33652,35711,35741,36858,38486,38494,33635,32520,29374,38774,38467,33248,33670,33666,33646,38464,38496,35726,35739,38470,33669,29533,33240,33678,35715,33671,35746,38773,33633,35712,35745,33236,33623,38772,32998,38465,31059,31060,33252,33245,38480,38479,38477,38490,38475,38466,38478,33637,33259,38472,33639,38473,33258,35727,38474,35719,35740,33239,38493,38468,30336,33642,35750,33254,33253,33250,33249,33257,33640,35717,33255,35722,35725,33256\r\n  feature: 1547\r\n    type: Polygon\r\n    tags: 0,0,0,0,0,0\r\n    geometries: 9,3981,1432,354,267,640,136,5,88,17,184,41,238,73,486,205,13,93,332,39,64,100,182,368,279,186,564,612,650,662,465,512,67,250,1233,934,429,170,67,46,169,148,97,128,1019,123,405,91,2075,727,415,133,17,25,20,135,78,26,166,501,92,161,252,199,144,67,56,57,414,235,50,41,694,419,275,447,59,21,43,79,288,175,272,123,256,73,572,129,414,111,242,85,15\r\n  feature: 441\r\n    type: Polygon\r\n    tags: 0,0,0,0,0,0\r\n    geometries: 9,5720,5941,546,124,6,132,34,176,62,144,96,46,54,302,73,154,10,76,40,168,158,8,136,114,50,122,15,34,57,94,33,44,46,210,99,126,31,136,75,154,53,266,17,144,45,224,37,88,36,180,22,168,7,140,19,34,109,486,48,138,24,522,160,1,220,661,165,293,2206,123,182,149,104,1733,728,55,175,295,104,66,180,857,360,127,5,37,26,35,66,1463,654,153,86,51,47,112,171,184,99,154,119,101,165,214,511,273,181,164,4,202,34,138,163,112,195,70,143,13,103,50,53,20,61,110,58,726,1155,173,473,507,433,141,193,147,111,31,223,150,319,15,9,742,2274,226,95,58,133,130,28,110,74,50,53,86,11,68,104,102,144,52,84,16,120,43,82,52,104,44,4,56,59,60,27,102,76,98,124,10,50,75,17,93,73,67,19,89,0,99,369,105,179,151,58,67,5,113,36,73,38,43,15,9,2664,703,154,137,8,97,42,65,56,43,104,68,52,74,80,20,74,116,15,76,6,58,72,108,44,98,58,26,77,41,83,71,95,119,39,89,13,1,95,32,91,15\r\n  feature: 28343\r\n...\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "springmeyer": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/255", "title": "Integrate mvt-fixtures@3.0.0", "body": "Once the upcoming release of mvt-fixtures is out, we should upgrade mapnik-vector-tile to use them.", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/206", "title": "Use `box2d<value_type>` in `decode_geometry`", "body": "The bbox used in decode_geometry is currently hardcoded to `double`. It should be using the `value_type` for best performance: https://github.com/mapbox/mapnik-vector-tile/blob/69d0d8e9df0c27521f685d730a8fd10a190d8dbb/src/vector_tile_geometry_decoder.ipp#L775-L784\n\nWaiting on https://github.com/mapnik/mapnik/issues/3405\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/205", "title": "Visual comparisons instead of geojson text comparisons", "body": "We need to add support for visual comparisons of changes in geometry outputs. Minor changes in floating point differences currently trigger the need for massive updates to the test fixtures like https://github.com/mapnik/geometry-test-data/commit/65abcf0600d25aefebfe77c62261d4c1d7ac4d31 which is dangerous because:\n- The diff is way to big for github to show\n- Meaningful changes can too easily go unnoticed.\n\nA visual approach (rendered png) would make it viable to review all the changes efficiently rather than just hope for the best.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/201", "title": "Add 'upgrade=bool' option to composite", "body": "To force upgrading v1->v2 tiles in the composite function you can currently pass `reencode:true`. However, that will trigger all tiles to be re-encoded, at all zoom levels, including v2 tiles. Ideally one could pass `upgrade:true` to the code and have only v1 tiles re-reencoded. Any v2 tiles would be appended with `append_layer_buffer` for best performance.\n\nThis is important now that we anticipate wanting to/having to handle mixed v1 and v2 at the same time.\n\n/cc @flippmoke @jakepruitt @yhahn \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/200", "title": "vtile-fuzz should generate testcase for re-running", "body": "", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/192", "title": "Test coverage for src/vector_tile_load_tile.hpp", "body": "We have 0% test coverage for https://coveralls.io/builds/5659740/source?filename=src%2Fvector_tile_load_tile.hpp. This is a pretty important file (heavy usage via node-mapnik) so we should prioritize adding some tests of it.\n\nNote: coveralls has an epic bug (or is it the way we generate coverage data?) whereby 0% shows as 100%. So not funny it's almost funny.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/159", "title": "Start running tests on appveyor", "body": "Currently mapnik-vector-tile is only tested via node-mapnik on windows and therefore we only test the code in `src/`. But we should ideally start testing per commit on appveyor.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/126", "title": "Avoid clipping overhead when geometry is fully within clipping box", "body": "This is an obvious optimization, but was not possible before the new mapnik::geometry structure. Now it should be easy to check the bbox of a geometry (or even a single part of a multigeometry) and skip running it through clipping when not needed.\n\nThis should help performance significantly when rendering dense data at low zoom levels (when the majority of the features are not getting clipped even when run through the clipping pathway).\n\nSteps toward this:\n- [ ] write a benchmark harness\n- [ ] add some sample data that represents cases that would benefit from this optimization and sample data that would not (like clipping large polygons that span the whole earth no matter the zoom level)\n- [ ] optimize appropriately for each geometry type\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3eabc257748fe1bcf1a434bc47f06576b166a69d", "message": "Merge pull request #256 from mapycz/add-inline\n\nadd inline attribute to functions implemented in header file"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/259ff557f1757c4bd6ecc7350bcd278514bbdfa7", "message": "bump to v1.5.0"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/02494691fa7b1ba788d992a61aa90f72d4a36d7b", "message": "stop comparing geojson strings, only Approx geometries - refs #205"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3a5e1120b438a3ff3136c880642d7ec6127e011e", "message": "fix timing of pre_build_check"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e0756d5744b3949a4530e528bfecc1a27529ede5", "message": "more all mason specific logic into Makefile wrapper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f73e2049d2954d0c19b45e4dfb8395f4fcf893d1", "message": "fix coverage build"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a72d82322744540f08d623fb66d06cc826a06323", "message": "Merge pull request #248 from CartoDB/pass-query-variables\n\nPass variables to replace tokens in query"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/06ee39f9f74eff6dab5d8b4eba0252049fdd9aab", "message": "Merge pull request #253 from mapbox/fix-external-build\n\nadd back ability to build against external mapnik - refs #227"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3d6ea56b242fb528b7d7c45874773ff57bad0b9f", "message": "Actually fix coverage buildg"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/09a6366e205e224847b14fd362d35a5679d35176", "message": "fix coverage build"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8828c73de838835379544fb7de31107261ddcf68", "message": "more build fixes"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/eb2c3e8f19a14888fbae9e6d85461f7aa6ee0d84", "message": "fixup build logic"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/4b4aa608a38b90aa4661c7d213ad67305e506a39", "message": "fix mapnik install logic via mason"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e6773b9ef6be86e8a9147f738d5cb3a5befc2193", "message": "fix mason version"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/708b54e15a9de256f55e2db67f1601bda5b9d2ef", "message": "upgrade deps, fix build"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/7eed5321d9c016029c985751dc8605062a76376e", "message": "fix undefined varg"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/75dee8f21e4a0adbf1ea6ba835a537ab640a65e2", "message": "add back ability to build against external mapnik - refs #227"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a0f66c8496f9009e62af3917ffe222d9bc73a70a", "message": "Merge pull request #252 from mapbox/fix-build\n\nFix build"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/7c11aa5f01567539033395fad2548a43b7e08fba", "message": "fix another undefined variable"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/1992b88a638078c5b6060a27fed56c87fe763b4e", "message": "no longer need bootstap called independently"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f3b552dc6eb0c289eaaed6852f7454dc9e0e4f4d", "message": "add test runner"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/d4cc513cdda3028c8c9d7fe8a1e8dd2bc6f0f251", "message": "ensure protoc is on PATH for build"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8966bc5ccae2e2f0e6181532df855887d5d95169", "message": "fix unbound variables"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/907846dbef12de55c71a132e917ef191dd23188d", "message": "Merge pull request #251 from mapbox/tileinfo-display-unset-id\n\nTileinfo: disable feature id as unset, when it is"}], "pull_requests": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/213", "title": "Stop allowing and tracking empty layers", "body": "/cc @flippmoke to merge if this looks good.\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17813212", "body": "ah, thanks for catching the typo. It should be `3857`, aka 900913, `3785`, while often equivalent (it is in latest proj4 files), is actually the deprecated/ first try of the epsg to describe the projection. `3857` is what I meant to type.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17813212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17890525", "body": "awesome, thanks for the suggestion.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17890525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/18691619", "body": "There are not yet python bindings. Tracking this at #9\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/18691619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20696511", "body": "will look into this, thanks.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20696511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20715599", "body": "Regarding the immediate problem: Mapnik should not be built with an external agg anymore as we've started relying upon critical changes to the bundled agg (as of Mapnik v2.1). Are you building against an external agg or is the Mapnik fedora package somehow packaging Mapnik's AGG?\n\nOverall your change looks reasonable, to avoid issues with differently named `libicuuc` or `libboost-system`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20715599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20716096", "body": "working on this in a branch: https://github.com/mapbox/mapnik-vector-tile/compare/cull-layers\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20716096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20778431", "body": "okay, thanks good to know.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20778431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21078305", "body": "implemented basic bbox filtering in v0.2.0 / 86de9909169ac43a01194b605244f2ede86ad63e. An rtree might be interesting for overzooming if the node-mapnik API allowed for creating the `tile_datasource` once, then caching it, since in that case the query return time would be purely based on how fast the features are looked up since construction would be  done already. But I really doubt this is a meaningful bottleneck yet. closing therefore.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21078305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21155773", "body": "should be solved - all tests are passing now on 32 bit ubuntu raring (launched an instance on aws to debug).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21155773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21885098", "body": "done, ran: `npm publish && npm owner add yhahn`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21885098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21885223", "body": "thanks readme fixed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21885223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22132081", "body": "logging notes:\n- looks like upb is starting to get some love again (and actually compiles): https://github.com/haberman/upb/commit/61109fca1f967771c21dc7184aee35f3b439c577\n- faster version of protobuf encode/decode: https://github.com/bumptech/palm\n- re-implementation of protobuf messages for json-like data: https://github.com/dcodeIO/PSON \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22132081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22141869", "body": "@kkaefer - yes, exactly, thank you - I am in fact working from that gist which you shared last month. Currently writing a python implementation of a full decoder to get an exact sense of all the pieces involved. Will eventually look at porting back to C++\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22141869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22770757", "body": "Interesting. Sounds like a bug. Would it be possible to post a small testcase so I can take a closer look?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22770757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22774428", "body": "@durandt - sounds fine. Thank you.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22774428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23423683", "body": "Thanks. Not had a chance to look at the original testcase yet and am traveling until next week. So if you have something simpler and easier to run then please post it or email me. \n\nOn Aug 27, 2013, at 5:05 AM, durandt notifications@github.com wrote:\n\n> Hi Dane,\n> \n> Patrik sent you an email with a test-case last week, but I have been trying today to build a simpler test-case based on one shape-file with only one line that is divided in two tiles.\n> But as far as I can see from my test-case the line information appears in both generated tiles so I'll try to locate the problem (ie the \"line\" appears on the north tile but not on the south tile) and come back to you with a focused test case if I can find any problem.\n> \n> Regards,\n> \n> Thibault\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23423683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10575093", "body": "@mourner just for polygons right now: does that seem okay?. Also I just added tests to ensure that mapnik-vt will cull polygons with holes that have degenerate exterior rings: otherwise upon decoding you would end up with a polygon with an exterior ring == the interior ring: https://github.com/mapbox/mapnik-vector-tile/commit/9be43cfee02c648d241b38d96db603c8882e58d3\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10575093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10577848", "body": "right: is should not be culling valid triangles with a move_to, 2 line_to, and a close_path. I'll need to add a test to ensure this is not happening. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10577848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/11623936", "body": "testing code snuck in ^^ accidentally. Reverted in 0c1dd16\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/11623936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12217932", "body": "I think this is a great case for when `shrink_to_fit` might be a win. But it also might not and we should stick to clear wins for now. So I've removed in 1c42332. Tracking next steps at https://github.com/mapnik/mapnik/issues/2984\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12217932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12382530", "body": "Does a `testpack` target exist?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12382530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16960439", "body": "/cc @flippmoke - reason for this is that all exceptions should be `std::exception` and I've seen a case where catching `...` muffled a c++ stdlib issue that should have prevented the program from running. So I see no benefit to catching `...` and only potential (rarely) weird behavior getting muffled.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16960439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16960475", "body": "/cc @flippmoke - `shared_ptr` should be fast enough that we'd never be able to prove `unique_ptr` is faster in this case. However using `unique_ptr` prevents copies which caught that the shared pointers were being copied (and therefore unnecessarily reference counted) in the for loop.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16960475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16961260", "body": "Sorry, total brain fade: these obviously need to be shared_ptr to be convertible to `mapnik::datasource_ptr`. Ticketed getting tests that actually ensure this file compiles at https://github.com/mapbox/mapnik-vector-tile/issues/192. Reverted in 0c724f1\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16961260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17179242", "body": "@artemp - please make it right in mapnik and we can move back - refs #208\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17179242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31784455", "body": "^^ looks like that snuck in from the merge. If I'm reading the diff right there is another (correct) `build/Makefile` line down below.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31784455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31784775", "body": "minor: that `std::vector<mapnik::util::variant<std::string, float, double, int64_t, uint64_t, bool>>` is a little long. I recommend using a `typedef` -- or preferably now that we are using c++11 -- a `using` to create an alias that can be used throughout.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31784775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31836111", "body": "done ^^ in a3d596a\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31836111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/59263333", "body": "@jakepruitt - good eye, yes I did mean `upgrade && version != 1` and therefore this code currently will throw when you try to upgrade a `v2` tile, since that is pointless. But I agree that quietly ignoring this situation would likely be more convenient for calling applications. Otherwise they'd need to check the version themselves and toggle the option to avoid errors in mixed tile cases, which would be painful. So I will change to be quiet. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/59263333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60263022", "body": "@flippmoke:\n1. What is the reasoning for additional `else` in general? E.g. why set to empty vs what was it before?\n2. I think the `std::move` is useless here since `mapnik::geometry::geometry_empty()` is already a temporary and it can be just `geom = mapnik::geometry::geometry_empty();` /cc @artemp for confirmation.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60263022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60266067", "body": "@flippmoke curious: did you try regenerating the fixture with the latest code? I'm wondering if regenerating it would allow us to keep the smaller `50` threshold?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60266067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60293048", "body": "@flippmoke no, it's not. It is static and only generated if the file does not exist. So I re-created it just now to see if the diff would change. It did change and so I've checked in the new image: https://github.com/mapbox/mapnik-vector-tile/pull/204/commits/34d1b8e3311efbc432f89abc2a7d8de38c2dd6d6\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60293048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rouen-sk": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/230", "title": "Features not filtered by mapnik style", "body": "I am trying mapnik-vector-tile (1.2.0) with Mapnik 3.0.11. And there is one curious problem - in the resulting vector tile, there are ALL the features returned from datasource. I am not sure if I understand this correctly, but I thought they would be filtered the same way as in raster rendering - respecting `maximum-scale-denominator` from `Layer` and `MaxScaleDenominator` from `Style` from XML style loaded in map object. Now my tiles on zoom 9 are 20 MB in size, because they contain every housenumber and unimportant road in huge area... \r\n\r\nI am trying to figure it out from sources - I am looking at `create_geom_layer` in `vector_tile_processor.ipp` and it seems to me, that it is iterating all features from `layer` and encoding them - I dont see any filtering anywhere, but since I am not c++ programmer, I am not really sure :) Thanks for help!\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joto": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/229", "title": "Think about optimizing mercator projection", "body": "The mercator projection code in `src/vector_tile_projection.ipp` could be optimized. See https://github.com/osmcode/mercator-projection .\r\n\r\nI have added the optimized version to libosmium. But OSM data is special, because we know it only has ~1cm resolution. So I am very confident, the optimizations will not lead to any problems, because while they change the numeric value of the mercator coordinates, the difference is way below what is in the OSM data in the first place.\r\n\r\nFor vector tiles that might work with generic GIS data from any source, this is somewhat different. The source data could be much more detailed. Usual uses of vector tiles for rendering are not affected I would think, but who knows what people are using vector tiles for and in what resolutions? There could at least be a compile time option or so to switch mercator projection implementations. Any opinions?\r\n\r\n/cc @springmeyer @oxidase ", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ljbade": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/77", "title": "Way to drop certain columns", "body": "I was struggling with `gid` and `fid` columns bloating the size of my vector tiles.\n\n@springmeyer suggested editing [`start_tile_feature`](https://github.com/mapbox/mapnik-vector-tile/blob/master/src/vector_tile_backend_pbf.hpp#L107) to add support to drop certain columns during encoding.\n\nE.g.\n\n```\nvoid start_tile_feature(mapnik::feature_impl const& feature)\n```\n\nto\n\n```\nvoid start_tile_feature(mapnik::feature_impl const& feature, std::vector<std::string> const& fields_to_exclude)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/77/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "artemp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5ed2d7fb8d99b74c26d40c3953c6a9010a408a65", "message": "Merge branch 'master' into make-strict-an-option-master"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3e6125cca0ac6cb4a05ea9010337060f2343d78a", "message": "Merge remote-tracking branch 'origin' into make-strict-an-option-master"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6327e49cf77b94f91263adf44bc86f34d89adcce", "message": "Update for mapnik v3.1.x (master)\n(TODO: update tests)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12199431", "body": "@flippmoke - `shrink_to_fit` would reallocate vector, maybe better leave allocated size as it's ? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12199431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17174189", "body": "@springmeyer - why this duplication ? We'll be sleeping much better if `is_clockwise` is defined once, no?\nAlso, \n\n``` c++\nif (num_points < 3)\n +    {\n +        return false;\n +    }\n```\n\n^ this is a lie :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17174189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17178114", "body": "@flippmoke - why post increment ? (hint: it does creates en extra copy)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17178114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17178282", "body": "@flippmoke - does 'g` guaranteed to have at least 2 points? If not, should it be discarded ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17178282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "flippmoke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/18737d44612df263cd5a87447195ab5f814d4f8f", "message": "Fix spelling in error messages"}], "pull_requests": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/263", "title": "Limit Reserve Size ", "body": "Put limits on the allocation sizes of geometry", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/262", "title": "Limit Reserve Size v3.0.x", "body": "Patch to this for the v3.0.x development branch", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/209", "title": "Using SSE SIMD in Simplification", "body": "A speed improvement in the simplification code by using SSE code.\n## Master Bench\n\n```\n./build/Release/vtile-encode ./test/geometry-test-data/benchmark/ginormous-polygon.json 0 0 0 -i 100 -p 4326\nz:0 x:0 y:0 iterations:100\n5421.31ms (cpu 5407.38ms)   | encode tile: ./test/geometry-test-data/benchmark/ginormous-polygon.json\n```\n## Pull Request Bench\n\n```\n./build/Release/vtile-encode ./test/geometry-test-data/benchmark/ginormous-polygon.json 0 0 0 -i 100 -p 4326\nz:0 x:0 y:0 iterations:100\n3009.47ms (cpu 2998.82ms)   | encode tile: ./test/geometry-test-data/benchmark/ginormous-polygon.json\n```\n\n/cc @springmeyer @artemp @jakepruitt \n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12205184", "body": "I thought this simply dropped memory off the end of the vector, and free just unused information?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12205184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15005329", "body": "@jakepruitt some of this code could probably be lifted above the `SECTION` as it could be shared by the different sections.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15005329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15005346", "body": "Just for my sanity in these situations and I might be somewhat nit picky :-1: -- Since you are using `feature` below call this `featureset` or something because its almost confusing at glance because you don't pick up the s at the end right away. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15005346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15566091", "body": "make a std string and then use std::string::data() and std::string::size()\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15566091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569152", "body": "this would not even work with a valid buffer so its somewhat a bad test... the reason being that calling `get_string()` expects a previous length defined and would expect to be calling `next`, which I don't think it could ever do properly because it is missing a variant prior to this in the buffer. Layer reader above checks the layer for a name internally, so this is a little different.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569231", "body": "when you are calling bogus tile here, you are creating a tile object and the `parsefrombuffer` [here](https://github.com/mapbox/mapnik-vector-tile/blob/v2_spec/src/vector_tile_tile.hpp#L138) simply just returns false, we should likely throw if that returns false. The tile information is all just default data. It is important to check `hasVersion` for example in these situations. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15613353", "body": "look at https://github.com/mapbox/mapnik-vector-tile/blob/v2_spec/test/test_utils.cpp#L28-L57\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15613353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15624137", "body": "@springmeyer can you confirm if this fixes the async problems on your system?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15624137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41870685", "body": "@jakepruitt this is due to the reprojection that takes place on the map, you are assuming that your coordinates are in EPSG:4326 for the datasource then the maps extent is in EPSG:3857. Therefore, the extent of the datasource needs to be reprojected as well. Otherwise you are going to be zooming into a location with no data.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41870685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/50714306", "body": "Instead of \"\\n\" you can use `std::endl` which will work for windows as well, not a big deal just a FYI. @jakepruitt \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/50714306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60263812", "body": "I believe it actually is useless, in my mind I always wanted geom set in some manner in the code but then I remembered the default initialization for `mapnik::geometry:geometry<>` is `mapnik::geometry::geometry_empty`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60263812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60266182", "body": "Isn't it created from the lines above?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60266182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "talaj": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f41aac77549d26b9f529c04ef05d00ac9637650f", "message": "add inline attribute to functions implemented in header file"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GretaCB": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/60ceebc18b7884322333c086430a3669d6b90e1c", "message": "make sure geometry test data are actually installed"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkaefer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17934260", "body": "I thought about field ordering too while working on the format, but decided to not have this defined in the protobuf format itself since implementations must not guarantee field ordering anyway, as mentioned on the page you posted. If we want to agree on a particular field ordering, we'd have to further restrict valid protobuf files anyway.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17934260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17934327", "body": "Thanks; we used to have an implicit first moveto but decided to remove it in the last minute.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17934327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22138286", "body": "https://gist.github.com/kkaefer/4460a5ddf067b572033b is a header-only implementation that does rudimentary pbf parsing. It doesn't convert a .proto file to a parser, rather, you can use it to work directly on the data object, much like node's .readUint32BE() et al functions.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22138286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22165084", "body": "@kentonv Oh interesting, I always skipped over that part of the docs...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22165084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "hjanetzek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17943073", "body": "Ok right, the parser should be able to handle any encoding order. One could still have Features defined after keys/values to 'allow parsing code use optimizations'. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17943073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "yhahn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/19180826", "body": "@ivancamilov Do you have the libprotobuf dependencies installed?\n\nhttps://github.com/mapbox/mapnik-vector-tile#requires\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/19180826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ivancamilov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/19180900", "body": "Ah, of course. My bad, I hadn't installed protobuf properly. Thanks for your help! :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/19180900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tomhughes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20727199", "body": "To answer your question re agg the answer is that for the Fedora packaging bundled libraries are not (by Fedora packaging rules) allowed without special exception and the result of discussions between myself, the agg maintainer and the Fedora Packaging Committee was that we would apply the patches from mapnik to the existing system wide agg and then build against that.\n\nSo that is what we have done - I extracted the patches from mapnik into a separate agg repo (https://github.com/tomhughes/agg/commits/mapnik-2.5) and that patch series is now included in the Fedora agg build.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20727199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21104867", "body": "There are further 32 bit only failures in the latest release:\n\n```\ntest/vector_tile.cpp:153: 4096 == f.geometry(1) failed for: 4096 == 4094\ntest/vector_tile.cpp:163: fs->next() != mapnik::feature_ptr() failed for: 0 != 0\ntest/vector_tile.cpp:171: fs->next() != mapnik::feature_ptr() failed for: 0 != 0\ntest/vector_tile.cpp:174: fs->next() != mapnik::feature_ptr() failed for: 0 != 0\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21104867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21167084", "body": "Works find on 32 bit Fedora as well - thanks for the fix.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21167084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ccarse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21949736", "body": "Could something like this work? \n\n``` css\n#buildings {\n     polygon-opacity:0.5;\n}\n#data-virginia.buildings {\n     polygon-fill:red;\n}\n#data-DC.buildings {\n     polygon-fill:blue;\n}\n```\n\nTo me this is more logical. Just seems backwards specifying source inside layer. Of course I'm looking at this with very ignorant eyes so feel free to tell me why this is an idiotic suggestion :) \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21949736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kentonv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22146029", "body": "@kkaefer - FWIW, the protobuf library contains a class google::protobuf::io::CodedInputStream which provides a very similar interface but is highly optimized (as in, I literally put months of work into determining what to inline, what loops to unroll, etc., to get the best performance).  The whole io sub-package has no dependencies on the rest of the library so should be easy to use independently.\n\n@springmeyer - I'd love to see Cap'n Proto v8 bindings more than any other language (aside from C++).  I won't have time to work on it myself for a while, but would be happy to help anyone who wants to take this on.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22146029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "durandt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22773722", "body": "Hi,\nI also work on the same project as Patrik.\nHow would you like the test case to look like?\nOne shape file with the c++ code that divides it up for instance?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22773722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23330421", "body": "Hi Dane,\n\nPatrik sent you an email with a test-case last week, but I have been trying today to build a simpler test-case based on one shape-file with only one line that is divided in two tiles.\nBut as far as I can see from my test-case the line information appears in both generated tiles so I'll try to locate the problem (ie the \"line\" appears on the north tile but not on the south tile) and come back to you with a focused test case if I can find any problem. \n\nRegards,\n\nThibault\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23330421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mourner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10573999", "body": "Do we consider all triangles as degenerate geometries?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10573999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10576671", "body": "> just for polygons right now: does that seem okay?\n\nNot sure about this. Can we safely assume that there can be no real-world triangle polygons in the data? Probably not, so it may prune valid features. Triangles can also be used in third-party datasets, e.g. trizilla weather stuff.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10576671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "pnorman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12217742", "body": "It **may** cause a reallocation. I suspect in most case it will.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12217742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mapsam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15539012", "body": "Clarity! :+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15539012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jakepruitt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15566333", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15566333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569113", "body": "@flippmoke I was surprised this threw an error and didn't just return `false`. Also surprised that the `name` parameter to this function is compared to the name in the layer's buffer, and not the name provided in the `append_layer_buffer` function. Would it ever be possible to have these two names be different?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569179", "body": "In comparison, when we call `layer_reader` with the index argument, we get a `true` status, and no error is thrown. I don't know what the best result would be here, whether we validate the layer within the `layer_reader` function, or always return a layer reader and `true`, and let the user determine if the layer is valid.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569205", "body": "Also pretty surprised that no errors were thrown on the bogus tile that was parsed from the bogus layer data. Do we want to have any errors throw here?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15606613", "body": "These five lines are probably the worst way to create a dummy `mapnik::feature_impl`. @flippmoke - edits appreciated.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15606613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41115749", "body": "@artemp @flippmoke @springmeyer right now I'm stuck trying to figure out if I have created `new_geom` correctly. It seems that right now the `new_geom` geometry produced by the `apply_visitor` function is a non-initialized geometry that throws an error when passed to `compare`.\n\nThere are most likely plenty of issues with my code as it stands, but I would appreciate some guidance if any of you have the chance. Once I am able to see tiled vector geometries outputted by the above code, I can start seeing what the expected fixtures should look like.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41115749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41791461", "body": "TODO: Don't correct this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41791461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41827188", "body": "@flippmoke if you have a chance, I'm stuck trying to use the datasource's envelope in the geometry clipping. When I try to set the `bbox` to `ds->envelope()`, all of the returned geometries are `null`.\n\nMy goal is to make `clip_geometry` a stand-alone function, that given a bounding box (and eventually simplification parameters) it will produce the clipped geometry. That way, we can create tests that applies this function with a variety of bounding-box queries and simplification queries to produce all of the clipped geometries we're looking for. Does this sound like a good approach? cc/ @springmeyer \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41827188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41891351", "body": "@flippmoke :bow: Thank you, going to implement that change now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41891351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/59240027", "body": "@springmeyer did you mean `upgrade && version != 1`? If so, I think we should probably just quietly ignore the situation of `upgrade && version == 2`, but probably throw or warn when `upgrade && version == 3` or something along those lines comes up.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/59240027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}