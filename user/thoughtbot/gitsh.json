{"_default": {"1": {"benknoble": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/323", "title": "\"Which git\" prompt placeholder", "body": "My gitsh prompt contains the string `git` at the end of the prompt, both to remind me of my context and to let me know that everything is getting a git prefix.\r\n\r\n```\r\nproject (feature-branch @) git> \r\n```\r\nI get this with `%D (%c%b %#%w) git> `.\r\n\r\nI have `hub` installed, and use it frequently, but typically *only* to interact with github (again, this is for context purposes). However, occasionally I want to fire up gitsh with hub (`gitsh --git \"$(which hub)\"`). Most often I do this in a split tmux pane via a hotkey.\r\n\r\nI would like to be able to see the \"git binary\" being used in my prompt.\r\n\r\nWould it be possible for gitsh to support a prompt placeholder that resolves to the currently-used git binary?\r\n\r\nSomething like\r\n```\r\n%g        basename of current git binary\r\n%G        full name of current git binary\r\n```\r\n\r\nThen the prompt `%D (%c%b %#%w) %g> ` would become\r\n- `project (feature-branch @) git> ` when run normally\r\n- `project (feature-branch @) hub> ` when run with `hub`\r\n- &c.\r\n\r\nThis extends to `gh` and other git providers (??) as well.", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/324", "title": "Implement git_command placeholder in prompt", "body": "See #323 \r\n\r\nThis required a fairly minimal change to the pattern-matching substitution when generating the prompt string. I also updated the relevant section of the man page.\r\n\r\nThe tests fail without my code and pass with it, though it should be noted that this was my first experience with ruby and spec.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sharplet": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/321", "title": "Support tilde \"~\" expansion for external commands", "body": "I just tried the following command and was surprised when it didn't work:\r\n\r\n```\r\nmy-app my-branch! !mv activity.json ~/Desktop/                                                                                                                                                                                                                       \r\nmv: rename activity.json to ~/Desktop/: No such file or directory   \r\n```\r\n\r\nWould it be possible to support tilde expansion for external commands?", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gfontenot": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/320", "title": "Fresh install not loading correct Ruby", "body": "This is probably a macOS 10.12 issue, but I don't have Ruby 2.0 installed (at a global level) on my machine, so `gitsh` is failing to launch:\r\n\r\n```\r\n\u276f gitsh\r\n/usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/line_editor.rb:1:in `require': dlopen(/usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/line_editor_native.bundle, 9): Library not loaded: /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/libruby.2.0.0.dylib (LoadError)\r\n  Referenced from: /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/line_editor_native.bundle\r\n  Reason: image not found - /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/line_editor_native.bundle\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/line_editor.rb:1:in `<top (required)>'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/environment.rb:3:in `require'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/environment.rb:3:in `<top (required)>'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/cli.rb:2:in `require'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/cli.rb:2:in `<top (required)>'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/gitsh.rb:6:in `require'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/gitsh.rb:6:in `<main>'\r\n\u276f ls /System/Library/Frameworks/Ruby.framework/Versions\r\n2.3     Current\r\n```", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/231", "title": "Support custom commands in the prompt", "body": "I got really used to having an indicator that I had changes that hadn't been pushed to the tracking branch. I did that by checking the result of `git cherry -v origin/$(current_branch_name) 2>/dev/null`, although I'm sure there's a better/more flexible way to do it. I really miss having that indicator (I'm an idiot and will 100% forget to push changes), and it'd be great to have it inside gitsh.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "georgebrock": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/319", "title": "Different tab completion rules for different Git versions", "body": "The current tab completion file is based on the manual pages from Git 2.13.1. Newer versions of Git could introduce options and arguments that we won't be able to complete. Conversely, we will offer completions to users of older versions of Git that they can't actually use.", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/318", "title": "Tab complete commit messages", "body": "Git allows a revision to be specified by giving a substring of the commit message's first line prefixed with `:/`, e.g. `:/refactor` or `:/\"refactor tab\"` would match messages like `refactor tab completion`.\r\n\r\nWe could provide tab completion for this!", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/317", "title": "Better fallback rules for tab completions", "body": "If a particular command doesn't have any specific tab completion rules associated with it, it would be nice to provide some basic default tab completion behaviour to fall back on.\r\n\r\nA couple of approaches I've considered are:\r\n\r\n1. Fall back to default behaviour when the tab completion system returns no results.\r\n2. Add a `$unspecified` matcher to the DSL that would match any command or alias that didn't have a more specific rule. That could be used in a rule like `$unspecified $opt* ($revision|$path|$remote)* -- $path*`", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/316", "title": "Improve completions file error handling", "body": "When a completions file is invalid, it's not very clear what went wrong or how to fix it. To make matters worse, completions aren't loaded until the first time the user tries to tab complete something.\r\n\r\nThis will become even more important with user-specific completions files (#315).\r\n\r\nSome things we could consider here:\r\n\r\n- Better error messages.\r\n- Loading completion file(s) on startup instead of first use.\r\n- Should a missing global completions file cause an error?\r\n- Is it possible to introduce an infinite loop, e.g. by using `$opt` as an option argument?", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/315", "title": "Support a user-specific completions file", "body": "As well as the global completions file in `$prefix/etc`, we should support a user-specific completions file in the user's home directory. This would allow users to define completions for their custom Git commands and aliases.", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/314", "title": "Add more matchers to the tab completion DSL", "body": "Various rules in the completions file use the a less specific matcher to represent a specific value. In many cases we use the `$anything` matcher, e.g.\r\n\r\n```\r\nlog $opt*\r\n  --tags $anything?\r\n```\r\n\r\nThese could be replaced with more specific matchers, e.g.\r\n\r\n```\r\nlog $opt*\r\n  --tags $tag?\r\n```\r\n\r\nThe following things could be useful:\r\n\r\n- [ ] `$stash` for the names of Git stashes, e.g. `stash show $stash`\r\n- [ ] `$tag` for the names of Git tags, e.g. `log --tags $tag`\r\n- [ ] `$dir_path` for paths that should always be a directory not a file, e.g. `:cd $dir_path`\r\n- [ ] `$branch` for revisions that should always be a branch name, e.g. `branch --delete $branch`\r\n- [ ] `$var_name` for the names of gitsh variables, e.g. `:set $var_name $anything`\r\n- [ ] `$config_var_name` for the names of Git config variables, e.g. `config $config_var_name`\r\n- [ ] `$author` for names or emails of contributors to the repo, e.g. `log --author $author`\r\n- [ ] `$modified_path` for paths that have uncommitted changes, e.g. `add $modified_path`\r\n- [ ] `$ctag` for program symbols defined in a ctags(1) file, e.g. `log -S $ctag`", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/303", "title": "Resizing terminal window while in a pager confuses the next pager", "body": "1. Open gitsh in a small terminal emulator window\r\n2. Run a command that starts a pager\r\n3. Increase the window size\r\n4. Close the pager\r\n5. Run a command that starts a pager\r\n6. The new pager will be initialised at the original smaller window size\r\n\r\nThis is similar to the issue discussed in https://github.com/thoughtbot/gitsh/issues/144#issuecomment-69459773 and fixed in #221.\r\n\r\nWe might be able to fix this by updating environment variables on SIGWINCH. The less(1) manual page says this about the `COLUMNS` environment variable:\r\n\r\n> Sets the number of columns on the screen.  Takes precedence over the number of columns specified by the TERM variable.  (But if you have a windowing system which supports `TIOCGWINSZ` or `WIOCGETD`, the window system's idea of the screen size takes precedence over the `LINES` and `COLUMNS` environment variables.)", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/297", "title": "Multi-line commands add multiple history entries", "body": "When a command is split over several lines, it ends up adding several entries to the command history. It would be better, and more similar to general-purpose shells, if the whole command was added to the history.", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/295", "title": "Better messages on parse errors", "body": "Any error encountered by the lexer or parser will result in the somewhat unhelpful message `gitsh: parse error`.\r\n\r\nWe should try to tell the user:\r\n\r\n- what went wrong.\r\n- where the error occurred (especially for scripts).", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/294", "title": "Set rl_readline_name to gitsh", "body": "GNU Readline supports conditional configuration in a user's `.inputrc` that targets a specific program. To support this, programs that use Readline set `rl_readline_name`.\r\n\r\nBecause gitsh's `LineEditor` module is based on Ruby's `Readline` module, we inherited an `rl_readline_name` value of `\"Ruby\"`. We should change that to `\"gitsh\"`, add test coverage for gitsh-specific `.inputrc` directives, and document the whole thing in gitsh(1) the manual page.\r\n\r\nReadline docs: http://web.mit.edu/gnu/doc/html/rlman_1.html#SEC10", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/247", "title": "Release process doesn't commit updated INSTALL", "body": "The `INSTALL` file is generated from `INSTALL.in`, but is also committed to the repo so that people can read instructions on GitHub without having to download the distribution.\n\nI forgot to do it manually for version 0.10 (see #241 and #245), but since the `make release` build target already commits some updated files, we should just do it automatically.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/205", "title": "Releases should be signed with PGP", "body": "thoughtbot has a PGP key, available at http://pgp.thoughtbot.com\n\nThis key should be used to sign releases, so users can verify what they are downloading.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/41", "title": "The process name should be `gitsh`, not `ruby`", "body": "", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/35", "title": "Add a :function command for defining functions", "body": "For example:\r\n\r\n```\r\n:function pair name nick {\r\n  :set user.name \"George Brocklehurst and $name\"\r\n  :set user.email \"support+george+$nick@thoughtbot.com\"\r\n  :set gitsh.prompt \"$nick+$gitsh.prompt\"\r\n}\r\n\r\n# usage:\r\n# gitsh@ @pair \"Mike Burns\" mburns\r\n# mburns+gitsh@\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/35/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3e836be4db452f7eb54754c9c647ece3dff94368", "message": "Configure completions for common commands.\n\nThis tab completion configuration file includes:\n\n- All Git commands without arguments.\n- Popular Git commands, with their options and arguments.\n- Internal gitsh commands, with their options and arguments.\n\nThere are some argument types that we can't currently complete, and others\nthat are unlikely to ever be practical to complete. To represent those this\ncommit also introduces a `$anything` variable to the tab completion DSL. The\nvariable's corresponding `AnythingMatcher` class will match any input, but\nproduce no completions.\n\nThe options and arguments supported in the file are based on the manual\npages from Git 2.13.3. Other versions of Git support slightly different\noptions and arguments, which means we might complete things that don't work."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/373c68f5c4faf7776a520e223799a6f13ecc0079", "message": "Completion DSL: Support multiple option arguments.\n\nFor example, git-config(1) has a few options that take two arguments:\n\n    config $opt*\n      --get-color $anything $anything?\n      --get-colorbool $anything (true|false)?"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3130f35fe54e38b8039c3a1638ff2c6af9dfdd7e", "message": "Completion DSL: Allow leading/trailing blank lines.\n\nThis commit adds support for leading and trailing blank lines to the tab\ncompletion DSL."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/17f40c4c1fc7b38623613a57a88d830f4e2a34a9", "message": "Add option support to the tab completion DSL.\n\nThis commit expands the tab completion DSL with the ability to define\noptions like `-f` or `--force`.\n\nRules can contain an `$opt` variable, which indicates where options may\nappear. This will match on anything beginning with `-` or `--`, and\ncomplete to any known options.\n\nThe known options are listed as indented lines after the first line of the\nrule, with any arguments the options take specified in the same way as\nthe command's arguments would be.\n\nFor example:\n\n```\ncommit $opt* --? $path+\n  --all\n  --fixup $revision\n  --file $path\n  --untracked-files (no|normal|all)?\n```"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/34b0f60bcfe405f57d02c6b07767841fc3e4f85b", "message": "Add * and ? operators to git_completions(5)\n\nThis commit adds support for the * operator (zero or more times), and the ?\noperator (zero or one times) to the gitsh tab completion DSL."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ad9bd9bddeda3d2da9e3486d5fae35a32a50fcd1", "message": "Filter out duplicate completions.\n\nOur ability to detect incomplete paths is based on there being a single\nresult (e.g. if you complete \"s\" to \"src/\" we don't want to append a space\nas we normally would when there's a single completion).\n\nNow that the completion system uses an NFA, it's possible to get duplicate\nvalues (e.g. a command like `add $path* --? $path+` would invoke the `$path`\nmatcher twice in some situations).\n\nThis commit makes sure we filter out the duplicates so that the incomplete\npath detection continues to work.\n\n(While we're modifying the only line in this method, also move it to get\ndependency order between #matches and #completions)"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/69ae4f2df3e5747997d30d701da384b9de9cd78f", "message": "DSL to define tab completion automaton state graph\n\nThis commit introduces a domain specific language (DSL) to define the state\ngraph for the tab completion automaton. It also replaces the hard-coded\nstate graph with an equivalent graph loaded from a configuration file.\n\nThe details of the DSL are given in the gitsh_completions(5) manual page\nwhich is added in this commit.\n\nThe DSL will need to be expanded somewhat to do everything we want the tab\ncompletion system to be able to do, but this is a good step in that\ndirection."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8cf52c053d277b7411dcfef84eabf8ceeb4cb033", "message": "Update hound config.\n\nThis commit makes the Rubocop config used by Hound more consistent with the\nexisting project style."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d67e983b3ce66e858e40141df77d8bf8511bfb72", "message": "Tab completion NFA state graph visualization tool.\n\nThe tab completion system that was introduced in 1b673e5 uses a\nNon-deterministic Finite Automaton (NFA) to understand the user's input and\nselect relevant completions. The NFA has a directed graph of states.\n\nWhile the current NFA's state graph is small, the intention is to replace it\nwith a much larger and more complex graph.\n\nThis commit introduces a visualization tool, which outputs a representation\nof the NFA's state graph in Graphviz's dot language."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/33014f700390362fee824656cbba77384c5da74e", "message": "Support tab completion for variables.\n\nThis commit introduces a `Gitsh::TabCompletion::VariableCompleter` object.\nThis is completely separate from the NFA-based completion we use for most\nthings, because:\n\n- we immediately know we need to use variable completion based on lexical\n  analysis of the input without having to walk through the NFA's states,\n  and\n\n- the context in which the variable appears doesn't inform the completions\n  we present the user with.\n\nThe `Gitsh::TabCompletion::Facade` object gains the responsibility of\ndeciding which type of completion to invoke, based on information from the\n`Gitsh::TabCompletion::Context` object.\n\nTo load the config variables, we try to use the `git status --list\n--name-only` command. However, this command was only introduced in Git 2.6,\nand versions back to 2.4 are still officially supported by the Git team. If\nrunning the command with `--name-only` fails we fall back to parsing the\noutput of `git status --list`.\n\nWe don't use the backward compatible version everywhere, because the parsing\nwon't be perfect for multi-line config values (`--name-only` was introduced\nto address this problem)."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5cb52d762ac046b64abfe513395885f3d5d9c12c", "message": "Improve variable lexing.\n\nPrior to this commit, an incomplete variable reference (a line ending with\nan unescaped `$` character, or unclosed `${`) would produce a lexing error.\nAfter this commit it produces a parse error instead.\n\nWe want to start using the lexer for understanding tab completion context,\nwhich means we need to lex incomplete input. Having all legal-but-incomplete\ninput cause parse errors instead of lexing errors will make this much\neasier.\n\nNote that it's still possible to produce lexing errors with invalid input,\nbut it's more reasonable for the tab completion system to just ignore that\nand not provide any completions.\n\nPreviously the token `MISSING` was used to indicate that a line was\nincomplete, but could potentially be made valid with another line of input.\nThis commit renames that token to `INCOMPLETE`, and re-purposes `MISSING` to\nmean that something was missing from the end of the line that cannot be\nsupplied by an additional line of input."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c8f2f28718a8840c941df38e4fab236fa3d054c1", "message": "Add CODE_OF_CONDUCT.md\n\nGitHub has a new feature that indicates if a project has a code of conduct.\nWe already had one, linked from `CONTRIBUTING.md`. This commit just\nduplicates that link in a place where GitHub can find it."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8a7b301a8b3e049cb4712db23725938a7adc5e10", "message": "Arch package for version 0.12"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e4c9820ed8b7f2c2f12d150b8ccba62424bbe1ca", "message": "Bump version: 0.12"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/22362e9192049e7cf245e44f196337144a120824", "message": "Support for multi-line commands.\n\nLine breaks are supported in similar places to sh(1). Line breaks can be\nescaped anywhere by ending a line with a `\\` character. Unescaped line\nbreaks are also supported:\n\n- after logical operators (`&&` and `||`),\n- within strings,\n- between commands wrapped in parentheses, and\n- between commands in subshells.\n\nThe Lexer has been expanded to insert a `MISSING` token in all situations\nwhere the input is known to be incomplete (i.e. when the input ends with an\nescape character, or the input ends in any of the places where an unescaped\nline break can be used).\n\nAfter invoking the `Lexer`, the `Interpreter` checks the token stream for\n`MISSING` tokens. If it finds any it requests another line of input from the\ncurrent input strategy, appends it to the current input, and tries again.\n\nA new `EOL` token has been introduced to represent line breaks between\ncommands. In the `Parser` it's treated exactly like the `SEMICOLON` token.\n\nLexical analysis of comments needed to be improved to allow for comments at\nthe end of lines in a multi-line command. For example, the following input\nis valid:\n\n    (:echo 1 # comment\n    :echo 2)\n\nIt is semantically equivalent to:\n\n    (:echo 1; :echo 2)\n\nTo support this, the Lexer will now:\n\n- ignore whitespace before a comment's initial `#` character. This prevents\n  extraneous `SPACE` tokens from being produced. A trailing `SPACE` token\n  in a single line command is fine, but it can cause problems in a\n  multi-line command.\n\n- pop the `:comment` state without consuming the newline character at the\n  end of a comment, allowing the default parsing rules to handle the\n  newline, and produce an `EOL` token."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/603231f9170f7320a3df75e65b9f828dcac3a0b0", "message": "Change to the root path with :cd\n\n`:cd` without an argument will change to the repository's root path\n(`$_root`), much like a general purpose shell's `cd` without an argument\nwill change to the user's home directory (`$HOME`)."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5c2392123db317ed524e3144057ba8935bd28596", "message": "Introduce a $_root magic variable.\n\n$_root evaluates to the root directory of the current Git repository."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/24a2287089f288bd07c193cfe9c8ce796fe4c7da", "message": "Non-zero exit status for bad scripts.\n\nWhen gitsh is invoked in a non-interactive manner, a parse error should\nresult in a non-zero exit status.\n\nTo make sure this happens, parse error handling has been delegated to the\ninput strategies by the interpreter. In an interactive session, we output an\nerror message and continue the session. In a non-interactive session, we\nraise a Gitsh::ParseError, which will bubble up to the gitsh binary and\nterminate the session with an exit status of 1.\n\nSince the input strategy for files is used in a few internal places (in the\ninteractive input strategy, for loading .gitshrc, and in the :source\ncommand), those call sites have been modified to handle the possibility of a\nGitsh::ParseError."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/34f6a0d9676ba009e1c03b66cc7887d206ad4dcb", "message": "Remove duplicate fake_git_path definition."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c23ff00a0d3e83c84fec5b230e98ec49811df8ff", "message": "Remove unused InputStrategies::String class.\n\nThis has been unused since 570c6f9, and should have been removed then."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/570c6f9cb1794d99625b5dbd8633155e399546ff", "message": "Subshells wrap commands, not strings.\n\nInstead of storing the command contained by a subshell as a string and\nparsing it separately at execution time, we now parse subshells in the same\nparsing pass that handles the command that contains them, and store a\nGitsh::Commands::* object.\n\nThis has a few advantages:\n\n- A parse error in a subshell is discovered at parse time, not execution\n  time.\n- A subshell containing closing parens that do no end the subshell (e.g.\n  `:echo $(:echo \")))\")` no longer confuses the lexer.\n- We can drop the Gitsh::StringRunner class."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/fd5294dd8ef1f0d811dd2943c40280cfa9297fc9", "message": "Pass environment to commands at execution time.\n\nThis means we don't have to know what environment a command will be executed\nin when we construct it.\n\nThe motivation was simplifying subshell parsing: we'll be able to parse a\ncommand fully, including the contents of any subshells, in a single pass.\nPreviously we couldn't do this because the subshell's environment can't be\ncreated until the command containing the subshell is executed. Look out for\nthis change in a subsequent commit.\n\nA nice side effect of the change was simplifying the Gitsh::Parser: it no\nlonger needs a reference to a Gitsh::Environment."}], "pull_requests": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/299", "title": "Support pipelines.", "body": "Two commands combined with the pipe character (`|`) will be run in parallel with the standard output of the first command connected to the standard input of the second command via an `IO.pipe`.", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053135", "body": "The interactivity problem is fixed. `#wait_for_output` is still a bit hacky, but after discussing it in person @mike-burns and I can't see a better way that doesn't introduce way too much complexity.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053589", "body": "Thanks, merged.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28571528", "body": "Reviewed in person by @mike-burns \u2026 merging!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28571528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28711710", "body": "Done in #10 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28711710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28883587", "body": "Thanks Mike, merged.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28883587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28901908", "body": "I've been experimenting with using autoconf and automake to build an installer. No useful code yet, but the following things might come in handy:\n- Check if the required Ruby version is installed: http://www.gnu.org/software/autoconf-archive/ax_prog_ruby_version.html (maybe using `AC_PATH_PROGS` instead of `AC_PATH_PROG` so we can support suffixed a Ruby executable like `ruby20`)\n- Rather than installing the files from `lib/` to a custom location and modifying `$LOAD_PATH` in `bin/gitsh` file, we could install them to the path returned by `$RUBY -e 'puts RbConfig::CONFIG[\"sitedir\"]'`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28901908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29018002", "body": "This is looking pretty good, over on the [gb-autotools branch](https://github.com/thoughtbot/gitsh/tree/gb-autotools). There are still a few issues to resolve:\n- [x] After running `./configure` or subsequently running `make`, `bin/gitsh` exists but is not executable.\n- [x] The mechanism for installing the files from `lib` is a little hacky; it overrides the `$datadir` (usually something like `/usr/local/share`) and then pretends the ruby library files are data files. It seems to work fine, but might cause problems if we had some real data files in the same project.\n- [x] After running `sudo make install` the man page isn't visible to `whatis`, `apropos`, etc. (this was just a question of time, on OS X the `whatis` database is rebuilt weekly, `sudo periodic weekly` refreshes it)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29018002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29081517", "body": "Done. PR is #13 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29081517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29086421", "body": "Thanks @pbrisbin. Is having an `install` line for the license common in arch packages? It seems like the kind of thing that `make install` should do (maybe after a `./configure --somethingdir=something`)\n\nI'd also like to try and find a system-level Ruby (rather than an rvm or rbenv Ruby) in this build script, and set `$RUBY` to its path. I'm not entirely sure how on arch, I guess I should spin up a VM and experiment, but any advice would be appreciated.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29086421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29130747", "body": "Awesome, thanks Pat. I'll add `LICENSE` and `README.md` to `EXTRA_DIST` (in the distribution but not installed) and let the Arch package put them where it wants to.\n\nOn the Ruby issues, I was thinking that adding something like this to the PKGBUILD might be effective:\n\n```\ntest -z $RUBY && RUBY=`env -i $SHELL -c \"which ruby\"`\n```\n\nThat _should_ search a default system `$PATH` for `ruby`, hopefully including places like `/bin`, `/usr/bin`, and `/usr/local/bin` but ignoring any rvm/chruby embellishments. Unfortunately it doesn't work (I can't figure out why, details in [the question I asked about it on Stack Exchange](http://unix.stackexchange.com/questions/102325))\n\nAssuming I can figure out how to make something like that work, do you think it's too much hand holding for an Arch PKGBUILD to be doing?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29130747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131056", "body": "So, this works, because \u2026 erm \u2026 reasons:\n\n```\ntest -z $RUBY && RUBY=`env -i $SHELL -c 'PATH=\\$PATH which ruby'`\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131781", "body": "Adding the LICENSE is done and pushed to master. I'll need to push a new tarball and update the SHAs too.\n\nProposed solution for the ruby version problem in #22, which wouldn't require any Arch-specific changes.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29142411", "body": "Done in 5c1e1e3\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29142411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29142420", "body": "Replaced by PR #21 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29142420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29145085", "body": "SIGINT should be handed in the same way a shell handles it: cancel the current command, but keep on running.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29145085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29186440", "body": "Would something similar to environment variables solve this? They would be session-level overrides for `git config` parameters.\n\n```\nexport user.name = \"George Brocklehurst & Mike Burns\"\nexport user.email = pair+george+mike@thoughtbot.com\ncommit -m foo\ncommit -m bar\n```\n\nWould execute:\n\n```\ngit -c user.name=\u2026 user.email=\u2026 commit -m foo\ngit -c user.name=\u2026 user.email=\u2026 commit -m bar\n```\n\n(We could also support `$var` for reading from config variables, which would make variables in scripts quite simple)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29186440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204853", "body": "I think I was thinking of Python. I'm convinced, I'll change it to use stdout.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204942", "body": "That's exactly the kind of issue I'm trying to avoid.\n\nDoes the approach to finding system Ruby seem sufficiently portable?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29205955", "body": "I have access to the full environment, including `$SHELL` and `$PATH`. I was trying to avoid the custom user path, assuming (perhaps naively) that the system's default path would include the places a system ruby would be installed, especially if it was installed by a package manager.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29205955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640346", "body": "I'd prefer `current HEAD` to `branch name` here.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640368", "body": "Maybe better as: `The current HEAD is a branch name, tag name, abbreviated SHA, or the text`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640377", "body": "I think this would be more clear as `the current directory is not a git repository`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640390", "body": "Looks good Mike. A few minor comments, but otherwise good to merge.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4671351", "body": "This change directly contradicts the advice given here: http://www.gnu.org/software/autoconf/manual/autoconf.html#Installation-Directory-Variables\n\nApparently, in order to support a custom prefix given to either `configure` or `make`, we should not use `AC_SUBST` with paths that include the prefix, but instead we should do some complicated `sed` dance to manually replace them in our `Makefile`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4671351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4671504", "body": "Fixed in d02ea1b9388dd7eead5d49878ad4d04a7bb17a7f\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4671504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/6959684", "body": "I wrote a small test script, and this won't work in directories with spaces. Good catch, thanks.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/6959684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446594", "body": "Other classes in this codebase don't have explanatory comments. Do you think it's more necessary in this case, or can we do without it?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446618", "body": "Having class-level state can easily introduce problems, for example if we set up 5 responses in `StubbedMethodResult` and then our test only consumed 3 of them, we'd be left with something for the next spec.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446667", "body": "This might be more clear if we renamed it to `wait_results`, since it's used by the stubbed `#wait` method?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446674", "body": "As above, maybe `readline_results` would be more clear?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446688", "body": "http://robots.thoughtbot.com/meditations-on-a-class-method might be relevant.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7387266", "body": "This is the wrong way of doing this in interactive mode: It prevents git from using a pager, an editor, etc. Doing it in such a way that git can be interactive might break the test infrastructure and render this whole PR pointless.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7387266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7387269", "body": "This method feels like a bit of a hack. I'd appreciate alternatives.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7387269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7891434", "body": "Note to self: `exit EX_USAGE`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7891434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192945", "body": "We should allow for that, right now it causes a parse error. Good catch.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193011", "body": "I considered using `inspect`, but I was concerned it would be unclear and decided this way was more explicit and less fragile (if the keys were ever not symbols, for example). I'll change it if you feel strongly, but I prefer it as is.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193051", "body": "Good call. If parslet allows the order to be reversed, I'll do it.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8202718", "body": "Done in 56408ee\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8202718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8202729", "body": "Fixed in b4e72d7\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8202729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8269450", "body": "You're right about the `cd`, @pbrisbin.\n\nThe `echo` is to convert from a list with one item on each line, to a list on a single line separated by spaces. If you know of a cleaner way of expressing that I'd love to make it a bit less magical.\n\nI'll clean up the style points before I merge, thanks.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8269450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8271099", "body": "It does matter: the values are dropped verbatim into the Makefile, so an unescaped newline will cause problems.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8271099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8966195", "body": "I think I'd prefer something akin to `Hash#fetch`; it will still allow us to remove the `nil` check, but it won't require shelling out to `git config` twice\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8966195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8986912", "body": "Done in 3dab396\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8986912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8986913", "body": "Agreed. Done in e2dfc21\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8986913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "scottluptowski": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/244", "title": "Aliasing internal gitsh commands", "body": "There doesn't seem to be a way to alias `:exit` within gitsh.\nNeither of these lines work when added to my gitconfig:\n\n```\ne = \":exit\"\ne = !\":exit\"\n```\n\nI would like to be able to type `e` to `:exit` gitsh. Is this by design or is there a way to alias the command?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dleve123": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/240", "title": "Error message scoped to `git`", "body": "A \"picture\" speaks a thousand words:\n\n``` bash\n$ gitsh\nextract-class master@ add\nNothing specified, nothing added.\nMaybe you wanted to say 'git add .'?\n```\n\nTo those that are unfamiliar with `git` and `gitsh`, this error message might be somewhat confusing as `git add .` leads to an error message.\n\nIf the maintainers are interesting in fixing this issue, I'm more than happy to help out.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pbrisbin": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/170", "title": "Automate posting PKGBUILD to AUR on release", "body": "Right now, a new PKGBUILD is generated via `make release` but it has to be manually bundled into a \"taurball\" and posted to the AUR.\n\nIn my apps, I automate this task via [aur-submit](https://github.com/pbrisbin/aur-submit). Example [here](https://github.com/pbrisbin/aurget/blob/master/Makefile#L27-28). This requires a tool called [mkaurball](https://github.com/falconindy/pkgbuild-introspection) though which is only available in Arch. It may be possible to port it to other OSs though (it's just a shell script IIRC).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29087354", "body": "It might be an [Arch-specific-requirement](https://wiki.archlinux.org/index.php/Pkgbuild#license) where the LICENSE should go. I'm not sure if `$PREFIX/share/licenses/$pkgname/LICENSE` is standard across everything, that means `make install` can't dictate or assume where to put it.\n\nI'll dig through some existing PKGBUILDs and see if they do as I've done or use some `./configure` option to specify the location.\n\nI assumed `./configure` would find and use the system ruby if present and of the needed version; the `depends` line in the PKGBUILD ensures it will be -- is there anything else required?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29087354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29090216", "body": "Ah, OK so the ruby thing requires some explanation....\n\nTo use this PKGBUILD as-is, the user _building_ the package would have to ensure that the system ruby was active when building. If this were an official package being built by an Arch maintainer and distributed pre-built to end-users, I would have no problem with this. These sorts of things are well-know duties to maintainers who build generic packages for distribution.\n\nHowever, since this is an unofficial package (at this point anyway) being placed on the [AUR](https://aur.archlinux.org), it will be both built and installed by the same end-user. It's likely that they would not know to activate the system ruby before building and may end up embedding an rvm/chruby-enabled ruby into gitsh.\n\nAt this point, I'd like to claim that user is in the same position as someone building from source (since they are) and should be required to know themselves that this may happen and to avoid it (both `RUBY='...' makepkg` and `chruby-exec system -- makepkg` should work fine).\n\nThere are existing ruby packages in the the AUR which suffer from this (ruby-bundler, for example) and the \"problem\" will only occur for someone using a ruby version-manager, which increases the chance that they can deal with this scenario themselves (as I do for ruby-bundler, which is a dependency of the heroku-toolbelt). I think a comment in the AUR package page could be sufficient.\n\nIt's part of the Arch philosophy to not put extraneous code or checks into things to protect users from themselves. So I'm hesitant to bloat the PKGBUILD. On the other hand, this may not be _too_ hairy to code around and it would probably avoid trouble for some users, so I'm not sure...\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29090216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29115590", "body": "To answer the first question, yes, separately `install`ing the LICENSE file is done quite frequently in Arch PKGBUILDs. I'd guess that installing a license is not commonly done via `make install` -- though, that doesn't answer if it _should_ be.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29115590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8268460", "body": "The former will output paths relative to `$(dirname $0)/vendor`. The latter will include it. I assume that matters.\n\nI'm curious why you need to (re-)echo the output for find.\n\nStyle nits (if anyone cares): don't mix backtick and `$( )` (and prefer `$( )`), quote all expansions (`\"$(dirname \"$0\")\"`)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8268460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8269899", "body": "> The echo is to convert from a list with one item on each line, to a list on a single line separated by spaces. If you know of a cleaner way of expressing that I'd love to make it a bit less magical.\n\nI don't, though I'd be curious to see if the consumer of `$vendorfiles` even cared that they're newline-separated or space-separated. Normally tools like these all use `$IFS` which is space, newline, or tab.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8269899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8273182", "body": "Ah gotcha, and you most likely can't use `echo gems/*` because the files are nested and `gems/**/*` is not portable.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8273182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "leifg": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/145", "title": "Wildcards don't seem to work correctly", "body": "In gitsh (version 0.5, without any special git binary) I get the following error:\n\n```\ndiff Gemfile*\n```\n\nresults in\n\n```\nfatal: ambiguous argument 'Gemfile*': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]'\n```\n\nHowever `git diff Gemfile*` on the shell works correctly\n\nAny ideas?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Haegin": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/100", "title": "Shell shortcuts like !$, !^ and !! don't work currently", "body": "Shell shortcuts such as !!, !$ and !^ are really quite useful on the shell and don't work in gitsh. Particularly useful is `diff path/to/file` followed by `add !$`. It'd be great if gitsh supported these shortcuts as well.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mike-burns": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/67", "title": "Edit command in $VISUAL", "body": "I'd like to use ($VISUAL || $EDITOR || vi || ed) to edit a command.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/67/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053221", "body": "I cannot think of a better way to do that. Ideas:\n- `select`\n- watching the FS - requires flushing\n\nLooks good to merge to get things started.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28707576", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28707576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28709242", "body": "Done. Muh freedom.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28709242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28801249", "body": "Yup, looks good to merge.\n\nWe'll have to find a better looking way to handle the empty command and comments (`#`), between interactive and non-interactive mode, ... later.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28801249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131173", "body": "Also fun: something to make pairing easier.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29203883", "body": "Which programs output to stderr? All I could find was Java.\n\nI also found this: http://bugs.python.org/issue18338\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29203883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204598", "body": "I was bit by the `heroku` toolbelt this weekend. I broke my rvm ruby, system Ruby was fine, but:\n\n```\n~% head -1 =heroku\n#!/usr/bin/env ruby1.9.1\n```\n\nSo I'm in favor of only using system Ruby.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29205516", "body": "Portable: yup, as in it won't crash anywhere that I can think of.\n\nHowever, from FreeBSD:\n\n```\nzsh% env -i sh -c 'echo $PATH'\n/usr/bin:/bin\nzsh% echo $PATH\n/~home/mike/.bin:/home/mike/.local/bin:/home/mike/.bin:/home/mike/.local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/home/mike/bin:/home/mike/local/bin:/home/mike/.local/bin:/home/mike/local/bin:/home/mike/.local/bin\nzsh% which ruby\n/usr/local/bin/ruby\n```\n\nDo you have access to `$(PATH)`, or at least `$(SHELL)`, from within `configure.ac`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29205516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/6911130", "body": "I honestly don't know this answer: does `$PWD` need double quotes around it to prevent shenanigans with spaces in filenames? Does this work if built from the `/home/george/awesome stuff/gitsh` directory (with a space)?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/6911130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192462", "body": "```\nmap(&:inspect)\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192552", "body": "Can commands start with a space, too?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192565", "body": "Is it possible to write this file in the other direction: the `root` at the top, and the insignificant things (`space`, `identifier`) at the bottom?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193024", "body": "I want to start a campaign to get your nickname internationally recognized as Sysexits.\n\nGeorge \"Sysexits\" Brocklehurst.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8261933", "body": "That subshell just took me down a fascinating and pedantic history lesson. Apparently there is no fully-compatible way of using `head` to get the first line from stdin!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8261933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8262007", "body": "Is this different from:\n\n```\nfind `dirname $0`/vendor/gems -type f -print\n```\n\n?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8262007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964565", "body": "Emphasize the `temporarily` - make it very clear that these are not persisted beyond this session.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964692", "body": "There's some common code here. Perhaps a matcher would provide a good abstraction?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964798", "body": "If you use `#has_key?` it more closely matches the semantics of a variable being set or unset. Plus it can remove the `nil` check.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965059", "body": "For documentation purposes, would be useful to move 8-15 into a private method with a descriptive name. `chdir_and_allow_nesting` or `potentially_nested_chdir` or the like.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965102", "body": "Lines 7-10 are irrelevant.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965127", "body": "This could potentially raise (maybe?) if the directory disappears, even between checking whether it exists and calling the method.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965210", "body": "`File.expand_path` exists, but it doesn't solve the issue of showing results that start with `~`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965216", "body": "`File.expand_path`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "teoljungberg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c8f8de8346f3d7c609dedd0490832534bca7f531", "message": "Quell ruby warnings for unused variables\n\nThis commit quells warnings along the likes of:\n\n```\nwarning: assigned but unused variable - X\n```\n\nWhere X is the variable in question."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/176ea67a09d09ea42610543a997b44fe8f15b970", "message": "Enable hound\n\nConfigure Rubocop to enforce single quotes, if there is no need for\ninterpolation and therefore double quotes."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5e72305054696a296018bf88ed1e714d33b5605f", "message": "Do not duplicate character ranges\n\nTo quell the following warning:\n\n```\ncharacter class has duplicated range: /X/\n```\n\nWhere `/X/` is the regex.\n\n`\\s+` matches the output `[\\n\\r\\s]+` does."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/b6e9f21c0bdfcfbd5a92230dd6741bd2b0797fdd", "message": "Initialize instance variables\n\nTo quell the following warning:\n\n```\ninstance variable @X not initialized\n```\n\nWhere `@X` is the instance variable."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/7e959568dc8c839153306a9bcbd7889d0862f413", "message": "Remove unused variables\n\nTo quell the following warning:\n\n```\nassigned but unused variable - X\n```\n\nWhere `X` is the unused variable."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d2975f6d5812c796471f46f794d0d06674afd289", "message": "Add parenthesis around regexps\n\nTo quell the following warning:\n\n```\nambiguous first argument; put parentheses or a space even after `/'\noperator\n```"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446636", "body": "Since this is a helper method I would prefer being clear, and explain how it works for the reader. Thoughts? But maybe that's overkill as you said\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "xduugu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/1ed14c7696b43448dcc520b85872b7b5da857713", "message": "Expand historyFile path\n\nExpand the configured history file path, so it is possible to use a \"~\"\nfor the user's home directory instead of an absolute path.\n\nBefore, a path like \"~/.local/share/gitsh_history\" led to the following\nerror:\n\ngitsh: Error: No such file or directory @ rb_sysopen - ~/.local/share/gitsh_history\n\n(Test added by George Brocklehurst)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}}}}