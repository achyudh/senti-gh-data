{"_default": {"1": {"mptre": {"issues": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/269", "title": "Sanbox support for more operating systems", "body": "It would be interesting to investigate adding support for sandboxing on\r\noperating systems other than OpenBSD where [pledge] is available.\r\nThere's seccomp on Linux and Capsicum on FreeBSD. I wouldn't worry about\r\nthe portability at this stage, just the code required to get it working\r\nwould be a great start.\r\n\r\n[pledge]: http://man.openbsd.org/pledge", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/calleerlandsson/pick/commits/807addf75b5bec8b27e146b05813c8a70e4f6309", "message": "Update release notes"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/8794aa989fab07e499ab684de8e2f2b9ec9050b3", "message": "Update version to 2.0.1"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/cee420d15cc94251121245e6918173d1225502d9", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/4223dfb1403b15e9298a800c2e7022d7084d3404", "message": "Update release notes"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/099f808ab2b9e60b520424534ec5d981474a57c5", "message": "Remove a cast since tparm takes a non-const char pointer"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7d60299c42880ed15461d327b90573e277c4f01c", "message": "travis: execute script in a subshell enabling errexit and xtrace\n\nEnabling errexit on Travis could interfere with their scripts, therefore\nuse a subshell. The xtrace option makes debugging easier."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/fe86c66614ceadb36972842545bd76a32f0dfd88", "message": "Simplify logic used to determine when choices must be re-displayed\n\nEnabling dofilter implies dochoices by now. Therefore, there's no longer\nnecessary to fiddle with dochoices for each key binding that doesn't\nresult in filtering of the choices."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/494ce2987cce653b221e6eae24cc2571d7b867c4", "message": "Ensure correctness while typing a query fast\n\nTyping a query fast enough to trigger the poll check in filter_choices()\ncould yield a wrong set of choices. Since filter_choices() is\ninterrupted, all choices have yet not been examined and potential\nmatches could still be left unexamined. Calling print_choices() in this\nstate causes the unexamined choices to never be reconsidered as\npotential matches since they will have a score = 0. The solution is to\nnever call print_choices() if filter_choices() was interrupted.\n\nProblem reported and partial solution provided by Jenz Guenther in\nGitHub issue #268."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f553d4a7415139f0f56722659584bca59d07f94a", "message": "Bump pick-test timeout\n\nNeeded when compiling with the `-coverage' option since it writes\ncoverage data upon exit. Ideally, the timeout should only be increased\nwhen running under these circumstances. However, the tests finish much\nearlier if all is well."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3c1e29ff2c7b31e2e04994d1d02fcd81da7fd2ba", "message": "travis: enable codecov.io\n\nNecessary to use the check rather distcheck task since coverage files\nwill be present causing distcheck to fail."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e9edbc6623b0c55d5534667ba91666145fea851c", "message": "travis: switch on BUILD_TYPE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9e52dd980ba4f64132c67535f70d485468eae57c", "message": "Add missing tests for right key\n\nDiscovered using lcov:\n\n$ env CFLAGS='-g -O0 -fprofile-arcs -ftest-coverage' CC=gcc ./configure\n$ lcov --base-directory . --directory . --zerocounters -q\n$ make check\n$ lcov --base-directory . --directory . -c -o pick.info\n$ mkdir html\n$ genhtml -o html pick.info\n$ xdg-open html/index.html"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/2a34f97cf9a10f2db22d5cd7e27d7dda0160f114", "message": "Do not use the escape sequence for literal escape"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/388c8812657db7c989a6a00b3683a205489ba33f", "message": "Allow multiple tests per file to actually run\n\nDo not clear the input file after each test run, obvious mistake since\nit only allows one tests per file to be executed. My bad, regression\nintroduced in commit 54b1e43 (\"Add toggle sorting key binding\")."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f6401823b7918be03190a07ac4c6fb0170bba6c2", "message": "Update version to 2.0.0"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/83ed055b8a6d77e7edc45509ff5e4cdcf8268560", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1e8fb53f5dbbe1f29c3d68df2b5ae9bb8a0a0285", "message": "Only redraw the choices when necessary\n\nSome key bindings only affect the query and unconditionally redrawing\nthe choices is therefore a wast of time in such scenarios.\n\nOriginally proposed by Jenz Guenther in PR #254."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d36423b2ba7b0a3437b3721e41b700cb0481194c", "message": "Add toggle sorting key binding"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f833b3a11cbae418807796f2c1102520bcd3d2ed", "message": "Fix exit code for h option\n\nSurprised to find out that the h option has been broken from the start."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/54b1e4357ad22f4109be4135d27b49503e4dca3e", "message": "Do not run each test in a separate process\n\nFixes a severe bug where the exit code was incorrect for failing tests."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c80bf1b823a80970e7d5fe6d72f61dc43567676c", "message": "Add missing tests"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b4f21f664a718b3472f2d0d72f5a8574c1037e29", "message": "Fix test failure cause bug"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/6186e3bcbb7ed8104637225eaa7c951dad0d8593", "message": "Rename tests to match implementation"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/8b0db62880754f1071bc08a1df289e8d8b23f661", "message": "Cleanup tests"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5f74382b9784ab403919bec9d23d3a5059b1454e", "message": "As of OpenBSD 6.2 pick is now available as a package\n\nUnfortunately, 1.9.0 did not make the cut."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d9f827fb853301b82509f9da64ad48a431aebfc3", "message": "Consolidate tests"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f9e02561ba933609e39db64b759c1721fe3c2d97", "message": "Allow multiple tests to be specified in a single file"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/54895b7adc443a4278791c88df7379f049716ac6", "message": "Error out on mandoc style violations"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/494e330051d42d8ae7274febe4ced5cc3bbbacd2", "message": "Rename DEVELOPING.md -> CONTRIBUTING.md\n\nIn order to match the conventions defined by GitHub."}], "pull_requests": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/273", "title": "Sandbox abstraction proposal", "body": "Related to GitHub issue #269 and #271.", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/272", "title": "Remove Werror compiler flag", "body": "It's generally considered bad practice to ship software with this flag.\r\nIssue revealed while updating the port on [OpenBSD].\r\n\r\n[OpenBSD]: https://marc.info/?l=openbsd-ports&m=151482370923381&w=2", "author_association": "COLLABORATOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kylebebak": {"issues": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/145", "title": "Create a pick Recipes page, maybe as part of the Wiki", "body": "`pick` is really awesome, in less than a month it's become a great friend to me. It makes working with git branches and commits a lot easier, but maybe I wouldn't have thought to use it like that if I hadn't seen the gif in the README.\n\nMy point is that pick is a versatile tool whose possibilities aren't necessarily obvious at first. I think having a Wiki-style section for Recipes could bring in creative, cool use cases, and give new users more ideas of how to use pick.\n\nI wrote [a post](http://kylebebak.github.io/post/git-utility-functions-pick) about how I use it with git, I basically wrote some [helper functions](https://github.com/kylebebak/dotfiles/blob/master/dotfiles/.helpers/pick.sh) that wrap pick to make operations with branches and commits very fast.\n\nThis is the kind of stuff I think could go into Recipes, snippets of code using pick and gifs showing them in action. If this seems like a good idea I would love to contribute.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ggilder": {"issues": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/22", "title": "Stream input", "body": "pick must read its input entirely before the filtering interface becomes responsive. For an example, in a directory with a large number of entries (say > 150,000), compare `find . -type f | pick`, which will take at least seconds to become responsive, and `find . -type f | less`, which is immediately responsive. [fzf](https://github.com/junegunn/fzf) is one example of a fuzzy finder that handles this well by searching over entries received so far and streaming in new entries as they match.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/22/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DBOTW": {"issues": [], "commits": [{"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9c68b29e7ffeae63540ea8eba135072e61523b95", "message": "Fix brew runtime error on travis"}], "pull_requests": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/274", "title": "Add seccomp support for sandbox", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mike-burns": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53391174", "body": "Great change, and the extracted `memmove()` is a good idea.\n\nWishlist: `^k`. Actual emacs users don't use `^u` or `^w` but hammer on `^k` all day.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53391174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53542824", "body": "<kbd><kbd>Ctrl</kbd>-<kbd>k</kbd></kbd> will delete until the end of line. In actual emacs, to delete a whole line you'd type <kbd><kbd>Ctrl</kbd>-<kbd>a</kbd> <kbd>Ctrl</kbd>-<kbd>u</kbd></kbd>.\n\n(In emacs, <kbd><kbd>Ctrl</kbd>-<kbd>u</kbd></kbd> will add a number in front of a command, so e.g. <kbd><kbd>Ctrl</kbd>-<kbd>u</kbd> <kbd>4</kbd> <kbd>Ctrl</kbd>-<kbd>;</kbd></kbd> will comment out four lines.)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53542824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64391512", "body": "That's what I recommend. I especially recommend using the system library when possible; libbsd does its best to stay up-to-date but your OS gets security patches more often.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64391512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64391567", "body": "This is the other piece of glue, BTW: https://github.com/bitptr/argonaut/blob/master/configure.ac#L6\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64391567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953280", "body": "That's not a thing. Did you mean `-v` ?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953310", "body": "These aren't needed for Homebrew-ing. Were I doing it all over again, I wouldn't have a `release` target.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953320", "body": "Might be worth noting: I just switched rcm from a Makefile-driven release to a sh-driven release, and it's given me more flexibility: https://github.com/thoughtbot/rcm/blob/master/maint/release.in\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9982524", "body": "You're right, \"flexible\" is the wrong word. It's more that m4sh has a harder syntax than normal sh; it's all of sh's syntax combined with all of m4's syntax combined with all of make's syntax. Because of this, I extracted it.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9982524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540525", "body": "This commit LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540538", "body": "Rest in peace, alignment. This commit seems fine, despite the fact that it now diverges from my coding style.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540547", "body": "Good change. This commit LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11541919", "body": "All the examples in style(9) show tabs + an optional space in function prototypes to get things aligned. The guide itself is unclear about the specifics.\n\nWould it be jarring to have a file with the tabs and a file without the tabs in the same project (but separate files)?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11541919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542144", "body": "You could drop the braces here.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542177", "body": "Ah, you added braces everywhere. OK!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542192", "body": "Nice.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542217", "body": "I like it.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542268", "body": "Ouch; is this for an 80 char limit? I feel like violating that guideline here would make it easier to read.\n\n(Perhaps this is changed in a later commit anyway...)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542333", "body": "Does this handle multiplication overflow issues/should you use reallocarray(3) instead?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542449", "body": "[We talked IRL; the tabs go back.]\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542472", "body": "Can this use calloc(3) to avoid multiplication overflow concerns?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542510", "body": "style(9) says:\n\n> Use a space after keywords (if, while, for, return, switch). No braces are used for control statements with zero or only a single statement unless that statement is more than a single line, in which case they are permitted.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542519", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542570", "body": "This is beautiful poetry.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542667", "body": "Overall: I'm into it. Though I don't mind `str`, `desc`, and `len` -- those seem clear and common enough to me. But I also don't mind `string`, `description`, and `length`.\n\nSo anyway: LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542698", "body": "Great.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543161", "body": "Beautiful.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543930", "body": "Yes.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543951", "body": "I'm not sold on this abstraction. Why is `raw_tty_putc` a separate function?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543965", "body": "Lovely.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543983", "body": "Great abstraction.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16701735", "body": "This code is repeated. Maybe extract a `void reset()` function?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16701735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21465128", "body": "Maybe `make && echo \"hello\\ngoodbye\" | src/pick` ? Otherwise people will need to know more about unix which isn't bad but is unrelated to this one line.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21465128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21465747", "body": "Why this whitespace?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21465747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "calleerlandsson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53536437", "body": "Thanks for the feedback! I will work on this more tomorrow night or on Friday. @mike-burns What does <kbd><kbd>Ctrl</kbd>-<kbd>K</kbd></kbd> do?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53536437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53873729", "body": "Comments are addressed and <kbd><kbd>Ctrl</kbd>-<kbd>K</kbd></kbd> is implemented. Ready for another pass.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53873729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53901943", "body": "Thanks @georgebrock. Merging.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53901943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/63076303", "body": "Me and Jack discussed this IRL and agreed on it being ready to be merged in.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/63076303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64237026", "body": "This is awesome @Keithbsmiley! Thanks a lot for figuring this out. Merge at your discretion.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64237026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64267196", "body": "Thanks for reporting this, @Keithbsmiley.\n\n`bsd/string.h` is included for the `strlcpy` function for safely copying strings.\n\nMaybe we could check for the existence of `strlcpy` and include a bundled version if it's not available, like @mike-burns does [in Argonaut](https://github.com/bitptr/argonaut/blob/7377e106c2a855a82f7571a276a38a63dde18724/src/compat.c)?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64267196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64269650", "body": "Running in raw mode will make `ncurses` pass through all characters, including those used for quit, interrupt, suspend and flow control.\n\nMaybe we could use `signal(3)` to trap `SIGINT` to avoid passing through all of them and just handling the interrupt signal?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64269650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64270437", "body": "I had one small comment, other than that, this looks good to merge. Thanks for adding this, @Keithbsmiley!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64270437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64327255", "body": "Thanks, @Keithbsmiley.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64327255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64535365", "body": "I can reproduce this locally. This bug did not manifest itself before we added the call to `refresh` in dcc7a8bb52be649cc55a37c9e2b7dee3ab63d2f0. \n\nReading `curs_initscr(3X)` it seems like the call to `refresh` after the call to `endwin` might bring us back into curses mode:\n\n```\nA program should always call endwin before exiting or escaping from curses mode tem\u2010\nporarily.   This routine restores tty modes, moves the cursor to the lower left-hand\ncorner of the screen and resets the terminal into the proper non-visual mode.  Call\ning refresh or doupdate after a temporary escape causes the program to resume visual\nmode.\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64535365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64537120", "body": "Looks great @Keithbsmiley, I had some style comments and one question.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64537120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64763198", "body": "@Keithbsmiley I had one question, other than that, this looks great to merge! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64763198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64808638", "body": "This looks good!\n\nThe build is currently failing on my system because I don't have the `strlcpy`function in my `string.h`. Therefore, the `strlcpy.c` needs to be conditionally included. One example of how this is done is how `compat/queue.h` gets included in `src/choices.c`.\n\nI have left some comments on how I think it could be fixed. I totally understand if you don't have time to work on this @Keithbsmiley and I can finish this tomorrow.\n\nHere is my make output:\n\n```\n~/Projects/pick $ make\n(CDPATH=\"${ZSH_VERSION+.}:\" && cd . && /bin/sh /home/calleerlandsson/Projects/pick/missing autoheader)\nrm -f stamp-h1\ntouch config.h.in\ncd . && /bin/sh ./config.status config.h\nconfig.status: creating config.h\nconfig.status: config.h is unchanged\nmake  all-recursive\nmake[1]: Entering directory '/home/calleerlandsson/Projects/pick'\nMaking all in src\nmake[2]: Entering directory '/home/calleerlandsson/Projects/pick/src'\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT choice.o -MD -MP -MF .deps/choice.Tpo -c -o choice.o choice.c\nmv -f .deps/choice.Tpo .deps/choice.Po\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT choices.o -MD -MP -MF .deps/choices.Tpo -c -o choices.o choices.c\nmv -f .deps/choices.Tpo .deps/choices.Po\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT io.o -MD -MP -MF .deps/io.Tpo -c -o io.o io.c\nmv -f .deps/io.Tpo .deps/io.Po\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT main.o -MD -MP -MF .deps/main.Tpo -c -o main.o main.c\nmv -f .deps/main.Tpo .deps/main.Po\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT ui.o -MD -MP -MF .deps/ui.Tpo -c -o ui.o ui.c\nui.c: In function \u2018put_choices\u2019:\nui.c:102:3: error: implicit declaration of function \u2018strlcpy\u2019 [-Werror=implicit-function-declaration]\n   strlcpy(line, c->str, llen);\n   ^\nui.c:103:3: error: implicit declaration of function \u2018strlcat\u2019 [-Werror=implicit-function-declaration]\n   strlcat(line, \" \", llen);\n   ^\ncc1: all warnings being treated as errors\nMakefile:336: recipe for target 'ui.o' failed\nmake[2]: *** [ui.o] Error 1\nmake[2]: Leaving directory '/home/calleerlandsson/Projects/pick/src'\nMakefile:342: recipe for target 'all-recursive' failed\nmake[1]: *** [all-recursive] Error 1\nmake[1]: Leaving directory '/home/calleerlandsson/Projects/pick'\nMakefile:282: recipe for target 'all' failed\nmake: *** [all] Error 2\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64808638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64809240", "body": "Yeah, that seem like a good approach. The question is what we should switch on.\n\nI think this has to do with the state of the terminal when `pick` gets executed. By having a quick look at `ncurses(3X)`, I think logging the return values of these functions when `pick` starts and ends might tell us more:\n\n```\nis_cleared              curs_opaque(3X)*\nis_idcok                curs_opaque(3X)*\nis_idlok                curs_opaque(3X)*\nis_immedok              curs_opaque(3X)*\nis_keypad               curs_opaque(3X)*\nis_leaveok              curs_opaque(3X)*\nis_linetouched          curs_touch(3X)\nis_nodelay              curs_opaque(3X)*\nis_notimeout            curs_opaque(3X)*\nis_scrollok             curs_opaque(3X)*\nis_syncok               curs_opaque(3X)*\nis_term_resized         resizeterm(3X)*\nis_wintouched           curs_touch(3X)\nisendwin                curs_initscr(3X)\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64809240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64905565", "body": "@Keithbsmiley I have pushed the changes I suggested. It also turned out that we needed `strlcat` from `bsd/string.h` so I grabbed the OpenBSD implementation of that aswell.\n\n@Keithbsmiley @mike-burns can you try to build this locally and see if I screwed something up?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64905565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65028115", "body": "@Keithbsmiley The errors you are seeing puzzles me. I added `subdir-objects` to `Makefile.am`, yet that is what gets reported as missing.\n\nCould you paste the full output of `./autogen.sh && ./configure && make`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65028115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9982217", "body": "@mike-burns Sounds interesting. In what way is it more flexible?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9982217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11541823", "body": "style(9) says:\n\n> Prototypes may have an extra space after a tab to enable function names to line up\n\nI interpreted \"may\" as \"optional\". Is the space optional but the tab not? Should it be _a_ tab specifically? I do think following the style guide is important.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11541823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896347", "body": "Extracted as `filter_choices` in 2d8d063.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896358", "body": "`word_pos` is much better. Changed in 2061c44.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896373", "body": "Great point. Done in 62a52a2.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896700", "body": "I'm glad you asked. `KEY_ENTER` is defined in `ncurses.h` and is really <kbd><kbd>Ctrl</kbd>-<kbd>Enter</kbd></kbd>. Very confusing.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16907939", "body": "Good point. Added in ebd3453.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16907939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16908160", "body": "Good question. I don't actually know. I tend to use pre-decrement operator because I find that it makes more sense for the expression to evaluate to the decremented value, not the original. I only use the post-decrement operator when I really mean it. In this case it does not matter since we just throw the value away. I guess it is just a habit. @mike-burns Do you know what's the normal thing to do here?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16908160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20362726", "body": "Thanks for finding that. Confirmed the leak with valgrind(1) and fixed it in b964aa5.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20362726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20363086", "body": "Since we're using `int`s as booleans in other places I think I prefer to stick to this style for consistency.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20363086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20824686", "body": "Would specifying these in the same order as \"Left/Right or Ctrl-B/Ctrl-F\" make sense?\n\nI'm thinking something like:\n\n```\n.It Ic \"Up\\&/Down or Ctrl\\&-P\\&/Ctrl\\&-N\"\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20824686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20923949", "body": "Should we error in this scenario or should we `exit`? I feel like interrupting pick is a part of normal execution and therefor I think `exit` might be better.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20923949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20924041", "body": "Could `130` be extracted into `EX_SIGINT`?\n\n```\n#define EX_SIG 128\n#define EX_SIGINT (EX_SIG + SIGINT)\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20924041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20924115", "body": "Should we use snake case for this function name to comply with the existing convention?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20924115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20984835", "body": "Should this be `EX_SIGINT` instead of `EX_SIGNINT`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20984835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23089436", "body": "If neither `strlcpy` nor libbsd is present on the system, will this error out? #10 bundles implementations of `strlcpy` and `strlcat` which are used if `AC_CHECK_FUNCS` doesn't find the functions. Would that do as a replacement for `AC_SEARCH_LIBS`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23089436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23092727", "body": "Would using an `if` statement to check the return value and `err` to error if `freopen` returns `NULL` improve consistency with other parts of the code base?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23092727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003375", "body": "Should this file move into the `compat` directory?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003408", "body": "Should this include `compat/strlcpy.c` and `compat/strlcpy.h`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003421", "body": "Should there be a header file declaring `strlcpy`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "georgebrock": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53875080", "body": "My C's a little rusty, but this looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53875080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16716713", "body": "Is there a more expressive name for this variable? e.g. `word_pos`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16716713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16716754", "body": "Does it make sense to `#define` away these magic numbers, so that they are consistent with `KEY_LEFT` etc.?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16716754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896638", "body": "What makes this `REAL`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896811", "body": "Style question: is it more normal to pre-decrement? I find the post-decrement operator (i.e. `cursor_pos--`) easier to read, but possibly only because I'm more used to seeing it.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16897012", "body": "Should there be a comment here? I found myself searching the file for `KEY_ENTER` and getting confused.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16897012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "keith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64164751", "body": "+1 Can reproduce locally in iTerm on OS X\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64164751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64239150", "body": "This still appears to be an issue with these steps:\n1. Open vim\n2. Open your pick search\n3. Hit CTRL-C to exit pick without choosing a file\n4. Quit vim\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64239150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64259416", "body": "Assuming we choose to go this way we may want to add this to the man page as well.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64259416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64298218", "body": ":+1: got this signal method to work locally. I'll clean it up tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64298218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64516368", "body": "@calleerlandsson updated with signals.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64516368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64688536", "body": "@calleerlandsson updated!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64688536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64690804", "body": "Since calling refresh when running in Vim seems to be what we want should we be trying to do that conditionally?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64690804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64915130", "body": "@calleerlandsson I get this error when running `./autogen.sh`\n\n```\nconfigure.ac:5: installing './compile'\nconfigure.ac:3: installing './install-sh'\nconfigure.ac:3: installing './missing'\nsrc/Makefile.am:4: warning: source file 'compat/strlcpy.c' is in a subdirectory,\nsrc/Makefile.am:4: but option 'subdir-objects' is disabled\nautomake: warning: possible forward-incompatibility.\nautomake: At least a source file is in a subdirectory, but the 'subdir-objects'\nautomake: automake option hasn't been enabled.  For now, the corresponding output\nautomake: object file(s) will be placed in the top-level directory.  However,\nautomake: this behaviour will change in future Automake versions: they will\nautomake: unconditionally cause object files to be placed in the same subdirectory\nautomake: of the corresponding sources.\nautomake: You are advised to start using 'subdir-objects' option throughout your\nautomake: project, to avoid future incompatibilities.\nsrc/Makefile.am:4: warning: source file 'compat/strlcat.c' is in a subdirectory,\nsrc/Makefile.am:4: but option 'subdir-objects' is disabled\nsrc/Makefile.am: installing './depcomp'\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64915130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64915281", "body": "After this, configure runs fine but `make` fails with some related errors:\n\n```\n./compat/strlcpy.h:13:10: error: expected parameter declarator\nsize_t   strlcpy(char *, const char *, size_t);\n...\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64915281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "teoljungberg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953353", "body": "I did, thanks for pointing it out\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953380", "body": "Sounds great~ I atleast understand `sh` better than `make`\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "calebthompson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16719218", "body": "Seems like a good idea.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16719218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jnutting": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20361102", "body": "I think it should be 'parse_desc == 1' or 'parse_desc != 0' inside the parens, just for clarity's sake.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20361102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20361572", "body": "It looks like line is never freed.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20361572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "ecerulm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23131971", "body": "Yes it will error out,  I guess the message should be \"unable to find strlcpy(). Make sure libbsd is installed\"  \n\nGuess if #10 gets merged you can remove the whole `AC_SEARCH_LIBS`  since you are not dependent on `libbsd`  after #10. \n\nThis was more  to solve the current issue of warning the user that there was no `strlcpy` at `./configure`  instead of at compile time. It depends on when are you going to merge #10, you can always remove this `AC_SEARCH_LIBS` after merging #10. \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23131971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}